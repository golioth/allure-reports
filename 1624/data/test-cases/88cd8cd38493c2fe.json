{"uid":"88cd8cd38493c2fe","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1728576396540,"stop":1728576409639,"duration":13099},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb0323a10>\ndevice = <golioth.golioth.Device object at 0xffffb035cc10>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb035cc10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728576323165,"stop":1728576323165,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728576323165,"stop":1728576323166,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728576323166,"stop":1728576323166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728576323167,"stop":1728576323167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728576323168,"stop":1728576323169,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728576323168,"stop":1728576323168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728576323169,"stop":1728576323169,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728576323170,"stop":1728576323170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728576323170,"stop":1728576323170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728576323171,"stop":1728576323171,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728576323171,"stop":1728576323171,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728576323172,"stop":1728576323571,"duration":399},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728576323172,"stop":1728576323172,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728576323571,"stop":1728576375153,"duration":51582},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728576375154,"stop":1728576376029,"duration":875},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1728576376029,"stop":1728576390469,"duration":14440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb0323a10>\ndevice = <golioth.golioth.Device object at 0xffffb035cc10>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb035cc10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"9e693902951abf1","name":"stdout","source":"9e693902951abf1.txt","type":"text/plain","size":4228}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1728576557614,"stop":1728576557614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728576557619,"stop":1728576558093,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728576558096,"stop":1728576558097,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728576558099,"stop":1728576558101,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"86fcfc6eeaba"},{"name":"thread","value":"255-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":36,"broken":3,"skipped":0,"passed":88,"unknown":0,"total":127},"items":[{"uid":"145059d1aae0721a","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/145059d1aae0721a","status":"passed","time":{"start":1728567685035,"stop":1728567698548,"duration":13513}},{"uid":"1f7aa0c49e0f6f8","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/1f7aa0c49e0f6f8","status":"passed","time":{"start":1728536624891,"stop":1728536638025,"duration":13134}},{"uid":"661a5d14bfe70317","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/661a5d14bfe70317","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728520553883,"stop":1728520566917,"duration":13034}},{"uid":"7795802d38b45b01","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/7795802d38b45b01","status":"passed","time":{"start":1728319970585,"stop":1728319983645,"duration":13060}},{"uid":"4f43c4cea564218b","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/4f43c4cea564218b","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1728491711196,"stop":1728491711196,"duration":0}},{"uid":"f08aa94b3a04cc58","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/f08aa94b3a04cc58","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728483495160,"stop":1728483509138,"duration":13978}},{"uid":"974fe1a96f485c41","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/974fe1a96f485c41","status":"passed","time":{"start":1728434220522,"stop":1728434234301,"duration":13779}},{"uid":"391f21ff695b20fb","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/391f21ff695b20fb","status":"passed","time":{"start":1728424844084,"stop":1728424857658,"duration":13574}},{"uid":"a2ceae0ba6b361ab","reportUrl":"https://golioth.github.io/allure-reports/1606//#testresult/a2ceae0ba6b361ab","status":"passed","time":{"start":1728330436777,"stop":1728330450149,"duration":13372}},{"uid":"c27e84eaf8cca01a","reportUrl":"https://golioth.github.io/allure-reports/1604//#testresult/c27e84eaf8cca01a","status":"passed","time":{"start":1728327431648,"stop":1728327445058,"duration":13410}},{"uid":"5d37f8bc6f87d9ba","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/5d37f8bc6f87d9ba","status":"passed","time":{"start":1728339017274,"stop":1728339030360,"duration":13086}},{"uid":"6a569b56a9fff2af","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/6a569b56a9fff2af","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728399337637,"stop":1728399350916,"duration":13279}},{"uid":"e267c77a98f1b55a","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/e267c77a98f1b55a","status":"passed","time":{"start":1728339017274,"stop":1728339030360,"duration":13086}},{"uid":"4bb948c8652540e1","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/4bb948c8652540e1","status":"passed","time":{"start":1728347929413,"stop":1728347943608,"duration":14195}},{"uid":"72cc85d29383f357","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/72cc85d29383f357","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728339820715,"stop":1728339833704,"duration":12989}},{"uid":"fa77722a4689a0e5","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/fa77722a4689a0e5","status":"passed","time":{"start":1728339017274,"stop":1728339030360,"duration":13086}},{"uid":"eb68834fd2101bea","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/eb68834fd2101bea","status":"passed","time":{"start":1728335896013,"stop":1728335909800,"duration":13787}},{"uid":"3639399d244dfecf","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/3639399d244dfecf","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728328238753,"stop":1728328251895,"duration":13142}},{"uid":"acf405cf3bf15078","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/acf405cf3bf15078","status":"passed","time":{"start":1728319970585,"stop":1728319983645,"duration":13060}},{"uid":"4200f1dd32e76798","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/4200f1dd32e76798","status":"passed","time":{"start":1728319970585,"stop":1728319983645,"duration":13060}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"88cd8cd38493c2fe.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}