{"uid":"41d809a0671a7ea1","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1727794752113,"stop":1727794768520,"duration":16407},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8adeb090>\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727794640650,"stop":1727794640651,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727794640652,"stop":1727794640652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727794640652,"stop":1727794640652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727794640653,"stop":1727794640653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727794640654,"stop":1727794640654,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727794640654,"stop":1727794640655,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727794640655,"stop":1727794640655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727794640656,"stop":1727794640656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727794640656,"stop":1727794640656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727794640657,"stop":1727794640657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727794640657,"stop":1727794640657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727794640657,"stop":1727794640657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727794640658,"stop":1727794641058,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727794641059,"stop":1727794692528,"duration":51469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727794692529,"stop":1727794694795,"duration":2266},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727794694796,"stop":1727794732963,"duration":38167},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8adeb090>\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"f89518571d3abfad","name":"stdout","source":"f89518571d3abfad.txt","type":"text/plain","size":4527}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727794935218,"stop":1727794935218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727794935223,"stop":1727794935619,"duration":396},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727794935621,"stop":1727794935622,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727794935625,"stop":1727794935627,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"20535f1687c9"},{"name":"thread","value":"259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":28,"unknown":0,"total":46},"items":[{"uid":"977ae7c783bf153b","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/977ae7c783bf153b","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727786232159,"stop":1727786245168,"duration":13009}},{"uid":"612b7ff5a187b68f","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/612b7ff5a187b68f","status":"passed","time":{"start":1727782458521,"stop":1727782471992,"duration":13471}},{"uid":"e5df334b86c745a2","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/e5df334b86c745a2","status":"passed","time":{"start":1727780737844,"stop":1727780750757,"duration":12913}},{"uid":"1e9761a49a6cb0fd","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/1e9761a49a6cb0fd","status":"passed","time":{"start":1727778945822,"stop":1727778958688,"duration":12866}},{"uid":"8ea59d7217701b8b","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/8ea59d7217701b8b","status":"passed","time":{"start":1727775460768,"stop":1727775473945,"duration":13177}},{"uid":"86118c7a9f80ab6","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/86118c7a9f80ab6","status":"passed","time":{"start":1727768205036,"stop":1727768219223,"duration":14187}},{"uid":"5beed9d1e59f1360","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/5beed9d1e59f1360","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727767624097,"stop":1727767637239,"duration":13142}},{"uid":"ba7ffa4271c78bf2","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/ba7ffa4271c78bf2","status":"passed","time":{"start":1727762423410,"stop":1727762436757,"duration":13347}},{"uid":"86f046d1c0911d55","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/86f046d1c0911d55","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727743107221,"stop":1727743120134,"duration":12913}},{"uid":"9f07dcde923605d8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/9f07dcde923605d8","status":"passed","time":{"start":1727730759859,"stop":1727730775183,"duration":15324}},{"uid":"61a312aecbcbf89e","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/61a312aecbcbf89e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727656688780,"stop":1727656701939,"duration":13159}},{"uid":"650ed01943a7045e","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/650ed01943a7045e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727570288401,"stop":1727570301274,"duration":12873}},{"uid":"fb30b7d28e9a4675","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/fb30b7d28e9a4675","status":"passed","time":{"start":1727544024501,"stop":1727544037873,"duration":13372}},{"uid":"165757c309a52b00","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/165757c309a52b00","status":"passed","time":{"start":1727542426599,"stop":1727542439867,"duration":13268}},{"uid":"46e3180fac779d4b","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/46e3180fac779d4b","status":"passed","time":{"start":1727541493715,"stop":1727541508110,"duration":14395}},{"uid":"cd560bdb9c8d1337","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/cd560bdb9c8d1337","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727483748297,"stop":1727483761203,"duration":12906}},{"uid":"44b83a9c14f4ef4b","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/44b83a9c14f4ef4b","status":"passed","time":{"start":1727475861234,"stop":1727475874399,"duration":13165}},{"uid":"d8ec53101ff4f135","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d8ec53101ff4f135","status":"passed","time":{"start":1727461133628,"stop":1727461147717,"duration":14089}},{"uid":"724c4a2fd901768","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/724c4a2fd901768","status":"passed","time":{"start":1727461133628,"stop":1727461147717,"duration":14089}},{"uid":"4420378eaccb9af4","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/4420378eaccb9af4","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727455731850,"stop":1727455744661,"duration":12811}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"41d809a0671a7ea1.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}