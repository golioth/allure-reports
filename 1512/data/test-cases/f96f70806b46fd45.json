{"uid":"f96f70806b46fd45","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"c2044a44affa44a6054bb6d6ddcfd33a","time":{"start":1727794808329,"stop":1727794821694,"duration":13365},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8adeb090>\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727794640650,"stop":1727794640651,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727794640652,"stop":1727794640652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727794640652,"stop":1727794640652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727794640653,"stop":1727794640653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727794640654,"stop":1727794640654,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727794640654,"stop":1727794640655,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727794640655,"stop":1727794640655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727794640656,"stop":1727794640656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727794640656,"stop":1727794640656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727794640657,"stop":1727794640657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727794640657,"stop":1727794640657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727794640657,"stop":1727794640657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727794640658,"stop":1727794641058,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727794641059,"stop":1727794692528,"duration":51469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727794692529,"stop":1727794694795,"duration":2266},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727794694796,"stop":1727794732963,"duration":38167},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8adeb090>\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8ad62bd0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"4e9fc99e3a13ff8b","name":"stdout","source":"4e9fc99e3a13ff8b.txt","type":"text/plain","size":657}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727794935218,"stop":1727794935218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727794935223,"stop":1727794935619,"duration":396},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727794935621,"stop":1727794935622,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727794935625,"stop":1727794935627,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"20535f1687c9"},{"name":"thread","value":"259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":42,"unknown":0,"total":46},"items":[{"uid":"8e0d753be2203b4a","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/8e0d753be2203b4a","status":"passed","time":{"start":1727786270475,"stop":1727786283348,"duration":12873}},{"uid":"60ce6ef96434105d","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/60ce6ef96434105d","status":"passed","time":{"start":1727782499450,"stop":1727782512851,"duration":13401}},{"uid":"25c2675ad8808f12","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/25c2675ad8808f12","status":"passed","time":{"start":1727780777253,"stop":1727780790105,"duration":12852}},{"uid":"f11f067015225ab7","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/f11f067015225ab7","status":"passed","time":{"start":1727778984096,"stop":1727778997117,"duration":13021}},{"uid":"7be1656f83b79e5f","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/7be1656f83b79e5f","status":"passed","time":{"start":1727775499771,"stop":1727775512817,"duration":13046}},{"uid":"70d345b4d55e5437","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/70d345b4d55e5437","status":"passed","time":{"start":1727768251903,"stop":1727768268206,"duration":16303}},{"uid":"c327c121d797dadb","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/c327c121d797dadb","status":"passed","time":{"start":1727767668652,"stop":1727767681547,"duration":12895}},{"uid":"8d8e088dfc5dcc65","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/8d8e088dfc5dcc65","status":"passed","time":{"start":1727762465064,"stop":1727762478576,"duration":13512}},{"uid":"a30b37413c7bfb43","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/a30b37413c7bfb43","status":"passed","time":{"start":1727743144935,"stop":1727743157964,"duration":13029}},{"uid":"93959682ee39410c","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/93959682ee39410c","status":"passed","time":{"start":1727730804578,"stop":1727730818799,"duration":14221}},{"uid":"d7ef0285d27ac1a0","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/d7ef0285d27ac1a0","status":"passed","time":{"start":1727656730975,"stop":1727656744206,"duration":13231}},{"uid":"88652f2a1efab29f","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/88652f2a1efab29f","status":"passed","time":{"start":1727570328544,"stop":1727570341567,"duration":13023}},{"uid":"63e9fd30a1f4fe7a","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/63e9fd30a1f4fe7a","status":"passed","time":{"start":1727544065223,"stop":1727544078425,"duration":13202}},{"uid":"7e7b62ce08e4d79a","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/7e7b62ce08e4d79a","status":"passed","time":{"start":1727542468139,"stop":1727542481646,"duration":13507}},{"uid":"8b52fa06a8c9a5bc","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/8b52fa06a8c9a5bc","status":"passed","time":{"start":1727541537101,"stop":1727541550606,"duration":13505}},{"uid":"3659bcd26d07df27","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/3659bcd26d07df27","status":"passed","time":{"start":1727483784836,"stop":1727483797674,"duration":12838}},{"uid":"884f80addd98f3ae","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/884f80addd98f3ae","status":"passed","time":{"start":1727475905949,"stop":1727475919560,"duration":13611}},{"uid":"802d55c3096b422e","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/802d55c3096b422e","status":"passed","time":{"start":1727461176195,"stop":1727461189296,"duration":13101}},{"uid":"43c37a6a05865e06","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/43c37a6a05865e06","status":"passed","time":{"start":1727461176195,"stop":1727461189296,"duration":13101}},{"uid":"fb9947481aa92954","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/fb9947481aa92954","status":"passed","time":{"start":1727455772602,"stop":1727455786129,"duration":13527}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"f96f70806b46fd45.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}