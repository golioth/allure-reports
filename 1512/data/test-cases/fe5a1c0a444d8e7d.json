{"uid":"fe5a1c0a444d8e7d","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1727797649365,"stop":1727797663941,"duration":14576},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa70e77d0>\nproject = <golioth.golioth.Project object at 0xffffa7278b90>\ndevice = <golioth.golioth.Device object at 0xffffa7105a10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727797630785,"stop":1727797630786,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727797630785,"stop":1727797630785,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727797630786,"stop":1727797630786,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727797630786,"stop":1727797630787,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727797630787,"stop":1727797630788,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727797630787,"stop":1727797630787,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727797630789,"stop":1727797630789,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727797630789,"stop":1727797630792,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727797630792,"stop":1727797631208,"duration":416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727797631208,"stop":1727797632134,"duration":926},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727797632135,"stop":1727797648440,"duration":16305},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727797648440,"stop":1727797649362,"duration":922},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa70e77d0>\nproject = <golioth.golioth.Project object at 0xffffa7278b90>\ndevice = <golioth.golioth.Device object at 0xffffa7105a10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9290d462dd2acc8d","name":"log","source":"9290d462dd2acc8d.txt","type":"text/plain","size":28492}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727797664287,"stop":1727797664299,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727797664301,"stop":1727797664690,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727797664692,"stop":1727797664694,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727797664696,"stop":1727797664696,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3c3d9c556595"},{"name":"thread","value":"458-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":45,"unknown":0,"total":49},"items":[{"uid":"51caf18ef71bef51","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/51caf18ef71bef51","status":"passed","time":{"start":1727788901182,"stop":1727788910308,"duration":9126}},{"uid":"d5bc11c687fafe70","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/d5bc11c687fafe70","status":"passed","time":{"start":1727786135312,"stop":1727786149267,"duration":13955}},{"uid":"674d1c400bcfd597","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/674d1c400bcfd597","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727784706018,"stop":1727784706018,"duration":0}},{"uid":"8d842d5a892ed2f6","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/8d842d5a892ed2f6","status":"passed","time":{"start":1727781089613,"stop":1727781101700,"duration":12087}},{"uid":"a7c663f7dbdb56e9","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/a7c663f7dbdb56e9","status":"passed","time":{"start":1727777644895,"stop":1727777657532,"duration":12637}},{"uid":"a4dfb21d705aa08e","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/a4dfb21d705aa08e","status":"passed","time":{"start":1727775625051,"stop":1727775634514,"duration":9463}},{"uid":"35df9cca969442ce","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/35df9cca969442ce","status":"passed","time":{"start":1727771855498,"stop":1727771868939,"duration":13441}},{"uid":"bede4c5075187254","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/bede4c5075187254","status":"passed","time":{"start":1727770822497,"stop":1727770834021,"duration":11524}},{"uid":"9c786149a11a10b8","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/9c786149a11a10b8","status":"passed","time":{"start":1727765957894,"stop":1727765970659,"duration":12765}},{"uid":"a4c98503f4ded577","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/a4c98503f4ded577","status":"passed","time":{"start":1727766005593,"stop":1727766018819,"duration":13226}},{"uid":"cf16b08a01960b74","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/cf16b08a01960b74","status":"passed","time":{"start":1727761176606,"stop":1727761188100,"duration":11494}},{"uid":"c4a569157693788b","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/c4a569157693788b","status":"passed","time":{"start":1727744612993,"stop":1727744626821,"duration":13828}},{"uid":"3921e02a7b16aefe","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/3921e02a7b16aefe","status":"passed","time":{"start":1727732229222,"stop":1727732238334,"duration":9112}},{"uid":"24277983daff15d1","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/24277983daff15d1","status":"passed","time":{"start":1727658384009,"stop":1727658394563,"duration":10554}},{"uid":"8383f070dea64056","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/8383f070dea64056","status":"passed","time":{"start":1727572500320,"stop":1727572509549,"duration":9229}},{"uid":"ced8684156129c6","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/ced8684156129c6","status":"passed","time":{"start":1727548041967,"stop":1727548055031,"duration":13064}},{"uid":"14cf489d47c7f005","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/14cf489d47c7f005","status":"passed","time":{"start":1727547207520,"stop":1727547221656,"duration":14136}},{"uid":"8f9f0dc62c628bbf","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/8f9f0dc62c628bbf","status":"passed","time":{"start":1727545873725,"stop":1727545884919,"duration":11194}},{"uid":"84788df7a9deb29f","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/84788df7a9deb29f","status":"passed","time":{"start":1727485506823,"stop":1727485516152,"duration":9329}},{"uid":"c2e907326ffcbddd","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/c2e907326ffcbddd","status":"passed","time":{"start":1727478014241,"stop":1727478023460,"duration":9219}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"fe5a1c0a444d8e7d.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}