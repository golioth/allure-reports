{"uid":"fbffcc372efce624","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"19ac6524b29a49f8ec149ae236789711","time":{"start":1727794528275,"stop":1727794545558,"duration":17283},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa1c6a4d0>\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727794403723,"stop":1727794403723,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727794403724,"stop":1727794403725,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727794403726,"stop":1727794403726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727794403727,"stop":1727794403727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727794403728,"stop":1727794403728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727794403729,"stop":1727794403730,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727794403730,"stop":1727794403731,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727794403732,"stop":1727794403732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727794403733,"stop":1727794403733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727794403734,"stop":1727794403735,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727794403734,"stop":1727794403734,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727794403735,"stop":1727794403735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727794403736,"stop":1727794404167,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727794404168,"stop":1727794453532,"duration":49364},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727794453533,"stop":1727794454576,"duration":1043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727794454577,"stop":1727794471188,"duration":16611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa1c6a4d0>\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"a3e98a90967ddced","name":"stdout","source":"a3e98a90967ddced.txt","type":"text/plain","size":881}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727794672520,"stop":1727794672521,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727794672526,"stop":1727794673017,"duration":491},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727794673020,"stop":1727794673028,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727794673030,"stop":1727794673032,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"231843ca93d3"},{"name":"thread","value":"259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":49,"unknown":0,"total":50},"items":[{"uid":"636b2c262f3b1871","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/636b2c262f3b1871","status":"passed","time":{"start":1727785496454,"stop":1727785509478,"duration":13024}},{"uid":"d1a68f09857086ec","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/d1a68f09857086ec","status":"passed","time":{"start":1727782681789,"stop":1727782694784,"duration":12995}},{"uid":"5c4b49773976eb52","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/5c4b49773976eb52","status":"passed","time":{"start":1727772624988,"stop":1727772637890,"duration":12902}},{"uid":"e431015c6daf4d5a","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/e431015c6daf4d5a","status":"passed","time":{"start":1727778208414,"stop":1727778221308,"duration":12894}},{"uid":"a976c9d75d0a549f","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/a976c9d75d0a549f","status":"passed","time":{"start":1727774731553,"stop":1727774744570,"duration":13017}},{"uid":"41847a532672507","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/41847a532672507","status":"passed","time":{"start":1727772624988,"stop":1727772637890,"duration":12902}},{"uid":"e117192f7cc4e501","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/e117192f7cc4e501","status":"passed","time":{"start":1727767883467,"stop":1727767896476,"duration":13009}},{"uid":"14fe115a446514fe","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/14fe115a446514fe","status":"passed","time":{"start":1727767021000,"stop":1727767034391,"duration":13391}},{"uid":"227fbcdd32474e0e","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/227fbcdd32474e0e","status":"passed","time":{"start":1727762430033,"stop":1727762443860,"duration":13827}},{"uid":"94d8a1b2189b5d4d","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/94d8a1b2189b5d4d","status":"passed","time":{"start":1727761524805,"stop":1727761537958,"duration":13153}},{"uid":"1beaa27a8c3fb217","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/1beaa27a8c3fb217","status":"passed","time":{"start":1727758577217,"stop":1727758590461,"duration":13244}},{"uid":"430ed224e35a8baa","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/430ed224e35a8baa","status":"passed","time":{"start":1727743132727,"stop":1727743145736,"duration":13009}},{"uid":"9f1d17b2c263a5f8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/9f1d17b2c263a5f8","status":"passed","time":{"start":1727730726321,"stop":1727730740390,"duration":14069}},{"uid":"35dd9a9b24f69677","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/35dd9a9b24f69677","status":"passed","time":{"start":1727656626685,"stop":1727656639785,"duration":13100}},{"uid":"ac9ca2253563bedb","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/ac9ca2253563bedb","status":"passed","time":{"start":1727570309524,"stop":1727570322327,"duration":12803}},{"uid":"bf28031623aa4def","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/bf28031623aa4def","status":"passed","time":{"start":1727543295333,"stop":1727543308269,"duration":12936}},{"uid":"730e4c895c3867f4","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/730e4c895c3867f4","status":"passed","time":{"start":1727542405702,"stop":1727542418650,"duration":12948}},{"uid":"cf03444e5f7d9f07","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/cf03444e5f7d9f07","status":"passed","time":{"start":1727541512178,"stop":1727541525501,"duration":13323}},{"uid":"123719a6c38cc9ae","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/123719a6c38cc9ae","status":"passed","time":{"start":1727483801828,"stop":1727483814587,"duration":12759}},{"uid":"aa59d9d51cd7b1e3","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/aa59d9d51cd7b1e3","status":"passed","time":{"start":1727475856587,"stop":1727475870055,"duration":13468}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"fbffcc372efce624.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}