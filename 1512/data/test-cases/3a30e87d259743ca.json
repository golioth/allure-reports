{"uid":"3a30e87d259743ca","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"fa8c1766fb90779ba45428eac4722ac6","time":{"start":1727794694793,"stop":1727794712999,"duration":18206},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb4b6a8d0>\ndevice = <golioth.golioth.Device object at 0xffffb4ae2610>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb4ae2610>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727794602552,"stop":1727794602553,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727794602553,"stop":1727794602553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727794602554,"stop":1727794602554,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727794602555,"stop":1727794602555,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727794602556,"stop":1727794602557,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727794602556,"stop":1727794602556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727794602557,"stop":1727794602558,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727794602557,"stop":1727794602557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727794602558,"stop":1727794602558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727794602558,"stop":1727794602559,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727794602559,"stop":1727794602560,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727794602559,"stop":1727794602559,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727794602560,"stop":1727794602970,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727794602970,"stop":1727794648201,"duration":45231},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727794648203,"stop":1727794649647,"duration":1444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727794649648,"stop":1727794674340,"duration":24692},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb4b6a8d0>\ndevice = <golioth.golioth.Device object at 0xffffb4ae2610>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb4ae2610>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"522c3aca1a5b5871","name":"stdout","source":"522c3aca1a5b5871.txt","type":"text/plain","size":4604}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727794905815,"stop":1727794905815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727794905820,"stop":1727794906326,"duration":506},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727794906328,"stop":1727794906329,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727794906332,"stop":1727794906334,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"0e4e8fd5f285"},{"name":"thread","value":"257-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":43,"unknown":0,"total":48},"items":[{"uid":"acd0d584b6a3c809","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/acd0d584b6a3c809","status":"passed","time":{"start":1727787208969,"stop":1727787221944,"duration":12975}},{"uid":"c687df13eef7d6c7","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/c687df13eef7d6c7","status":"passed","time":{"start":1727783427430,"stop":1727783440145,"duration":12715}},{"uid":"25ace497656e325a","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/25ace497656e325a","status":"passed","time":{"start":1727781993122,"stop":1727782005876,"duration":12754}},{"uid":"7047a37d66dff828","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/7047a37d66dff828","status":"passed","time":{"start":1727779062036,"stop":1727779075323,"duration":13287}},{"uid":"e28cb0cea82b1638","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/e28cb0cea82b1638","status":"passed","time":{"start":1727775859747,"stop":1727775872706,"duration":12959}},{"uid":"681da91a2ae25f59","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/681da91a2ae25f59","status":"passed","time":{"start":1727768740442,"stop":1727768753694,"duration":13252}},{"uid":"ed466f6b74513ba","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/ed466f6b74513ba","status":"passed","time":{"start":1727766931033,"stop":1727766943963,"duration":12930}},{"uid":"1e43d934cb132226","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/1e43d934cb132226","status":"passed","time":{"start":1727762879462,"stop":1727762892469,"duration":13007}},{"uid":"2f0373a041c8d3a5","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/2f0373a041c8d3a5","status":"passed","time":{"start":1727761625636,"stop":1727761639168,"duration":13532}},{"uid":"8498669ec6974af4","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/8498669ec6974af4","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727758591882,"stop":1727758605365,"duration":13483}},{"uid":"d7afc0bfcddfa7fb","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/d7afc0bfcddfa7fb","status":"passed","time":{"start":1727743129969,"stop":1727743143305,"duration":13336}},{"uid":"3bafb7d69b80dfd7","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/3bafb7d69b80dfd7","status":"passed","time":{"start":1727730675645,"stop":1727730689223,"duration":13578}},{"uid":"9469d936a1433251","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/9469d936a1433251","status":"passed","time":{"start":1727656638503,"stop":1727656651858,"duration":13355}},{"uid":"c3fcd4f0d8c642d9","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/c3fcd4f0d8c642d9","status":"passed","time":{"start":1727570306681,"stop":1727570319460,"duration":12779}},{"uid":"fcb1ae271aa04057","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/fcb1ae271aa04057","status":"passed","time":{"start":1727543635885,"stop":1727543648840,"duration":12955}},{"uid":"e333f14960082b13","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/e333f14960082b13","status":"passed","time":{"start":1727542493630,"stop":1727542506447,"duration":12817}},{"uid":"cb9b5c22c4f2196c","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/cb9b5c22c4f2196c","status":"passed","time":{"start":1727541439506,"stop":1727541452863,"duration":13357}},{"uid":"aaccd7453c0f550","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/aaccd7453c0f550","status":"passed","time":{"start":1727483628001,"stop":1727483641602,"duration":13601}},{"uid":"5c2b9ed03f32563c","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/5c2b9ed03f32563c","status":"passed","time":{"start":1727475696666,"stop":1727475709683,"duration":13017}},{"uid":"2fe98cdd50aa6221","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/2fe98cdd50aa6221","status":"passed","time":{"start":1727461018003,"stop":1727461030844,"duration":12841}}]},"tags":["esp-idf","anyio","esp32_devkitc_wrover_espidf","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')"]},"source":"3a30e87d259743ca.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}