{"uid":"beb4ea8b6326ad8c","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1727794485604,"stop":1727794498794,"duration":13190},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa1c6a4d0>\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727794403723,"stop":1727794403723,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727794403724,"stop":1727794403725,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727794403726,"stop":1727794403726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727794403727,"stop":1727794403727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727794403728,"stop":1727794403728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727794403729,"stop":1727794403730,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727794403730,"stop":1727794403731,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727794403732,"stop":1727794403732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727794403733,"stop":1727794403733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727794403734,"stop":1727794403735,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727794403734,"stop":1727794403734,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727794403735,"stop":1727794403735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727794403736,"stop":1727794404167,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727794404168,"stop":1727794453532,"duration":49364},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727794453533,"stop":1727794454576,"duration":1043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727794454577,"stop":1727794471188,"duration":16611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa1c6a4d0>\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa1c430d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"4d9cefba461e0c56","name":"stdout","source":"4d9cefba461e0c56.txt","type":"text/plain","size":2957}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727794672520,"stop":1727794672521,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727794672526,"stop":1727794673017,"duration":491},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727794673020,"stop":1727794673028,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727794673030,"stop":1727794673032,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"231843ca93d3"},{"name":"thread","value":"259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":37,"unknown":0,"total":50},"items":[{"uid":"c84ec405b529de40","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/c84ec405b529de40","status":"passed","time":{"start":1727785457333,"stop":1727785470184,"duration":12851}},{"uid":"2d008d44bb21d8f9","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/2d008d44bb21d8f9","status":"passed","time":{"start":1727782642061,"stop":1727782655155,"duration":13094}},{"uid":"511ca359985e30e4","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/511ca359985e30e4","status":"passed","time":{"start":1727772585741,"stop":1727772598686,"duration":12945}},{"uid":"fafb689ff9ffffd0","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/fafb689ff9ffffd0","status":"passed","time":{"start":1727778170210,"stop":1727778183012,"duration":12802}},{"uid":"bcb4596fe3bf06c0","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/bcb4596fe3bf06c0","status":"passed","time":{"start":1727774693177,"stop":1727774706000,"duration":12823}},{"uid":"6df8f9059fde5561","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/6df8f9059fde5561","status":"passed","time":{"start":1727772585741,"stop":1727772598686,"duration":12945}},{"uid":"b553f9efb106f6aa","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/b553f9efb106f6aa","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727767842673,"stop":1727767856092,"duration":13419}},{"uid":"fe78d650603d8381","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/fe78d650603d8381","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727766979175,"stop":1727766992459,"duration":13284}},{"uid":"66b9fbce3ba147a7","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/66b9fbce3ba147a7","status":"passed","time":{"start":1727762388203,"stop":1727762401890,"duration":13687}},{"uid":"f45fa12f61274fa9","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/f45fa12f61274fa9","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727761479863,"stop":1727761493944,"duration":14081}},{"uid":"c85d7c445a5fb639","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/c85d7c445a5fb639","status":"passed","time":{"start":1727758537681,"stop":1727758550597,"duration":12916}},{"uid":"e74470d5486f887a","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/e74470d5486f887a","status":"passed","time":{"start":1727743090504,"stop":1727743103659,"duration":13155}},{"uid":"edb3dc88b87e922","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/edb3dc88b87e922","status":"passed","time":{"start":1727730683922,"stop":1727730696884,"duration":12962}},{"uid":"2bd797d5496a5efd","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/2bd797d5496a5efd","status":"passed","time":{"start":1727656587914,"stop":1727656600953,"duration":13039}},{"uid":"309526677cd4fca4","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/309526677cd4fca4","status":"passed","time":{"start":1727570269785,"stop":1727570282546,"duration":12761}},{"uid":"93607133b8a7162","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/93607133b8a7162","status":"passed","time":{"start":1727543256766,"stop":1727543269777,"duration":13011}},{"uid":"857d758003873077","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/857d758003873077","status":"passed","time":{"start":1727542367743,"stop":1727542380689,"duration":12946}},{"uid":"80013e4d1fe0f76","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/80013e4d1fe0f76","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727541472730,"stop":1727541486120,"duration":13390}},{"uid":"fdbafc9d8babf95c","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/fdbafc9d8babf95c","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727483761983,"stop":1727483775006,"duration":13023}},{"uid":"5af41c881dde2dd4","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/5af41c881dde2dd4","status":"passed","time":{"start":1727475814976,"stop":1727475828060,"duration":13084}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"beb4ea8b6326ad8c.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}