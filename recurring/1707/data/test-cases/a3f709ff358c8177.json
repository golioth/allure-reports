{"uid":"a3f709ff358c8177","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"917f1ab1da7b7ed6820b0511f1b32b01","time":{"start":1760414975604,"stop":1760414989372,"duration":13768},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7ff847f01d30>\ndevice = <golioth.golioth.Device object at 0x7ff847c7c590>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"device_name","time":{"start":1760414974609,"stop":1760414974609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1760414974609,"stop":1760414974609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760414974609,"stop":1760414974609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760414974609,"stop":1760414974609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760414974610,"stop":1760414974610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760414974610,"stop":1760414974610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760414974610,"stop":1760414974610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760414974610,"stop":1760414974610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760414974611,"stop":1760414975085,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760414975085,"stop":1760414975598,"duration":513},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760414975598,"stop":1760414975600,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760414975600,"stop":1760414975604,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7ff847f01d30>\ndevice = <golioth.golioth.Device object at 0x7ff847c7c590>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","steps":[],"attachments":[{"uid":"6960879b989c4194","name":"log","source":"6960879b989c4194.txt","type":"text/plain","size":20626}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760414989449,"stop":1760414989557,"duration":108},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760414989557,"stop":1760414989786,"duration":229},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760414989786,"stop":1760414989789,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760414989790,"stop":1760414989790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 1000064650"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ade7976d4c52"},{"name":"thread","value":"26551-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":117,"unknown":0,"total":118},"items":[{"uid":"9649f246113484cc","reportUrl":"https://golioth.github.io/allure-reports/recurring/1706//#testresult/9649f246113484cc","status":"passed","time":{"start":1760401523609,"stop":1760401544080,"duration":20471}},{"uid":"b985adf21b53731b","reportUrl":"https://golioth.github.io/allure-reports/recurring/1705//#testresult/b985adf21b53731b","status":"passed","time":{"start":1760386170636,"stop":1760386191011,"duration":20375}},{"uid":"48eaefebcf0f07c","reportUrl":"https://golioth.github.io/allure-reports/recurring/1704//#testresult/48eaefebcf0f07c","status":"passed","time":{"start":1760371791998,"stop":1760371812424,"duration":20426}},{"uid":"be7c763563b81d87","reportUrl":"https://golioth.github.io/allure-reports/recurring/1703//#testresult/be7c763563b81d87","status":"passed","time":{"start":1760357573632,"stop":1760357594561,"duration":20929}},{"uid":"2435805a194f9053","reportUrl":"https://golioth.github.io/allure-reports/recurring/1702//#testresult/2435805a194f9053","status":"passed","time":{"start":1760343101161,"stop":1760343121803,"duration":20642}},{"uid":"a49126e5c5c28607","reportUrl":"https://golioth.github.io/allure-reports/recurring/1701//#testresult/a49126e5c5c28607","status":"passed","time":{"start":1760328598735,"stop":1760328620303,"duration":21568}},{"uid":"5e544e811032cd70","reportUrl":"https://golioth.github.io/allure-reports/recurring/1700//#testresult/5e544e811032cd70","status":"passed","time":{"start":1760315236791,"stop":1760315258785,"duration":21994}},{"uid":"307eea5a34839480","reportUrl":"https://golioth.github.io/allure-reports/recurring/1699//#testresult/307eea5a34839480","status":"passed","time":{"start":1760299731573,"stop":1760299751994,"duration":20421}},{"uid":"ab8079eca6126a64","reportUrl":"https://golioth.github.io/allure-reports/recurring/1698//#testresult/ab8079eca6126a64","status":"passed","time":{"start":1760285312557,"stop":1760285333013,"duration":20456}},{"uid":"945fabc047dba409","reportUrl":"https://golioth.github.io/allure-reports/recurring/1697//#testresult/945fabc047dba409","status":"passed","time":{"start":1760271064151,"stop":1760271084954,"duration":20803}},{"uid":"daa25fcb1411e1fd","reportUrl":"https://golioth.github.io/allure-reports/recurring/1696//#testresult/daa25fcb1411e1fd","status":"passed","time":{"start":1760256572539,"stop":1760256593201,"duration":20662}},{"uid":"cac1a3c685e3bd53","reportUrl":"https://golioth.github.io/allure-reports/recurring/1695//#testresult/cac1a3c685e3bd53","status":"passed","time":{"start":1760242164376,"stop":1760242185222,"duration":20846}},{"uid":"1f791b830d1fbfe","reportUrl":"https://golioth.github.io/allure-reports/recurring/1694//#testresult/1f791b830d1fbfe","status":"passed","time":{"start":1760231814994,"stop":1760231835501,"duration":20507}},{"uid":"35dad12717cb91c0","reportUrl":"https://golioth.github.io/allure-reports/recurring/1694//#testresult/35dad12717cb91c0","status":"passed","time":{"start":1760228800534,"stop":1760228820738,"duration":20204}},{"uid":"bf821ae753c31007","reportUrl":"https://golioth.github.io/allure-reports/recurring/1693//#testresult/bf821ae753c31007","status":"passed","time":{"start":1760213308782,"stop":1760213329328,"duration":20546}},{"uid":"c928a6741235eafb","reportUrl":"https://golioth.github.io/allure-reports/recurring/1692//#testresult/c928a6741235eafb","status":"passed","time":{"start":1760198929236,"stop":1760198949907,"duration":20671}},{"uid":"c1f87ce12e81bb45","reportUrl":"https://golioth.github.io/allure-reports/recurring/1691//#testresult/c1f87ce12e81bb45","status":"passed","time":{"start":1760184657570,"stop":1760184677984,"duration":20414}},{"uid":"e187814ab6ca83de","reportUrl":"https://golioth.github.io/allure-reports/recurring/1690//#testresult/e187814ab6ca83de","status":"passed","time":{"start":1760170172301,"stop":1760170193835,"duration":21534}},{"uid":"1a6d15bb5f874db7","reportUrl":"https://golioth.github.io/allure-reports/recurring/1689//#testresult/1a6d15bb5f874db7","status":"passed","time":{"start":1760155765739,"stop":1760155786646,"duration":20907}},{"uid":"135e4543a8133a52","reportUrl":"https://golioth.github.io/allure-reports/recurring/1688//#testresult/135e4543a8133a52","status":"passed","time":{"start":1760142244212,"stop":1760142264668,"duration":20456}}]},"tags":["GitHub Actions 1000064650","native_sim_64","anyio","zephyr"]},"source":"a3f709ff358c8177.json","parameterValues":["'native_sim_64'","'zephyr'"]}