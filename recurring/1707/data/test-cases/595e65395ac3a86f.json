{"uid":"595e65395ac3a86f","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"6d2bac95f9ef4efcbb7b3998d017c3fa","time":{"start":1760414975707,"stop":1760414995966,"duration":20259},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f730e3027b0>\ndevice = <golioth.golioth.Device object at 0x7f730e084830>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760414974607,"stop":1760414974607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760414974608,"stop":1760414974608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760414974608,"stop":1760414974608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760414974608,"stop":1760414974608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760414974608,"stop":1760414974608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760414974608,"stop":1760414974609,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760414974608,"stop":1760414974608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760414974609,"stop":1760414974609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760414974609,"stop":1760414975089,"duration":480},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760414975089,"stop":1760414975603,"duration":514},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760414975603,"stop":1760414975606,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760414975606,"stop":1760414975706,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f730e3027b0>\ndevice = <golioth.golioth.Device object at 0x7f730e084830>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"19c2c4153e9c0566","name":"log","source":"19c2c4153e9c0566.txt","type":"text/plain","size":18380}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760414996103,"stop":1760414996210,"duration":107},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760414996210,"stop":1760414997493,"duration":1283},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760414997493,"stop":1760414997494,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760414997501,"stop":1760414997501,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 1000064650"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ade7976d4c52"},{"name":"thread","value":"26549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":117,"unknown":0,"total":118},"items":[{"uid":"b3a98f2159a17406","reportUrl":"https://golioth.github.io/allure-reports/recurring/1706//#testresult/b3a98f2159a17406","status":"passed","time":{"start":1760401523616,"stop":1760401548911,"duration":25295}},{"uid":"370809189588d9ec","reportUrl":"https://golioth.github.io/allure-reports/recurring/1705//#testresult/370809189588d9ec","status":"passed","time":{"start":1760386170521,"stop":1760386196150,"duration":25629}},{"uid":"42377075afe7d36","reportUrl":"https://golioth.github.io/allure-reports/recurring/1704//#testresult/42377075afe7d36","status":"passed","time":{"start":1760371792103,"stop":1760371818015,"duration":25912}},{"uid":"2b5f608949279f09","reportUrl":"https://golioth.github.io/allure-reports/recurring/1703//#testresult/2b5f608949279f09","status":"passed","time":{"start":1760357573630,"stop":1760357599044,"duration":25414}},{"uid":"7b4e728f3c2d2694","reportUrl":"https://golioth.github.io/allure-reports/recurring/1702//#testresult/7b4e728f3c2d2694","status":"passed","time":{"start":1760343100817,"stop":1760343126332,"duration":25515}},{"uid":"dfb78ad63cc9cef4","reportUrl":"https://golioth.github.io/allure-reports/recurring/1701//#testresult/dfb78ad63cc9cef4","status":"passed","time":{"start":1760328598832,"stop":1760328624625,"duration":25793}},{"uid":"f48ef6cd865d243a","reportUrl":"https://golioth.github.io/allure-reports/recurring/1700//#testresult/f48ef6cd865d243a","status":"passed","time":{"start":1760315236885,"stop":1760315262244,"duration":25359}},{"uid":"459a2a39d9a0efc5","reportUrl":"https://golioth.github.io/allure-reports/recurring/1699//#testresult/459a2a39d9a0efc5","status":"passed","time":{"start":1760299731562,"stop":1760299756816,"duration":25254}},{"uid":"c43e3519dcbef4f7","reportUrl":"https://golioth.github.io/allure-reports/recurring/1698//#testresult/c43e3519dcbef4f7","status":"passed","time":{"start":1760285312663,"stop":1760285337846,"duration":25183}},{"uid":"685b197e258ab9d9","reportUrl":"https://golioth.github.io/allure-reports/recurring/1697//#testresult/685b197e258ab9d9","status":"passed","time":{"start":1760271064249,"stop":1760271089650,"duration":25401}},{"uid":"e7f19948a74210a","reportUrl":"https://golioth.github.io/allure-reports/recurring/1696//#testresult/e7f19948a74210a","status":"passed","time":{"start":1760256572434,"stop":1760256598020,"duration":25586}},{"uid":"2c20d43eeecdbce9","reportUrl":"https://golioth.github.io/allure-reports/recurring/1695//#testresult/2c20d43eeecdbce9","status":"passed","time":{"start":1760242164379,"stop":1760242189569,"duration":25190}},{"uid":"ab7d7b1833396ae3","reportUrl":"https://golioth.github.io/allure-reports/recurring/1694//#testresult/ab7d7b1833396ae3","status":"passed","time":{"start":1760231814792,"stop":1760231840752,"duration":25960}},{"uid":"1ccbeb6c18d0f4b6","reportUrl":"https://golioth.github.io/allure-reports/recurring/1694//#testresult/1ccbeb6c18d0f4b6","status":"passed","time":{"start":1760228800433,"stop":1760228825608,"duration":25175}},{"uid":"320ab0b44d866788","reportUrl":"https://golioth.github.io/allure-reports/recurring/1693//#testresult/320ab0b44d866788","status":"passed","time":{"start":1760213308685,"stop":1760213334079,"duration":25394}},{"uid":"b0dab2787f607367","reportUrl":"https://golioth.github.io/allure-reports/recurring/1692//#testresult/b0dab2787f607367","status":"passed","time":{"start":1760198929237,"stop":1760198954668,"duration":25431}},{"uid":"3adc1c6f71e30e69","reportUrl":"https://golioth.github.io/allure-reports/recurring/1691//#testresult/3adc1c6f71e30e69","status":"passed","time":{"start":1760184657526,"stop":1760184682722,"duration":25196}},{"uid":"8e39ddf3151a24a6","reportUrl":"https://golioth.github.io/allure-reports/recurring/1690//#testresult/8e39ddf3151a24a6","status":"passed","time":{"start":1760170172052,"stop":1760170197297,"duration":25245}},{"uid":"15fe7a725177c9d3","reportUrl":"https://golioth.github.io/allure-reports/recurring/1689//#testresult/15fe7a725177c9d3","status":"passed","time":{"start":1760155765855,"stop":1760155791491,"duration":25636}},{"uid":"a41de3793d69866e","reportUrl":"https://golioth.github.io/allure-reports/recurring/1688//#testresult/a41de3793d69866e","status":"passed","time":{"start":1760142244519,"stop":1760142269816,"duration":25297}}]},"tags":["GitHub Actions 1000064650","native_sim_64","anyio","zephyr"]},"source":"595e65395ac3a86f.json","parameterValues":["'native_sim_64'","'zephyr'"]}