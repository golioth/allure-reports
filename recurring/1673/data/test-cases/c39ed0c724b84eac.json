{"uid":"c39ed0c724b84eac","name":"test_restart","fullName":"tests.hil.tests.settings.test_settings#test_restart","historyId":"d54522c406aaefb99d17d6ecedf7faab","time":{"start":1759925548993,"stop":1759925559712,"duration":10719},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"self = <trio.lowlevel.FdStream object at 0x7fee95708d40>, max_bytes = 65536\n\n    async def receive_some(self, max_bytes: int | None = None) -> bytes:\n        with self._receive_conflict_detector:\n            if max_bytes is None:\n                max_bytes = DEFAULT_RECEIVE_SIZE\n            else:\n                if not isinstance(max_bytes, int):\n                    raise TypeError(\"max_bytes must be integer >= 1\")\n                if max_bytes < 1:\n                    raise ValueError(\"max_bytes must be integer >= 1\")\n    \n            await trio.lowlevel.checkpoint()\n            while True:\n                try:\n>                   data = os.read(self._fd_holder.fd, max_bytes)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE                   BlockingIOError: [Errno 11] Resource temporarily unavailable\n\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:182: BlockingIOError\n\nDuring handling of the above exception, another exception occurred:\n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n>           yield scope\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/pytest_hil/linuxboard.py:31: in receive_some\n    return await self.process.stdout.receive_some()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:184: in receive_some\n    await trio.lowlevel.wait_readable(self._fd_holder.fd)\n../../../.local/lib/python3.12/site-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:336: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:311: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n../../../.local/lib/python3.12/site-packages/trio/_core/_traps.py:208: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n        if reason is None:\n            raise Cancelled._create(source=\"unknown\", reason=\"misnesting\")\n        else:\n>           raise Cancelled._create(\n                source=reason.source,\n                reason=reason.reason,\n                source_task=reason.source_task,\n            )\nE           trio.Cancelled: cancelled due to deadline\n\n../../../.local/lib/python3.12/site-packages/trio/_core/_run.py:1663: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <pytest_hil.linuxboard.LinuxBoard object at 0x7fee959fffe0>\ndevice = <golioth.golioth.Device object at 0x7fee95a86ab0>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n>       assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/hil/tests/settings/test_settings.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:187: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_psk","time":{"start":1759925445446,"stop":1759925445446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759925445446,"stop":1759925445446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759925445446,"stop":1759925445446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1759925445446,"stop":1759925445446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759925445446,"stop":1759925445446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759925445446,"stop":1759925445446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759925445446,"stop":1759925445446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759925445447,"stop":1759925445840,"duration":393},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759925445840,"stop":1759925446593,"duration":753},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759925445840,"stop":1759925445840,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759925446593,"stop":1759925457288,"duration":10695},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"self = <trio.lowlevel.FdStream object at 0x7fee95708d40>, max_bytes = 65536\n\n    async def receive_some(self, max_bytes: int | None = None) -> bytes:\n        with self._receive_conflict_detector:\n            if max_bytes is None:\n                max_bytes = DEFAULT_RECEIVE_SIZE\n            else:\n                if not isinstance(max_bytes, int):\n                    raise TypeError(\"max_bytes must be integer >= 1\")\n                if max_bytes < 1:\n                    raise ValueError(\"max_bytes must be integer >= 1\")\n    \n            await trio.lowlevel.checkpoint()\n            while True:\n                try:\n>                   data = os.read(self._fd_holder.fd, max_bytes)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE                   BlockingIOError: [Errno 11] Resource temporarily unavailable\n\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:182: BlockingIOError\n\nDuring handling of the above exception, another exception occurred:\n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n>           yield scope\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/pytest_hil/linuxboard.py:31: in receive_some\n    return await self.process.stdout.receive_some()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:184: in receive_some\n    await trio.lowlevel.wait_readable(self._fd_holder.fd)\n../../../.local/lib/python3.12/site-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:336: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:311: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n../../../.local/lib/python3.12/site-packages/trio/_core/_traps.py:208: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n        if reason is None:\n            raise Cancelled._create(source=\"unknown\", reason=\"misnesting\")\n        else:\n>           raise Cancelled._create(\n                source=reason.source,\n                reason=reason.reason,\n                source_task=reason.source_task,\n            )\nE           trio.Cancelled: cancelled due to deadline\n\n../../../.local/lib/python3.12/site-packages/trio/_core/_run.py:1663: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <pytest_hil.linuxboard.LinuxBoard object at 0x7fee959fffe0>\ndevice = <golioth.golioth.Device object at 0x7fee95a86ab0>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n>       assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/hil/tests/settings/test_settings.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:187: TooSlowError","steps":[],"attachments":[{"uid":"3126989e5feffa7f","name":"stdout","source":"3126989e5feffa7f.txt","type":"text/plain","size":122}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1759925559803,"stop":1759925559803,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759925559804,"stop":1759925560051,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759925560051,"stop":1759925560054,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759925560054,"stop":1759925560055,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"linux"},{"name":"tag","value":"linux"},{"name":"parentSuite","value":"hil.linux.linux"},{"name":"tag"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"4045-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'linux'"},{"name":"platform_name","value":"'linux'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":76,"unknown":0,"total":81},"items":[{"uid":"9c9485cd4a4e25b7","reportUrl":"https://golioth.github.io/allure-reports/recurring/1672//#testresult/9c9485cd4a4e25b7","status":"passed","time":{"start":1759911005211,"stop":1759911034091,"duration":28880}},{"uid":"2d5c2c0bdfc7dcaf","reportUrl":"https://golioth.github.io/allure-reports/recurring/1671//#testresult/2d5c2c0bdfc7dcaf","status":"passed","time":{"start":1759896524058,"stop":1759896549127,"duration":25069}},{"uid":"f28c8db20c9120be","reportUrl":"https://golioth.github.io/allure-reports/recurring/1670//#testresult/f28c8db20c9120be","status":"passed","time":{"start":1759883086047,"stop":1759883116378,"duration":30331}},{"uid":"257fe249e0f11878","reportUrl":"https://golioth.github.io/allure-reports/recurring/1669//#testresult/257fe249e0f11878","status":"passed","time":{"start":1759867674019,"stop":1759867705144,"duration":31125}},{"uid":"a482b2a64b693858","reportUrl":"https://golioth.github.io/allure-reports/recurring/1668//#testresult/a482b2a64b693858","status":"passed","time":{"start":1759853335836,"stop":1759853369157,"duration":33321}},{"uid":"bdeed19fd0c18f7f","reportUrl":"https://golioth.github.io/allure-reports/recurring/1667//#testresult/bdeed19fd0c18f7f","status":"passed","time":{"start":1759839095009,"stop":1759839128311,"duration":33302}},{"uid":"f2788213e9dda5e6","reportUrl":"https://golioth.github.io/allure-reports/recurring/1666//#testresult/f2788213e9dda5e6","status":"passed","time":{"start":1759824573071,"stop":1759824606269,"duration":33198}},{"uid":"391d029d75848ab0","reportUrl":"https://golioth.github.io/allure-reports/recurring/1665//#testresult/391d029d75848ab0","status":"passed","time":{"start":1759810145279,"stop":1759810179614,"duration":34335}},{"uid":"6fbf5ded66038dd8","reportUrl":"https://golioth.github.io/allure-reports/recurring/1664//#testresult/6fbf5ded66038dd8","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759796701776,"stop":1759796722409,"duration":20633}},{"uid":"a28861d53e1cd460","reportUrl":"https://golioth.github.io/allure-reports/recurring/1663//#testresult/a28861d53e1cd460","status":"passed","time":{"start":1759781292315,"stop":1759781322706,"duration":30391}},{"uid":"7bb67c72ee7ff44b","reportUrl":"https://golioth.github.io/allure-reports/recurring/1662//#testresult/7bb67c72ee7ff44b","status":"passed","time":{"start":1759766925567,"stop":1759766958894,"duration":33327}},{"uid":"eab032456dd15226","reportUrl":"https://golioth.github.io/allure-reports/recurring/1661//#testresult/eab032456dd15226","status":"passed","time":{"start":1759752722859,"stop":1759752755943,"duration":33084}},{"uid":"bb7486737fabb6b7","reportUrl":"https://golioth.github.io/allure-reports/recurring/1660//#testresult/bb7486737fabb6b7","status":"passed","time":{"start":1759738203405,"stop":1759738236480,"duration":33075}},{"uid":"3712bce9eb378376","reportUrl":"https://golioth.github.io/allure-reports/recurring/1659//#testresult/3712bce9eb378376","status":"passed","time":{"start":1759723702926,"stop":1759723735014,"duration":32088}},{"uid":"863a1d50351803d2","reportUrl":"https://golioth.github.io/allure-reports/recurring/1658//#testresult/863a1d50351803d2","status":"passed","time":{"start":1759710311007,"stop":1759710344582,"duration":33575}},{"uid":"bf58ff5ae4f3bcbe","reportUrl":"https://golioth.github.io/allure-reports/recurring/1657//#testresult/bf58ff5ae4f3bcbe","status":"passed","time":{"start":1759694856740,"stop":1759694882076,"duration":25336}},{"uid":"ce8c4f8ca2e3dd5","reportUrl":"https://golioth.github.io/allure-reports/recurring/1656//#testresult/ce8c4f8ca2e3dd5","status":"passed","time":{"start":1759680460765,"stop":1759680494344,"duration":33579}},{"uid":"fb3bbbb4f1af6239","reportUrl":"https://golioth.github.io/allure-reports/recurring/1655//#testresult/fb3bbbb4f1af6239","status":"passed","time":{"start":1759666229637,"stop":1759666262724,"duration":33087}},{"uid":"2d93374e02bcfe7c","reportUrl":"https://golioth.github.io/allure-reports/recurring/1654//#testresult/2d93374e02bcfe7c","status":"passed","time":{"start":1759651709932,"stop":1759651739322,"duration":29390}},{"uid":"c00337f6a282f9d8","reportUrl":"https://golioth.github.io/allure-reports/recurring/1653//#testresult/c00337f6a282f9d8","status":"passed","time":{"start":1759637343555,"stop":1759637376401,"duration":32846}}]},"tags":["linux","anyio"]},"source":"c39ed0c724b84eac.json","parameterValues":["'linux'","'linux'"]}