{"uid":"eb5149ff05de3e0a","name":"test_cancel_all","fullName":"tests.hil.tests.settings.test_settings#test_cancel_all","historyId":"a9587ca9ad8f2de8bc72f20482399f28","time":{"start":1759796664396,"stop":1759796701681,"duration":37285},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"self = <trio.lowlevel.FdStream object at 0x7ff967e61640>, max_bytes = 65536\n\n    async def receive_some(self, max_bytes: int | None = None) -> bytes:\n        with self._receive_conflict_detector:\n            if max_bytes is None:\n                max_bytes = DEFAULT_RECEIVE_SIZE\n            else:\n                if not isinstance(max_bytes, int):\n                    raise TypeError(\"max_bytes must be integer >= 1\")\n                if max_bytes < 1:\n                    raise ValueError(\"max_bytes must be integer >= 1\")\n    \n            await trio.lowlevel.checkpoint()\n            while True:\n                try:\n>                   data = os.read(self._fd_holder.fd, max_bytes)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE                   BlockingIOError: [Errno 11] Resource temporarily unavailable\n\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:182: BlockingIOError\n\nDuring handling of the above exception, another exception occurred:\n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n>           yield scope\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/pytest_hil/linuxboard.py:31: in receive_some\n    return await self.process.stdout.receive_some()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:184: in receive_some\n    await trio.lowlevel.wait_readable(self._fd_holder.fd)\n../../../.local/lib/python3.12/site-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:336: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:311: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n../../../.local/lib/python3.12/site-packages/trio/_core/_traps.py:208: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n        if reason is None:\n            raise Cancelled._create(source=\"unknown\", reason=\"misnesting\")\n        else:\n>           raise Cancelled._create(\n                source=reason.source,\n                reason=reason.reason,\n                source_task=reason.source_task,\n            )\nE           trio.Cancelled: cancelled due to deadline\n\n../../../.local/lib/python3.12/site-packages/trio/_core/_run.py:1663: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <pytest_hil.linuxboard.LinuxBoard object at 0x7ff96814e7e0>\ndevice = <golioth.golioth.Device object at 0x7ff96814e4b0>\n\n    async def test_cancel_all(board, device):\n        # Cancel all settings\n        await device.settings.set('TEST_CANCEL', True)\n    \n        assert None != await board.wait_for_regex_in_line('Cancelling settings', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Settings have been cancelled', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_INT', 1337)\n    \n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_int', timeout_s=10)\n    \n        # Reset to expected value so we don't re-trigger test on settings registration\n        await device.settings.set('TEST_CANCEL', False)\n    \n        # Wait for device to automatically re-register all settings\n        assert None != await board.wait_for_regex_in_line('Settings have been reregistered', timeout_s=10)\n    \n        await device.settings.set('TEST_INT', 72)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 72', timeout_s=10)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/hil/tests/settings/test_settings.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:187: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"device_name","time":{"start":1759796588967,"stop":1759796588967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759796588967,"stop":1759796588967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759796588967,"stop":1759796588968,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1759796588967,"stop":1759796588967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759796588967,"stop":1759796588967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759796588967,"stop":1759796588967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759796588968,"stop":1759796589260,"duration":292},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759796588968,"stop":1759796588968,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759796589261,"stop":1759796589975,"duration":714},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759796589261,"stop":1759796589261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759796589975,"stop":1759796600563,"duration":10588},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"self = <trio.lowlevel.FdStream object at 0x7ff967e61640>, max_bytes = 65536\n\n    async def receive_some(self, max_bytes: int | None = None) -> bytes:\n        with self._receive_conflict_detector:\n            if max_bytes is None:\n                max_bytes = DEFAULT_RECEIVE_SIZE\n            else:\n                if not isinstance(max_bytes, int):\n                    raise TypeError(\"max_bytes must be integer >= 1\")\n                if max_bytes < 1:\n                    raise ValueError(\"max_bytes must be integer >= 1\")\n    \n            await trio.lowlevel.checkpoint()\n            while True:\n                try:\n>                   data = os.read(self._fd_holder.fd, max_bytes)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE                   BlockingIOError: [Errno 11] Resource temporarily unavailable\n\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:182: BlockingIOError\n\nDuring handling of the above exception, another exception occurred:\n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n>           yield scope\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/pytest_hil/linuxboard.py:31: in receive_some\n    return await self.process.stdout.receive_some()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:184: in receive_some\n    await trio.lowlevel.wait_readable(self._fd_holder.fd)\n../../../.local/lib/python3.12/site-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:336: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:311: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n../../../.local/lib/python3.12/site-packages/trio/_core/_traps.py:208: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n        if reason is None:\n            raise Cancelled._create(source=\"unknown\", reason=\"misnesting\")\n        else:\n>           raise Cancelled._create(\n                source=reason.source,\n                reason=reason.reason,\n                source_task=reason.source_task,\n            )\nE           trio.Cancelled: cancelled due to deadline\n\n../../../.local/lib/python3.12/site-packages/trio/_core/_run.py:1663: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <pytest_hil.linuxboard.LinuxBoard object at 0x7ff96814e7e0>\ndevice = <golioth.golioth.Device object at 0x7ff96814e4b0>\n\n    async def test_cancel_all(board, device):\n        # Cancel all settings\n        await device.settings.set('TEST_CANCEL', True)\n    \n        assert None != await board.wait_for_regex_in_line('Cancelling settings', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Settings have been cancelled', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_INT', 1337)\n    \n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_int', timeout_s=10)\n    \n        # Reset to expected value so we don't re-trigger test on settings registration\n        await device.settings.set('TEST_CANCEL', False)\n    \n        # Wait for device to automatically re-register all settings\n        assert None != await board.wait_for_regex_in_line('Settings have been reregistered', timeout_s=10)\n    \n        await device.settings.set('TEST_INT', 72)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 72', timeout_s=10)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/hil/tests/settings/test_settings.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:187: TooSlowError","steps":[],"attachments":[{"uid":"cb7c628af9a56fc","name":"stdout","source":"cb7c628af9a56fc.txt","type":"text/plain","size":6206}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1759796722456,"stop":1759796722741,"duration":285},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1759796722456,"stop":1759796722456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759796722741,"stop":1759796722744,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759796722744,"stop":1759796722744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"linux"},{"name":"tag","value":"linux"},{"name":"parentSuite","value":"hil.linux.linux"},{"name":"tag"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"3997-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'linux'"},{"name":"platform_name","value":"'linux'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":71,"unknown":0,"total":72},"items":[{"uid":"d73a11bc385eb64a","reportUrl":"https://golioth.github.io/allure-reports/recurring/1663//#testresult/d73a11bc385eb64a","status":"passed","time":{"start":1759781264343,"stop":1759781292313,"duration":27970}},{"uid":"f9c16a938224a77b","reportUrl":"https://golioth.github.io/allure-reports/recurring/1662//#testresult/f9c16a938224a77b","status":"passed","time":{"start":1759766898291,"stop":1759766925565,"duration":27274}},{"uid":"520c14e6d18f5dd1","reportUrl":"https://golioth.github.io/allure-reports/recurring/1661//#testresult/520c14e6d18f5dd1","status":"passed","time":{"start":1759752695739,"stop":1759752722857,"duration":27118}},{"uid":"6c29e0c9ef8c3e98","reportUrl":"https://golioth.github.io/allure-reports/recurring/1660//#testresult/6c29e0c9ef8c3e98","status":"passed","time":{"start":1759738176247,"stop":1759738203403,"duration":27156}},{"uid":"26f201cb0765c2e","reportUrl":"https://golioth.github.io/allure-reports/recurring/1659//#testresult/26f201cb0765c2e","status":"passed","time":{"start":1759723675794,"stop":1759723702924,"duration":27130}},{"uid":"ffee18a25cbedbee","reportUrl":"https://golioth.github.io/allure-reports/recurring/1658//#testresult/ffee18a25cbedbee","status":"passed","time":{"start":1759710283320,"stop":1759710311005,"duration":27685}},{"uid":"e501eff39ce5a24a","reportUrl":"https://golioth.github.io/allure-reports/recurring/1657//#testresult/e501eff39ce5a24a","status":"passed","time":{"start":1759694829611,"stop":1759694856738,"duration":27127}},{"uid":"c34008ade340b010","reportUrl":"https://golioth.github.io/allure-reports/recurring/1656//#testresult/c34008ade340b010","status":"passed","time":{"start":1759680433189,"stop":1759680460764,"duration":27575}},{"uid":"9cb86963b3f8c7d6","reportUrl":"https://golioth.github.io/allure-reports/recurring/1655//#testresult/9cb86963b3f8c7d6","status":"passed","time":{"start":1759666202492,"stop":1759666229636,"duration":27144}},{"uid":"fb0a92d26b143bdc","reportUrl":"https://golioth.github.io/allure-reports/recurring/1654//#testresult/fb0a92d26b143bdc","status":"passed","time":{"start":1759651683136,"stop":1759651709930,"duration":26794}},{"uid":"4de214014a68f697","reportUrl":"https://golioth.github.io/allure-reports/recurring/1653//#testresult/4de214014a68f697","status":"passed","time":{"start":1759637316733,"stop":1759637343553,"duration":26820}},{"uid":"1e2f2c80dceb3375","reportUrl":"https://golioth.github.io/allure-reports/recurring/1652//#testresult/1e2f2c80dceb3375","status":"passed","time":{"start":1759623986554,"stop":1759624013264,"duration":26710}},{"uid":"c6fc1dc0def42171","reportUrl":"https://golioth.github.io/allure-reports/recurring/1651//#testresult/c6fc1dc0def42171","status":"passed","time":{"start":1759608421772,"stop":1759608448682,"duration":26910}},{"uid":"5de2881c670e1221","reportUrl":"https://golioth.github.io/allure-reports/recurring/1650//#testresult/5de2881c670e1221","status":"passed","time":{"start":1759594043104,"stop":1759594070164,"duration":27060}},{"uid":"fd0f3b4cc0e153d7","reportUrl":"https://golioth.github.io/allure-reports/recurring/1649//#testresult/fd0f3b4cc0e153d7","status":"passed","time":{"start":1759579791980,"stop":1759579819354,"duration":27374}},{"uid":"dfc8f04fbbfacbf","reportUrl":"https://golioth.github.io/allure-reports/recurring/1648//#testresult/dfc8f04fbbfacbf","status":"passed","time":{"start":1759565296488,"stop":1759565323200,"duration":26712}},{"uid":"781a0a9bd9946267","reportUrl":"https://golioth.github.io/allure-reports/recurring/1647//#testresult/781a0a9bd9946267","status":"passed","time":{"start":1759550882237,"stop":1759550909350,"duration":27113}},{"uid":"6fb755db04d48ef3","reportUrl":"https://golioth.github.io/allure-reports/recurring/1646//#testresult/6fb755db04d48ef3","status":"passed","time":{"start":1759537360984,"stop":1759537391326,"duration":30342}},{"uid":"cc50629f5a5cc95c","reportUrl":"https://golioth.github.io/allure-reports/recurring/1645//#testresult/cc50629f5a5cc95c","status":"passed","time":{"start":1759522041318,"stop":1759522068434,"duration":27116}},{"uid":"a351272ebd5448b5","reportUrl":"https://golioth.github.io/allure-reports/recurring/1644//#testresult/a351272ebd5448b5","status":"passed","time":{"start":1759507692613,"stop":1759507719327,"duration":26714}}]},"tags":["linux","anyio"]},"source":"eb5149ff05de3e0a.json","parameterValues":["'linux'","'linux'"]}