{"uid":"62d544b873db24b5","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"917f1ab1da7b7ed6820b0511f1b32b01","time":{"start":1760717736137,"stop":1760717749833,"duration":13696},"status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f05f32a4830>\ndevice = <golioth.golioth.Device object at 0x7f05f3159d30>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 0 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760717735712,"stop":1760717735712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760717735713,"stop":1760717735713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760717735713,"stop":1760717735713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760717735713,"stop":1760717735876,"duration":163},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760717735713,"stop":1760717735713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760717735713,"stop":1760717735713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760717735713,"stop":1760717735713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760717735713,"stop":1760717735713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760717735713,"stop":1760717735713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760717735876,"stop":1760717736131,"duration":255},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760717736131,"stop":1760717736132,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760717736132,"stop":1760717736136,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f05f32a4830>\ndevice = <golioth.golioth.Device object at 0x7f05f3159d30>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 0 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","steps":[],"attachments":[{"uid":"2412814ee20a56c7","name":"log","source":"2412814ee20a56c7.txt","type":"text/plain","size":23283}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760717749874,"stop":1760717749975,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760717749976,"stop":1760717750109,"duration":133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760717750110,"stop":1760717750110,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760717750111,"stop":1760717750111,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 1000066507"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5a089357676a"},{"name":"thread","value":"108739-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":137,"unknown":0,"total":139},"items":[{"uid":"32322cd98a0210d4","reportUrl":"https://golioth.github.io/allure-reports/recurring/1727//#testresult/32322cd98a0210d4","status":"passed","time":{"start":1760703162383,"stop":1760703182643,"duration":20260}},{"uid":"f7eded956dc5708a","reportUrl":"https://golioth.github.io/allure-reports/recurring/1726//#testresult/f7eded956dc5708a","status":"passed","time":{"start":1760688660836,"stop":1760688681141,"duration":20305}},{"uid":"8bc7352692d049b4","reportUrl":"https://golioth.github.io/allure-reports/recurring/1725//#testresult/8bc7352692d049b4","status":"passed","time":{"start":1760674536870,"stop":1760674558354,"duration":21484}},{"uid":"b747c220f77759b9","reportUrl":"https://golioth.github.io/allure-reports/recurring/1724//#testresult/b747c220f77759b9","status":"passed","time":{"start":1760661142770,"stop":1760661163308,"duration":20538}},{"uid":"66d8f49b57dc1bfb","reportUrl":"https://golioth.github.io/allure-reports/recurring/1723//#testresult/66d8f49b57dc1bfb","status":"passed","time":{"start":1760645346755,"stop":1760645367191,"duration":20436}},{"uid":"2c37e62bd403ce8e","reportUrl":"https://golioth.github.io/allure-reports/recurring/1722//#testresult/2c37e62bd403ce8e","status":"passed","time":{"start":1760631013133,"stop":1760631034586,"duration":21453}},{"uid":"7b363a7e07770be4","reportUrl":"https://golioth.github.io/allure-reports/recurring/1721//#testresult/7b363a7e07770be4","status":"passed","time":{"start":1760616780556,"stop":1760616800860,"duration":20304}},{"uid":"d4fcd0317c7a4cd1","reportUrl":"https://golioth.github.io/allure-reports/recurring/1720//#testresult/d4fcd0317c7a4cd1","status":"passed","time":{"start":1760602252396,"stop":1760602272961,"duration":20565}},{"uid":"e3b59010e3a662e1","reportUrl":"https://golioth.github.io/allure-reports/recurring/1719//#testresult/e3b59010e3a662e1","status":"passed","time":{"start":1760587792923,"stop":1760587813643,"duration":20720}},{"uid":"3cc1203986c7deca","reportUrl":"https://golioth.github.io/allure-reports/recurring/1718//#testresult/3cc1203986c7deca","status":"passed","time":{"start":1760574391832,"stop":1760574412133,"duration":20301}},{"uid":"c1b4132dff044216","reportUrl":"https://golioth.github.io/allure-reports/recurring/1717//#testresult/c1b4132dff044216","status":"passed","time":{"start":1760558956438,"stop":1760558976621,"duration":20183}},{"uid":"e3775444e221b8d3","reportUrl":"https://golioth.github.io/allure-reports/recurring/1716//#testresult/e3775444e221b8d3","status":"passed","time":{"start":1760544542715,"stop":1760544563183,"duration":20468}},{"uid":"a285c9429ad080b4","reportUrl":"https://golioth.github.io/allure-reports/recurring/1715//#testresult/a285c9429ad080b4","status":"passed","time":{"start":1760530407763,"stop":1760530428202,"duration":20439}},{"uid":"e09a76f2d6491db6","reportUrl":"https://golioth.github.io/allure-reports/recurring/1714//#testresult/e09a76f2d6491db6","status":"passed","time":{"start":1760515848386,"stop":1760515868757,"duration":20371}},{"uid":"d1e4933f1cd701b5","reportUrl":"https://golioth.github.io/allure-reports/recurring/1713//#testresult/d1e4933f1cd701b5","status":"passed","time":{"start":1760501385453,"stop":1760501405967,"duration":20514}},{"uid":"f7a880ef3a5d4d2e","reportUrl":"https://golioth.github.io/allure-reports/recurring/1712//#testresult/f7a880ef3a5d4d2e","status":"passed","time":{"start":1760487978649,"stop":1760487999034,"duration":20385}},{"uid":"304dfe74b29a97a5","reportUrl":"https://golioth.github.io/allure-reports/recurring/1711//#testresult/304dfe74b29a97a5","status":"passed","time":{"start":1760472554031,"stop":1760472574493,"duration":20462}},{"uid":"bd1891f4a0b1b51f","reportUrl":"https://golioth.github.io/allure-reports/recurring/1710//#testresult/bd1891f4a0b1b51f","status":"passed","time":{"start":1760458211365,"stop":1760458232699,"duration":21334}},{"uid":"187f46018857bcea","reportUrl":"https://golioth.github.io/allure-reports/recurring/1709//#testresult/187f46018857bcea","status":"passed","time":{"start":1760443974863,"stop":1760443996541,"duration":21678}},{"uid":"e507ff5e736fdf65","reportUrl":"https://golioth.github.io/allure-reports/recurring/1708//#testresult/e507ff5e736fdf65","status":"passed","time":{"start":1760429422011,"stop":1760429442333,"duration":20322}}]},"tags":["native_sim_64","anyio","GitHub Actions 1000066507","zephyr"]},"source":"62d544b873db24b5.json","parameterValues":["'native_sim_64'","'zephyr'"]}