{"uid":"87d86876ae019400","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"e4e99682e260cce73d6b711077caaa5b","time":{"start":1760760915524,"stop":1760760936034,"duration":20510},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fa50632c830>\ndevice = <golioth.golioth.Device object at 0x7fa5061d9d30>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n>           shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Setting counter to 1'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_psk","time":{"start":1760760915083,"stop":1760760915083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760760915083,"stop":1760760915083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760760915083,"stop":1760760915083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760760915083,"stop":1760760915084,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760760915083,"stop":1760760915083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1760760915083,"stop":1760760915083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760760915084,"stop":1760760915230,"duration":146},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760760915084,"stop":1760760915084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760760915084,"stop":1760760915084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760760915230,"stop":1760760915518,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760760915518,"stop":1760760915519,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760760915519,"stop":1760760915524,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fa50632c830>\ndevice = <golioth.golioth.Device object at 0x7fa5061d9d30>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n>           shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Setting counter to 1'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"86200f687a5b339a","name":"log","source":"86200f687a5b339a.txt","type":"text/plain","size":18439}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760760936075,"stop":1760760936177,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760760936177,"stop":1760760936328,"duration":151},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760760936328,"stop":1760760936328,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760760936329,"stop":1760760936329,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_32"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_32"},{"name":"tag","value":"GitHub Actions 1000066889"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"131c0fefb887"},{"name":"thread","value":"108890-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_32'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":141,"unknown":0,"total":143},"items":[{"uid":"e1b96d6d7dad18a2","reportUrl":"https://golioth.github.io/allure-reports/recurring/1730//#testresult/e1b96d6d7dad18a2","status":"passed","time":{"start":1760747389408,"stop":1760747409871,"duration":20463}},{"uid":"730ca06e1b938513","reportUrl":"https://golioth.github.io/allure-reports/recurring/1729//#testresult/730ca06e1b938513","status":"passed","time":{"start":1760741895593,"stop":1760741916863,"duration":21270}},{"uid":"e80bd115b6c9d02c","reportUrl":"https://golioth.github.io/allure-reports/recurring/1729//#testresult/e80bd115b6c9d02c","status":"passed","time":{"start":1760732112732,"stop":1760732134529,"duration":21797}},{"uid":"ad843b75600977ac","reportUrl":"https://golioth.github.io/allure-reports/recurring/1728//#testresult/ad843b75600977ac","status":"passed","time":{"start":1760717752155,"stop":1760717778314,"duration":26159}},{"uid":"8ddd1fd125bc08c3","reportUrl":"https://golioth.github.io/allure-reports/recurring/1727//#testresult/8ddd1fd125bc08c3","status":"passed","time":{"start":1760703164906,"stop":1760703185453,"duration":20547}},{"uid":"4e110550c7e75956","reportUrl":"https://golioth.github.io/allure-reports/recurring/1726//#testresult/4e110550c7e75956","status":"passed","time":{"start":1760689014544,"stop":1760689034931,"duration":20387}},{"uid":"9210ed32aa1ea112","reportUrl":"https://golioth.github.io/allure-reports/recurring/1725//#testresult/9210ed32aa1ea112","status":"passed","time":{"start":1760674187078,"stop":1760674207344,"duration":20266}},{"uid":"93cdd6f1bbf9a322","reportUrl":"https://golioth.github.io/allure-reports/recurring/1724//#testresult/93cdd6f1bbf9a322","status":"passed","time":{"start":1760661133716,"stop":1760661154069,"duration":20353}},{"uid":"4dd4ba9d366f3778","reportUrl":"https://golioth.github.io/allure-reports/recurring/1723//#testresult/4dd4ba9d366f3778","status":"passed","time":{"start":1760645351162,"stop":1760645372065,"duration":20903}},{"uid":"f1a9b97abe785494","reportUrl":"https://golioth.github.io/allure-reports/recurring/1722//#testresult/f1a9b97abe785494","status":"passed","time":{"start":1760631013006,"stop":1760631033550,"duration":20544}},{"uid":"dd694e3f80900484","reportUrl":"https://golioth.github.io/allure-reports/recurring/1721//#testresult/dd694e3f80900484","status":"passed","time":{"start":1760616775829,"stop":1760616796276,"duration":20447}},{"uid":"5aac109fff167544","reportUrl":"https://golioth.github.io/allure-reports/recurring/1720//#testresult/5aac109fff167544","status":"passed","time":{"start":1760602257630,"stop":1760602278960,"duration":21330}},{"uid":"958008171747c1a1","reportUrl":"https://golioth.github.io/allure-reports/recurring/1719//#testresult/958008171747c1a1","status":"passed","time":{"start":1760587779671,"stop":1760587800246,"duration":20575}},{"uid":"79e7c8a462a70879","reportUrl":"https://golioth.github.io/allure-reports/recurring/1718//#testresult/79e7c8a462a70879","status":"passed","time":{"start":1760574399177,"stop":1760574419788,"duration":20611}},{"uid":"13f6e7766ae1cc92","reportUrl":"https://golioth.github.io/allure-reports/recurring/1717//#testresult/13f6e7766ae1cc92","status":"passed","time":{"start":1760558952814,"stop":1760558973534,"duration":20720}},{"uid":"22f76f1176910ad6","reportUrl":"https://golioth.github.io/allure-reports/recurring/1716//#testresult/22f76f1176910ad6","status":"passed","time":{"start":1760544555773,"stop":1760544576404,"duration":20631}},{"uid":"a90273b0a0d4954f","reportUrl":"https://golioth.github.io/allure-reports/recurring/1715//#testresult/a90273b0a0d4954f","status":"passed","time":{"start":1760530405884,"stop":1760530427535,"duration":21651}},{"uid":"54ab741ea2822662","reportUrl":"https://golioth.github.io/allure-reports/recurring/1714//#testresult/54ab741ea2822662","status":"passed","time":{"start":1760515853499,"stop":1760515874096,"duration":20597}},{"uid":"92415c3684476e2c","reportUrl":"https://golioth.github.io/allure-reports/recurring/1713//#testresult/92415c3684476e2c","status":"passed","time":{"start":1760501382164,"stop":1760501404908,"duration":22744}},{"uid":"905eaf909bdd7183","reportUrl":"https://golioth.github.io/allure-reports/recurring/1712//#testresult/905eaf909bdd7183","status":"passed","time":{"start":1760487976028,"stop":1760487997736,"duration":21708}}]},"tags":["anyio","native_sim_32","GitHub Actions 1000066889","zephyr"]},"source":"87d86876ae019400.json","parameterValues":["'native_sim_32'","'zephyr'"]}