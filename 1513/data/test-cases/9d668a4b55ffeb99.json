{"uid":"9d668a4b55ffeb99","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"917f1ab1da7b7ed6820b0511f1b32b01","time":{"start":1727794075146,"stop":1727794088912,"duration":13766},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f6e12d7afd0>\ndevice = <golioth.golioth.Device object at 0x7f6e12d69250>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727794074585,"stop":1727794074585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"anyio_backend","time":{"start":1727794074585,"stop":1727794074585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_name","time":{"start":1727794074586,"stop":1727794074586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"twister_harness_config","time":{"start":1727794074586,"stop":1727794074586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_psk","time":{"start":1727794074586,"stop":1727794074586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object","time":{"start":1727794074586,"stop":1727794074587,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_url","time":{"start":1727794074587,"stop":1727794074587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_key","time":{"start":1727794074587,"stop":1727794074587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project","time":{"start":1727794074587,"stop":1727794074724,"duration":137},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device","time":{"start":1727794074724,"stop":1727794075043,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"dut","time":{"start":1727794075043,"stop":1727794075045,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"shell","time":{"start":1727794075045,"stop":1727794075146,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f6e12d7afd0>\ndevice = <golioth.golioth.Device object at 0x7f6e12d69250>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"c07011052fe3c73d","name":"log","source":"c07011052fe3c73d.txt","type":"text/plain","size":22343}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"dut::0","time":{"start":1727794089110,"stop":1727794089641,"duration":531},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device::0","time":{"start":1727794089641,"stop":1727794089879,"duration":238},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project::0","time":{"start":1727794089880,"stop":1727794089880,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object::0","time":{"start":1727794089891,"stop":1727794089891,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 43"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5eb59104d4ea"},{"name":"thread","value":"50079-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":45,"unknown":0,"total":47},"items":[{"uid":"8bc76d4c6be2983d","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/8bc76d4c6be2983d","status":"passed","time":{"start":1727793943313,"stop":1727793964083,"duration":20770}},{"uid":"abb168a1b54af0be","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/abb168a1b54af0be","status":"passed","time":{"start":1727763758997,"stop":1727763780031,"duration":21034}},{"uid":"46f5154d033d5926","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/46f5154d033d5926","status":"passed","time":{"start":1727772130380,"stop":1727772150926,"duration":20546}},{"uid":"60646fd375378752","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/60646fd375378752","status":"passed","time":{"start":1727766565892,"stop":1727766586524,"duration":20632}},{"uid":"cbe146a3f14fa0a","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/cbe146a3f14fa0a","status":"passed","time":{"start":1727763758997,"stop":1727763780031,"duration":21034}},{"uid":"11d59826faf2de1f","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/11d59826faf2de1f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727761479610,"stop":1727761500837,"duration":21227}},{"uid":"1c52d914bd79199e","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/1c52d914bd79199e","status":"passed","time":{"start":1727760097477,"stop":1727760118085,"duration":20608}},{"uid":"455deb66357c68a1","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/455deb66357c68a1","status":"passed","time":{"start":1727760004057,"stop":1727760024652,"duration":20595}},{"uid":"f153cd993cfbd777","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/f153cd993cfbd777","status":"passed","time":{"start":1727758117664,"stop":1727758138581,"duration":20917}},{"uid":"812d11576bb2569","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/812d11576bb2569","status":"passed","time":{"start":1727742633538,"stop":1727742654122,"duration":20584}},{"uid":"b7747466c53e46f8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/b7747466c53e46f8","status":"passed","time":{"start":1727730193709,"stop":1727730214682,"duration":20973}},{"uid":"73dd050525ff411a","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/73dd050525ff411a","status":"passed","time":{"start":1727656133725,"stop":1727656153927,"duration":20202}},{"uid":"afee637bbd3a09d0","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/afee637bbd3a09d0","status":"passed","time":{"start":1727569829655,"stop":1727569850458,"duration":20803}},{"uid":"ff33d118f7e919","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/ff33d118f7e919","status":"passed","time":{"start":1727541099362,"stop":1727541119865,"duration":20503}},{"uid":"3871422a8f48e0b5","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/3871422a8f48e0b5","status":"passed","time":{"start":1727541050823,"stop":1727541072622,"duration":21799}},{"uid":"eaf935841243783e","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/eaf935841243783e","status":"passed","time":{"start":1727540950270,"stop":1727540970960,"duration":20690}},{"uid":"cfaa8f09c5d0b72f","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/cfaa8f09c5d0b72f","status":"passed","time":{"start":1727483240469,"stop":1727483260980,"duration":20511}},{"uid":"80e64b3e6c47c222","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/80e64b3e6c47c222","status":"passed","time":{"start":1727475303630,"stop":1727475324157,"duration":20527}},{"uid":"2188a2fa4e64266f","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/2188a2fa4e64266f","status":"passed","time":{"start":1727460596638,"stop":1727460616989,"duration":20351}},{"uid":"f536bf3b5911f985","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/f536bf3b5911f985","status":"passed","time":{"start":1727460596638,"stop":1727460616989,"duration":20351}}]},"tags":["native_sim_64","GitHub Actions 43","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"9d668a4b55ffeb99.json","parameterValues":["'native_sim_64'","'zephyr'"]}