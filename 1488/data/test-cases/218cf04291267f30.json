{"uid":"218cf04291267f30","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"1248e936e6823218f43c51a0258045c3","time":{"start":1727761457134,"stop":1727761492656,"duration":35522},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fef4c0673d0>\ndevice = <golioth.golioth.Device object at 0x7fef4c0555d0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727761455405,"stop":1727761455405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727761455405,"stop":1727761455406,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727761455406,"stop":1727761455407,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727761455406,"stop":1727761455406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727761455406,"stop":1727761455406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727761455406,"stop":1727761455406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727761455407,"stop":1727761455407,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727761455407,"stop":1727761455407,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727761455407,"stop":1727761455905,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727761455909,"stop":1727761457018,"duration":1109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727761457018,"stop":1727761457028,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727761457028,"stop":1727761457133,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fef4c0673d0>\ndevice = <golioth.golioth.Device object at 0x7fef4c0555d0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"382a604c8816adfb","name":"log","source":"382a604c8816adfb.txt","type":"text/plain","size":27220}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727761492722,"stop":1727761493238,"duration":516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727761493239,"stop":1727761493609,"duration":370},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727761493609,"stop":1727761493610,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727761493611,"stop":1727761493611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_32"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_32"},{"name":"tag","value":"GitHub Actions 33"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"83aafc738f0d"},{"name":"thread","value":"39879-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_32'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":40,"unknown":0,"total":41},"items":[{"uid":"1e021b83a46993f8","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/1e021b83a46993f8","status":"passed","time":{"start":1727760064017,"stop":1727760089374,"duration":25357}},{"uid":"30f68ea55be6c0fa","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/30f68ea55be6c0fa","status":"passed","time":{"start":1727759960070,"stop":1727759985343,"duration":25273}},{"uid":"3f17b80555ea04ef","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/3f17b80555ea04ef","status":"passed","time":{"start":1727758088524,"stop":1727758114038,"duration":25514}},{"uid":"d5e386de456e85e","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/d5e386de456e85e","status":"passed","time":{"start":1727742600234,"stop":1727742625618,"duration":25384}},{"uid":"76bf9404ae8ba8e5","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/76bf9404ae8ba8e5","status":"passed","time":{"start":1727730149874,"stop":1727730175100,"duration":25226}},{"uid":"83d2eac50fd27f5","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/83d2eac50fd27f5","status":"passed","time":{"start":1727656093469,"stop":1727656118984,"duration":25515}},{"uid":"9e8787d52f3fa464","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/9e8787d52f3fa464","status":"passed","time":{"start":1727569783057,"stop":1727569808389,"duration":25332}},{"uid":"b317aa2c8e18f840","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/b317aa2c8e18f840","status":"passed","time":{"start":1727541065130,"stop":1727541090317,"duration":25187}},{"uid":"58941e7e535fcb7e","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/58941e7e535fcb7e","status":"passed","time":{"start":1727541020993,"stop":1727541046381,"duration":25388}},{"uid":"fac897faca1db7d8","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/fac897faca1db7d8","status":"passed","time":{"start":1727540909888,"stop":1727540935215,"duration":25327}},{"uid":"a7fa83810358c19f","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/a7fa83810358c19f","status":"passed","time":{"start":1727483197461,"stop":1727483222961,"duration":25500}},{"uid":"77f5f4094b5dc7e7","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/77f5f4094b5dc7e7","status":"passed","time":{"start":1727475261357,"stop":1727475286463,"duration":25106}},{"uid":"6648146b536f8ca0","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/6648146b536f8ca0","status":"passed","time":{"start":1727460558952,"stop":1727460584504,"duration":25552}},{"uid":"dd82ce8aa0335e7a","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/dd82ce8aa0335e7a","status":"passed","time":{"start":1727460558952,"stop":1727460584504,"duration":25552}},{"uid":"499892264d875ec8","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/499892264d875ec8","status":"passed","time":{"start":1727359751648,"stop":1727359777048,"duration":25400}},{"uid":"6bbd559457eb30ae","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/6bbd559457eb30ae","status":"passed","time":{"start":1727375259716,"stop":1727375285224,"duration":25508}},{"uid":"2ba4a8dabb137de2","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/2ba4a8dabb137de2","status":"passed","time":{"start":1727379260231,"stop":1727379285704,"duration":25473}},{"uid":"4c8049778c0dc1a3","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/4c8049778c0dc1a3","status":"passed","time":{"start":1727359777888,"stop":1727359803109,"duration":25221}},{"uid":"9d29fe4eaf3b956c","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/9d29fe4eaf3b956c","status":"passed","time":{"start":1727396823051,"stop":1727396848355,"duration":25304}},{"uid":"a2e49eedc97603dc","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/a2e49eedc97603dc","status":"passed","time":{"start":1727375259716,"stop":1727375285224,"duration":25508}}]},"tags":["GitHub Actions 33","anyio","native_sim_32","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"218cf04291267f30.json","parameterValues":["'native_sim_32'","'zephyr'"]}