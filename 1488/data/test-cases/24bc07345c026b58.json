{"uid":"24bc07345c026b58","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1727772198392,"stop":1727772220983,"duration":22591},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1487e10>\ndevice = <golioth.golioth.Device object at 0xffffb14aae10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727772182518,"stop":1727772182519,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727772182519,"stop":1727772182519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727772182520,"stop":1727772182520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727772182520,"stop":1727772182520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727772182521,"stop":1727772182524,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727772182521,"stop":1727772182521,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727772182525,"stop":1727772182526,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727772182525,"stop":1727772182525,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727772182526,"stop":1727772182997,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727772182998,"stop":1727772183914,"duration":916},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727772183915,"stop":1727772197438,"duration":13523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727772197439,"stop":1727772198389,"duration":950},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1487e10>\ndevice = <golioth.golioth.Device object at 0xffffb14aae10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ca2592a67b4c16bd","name":"log","source":"ca2592a67b4c16bd.txt","type":"text/plain","size":16821}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727772221298,"stop":1727772221344,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727772221346,"stop":1727772221759,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727772221761,"stop":1727772221763,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727772221768,"stop":1727772221769,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"62ea320a5913"},{"name":"thread","value":"535-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"96dc68c93430a248","status":"passed","time":{"start":1727772154853,"stop":1727772177864,"duration":23011}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":27,"unknown":0,"total":42},"items":[{"uid":"6ac9fa52aadf5582","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/6ac9fa52aadf5582","status":"passed","time":{"start":1727771135287,"stop":1727771158403,"duration":23116}},{"uid":"c8d31c810dd48749","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/c8d31c810dd48749","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727766300697,"stop":1727766413506,"duration":112809}},{"uid":"7996f7dcf86a84e2","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/7996f7dcf86a84e2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727766300647,"stop":1727766323338,"duration":22691}},{"uid":"73f293edf98d78b3","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/73f293edf98d78b3","status":"passed","time":{"start":1727761406937,"stop":1727761430121,"duration":23184}},{"uid":"ab5140e0520959e8","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/ab5140e0520959e8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727744953396,"stop":1727744975970,"duration":22574}},{"uid":"ba2cb0508adfbc1d","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/ba2cb0508adfbc1d","status":"passed","time":{"start":1727732424732,"stop":1727732446250,"duration":21518}},{"uid":"7ca25c05d1cb36ac","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/7ca25c05d1cb36ac","status":"passed","time":{"start":1727658731535,"stop":1727658756208,"duration":24673}},{"uid":"adaf40636bbe139b","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/adaf40636bbe139b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727572919696,"stop":1727572942372,"duration":22676}},{"uid":"610802095fc19365","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/610802095fc19365","status":"passed","time":{"start":1727548334159,"stop":1727548356897,"duration":22738}},{"uid":"a0b0ba9ae13a40d1","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/a0b0ba9ae13a40d1","status":"passed","time":{"start":1727547558106,"stop":1727547581814,"duration":23708}},{"uid":"cd0599cc44e7e1ff","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/cd0599cc44e7e1ff","status":"passed","time":{"start":1727546100817,"stop":1727546121615,"duration":20798}},{"uid":"8584185a65f3f4e","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/8584185a65f3f4e","status":"passed","time":{"start":1727485784938,"stop":1727485809125,"duration":24187}},{"uid":"2d07326af5c6571a","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/2d07326af5c6571a","status":"passed","time":{"start":1727478093381,"stop":1727478116134,"duration":22753}},{"uid":"9b0a45906a789d6e","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/9b0a45906a789d6e","status":"passed","time":{"start":1727464072890,"stop":1727464096361,"duration":23471}},{"uid":"ca58d68563ad3c56","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ca58d68563ad3c56","status":"passed","time":{"start":1727464072890,"stop":1727464096361,"duration":23471}},{"uid":"505a96d6e413dd4","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/505a96d6e413dd4","status":"passed","time":{"start":1727460469375,"stop":1727460493082,"duration":23707}},{"uid":"4fdfc9f933dffe61","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/4fdfc9f933dffe61","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727460426293,"stop":1727460448969,"duration":22676}},{"uid":"53732129a24d9124","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/53732129a24d9124","status":"passed","time":{"start":1727460101266,"stop":1727460125527,"duration":24261}},{"uid":"1e8a94d7dbcab656","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/1e8a94d7dbcab656","status":"passed","time":{"start":1727459605600,"stop":1727459630102,"duration":24502}},{"uid":"63bc768c369e7570","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/63bc768c369e7570","status":"passed","time":{"start":1727399748288,"stop":1727399852965,"duration":104677}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"24bc07345c026b58.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}