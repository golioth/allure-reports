{"uid":"b553f9efb106f6aa","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1727767842673,"stop":1727767856092,"duration":13419},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9778b090>\ndevice = <golioth.golioth.Device object at 0xffff97702850>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff97702850>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727767772606,"stop":1727767772606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727767772607,"stop":1727767772607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727767772608,"stop":1727767772608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727767772608,"stop":1727767772608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727767772609,"stop":1727767772609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727767772609,"stop":1727767772609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727767772610,"stop":1727767772610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727767772610,"stop":1727767772610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727767772611,"stop":1727767772611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727767772611,"stop":1727767772612,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727767772612,"stop":1727767772612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727767772613,"stop":1727767772613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727767772613,"stop":1727767773068,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727767773069,"stop":1727767822420,"duration":49351},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727767822421,"stop":1727767823402,"duration":981},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727767823403,"stop":1727767836694,"duration":13291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9778b090>\ndevice = <golioth.golioth.Device object at 0xffff97702850>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff97702850>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"cd4df541740b1210","name":"stdout","source":"cd4df541740b1210.txt","type":"text/plain","size":3689}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727767994454,"stop":1727767994454,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727767994458,"stop":1727767994956,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727767994958,"stop":1727767994963,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727767994965,"stop":1727767994968,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"799687e7a50d"},{"name":"thread","value":"256-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":31,"unknown":0,"total":43},"items":[{"uid":"fe78d650603d8381","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/fe78d650603d8381","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727766979175,"stop":1727766992459,"duration":13284}},{"uid":"66b9fbce3ba147a7","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/66b9fbce3ba147a7","status":"passed","time":{"start":1727762388203,"stop":1727762401890,"duration":13687}},{"uid":"f45fa12f61274fa9","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/f45fa12f61274fa9","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727761479863,"stop":1727761493944,"duration":14081}},{"uid":"c85d7c445a5fb639","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/c85d7c445a5fb639","status":"passed","time":{"start":1727758537681,"stop":1727758550597,"duration":12916}},{"uid":"e74470d5486f887a","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/e74470d5486f887a","status":"passed","time":{"start":1727743090504,"stop":1727743103659,"duration":13155}},{"uid":"edb3dc88b87e922","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/edb3dc88b87e922","status":"passed","time":{"start":1727730683922,"stop":1727730696884,"duration":12962}},{"uid":"2bd797d5496a5efd","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/2bd797d5496a5efd","status":"passed","time":{"start":1727656587914,"stop":1727656600953,"duration":13039}},{"uid":"309526677cd4fca4","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/309526677cd4fca4","status":"passed","time":{"start":1727570269785,"stop":1727570282546,"duration":12761}},{"uid":"93607133b8a7162","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/93607133b8a7162","status":"passed","time":{"start":1727543256766,"stop":1727543269777,"duration":13011}},{"uid":"857d758003873077","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/857d758003873077","status":"passed","time":{"start":1727542367743,"stop":1727542380689,"duration":12946}},{"uid":"80013e4d1fe0f76","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/80013e4d1fe0f76","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727541472730,"stop":1727541486120,"duration":13390}},{"uid":"fdbafc9d8babf95c","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/fdbafc9d8babf95c","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727483761983,"stop":1727483775006,"duration":13023}},{"uid":"5af41c881dde2dd4","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/5af41c881dde2dd4","status":"passed","time":{"start":1727475814976,"stop":1727475828060,"duration":13084}},{"uid":"e2f0e47a92e3d442","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/e2f0e47a92e3d442","status":"passed","time":{"start":1727461079625,"stop":1727461092512,"duration":12887}},{"uid":"d9463f56d8799de4","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d9463f56d8799de4","status":"passed","time":{"start":1727461079625,"stop":1727461092512,"duration":12887}},{"uid":"b9d241939b47ccab","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b9d241939b47ccab","status":"passed","time":{"start":1727362425652,"stop":1727362438576,"duration":12924}},{"uid":"1b746183bffd379e","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/1b746183bffd379e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727454186898,"stop":1727454199935,"duration":13037}},{"uid":"6f2581180b9c99a4","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6f2581180b9c99a4","status":"passed","time":{"start":1727387097969,"stop":1727387110787,"duration":12818}},{"uid":"4b29943c0089c532","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/4b29943c0089c532","status":"passed","time":{"start":1727453286159,"stop":1727453298971,"duration":12812}},{"uid":"c0d0397bbc9b00dc","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/c0d0397bbc9b00dc","status":"passed","time":{"start":1727397309177,"stop":1727397321839,"duration":12662}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"b553f9efb106f6aa.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}