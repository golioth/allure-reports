{"uid":"7cee626447c977ba","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"590f0375d3da0823de2fcad609f6b87b","time":{"start":1727771634541,"stop":1727771729198,"duration":94657},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff91f3a510>\nproject = <golioth.golioth.Project object at 0xffff92095810>\ndevice = <golioth.golioth.Device object at 0xffff91f1a050>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727771624962,"stop":1727771624963,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727771624963,"stop":1727771624963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727771624964,"stop":1727771624965,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727771624964,"stop":1727771624964,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727771624965,"stop":1727771624965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727771624966,"stop":1727771624966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727771624967,"stop":1727771624967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727771624968,"stop":1727771624970,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727771624970,"stop":1727771625420,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727771625421,"stop":1727771626310,"duration":889},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727771626311,"stop":1727771634016,"duration":7705},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727771634017,"stop":1727771634538,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff91f3a510>\nproject = <golioth.golioth.Project object at 0xffff92095810>\ndevice = <golioth.golioth.Device object at 0xffff91f1a050>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"acad14b4fc08f6da","name":"log","source":"acad14b4fc08f6da.txt","type":"text/plain","size":20403}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727771729490,"stop":1727771729517,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727771729519,"stop":1727771729931,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727771729933,"stop":1727771729935,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727771729937,"stop":1727771729937,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"65b90a483c0b"},{"name":"thread","value":"454-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":39,"unknown":0,"total":42},"items":[{"uid":"161f827ba95d4d96","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/161f827ba95d4d96","status":"passed","time":{"start":1727770029460,"stop":1727770041971,"duration":12511}},{"uid":"50471e9efc3ac0de","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/50471e9efc3ac0de","status":"passed","time":{"start":1727765213286,"stop":1727765224869,"duration":11583}},{"uid":"615a0519b4021ba2","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/615a0519b4021ba2","status":"passed","time":{"start":1727764176417,"stop":1727764188017,"duration":11600}},{"uid":"f2cab0b4f00cd05e","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/f2cab0b4f00cd05e","status":"passed","time":{"start":1727760437045,"stop":1727760450522,"duration":13477}},{"uid":"21f93364e890c5ee","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/21f93364e890c5ee","status":"passed","time":{"start":1727744519919,"stop":1727744533550,"duration":13631}},{"uid":"9f5cab0dafd2dd1c","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/9f5cab0dafd2dd1c","status":"passed","time":{"start":1727732164923,"stop":1727732181166,"duration":16243}},{"uid":"a3fe75f9e4d1b502","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/a3fe75f9e4d1b502","status":"passed","time":{"start":1727658076908,"stop":1727658089987,"duration":13079}},{"uid":"9f0800cdfef91cb5","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/9f0800cdfef91cb5","status":"passed","time":{"start":1727571720741,"stop":1727571732892,"duration":12151}},{"uid":"1a865c3ad341d8f1","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/1a865c3ad341d8f1","status":"passed","time":{"start":1727546649220,"stop":1727546660434,"duration":11214}},{"uid":"e2829b6139747fe1","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/e2829b6139747fe1","status":"passed","time":{"start":1727545924335,"stop":1727545936466,"duration":12131}},{"uid":"12bf8e2a871f5e","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/12bf8e2a871f5e","status":"passed","time":{"start":1727544748405,"stop":1727544762152,"duration":13747}},{"uid":"1d5a69748129388d","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/1d5a69748129388d","status":"passed","time":{"start":1727484901633,"stop":1727484913819,"duration":12186}},{"uid":"cf0689244413c0f1","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/cf0689244413c0f1","status":"passed","time":{"start":1727477045035,"stop":1727477057463,"duration":12428}},{"uid":"e116b426d7567284","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/e116b426d7567284","status":"passed","time":{"start":1727464740738,"stop":1727464752849,"duration":12111}},{"uid":"be2ec624f44e11a7","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/be2ec624f44e11a7","status":"passed","time":{"start":1727462453812,"stop":1727462465056,"duration":11244}},{"uid":"861c02f5771117cf","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/861c02f5771117cf","status":"passed","time":{"start":1727456855613,"stop":1727456866941,"duration":11328}},{"uid":"45e0a6dc5a1db59","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/45e0a6dc5a1db59","status":"passed","time":{"start":1727394103788,"stop":1727394118077,"duration":14289}},{"uid":"e526bb6b98eadbc2","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/e526bb6b98eadbc2","status":"passed","time":{"start":1727455059896,"stop":1727455071888,"duration":11992}},{"uid":"9d26d0795e85a6c5","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/9d26d0795e85a6c5","status":"passed","time":{"start":1727365905790,"stop":1727365917031,"duration":11241}},{"uid":"bd01050022f16f61","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/bd01050022f16f61","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727398985070,"stop":1727399079374,"duration":94304}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"7cee626447c977ba.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}