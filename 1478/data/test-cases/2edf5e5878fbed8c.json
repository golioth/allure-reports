{"uid":"2edf5e5878fbed8c","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"39067a9d9ad5c287f2d06d8890291bed","time":{"start":1727758171769,"stop":1727758191231,"duration":19462},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f529b96b150>\ndevice = <golioth.golioth.Device object at 0x7f529b95d350>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb delete (async)\n    \n        shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n        await trio.sleep(2)\n        counter = await device.lightdb.get(\"counter\")\n        assert counter is None\n    \n        # Set and verify counter\n    \n        await counter_set_and_verify(device, 62)\n    \n        # Verify lightdb delete (sync)\n    \n>       shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Counter deleted successfully'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727758170551,"stop":1727758170552,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727758170551,"stop":1727758170551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727758170552,"stop":1727758170555,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727758170552,"stop":1727758170552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727758170552,"stop":1727758170552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727758170552,"stop":1727758170552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727758170555,"stop":1727758170555,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727758170556,"stop":1727758170556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727758170556,"stop":1727758170907,"duration":351},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727758170907,"stop":1727758171655,"duration":748},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727758171655,"stop":1727758171663,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727758171663,"stop":1727758171768,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f529b96b150>\ndevice = <golioth.golioth.Device object at 0x7f529b95d350>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb delete (async)\n    \n        shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n        await trio.sleep(2)\n        counter = await device.lightdb.get(\"counter\")\n        assert counter is None\n    \n        # Set and verify counter\n    \n        await counter_set_and_verify(device, 62)\n    \n        # Verify lightdb delete (sync)\n    \n>       shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Counter deleted successfully'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"6d9d47da81dbc32b","name":"log","source":"6d9d47da81dbc32b.txt","type":"text/plain","size":24434}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727758191464,"stop":1727758191986,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727758191987,"stop":1727758192422,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727758192429,"stop":1727758192430,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727758192431,"stop":1727758192431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 52"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e06e6b326266"},{"name":"thread","value":"64023-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":37,"unknown":0,"total":38},"items":[{"uid":"79cdbf340b075354","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/79cdbf340b075354","status":"passed","time":{"start":1727742687876,"stop":1727742700292,"duration":12416}},{"uid":"4f72d1f8f922b0f","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/4f72d1f8f922b0f","status":"passed","time":{"start":1727730248936,"stop":1727730261697,"duration":12761}},{"uid":"7ed5ec937afe9261","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/7ed5ec937afe9261","status":"passed","time":{"start":1727656188469,"stop":1727656200774,"duration":12305}},{"uid":"42e2250cf2eae51f","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/42e2250cf2eae51f","status":"passed","time":{"start":1727569886873,"stop":1727569899477,"duration":12604}},{"uid":"aafb9d0a9ea685b2","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/aafb9d0a9ea685b2","status":"passed","time":{"start":1727541152691,"stop":1727541165091,"duration":12400}},{"uid":"e57456a81651c896","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/e57456a81651c896","status":"passed","time":{"start":1727541103520,"stop":1727541116023,"duration":12503}},{"uid":"b78916256f92cb50","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/b78916256f92cb50","status":"passed","time":{"start":1727541006742,"stop":1727541019345,"duration":12603}},{"uid":"665ed2433ff0351c","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/665ed2433ff0351c","status":"passed","time":{"start":1727483295324,"stop":1727483308070,"duration":12746}},{"uid":"403311437b7d8bee","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/403311437b7d8bee","status":"passed","time":{"start":1727475360874,"stop":1727475373261,"duration":12387}},{"uid":"fa0822eb1e661d76","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/fa0822eb1e661d76","status":"passed","time":{"start":1727460651942,"stop":1727460664225,"duration":12283}},{"uid":"6c3f820a50e2620b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/6c3f820a50e2620b","status":"passed","time":{"start":1727460651942,"stop":1727460664225,"duration":12283}},{"uid":"26aa64c1e1292cd5","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/26aa64c1e1292cd5","status":"passed","time":{"start":1727359860960,"stop":1727359873690,"duration":12730}},{"uid":"fac377e375e838cb","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/fac377e375e838cb","status":"passed","time":{"start":1727380439562,"stop":1727380452150,"duration":12588}},{"uid":"9555e212d5a3c339","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/9555e212d5a3c339","status":"passed","time":{"start":1727379351416,"stop":1727379364410,"duration":12994}},{"uid":"af3fd3fcf60db587","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/af3fd3fcf60db587","status":"passed","time":{"start":1727359868274,"stop":1727359880863,"duration":12589}},{"uid":"92ca39bb172e575d","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/92ca39bb172e575d","status":"passed","time":{"start":1727396921377,"stop":1727396933784,"duration":12407}},{"uid":"5e7d8b0e143f4fda","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/5e7d8b0e143f4fda","status":"passed","time":{"start":1727380439562,"stop":1727380452150,"duration":12588}},{"uid":"c9960395b315f7f3","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/c9960395b315f7f3","status":"passed","time":{"start":1727379337440,"stop":1727379350205,"duration":12765}},{"uid":"6ad05eb2eba316dc","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6ad05eb2eba316dc","status":"passed","time":{"start":1727379351416,"stop":1727379364410,"duration":12994}},{"uid":"82b0730d5867ea0e","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/82b0730d5867ea0e","status":"passed","time":{"start":1727378589425,"stop":1727378602470,"duration":13045}}]},"tags":["native_sim_64","anyio","GitHub Actions 52","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"2edf5e5878fbed8c.json","parameterValues":["'native_sim_64'","'zephyr'"]}