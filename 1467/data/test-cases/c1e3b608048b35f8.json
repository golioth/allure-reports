{"uid":"c1e3b608048b35f8","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1727479190142,"stop":1727479283344,"duration":93202},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaafe2110>\ndevice = <golioth.golioth.Device object at 0xffffaaff8d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727479161168,"stop":1727479161169,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727479161169,"stop":1727479161169,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727479161170,"stop":1727479161170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727479161170,"stop":1727479161170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727479161171,"stop":1727479161171,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727479161171,"stop":1727479161173,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727479161174,"stop":1727479161174,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727479161175,"stop":1727479161587,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727479161175,"stop":1727479161175,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727479161587,"stop":1727479162454,"duration":867},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727479162455,"stop":1727479189025,"duration":26570},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727479189026,"stop":1727479190137,"duration":1111},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaafe2110>\ndevice = <golioth.golioth.Device object at 0xffffaaff8d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d50f03c889722017","name":"log","source":"d50f03c889722017.txt","type":"text/plain","size":16343}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727479283634,"stop":1727479283671,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727479283673,"stop":1727479284062,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727479284064,"stop":1727479284066,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727479284071,"stop":1727479284071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a0f7ed94cef2"},{"name":"thread","value":"882-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":17,"unknown":0,"total":25},"items":[{"uid":"30fe9b97c77cf223","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/30fe9b97c77cf223","status":"passed","time":{"start":1727463501376,"stop":1727463538179,"duration":36803}},{"uid":"ccdf299166f3052b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ccdf299166f3052b","status":"passed","time":{"start":1727463501376,"stop":1727463538179,"duration":36803}},{"uid":"b7d61b6137efd754","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b7d61b6137efd754","status":"passed","time":{"start":1727458986475,"stop":1727459035989,"duration":49514}},{"uid":"294777025236c242","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/294777025236c242","status":"passed","time":{"start":1727455319323,"stop":1727455351002,"duration":31679}},{"uid":"8c5910c3bf5a5f2c","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/8c5910c3bf5a5f2c","status":"passed","time":{"start":1727456734946,"stop":1727456768944,"duration":33998}},{"uid":"1431fb6ed85d96cb","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/1431fb6ed85d96cb","status":"passed","time":{"start":1727453863983,"stop":1727453895555,"duration":31572}},{"uid":"603e6fad56e7646c","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/603e6fad56e7646c","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727395637562,"stop":1727395637562,"duration":0}},{"uid":"7286e8d71b6b2739","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/7286e8d71b6b2739","status":"passed","time":{"start":1727393504966,"stop":1727393537142,"duration":32176}},{"uid":"f63ca28a04721806","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/f63ca28a04721806","status":"passed","time":{"start":1727387108236,"stop":1727387141162,"duration":32926}},{"uid":"61a9f88549e3715d","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/61a9f88549e3715d","status":"passed","time":{"start":1727384692844,"stop":1727384724592,"duration":31748}},{"uid":"6e24c63520958eaa","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/6e24c63520958eaa","status":"passed","time":{"start":1727381731956,"stop":1727381767068,"duration":35112}},{"uid":"c140aa3488ad7c5e","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/c140aa3488ad7c5e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727375861511,"stop":1727375954907,"duration":93396}},{"uid":"5c898f33927cac84","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/5c898f33927cac84","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727374558074,"stop":1727374651193,"duration":93119}},{"uid":"7d042a59b85053c8","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/7d042a59b85053c8","status":"passed","time":{"start":1727371412447,"stop":1727371446680,"duration":34233}},{"uid":"711ad5186152fe00","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/711ad5186152fe00","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727369252361,"stop":1727369345756,"duration":93395}},{"uid":"6da1fd1da53aeedc","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/6da1fd1da53aeedc","status":"passed","time":{"start":1727362343730,"stop":1727362377684,"duration":33954}},{"uid":"f52ab129252c167e","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/f52ab129252c167e","status":"passed","time":{"start":1727316651183,"stop":1727316680865,"duration":29682}},{"uid":"d13b14b5df5310ca","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/d13b14b5df5310ca","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727314019442,"stop":1727314019442,"duration":0}},{"uid":"ca8ce7e422b8452c","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/ca8ce7e422b8452c","status":"passed","time":{"start":1727307545911,"stop":1727307574727,"duration":28816}},{"uid":"9af36caf8af2acb8","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/9af36caf8af2acb8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727303237157,"stop":1727303330623,"duration":93466}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c1e3b608048b35f8.json","parameterValues":["'nrf9160dk'","'zephyr'"]}