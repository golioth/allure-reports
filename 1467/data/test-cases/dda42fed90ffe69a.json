{"uid":"dda42fed90ffe69a","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"c9ae6dc826a01d1d44d52fc2bf414310","time":{"start":1727476690157,"stop":1727476734659,"duration":44502},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb59ef1d0>\ndevice = <golioth.golioth.Device object at 0xffffb59c9210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*lightdb_observe: Counter \\\\(async\\\\)'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727476653917,"stop":1727476653917,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727476653918,"stop":1727476653918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727476653918,"stop":1727476653918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727476653919,"stop":1727476653919,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727476653919,"stop":1727476653919,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727476653920,"stop":1727476653922,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727476653923,"stop":1727476653923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727476653923,"stop":1727476653923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727476653924,"stop":1727476654337,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727476654338,"stop":1727476655203,"duration":865},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727476655204,"stop":1727476689544,"duration":34340},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727476689544,"stop":1727476690154,"duration":610},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb59ef1d0>\ndevice = <golioth.golioth.Device object at 0xffffb59c9210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*lightdb_observe: Counter \\\\(async\\\\)'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"303b30f5c7299752","name":"log","source":"303b30f5c7299752.txt","type":"text/plain","size":31465}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727476734895,"stop":1727476734933,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727476734935,"stop":1727476735354,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727476735356,"stop":1727476735358,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727476735363,"stop":1727476735363,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cfced952f1fe"},{"name":"thread","value":"399-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":27,"unknown":0,"total":29},"items":[{"uid":"9d6395ff96664634","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/9d6395ff96664634","status":"passed","time":{"start":1727462465190,"stop":1727462504450,"duration":39260}},{"uid":"93fd95a6cb04054b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/93fd95a6cb04054b","status":"passed","time":{"start":1727462465190,"stop":1727462504450,"duration":39260}},{"uid":"2b71fa11c808d406","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/2b71fa11c808d406","status":"passed","time":{"start":1727365235895,"stop":1727365275483,"duration":39588}},{"uid":"ee10a97a3c1e89ca","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/ee10a97a3c1e89ca","status":"passed","time":{"start":1727454888268,"stop":1727454927726,"duration":39458}},{"uid":"47e3eb15ca482fb0","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/47e3eb15ca482fb0","status":"passed","time":{"start":1727390465245,"stop":1727390505751,"duration":40506}},{"uid":"5728ae033d57ce33","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/5728ae033d57ce33","status":"passed","time":{"start":1727366181816,"stop":1727366220910,"duration":39094}},{"uid":"a8f385154c2c7c6a","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/a8f385154c2c7c6a","status":"passed","time":{"start":1727398644861,"stop":1727398684317,"duration":39456}},{"uid":"92f71de1b693181f","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/92f71de1b693181f","status":"passed","time":{"start":1727394807762,"stop":1727394847103,"duration":39341}},{"uid":"3be974db6d108baa","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/3be974db6d108baa","status":"passed","time":{"start":1727389903983,"stop":1727389943776,"duration":39793}},{"uid":"f0351aa0c1f887af","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/f0351aa0c1f887af","status":"passed","time":{"start":1727390465245,"stop":1727390505751,"duration":40506}},{"uid":"c390a3e15052a","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/c390a3e15052a","status":"passed","time":{"start":1727385596538,"stop":1727385635788,"duration":39250}},{"uid":"8a9c5fbefdeff5d3","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/8a9c5fbefdeff5d3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727382534025,"stop":1727382627123,"duration":93098}},{"uid":"b0cd277e8bddb68d","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/b0cd277e8bddb68d","status":"passed","time":{"start":1727380177018,"stop":1727380216818,"duration":39800}},{"uid":"7e9e0f3130dd1b80","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/7e9e0f3130dd1b80","status":"passed","time":{"start":1727375312615,"stop":1727375353021,"duration":40406}},{"uid":"6aa185d1c31a932d","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/6aa185d1c31a932d","status":"passed","time":{"start":1727372386013,"stop":1727372425069,"duration":39056}},{"uid":"ea4fbbe41d96c0e8","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/ea4fbbe41d96c0e8","status":"passed","time":{"start":1727369591550,"stop":1727369630898,"duration":39348}},{"uid":"8cbde590c54b9bb8","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/8cbde590c54b9bb8","status":"passed","time":{"start":1727365235895,"stop":1727365275483,"duration":39588}},{"uid":"485eba15aa61a143","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/485eba15aa61a143","status":"passed","time":{"start":1727366181816,"stop":1727366220910,"duration":39094}},{"uid":"b047a1aaa689cff7","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/b047a1aaa689cff7","status":"passed","time":{"start":1727360650609,"stop":1727360690359,"duration":39750}},{"uid":"b45af39dd0fc776e","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/b45af39dd0fc776e","status":"passed","time":{"start":1727315074694,"stop":1727315114244,"duration":39550}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"dda42fed90ffe69a.json","parameterValues":["'rak5010'","'zephyr'"]}