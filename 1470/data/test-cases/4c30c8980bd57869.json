{"uid":"4c30c8980bd57869","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1727548132865,"stop":1727548225644,"duration":92779},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7d06d1d0>\ndevice = <golioth.golioth.Device object at 0xffff7d06fc90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727548102421,"stop":1727548102421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727548102422,"stop":1727548102422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727548102422,"stop":1727548102422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727548102423,"stop":1727548102423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727548102424,"stop":1727548102426,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727548102424,"stop":1727548102424,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727548102427,"stop":1727548102428,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727548102427,"stop":1727548102427,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727548102428,"stop":1727548102965,"duration":537},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727548102965,"stop":1727548103769,"duration":804},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727548103769,"stop":1727548131762,"duration":27993},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727548131763,"stop":1727548132862,"duration":1099},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7d06d1d0>\ndevice = <golioth.golioth.Device object at 0xffff7d06fc90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"62feae204c41273a","name":"log","source":"62feae204c41273a.txt","type":"text/plain","size":14175}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727548225915,"stop":1727548225961,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727548225962,"stop":1727548226335,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727548226337,"stop":1727548226339,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727548226344,"stop":1727548226344,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"4a8c8ba38ec2"},{"name":"thread","value":"387-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":5,"skipped":0,"passed":23,"unknown":0,"total":29},"items":[{"uid":"4b8d6da780925177","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/4b8d6da780925177","status":"passed","time":{"start":1727485766502,"stop":1727485796954,"duration":30452}},{"uid":"1b2ce4b633068047","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/1b2ce4b633068047","status":"passed","time":{"start":1727478049245,"stop":1727478091798,"duration":42553}},{"uid":"3708bbedffeeb314","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/3708bbedffeeb314","status":"passed","time":{"start":1727462485012,"stop":1727462506704,"duration":21692}},{"uid":"9a1bd9668eb44f57","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/9a1bd9668eb44f57","status":"passed","time":{"start":1727462485012,"stop":1727462506704,"duration":21692}},{"uid":"bd52dc99020ef1e1","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/bd52dc99020ef1e1","status":"passed","time":{"start":1727457737945,"stop":1727457775893,"duration":37948}},{"uid":"c013661401abf931","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/c013661401abf931","status":"passed","time":{"start":1727454418100,"stop":1727454439887,"duration":21787}},{"uid":"a16db57f3e928d30","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/a16db57f3e928d30","status":"passed","time":{"start":1727455794117,"stop":1727455818499,"duration":24382}},{"uid":"864726b322f75ff9","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/864726b322f75ff9","status":"passed","time":{"start":1727452952626,"stop":1727452974281,"duration":21655}},{"uid":"19880bb0275ad8bc","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/19880bb0275ad8bc","status":"passed","time":{"start":1727399720099,"stop":1727399790635,"duration":70536}},{"uid":"52eb9446a0cf84c","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/52eb9446a0cf84c","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 2 == 0\n +  where 2 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70090>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70110>])","time":{"start":1727394633997,"stop":1727394658613,"duration":24616}},{"uid":"662f316d10e92521","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/662f316d10e92521","status":"passed","time":{"start":1727392635647,"stop":1727392655061,"duration":19414}},{"uid":"49beeb71c2bb34f4","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/49beeb71c2bb34f4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727391757412,"stop":1727391850224,"duration":92812}},{"uid":"51f53bdd45784ae8","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/51f53bdd45784ae8","status":"passed","time":{"start":1727386097736,"stop":1727386120068,"duration":22332}},{"uid":"73a5f399eaa9e29b","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/73a5f399eaa9e29b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727383622000,"stop":1727383714858,"duration":92858}},{"uid":"1dde43b49754459","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/1dde43b49754459","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727380729017,"stop":1727380821931,"duration":92914}},{"uid":"488a54b0652ba2ab","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/488a54b0652ba2ab","status":"passed","time":{"start":1727374787781,"stop":1727374810081,"duration":22300}},{"uid":"113c5ff21c95e2c8","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/113c5ff21c95e2c8","status":"passed","time":{"start":1727373157765,"stop":1727373188440,"duration":30675}},{"uid":"8e7fce72432f8d96","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/8e7fce72432f8d96","status":"passed","time":{"start":1727370534692,"stop":1727370556157,"duration":21465}},{"uid":"598611a5347df54f","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/598611a5347df54f","status":"passed","time":{"start":1727368021498,"stop":1727368043590,"duration":22092}},{"uid":"3f5c5ee9877bb7fc","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/3f5c5ee9877bb7fc","status":"passed","time":{"start":1727361561662,"stop":1727361583836,"duration":22174}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4c30c8980bd57869.json","parameterValues":["'nrf9160dk'","'zephyr'"]}