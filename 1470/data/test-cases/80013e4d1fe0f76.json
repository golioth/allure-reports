{"uid":"80013e4d1fe0f76","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1727541472730,"stop":1727541486120,"duration":13390},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8a9f7590>\ndevice = <golioth.golioth.Device object at 0xffff8a9d0c50>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8a9d0c50>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727541403085,"stop":1727541403085,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727541403086,"stop":1727541403086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727541403087,"stop":1727541403087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727541403088,"stop":1727541403089,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727541403089,"stop":1727541403089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727541403090,"stop":1727541403090,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727541403091,"stop":1727541403091,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727541403091,"stop":1727541403092,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727541403092,"stop":1727541403092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727541403092,"stop":1727541403092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727541403093,"stop":1727541403093,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727541403093,"stop":1727541403093,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727541403094,"stop":1727541403521,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727541403522,"stop":1727541452800,"duration":49278},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727541452802,"stop":1727541453827,"duration":1025},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727541453828,"stop":1727541467068,"duration":13240},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8a9f7590>\ndevice = <golioth.golioth.Device object at 0xffff8a9d0c50>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8a9d0c50>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"5f718d207237bef8","name":"stdout","source":"5f718d207237bef8.txt","type":"text/plain","size":3999}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727541621592,"stop":1727541621593,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727541621598,"stop":1727541622108,"duration":510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727541622110,"stop":1727541622115,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727541622117,"stop":1727541622120,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"2053a4d54b05"},{"name":"thread","value":"265-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":23,"unknown":0,"total":32},"items":[{"uid":"fdbafc9d8babf95c","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/fdbafc9d8babf95c","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727483761983,"stop":1727483775006,"duration":13023}},{"uid":"5af41c881dde2dd4","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/5af41c881dde2dd4","status":"passed","time":{"start":1727475814976,"stop":1727475828060,"duration":13084}},{"uid":"e2f0e47a92e3d442","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/e2f0e47a92e3d442","status":"passed","time":{"start":1727461079625,"stop":1727461092512,"duration":12887}},{"uid":"d9463f56d8799de4","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d9463f56d8799de4","status":"passed","time":{"start":1727461079625,"stop":1727461092512,"duration":12887}},{"uid":"b9d241939b47ccab","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b9d241939b47ccab","status":"passed","time":{"start":1727362425652,"stop":1727362438576,"duration":12924}},{"uid":"1b746183bffd379e","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/1b746183bffd379e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727454186898,"stop":1727454199935,"duration":13037}},{"uid":"6f2581180b9c99a4","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6f2581180b9c99a4","status":"passed","time":{"start":1727387097969,"stop":1727387110787,"duration":12818}},{"uid":"4b29943c0089c532","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/4b29943c0089c532","status":"passed","time":{"start":1727453286159,"stop":1727453298971,"duration":12812}},{"uid":"c0d0397bbc9b00dc","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/c0d0397bbc9b00dc","status":"passed","time":{"start":1727397309177,"stop":1727397321839,"duration":12662}},{"uid":"bd468c22fcea1f27","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/bd468c22fcea1f27","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727392853692,"stop":1727392866593,"duration":12901}},{"uid":"598a6ea18b8e35fd","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/598a6ea18b8e35fd","status":"passed","time":{"start":1727386790269,"stop":1727386802918,"duration":12649}},{"uid":"3645cdde43c8f1ce","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/3645cdde43c8f1ce","status":"passed","time":{"start":1727387097969,"stop":1727387110787,"duration":12818}},{"uid":"97f2c603d64c25e6","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/97f2c603d64c25e6","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727384269393,"stop":1727384282212,"duration":12819}},{"uid":"e0dd968743d6da5b","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/e0dd968743d6da5b","status":"passed","time":{"start":1727381359329,"stop":1727381372127,"duration":12798}},{"uid":"3530431c75d192ca","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/3530431c75d192ca","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727378462358,"stop":1727378475749,"duration":13391}},{"uid":"15cea99dcee72c4","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/15cea99dcee72c4","status":"passed","time":{"start":1727374649355,"stop":1727374662249,"duration":12894}},{"uid":"c0d9b83cea8f2e15","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/c0d9b83cea8f2e15","status":"passed","time":{"start":1727370674941,"stop":1727370687826,"duration":12885}},{"uid":"7ab5d75724dc210","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/7ab5d75724dc210","status":"passed","time":{"start":1727363317763,"stop":1727363330621,"duration":12858}},{"uid":"b76fb5a4e498aaec","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b76fb5a4e498aaec","status":"passed","time":{"start":1727362425652,"stop":1727362438576,"duration":12924}},{"uid":"fbb9298cf4c8f4f4","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/fbb9298cf4c8f4f4","status":"passed","time":{"start":1727362452612,"stop":1727362465365,"duration":12753}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"80013e4d1fe0f76.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}