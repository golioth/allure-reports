{"uid":"1d6a84185d9b57d","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6fabbbcd9afd469e2e0bf8673f87e50e","time":{"start":1727544639905,"stop":1727544733864,"duration":93959},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb4639bd0>\ndevice = <golioth.golioth.Device object at 0xffffb4634b50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727544629772,"stop":1727544629772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727544629772,"stop":1727544629772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727544629773,"stop":1727544629774,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727544629773,"stop":1727544629773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727544629774,"stop":1727544629774,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727544629775,"stop":1727544629777,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727544629777,"stop":1727544629778,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727544629778,"stop":1727544629778,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727544629779,"stop":1727544630253,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727544630253,"stop":1727544631522,"duration":1269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727544631523,"stop":1727544639354,"duration":7831},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727544639355,"stop":1727544639902,"duration":547},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb4639bd0>\ndevice = <golioth.golioth.Device object at 0xffffb4634b50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c40c970e05534ddf","name":"log","source":"c40c970e05534ddf.txt","type":"text/plain","size":18308}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727544734156,"stop":1727544734339,"duration":183},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727544734341,"stop":1727544734903,"duration":562},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727544734905,"stop":1727544734908,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727544734912,"stop":1727544734913,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9d6f02f97941"},{"name":"thread","value":"420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":27,"unknown":0,"total":31},"items":[{"uid":"2c6858716339da5c","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/2c6858716339da5c","status":"passed","time":{"start":1727484872656,"stop":1727484888985,"duration":16329}},{"uid":"ea28ad87ed4094f","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/ea28ad87ed4094f","status":"passed","time":{"start":1727477016409,"stop":1727477031721,"duration":15312}},{"uid":"310ba3a4aa34e371","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/310ba3a4aa34e371","status":"passed","time":{"start":1727464712182,"stop":1727464727532,"duration":15350}},{"uid":"3551ce66ea8ff1bd","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/3551ce66ea8ff1bd","status":"passed","time":{"start":1727462425683,"stop":1727462440876,"duration":15193}},{"uid":"ae75b426ed6ca162","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/ae75b426ed6ca162","status":"passed","time":{"start":1727456827878,"stop":1727456843111,"duration":15233}},{"uid":"5ee7727be3a4e9ea","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/5ee7727be3a4e9ea","status":"passed","time":{"start":1727394074080,"stop":1727394090364,"duration":16284}},{"uid":"3d81bb5eecf5fc14","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/3d81bb5eecf5fc14","status":"passed","time":{"start":1727455030306,"stop":1727455046639,"duration":16333}},{"uid":"d6b68a47028b87ba","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/d6b68a47028b87ba","status":"passed","time":{"start":1727365878047,"stop":1727365893348,"duration":15301}},{"uid":"1e394b09d4b6c772","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/1e394b09d4b6c772","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727398878069,"stop":1727398971586,"duration":93517}},{"uid":"b24184093cffd2b","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/b24184093cffd2b","status":"passed","time":{"start":1727394074080,"stop":1727394090364,"duration":16284}},{"uid":"7db43b6d48387bc7","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/7db43b6d48387bc7","status":"passed","time":{"start":1727391107260,"stop":1727391123678,"duration":16418}},{"uid":"96ce225367321932","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/96ce225367321932","status":"passed","time":{"start":1727390813114,"stop":1727390828428,"duration":15314}},{"uid":"a5bc7697d1915a30","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/a5bc7697d1915a30","status":"passed","time":{"start":1727385249513,"stop":1727385264869,"duration":15356}},{"uid":"1cd53c6f149b404","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/1cd53c6f149b404","status":"passed","time":{"start":1727383017352,"stop":1727383033582,"duration":16230}},{"uid":"8b8db17e62b56856","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/8b8db17e62b56856","status":"passed","time":{"start":1727380120392,"stop":1727380137901,"duration":17509}},{"uid":"ac445f7a6d937e","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/ac445f7a6d937e","status":"passed","time":{"start":1727374067203,"stop":1727374083977,"duration":16774}},{"uid":"6e328401068c974","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/6e328401068c974","status":"passed","time":{"start":1727372775205,"stop":1727372791140,"duration":15935}},{"uid":"bccbabd7aa11c2a2","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/bccbabd7aa11c2a2","status":"passed","time":{"start":1727369724615,"stop":1727369738386,"duration":13771}},{"uid":"e91e365e3a07aecf","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/e91e365e3a07aecf","status":"passed","time":{"start":1727365392437,"stop":1727365407688,"duration":15251}},{"uid":"45f73ad493db8e03","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/45f73ad493db8e03","status":"passed","time":{"start":1727365878047,"stop":1727365893348,"duration":15301}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"1d6a84185d9b57d.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}