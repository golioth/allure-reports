{"uid":"cd6dd6e396bdd9d","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a7312cf31d6314ecf7ffd5a0a0af0ddc","time":{"start":1727546142025,"stop":1727546235102,"duration":93077},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff873b2450>\ndevice = <golioth.golioth.Device object at 0xffff873ccf50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727546126215,"stop":1727546126215,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727546126216,"stop":1727546126217,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727546126216,"stop":1727546126216,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727546126217,"stop":1727546126217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727546126218,"stop":1727546126220,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727546126218,"stop":1727546126218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727546126221,"stop":1727546126222,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727546126221,"stop":1727546126221,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727546126222,"stop":1727546126654,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727546126654,"stop":1727546127548,"duration":894},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727546127548,"stop":1727546140995,"duration":13447},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727546140995,"stop":1727546142022,"duration":1027},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff873b2450>\ndevice = <golioth.golioth.Device object at 0xffff873ccf50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"83bfea8891288e86","name":"log","source":"83bfea8891288e86.txt","type":"text/plain","size":17062}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727546235465,"stop":1727546235512,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727546235514,"stop":1727546235896,"duration":382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727546235898,"stop":1727546235900,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727546235905,"stop":1727546235906,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"04053caf41a4"},{"name":"thread","value":"540-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":27,"unknown":0,"total":31},"items":[{"uid":"747ba2ed89e253de","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/747ba2ed89e253de","status":"passed","time":{"start":1727485735515,"stop":1727485763784,"duration":28269}},{"uid":"aff4e0221ac577d1","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/aff4e0221ac577d1","status":"passed","time":{"start":1727477748797,"stop":1727477775792,"duration":26995}},{"uid":"47dbeca79860fc3","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/47dbeca79860fc3","status":"passed","time":{"start":1727464116735,"stop":1727464141814,"duration":25079}},{"uid":"ba1cc89eb404bf3e","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ba1cc89eb404bf3e","status":"passed","time":{"start":1727464116735,"stop":1727464141814,"duration":25079}},{"uid":"386921399a40b06b","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/386921399a40b06b","status":"passed","time":{"start":1727460374471,"stop":1727460401737,"duration":27266}},{"uid":"41ca1a13330da4c8","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/41ca1a13330da4c8","status":"passed","time":{"start":1727459357825,"stop":1727459387132,"duration":29307}},{"uid":"867e057684a84516","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/867e057684a84516","status":"passed","time":{"start":1727460000802,"stop":1727460029386,"duration":28584}},{"uid":"ceba8bf4315fd8b","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/ceba8bf4315fd8b","status":"passed","time":{"start":1727459502471,"stop":1727459528656,"duration":26185}},{"uid":"13196ad760c51076","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/13196ad760c51076","status":"passed","time":{"start":1727399874188,"stop":1727399937381,"duration":63193}},{"uid":"6ecf6e3c3bb053b3","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/6ecf6e3c3bb053b3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727395241922,"stop":1727395264997,"duration":23075}},{"uid":"6b0bd533f43a9dd","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/6b0bd533f43a9dd","status":"passed","time":{"start":1727391474031,"stop":1727391500047,"duration":26016}},{"uid":"c7e5b3986806819c","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/c7e5b3986806819c","status":"passed","time":{"start":1727392339081,"stop":1727392364118,"duration":25037}},{"uid":"d00b4e9f6bff723","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/d00b4e9f6bff723","status":"passed","time":{"start":1727386258558,"stop":1727386283501,"duration":24943}},{"uid":"66df7d5cd0f6ab95","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/66df7d5cd0f6ab95","status":"passed","time":{"start":1727383617456,"stop":1727383644771,"duration":27315}},{"uid":"cbc6e1a9aec12630","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/cbc6e1a9aec12630","status":"passed","time":{"start":1727380522308,"stop":1727380549582,"duration":27274}},{"uid":"3f9d3ed46f607321","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/3f9d3ed46f607321","status":"passed","time":{"start":1727378863041,"stop":1727378889175,"duration":26134}},{"uid":"6493211f4e1a6400","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/6493211f4e1a6400","status":"passed","time":{"start":1727373333664,"stop":1727373363664,"duration":30000}},{"uid":"426d97ffd82443ac","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/426d97ffd82443ac","status":"passed","time":{"start":1727370245205,"stop":1727370270177,"duration":24972}},{"uid":"954efee1cc796046","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/954efee1cc796046","status":"passed","time":{"start":1727366750621,"stop":1727366777696,"duration":27075}},{"uid":"2828eea851deccca","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/2828eea851deccca","status":"passed","time":{"start":1727367457289,"stop":1727367484607,"duration":27318}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"cd6dd6e396bdd9d.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}