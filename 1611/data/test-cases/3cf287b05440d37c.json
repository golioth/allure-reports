{"uid":"3cf287b05440d37c","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1728346328001,"stop":1728346352534,"duration":24533},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbcb52290>\ndevice = <golioth.golioth.Device object at 0xffffbcb690d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728346297939,"stop":1728346297939,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728346297940,"stop":1728346297940,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728346297940,"stop":1728346297940,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728346297941,"stop":1728346297941,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728346297941,"stop":1728346297942,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728346297942,"stop":1728346297944,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728346297945,"stop":1728346297946,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728346297945,"stop":1728346297945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728346297946,"stop":1728346298476,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728346298476,"stop":1728346299608,"duration":1132},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728346299609,"stop":1728346326918,"duration":27309},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728346326919,"stop":1728346327998,"duration":1079},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbcb52290>\ndevice = <golioth.golioth.Device object at 0xffffbcb690d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"5ea0928fa9c69ee4","name":"log","source":"5ea0928fa9c69ee4.txt","type":"text/plain","size":21387}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728346352871,"stop":1728346353028,"duration":157},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728346353030,"stop":1728346353450,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728346353452,"stop":1728346353454,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728346353459,"stop":1728346353460,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e177607eed20"},{"name":"thread","value":"911-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":21,"skipped":0,"passed":79,"unknown":0,"total":103},"items":[{"uid":"a39367a2e3e7d106","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/a39367a2e3e7d106","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728338795617,"stop":1728338817924,"duration":22307}},{"uid":"dbc33f3062fc1461","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/dbc33f3062fc1461","status":"passed","time":{"start":1728319949348,"stop":1728319979447,"duration":30099}},{"uid":"28fde0103dac6b85","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/28fde0103dac6b85","status":"passed","time":{"start":1728322594961,"stop":1728322625124,"duration":30163}},{"uid":"a1308a893f3bafd2","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/a1308a893f3bafd2","status":"passed","time":{"start":1728322594961,"stop":1728322625124,"duration":30163}},{"uid":"1d187b3e18d07dd6","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/1d187b3e18d07dd6","status":"passed","time":{"start":1728319949348,"stop":1728319979447,"duration":30099}},{"uid":"3a5a3958b3fccb37","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/3a5a3958b3fccb37","status":"passed","time":{"start":1728316025350,"stop":1728316056440,"duration":31090}},{"uid":"2c06de1221ed78c4","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/2c06de1221ed78c4","status":"passed","time":{"start":1728307759776,"stop":1728307840155,"duration":80379}},{"uid":"6ad49398b1e17675","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/6ad49398b1e17675","status":"passed","time":{"start":1728130754610,"stop":1728130781396,"duration":26786}},{"uid":"97d5b7fcac545f8f","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/97d5b7fcac545f8f","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1728264612995,"stop":1728264612995,"duration":0}},{"uid":"8fc03691ade5012d","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/8fc03691ade5012d","status":"passed","time":{"start":1728178603422,"stop":1728178630539,"duration":27117}},{"uid":"151fe97094fe1160","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/151fe97094fe1160","status":"passed","time":{"start":1728135567034,"stop":1728135599021,"duration":31987}},{"uid":"fbbb9b019244dd88","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/fbbb9b019244dd88","status":"passed","time":{"start":1728134912847,"stop":1728134941908,"duration":29061}},{"uid":"686227bccdcd36dd","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/686227bccdcd36dd","status":"passed","time":{"start":1728130754610,"stop":1728130781396,"duration":26786}},{"uid":"84cc7718d763d7e5","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/84cc7718d763d7e5","status":"passed","time":{"start":1728128757780,"stop":1728128787549,"duration":29769}},{"uid":"90fec8ba8d669664","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/90fec8ba8d669664","status":"passed","time":{"start":1728053259582,"stop":1728053290897,"duration":31315}},{"uid":"eb6cc01fb0321ba9","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/eb6cc01fb0321ba9","status":"passed","time":{"start":1728121289700,"stop":1728121320726,"duration":31026}},{"uid":"e0e5255b85aa6e65","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/e0e5255b85aa6e65","status":"passed","time":{"start":1728091255513,"stop":1728091282781,"duration":27268}},{"uid":"86b290261ffa1116","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/86b290261ffa1116","status":"passed","time":{"start":1728083968767,"stop":1728084022391,"duration":53624}},{"uid":"aa4538ef67e525f6","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/aa4538ef67e525f6","status":"passed","time":{"start":1728076716756,"stop":1728076744081,"duration":27325}},{"uid":"4036052a944a8f17","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/4036052a944a8f17","status":"passed","time":{"start":1728074086674,"stop":1728074113400,"duration":26726}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"3cf287b05440d37c.json","parameterValues":["'nrf9160dk'","'zephyr'"]}