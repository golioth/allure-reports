{"uid":"52d919f1f59c4127","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1728176859058,"stop":1728176971786,"duration":112728},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb7173bd0>\ndevice = <golioth.golioth.Device object at 0xffffb7196410>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728176831679,"stop":1728176831679,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728176831680,"stop":1728176831680,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728176831680,"stop":1728176831680,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728176831681,"stop":1728176831681,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728176831681,"stop":1728176831681,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728176831682,"stop":1728176831685,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728176831685,"stop":1728176831686,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728176831686,"stop":1728176831686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728176831687,"stop":1728176832111,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728176832112,"stop":1728176832915,"duration":803},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728176832916,"stop":1728176855802,"duration":22886},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728176855803,"stop":1728176859050,"duration":3247},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb7173bd0>\ndevice = <golioth.golioth.Device object at 0xffffb7196410>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"93bc035a53bc9be3","name":"log","source":"93bc035a53bc9be3.txt","type":"text/plain","size":14157}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728176972030,"stop":1728176972071,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728176972073,"stop":1728176972442,"duration":369},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728176972444,"stop":1728176972447,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728176972451,"stop":1728176972452,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"62665ffae060"},{"name":"thread","value":"985-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f7ce2818ae1f0928","status":"passed","time":{"start":1728176800344,"stop":1728176827789,"duration":27445}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":99,"unknown":0,"total":104},"items":[{"uid":"2d8ec6e9fd8f3d16","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/2d8ec6e9fd8f3d16","status":"passed","time":{"start":1728132288272,"stop":1728132312455,"duration":24183}},{"uid":"42fd609f008734c6","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/42fd609f008734c6","status":"passed","time":{"start":1728130979520,"stop":1728131003413,"duration":23893}},{"uid":"b15cbed0df23c064","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/b15cbed0df23c064","status":"passed","time":{"start":1728125681930,"stop":1728125705612,"duration":23682}},{"uid":"9d275d805ba9cee3","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/9d275d805ba9cee3","status":"passed","time":{"start":1728124639561,"stop":1728124662859,"duration":23298}},{"uid":"d2992ea0f8652dc9","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/d2992ea0f8652dc9","status":"passed","time":{"start":1728121640650,"stop":1728121664365,"duration":23715}},{"uid":"61f9fca8a8de2883","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/61f9fca8a8de2883","status":"passed","time":{"start":1728121177853,"stop":1728121201117,"duration":23264}},{"uid":"5137022ed0362f17","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/5137022ed0362f17","status":"passed","time":{"start":1728089848208,"stop":1728089872073,"duration":23865}},{"uid":"66f6f10b0e785174","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/66f6f10b0e785174","status":"passed","time":{"start":1728082361861,"stop":1728082385830,"duration":23969}},{"uid":"7c1c1aa747ce0409","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/7c1c1aa747ce0409","status":"passed","time":{"start":1728075869181,"stop":1728075893208,"duration":24027}},{"uid":"bac4f89d27aa9de8","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/bac4f89d27aa9de8","status":"passed","time":{"start":1728072728165,"stop":1728072751922,"duration":23757}},{"uid":"785de9d59c5f9446","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/785de9d59c5f9446","status":"passed","time":{"start":1728068917307,"stop":1728068940691,"duration":23384}},{"uid":"df7180a436758759","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/df7180a436758759","status":"passed","time":{"start":1728070147021,"stop":1728070170436,"duration":23415}},{"uid":"13874ce48751a68f","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/13874ce48751a68f","status":"passed","time":{"start":1728064912818,"stop":1728064936809,"duration":23991}},{"uid":"a075d5a2ffa74f75","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/a075d5a2ffa74f75","status":"passed","time":{"start":1728066869485,"stop":1728066893452,"duration":23967}},{"uid":"eec15c8f77eac912","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/eec15c8f77eac912","status":"passed","time":{"start":1728056363010,"stop":1728056386980,"duration":23970}},{"uid":"d6ff7767d16902ad","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/d6ff7767d16902ad","status":"passed","time":{"start":1728055835978,"stop":1728055859657,"duration":23679}},{"uid":"9aeae9d45285cb41","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/9aeae9d45285cb41","status":"passed","time":{"start":1728050518165,"stop":1728050542128,"duration":23963}},{"uid":"aa5ede2202fddb1a","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/aa5ede2202fddb1a","status":"passed","time":{"start":1728036941794,"stop":1728036965810,"duration":24016}},{"uid":"1be292e4cadd26fb","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/1be292e4cadd26fb","status":"passed","time":{"start":1728031498546,"stop":1728031522530,"duration":23984}},{"uid":"7b3c9409be6736db","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/7b3c9409be6736db","status":"passed","time":{"start":1728028665060,"stop":1728028692705,"duration":27645}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"52d919f1f59c4127.json","parameterValues":["'nrf52840dk'","'zephyr'"]}