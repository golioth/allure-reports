{"uid":"795bdbbbbdb215af","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"107219ae297537605b8b92c8950f3c78","time":{"start":1728176670965,"stop":1728176763849,"duration":92884},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87762610>\ndevice = <golioth.golioth.Device object at 0xffff877548d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728176661042,"stop":1728176661042,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728176661042,"stop":1728176661042,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728176661043,"stop":1728176661044,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728176661043,"stop":1728176661043,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728176661044,"stop":1728176661044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728176661045,"stop":1728176661047,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728176661047,"stop":1728176661048,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728176661048,"stop":1728176661048,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728176661049,"stop":1728176661504,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728176661504,"stop":1728176662533,"duration":1029},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728176662534,"stop":1728176670383,"duration":7849},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728176670383,"stop":1728176670962,"duration":579},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87762610>\ndevice = <golioth.golioth.Device object at 0xffff877548d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f8cbde356e3e4167","name":"log","source":"f8cbde356e3e4167.txt","type":"text/plain","size":15048}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728176764197,"stop":1728176764397,"duration":200},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728176764399,"stop":1728176764813,"duration":414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728176764815,"stop":1728176764817,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728176764822,"stop":1728176764823,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"500e3d5c9a50"},{"name":"thread","value":"467-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":15,"skipped":0,"passed":84,"unknown":0,"total":100},"items":[{"uid":"541d3f45163a48df","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/541d3f45163a48df","status":"passed","time":{"start":1728133606992,"stop":1728133612610,"duration":5618}},{"uid":"29030b9f1719e56","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/29030b9f1719e56","status":"passed","time":{"start":1728130472007,"stop":1728130482343,"duration":10336}},{"uid":"587b4fde10597795","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/587b4fde10597795","status":"passed","time":{"start":1728125818404,"stop":1728125848836,"duration":30432}},{"uid":"3758548c585ec543","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/3758548c585ec543","status":"passed","time":{"start":1728125109306,"stop":1728125122826,"duration":13520}},{"uid":"57a46d94b603e8d8","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/57a46d94b603e8d8","status":"passed","time":{"start":1728059142234,"stop":1728059153306,"duration":11072}},{"uid":"7a79ae9d5956b4e2","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/7a79ae9d5956b4e2","status":"passed","time":{"start":1728059400918,"stop":1728059411606,"duration":10688}},{"uid":"e0637c8a49e480f0","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/e0637c8a49e480f0","status":"passed","time":{"start":1728089997195,"stop":1728090008220,"duration":11025}},{"uid":"678c2dacde0be9d0","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/678c2dacde0be9d0","status":"passed","time":{"start":1728081832651,"stop":1728081843414,"duration":10763}},{"uid":"8cdad6b1656e417c","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/8cdad6b1656e417c","status":"passed","time":{"start":1728075354563,"stop":1728075365332,"duration":10769}},{"uid":"b6e8b121f065af06","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/b6e8b121f065af06","status":"passed","time":{"start":1728073158945,"stop":1728073168901,"duration":9956}},{"uid":"bbfe0ee9375a5be0","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/bbfe0ee9375a5be0","status":"passed","time":{"start":1728068905250,"stop":1728068910612,"duration":5362}},{"uid":"ecf285427178a8f","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/ecf285427178a8f","status":"passed","time":{"start":1728059142234,"stop":1728059153306,"duration":11072}},{"uid":"b507d61465f34e32","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/b507d61465f34e32","status":"passed","time":{"start":1728059400918,"stop":1728059411606,"duration":10688}},{"uid":"58890be12082dea9","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/58890be12082dea9","status":"passed","time":{"start":1728066023553,"stop":1728066033303,"duration":9750}},{"uid":"82eebf6b99e875bb","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/82eebf6b99e875bb","status":"passed","time":{"start":1728031920691,"stop":1728031931442,"duration":10751}},{"uid":"3670c16e678ec5ec","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/3670c16e678ec5ec","status":"passed","time":{"start":1728054874416,"stop":1728054885137,"duration":10721}},{"uid":"7140bc3ea4de7a35","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/7140bc3ea4de7a35","status":"passed","time":{"start":1728050015268,"stop":1728050025003,"duration":9735}},{"uid":"c931e98f7c5a3bd6","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/c931e98f7c5a3bd6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728035857377,"stop":1728035950125,"duration":92748}},{"uid":"f2540fbaa6b83845","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/f2540fbaa6b83845","status":"passed","time":{"start":1728031920691,"stop":1728031931442,"duration":10751}},{"uid":"c9ce337fb4e52767","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/c9ce337fb4e52767","status":"passed","time":{"start":1728028601331,"stop":1728028608791,"duration":7460}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"795bdbbbbdb215af.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}