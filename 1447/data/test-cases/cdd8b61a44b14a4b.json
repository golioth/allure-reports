{"uid":"cdd8b61a44b14a4b","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"1c3f2c0d9c38a2f03a05e8ca5e7158fa","time":{"start":1727378562513,"stop":1727378575319,"duration":12806},"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffab5ba710>\ndevice = <golioth.golioth.Device object at 0xffffab45f590>\nproject = <golioth.golioth.Project object at 0xffffab3e9690>\nreleases = {'test_blocks': Release <66f5b4786c7454038ba9d37c, release_tags=[], device_tags=['66f5b4776c7454038ba9d378'], artifact..., release_tags=[], device_tags=['66f5b4776c7454038ba9d378'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727378493372,"stop":1727378493373,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727378493373,"stop":1727378493373,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727378493374,"stop":1727378493374,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727378493375,"stop":1727378493375,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727378493376,"stop":1727378493377,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727378493376,"stop":1727378493376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727378493377,"stop":1727378493377,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727378493377,"stop":1727378493378,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727378493378,"stop":1727378493378,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727378493378,"stop":1727378493378,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727378493379,"stop":1727378493379,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727378493379,"stop":1727378493380,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727378493380,"stop":1727378544837,"duration":51457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727378544839,"stop":1727378545328,"duration":489},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727378545329,"stop":1727378546145,"duration":816},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727378546145,"stop":1727378550415,"duration":4270},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1727378550417,"stop":1727378550882,"duration":465},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1727378550882,"stop":1727378551642,"duration":760},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1727378551642,"stop":1727378553187,"duration":1545},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1727378562510,"stop":1727378562510,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffab5ba710>\ndevice = <golioth.golioth.Device object at 0xffffab45f590>\nproject = <golioth.golioth.Project object at 0xffffab3e9690>\nreleases = {'test_blocks': Release <66f5b4786c7454038ba9d37c, release_tags=[], device_tags=['66f5b4776c7454038ba9d378'], artifact..., release_tags=[], device_tags=['66f5b4776c7454038ba9d378'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","steps":[],"attachments":[{"uid":"9225571eb6fe6eb4","name":"stdout","source":"9225571eb6fe6eb4.txt","type":"text/plain","size":804}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1727378575362,"stop":1727378576207,"duration":845},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1727378576209,"stop":1727378577642,"duration":1433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1727378577644,"stop":1727378578413,"duration":769},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1727378578415,"stop":1727378578415,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1727378578417,"stop":1727378578417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727378578419,"stop":1727378578847,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727378578850,"stop":1727378578850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727378578852,"stop":1727378578855,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"dba4d013165e"},{"name":"thread","value":"248-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":4,"skipped":0,"passed":8,"unknown":0,"total":16},"items":[{"uid":"190a722bd2adb533","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/190a722bd2adb533","status":"passed","time":{"start":1727373855519,"stop":1727373935850,"duration":80331}},{"uid":"eb03106fde6e4955","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/eb03106fde6e4955","status":"passed","time":{"start":1727370690086,"stop":1727370767490,"duration":77404}},{"uid":"6dab3e8df8bba6c5","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/6dab3e8df8bba6c5","status":"passed","time":{"start":1727363858775,"stop":1727363939319,"duration":80544}},{"uid":"ea9d4567317c389a","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/ea9d4567317c389a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727361914343,"stop":1727361934713,"duration":20370}},{"uid":"8d60019c094e547","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/8d60019c094e547","status":"passed","time":{"start":1727362800053,"stop":1727362877009,"duration":76956}},{"uid":"a4ed5a4f2005c706","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/a4ed5a4f2005c706","status":"passed","time":{"start":1727359173987,"stop":1727359250743,"duration":76756}},{"uid":"8781709252d99d18","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/8781709252d99d18","status":"passed","time":{"start":1727313349426,"stop":1727313427118,"duration":77692}},{"uid":"abb47e5291797ce3","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/abb47e5291797ce3","status":"passed","time":{"start":1727310713770,"stop":1727310790947,"duration":77177}},{"uid":"ecdd84ab1bdbb76f","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/ecdd84ab1bdbb76f","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727306943889,"stop":1727306943889,"duration":0}},{"uid":"5c618f5e82f7ffe7","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/5c618f5e82f7ffe7","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727304514307,"stop":1727304534675,"duration":20368}},{"uid":"d33fba9c1391416e","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/d33fba9c1391416e","status":"failed","statusDetails":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","time":{"start":1727299633601,"stop":1727299656478,"duration":22877}},{"uid":"6ad268fd19a25c23","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/6ad268fd19a25c23","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727293409595,"stop":1727293429961,"duration":20366}},{"uid":"55c98d2d478b4710","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/55c98d2d478b4710","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1727287205904,"stop":1727287218509,"duration":12605}},{"uid":"1f05ca89951a3aa9","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/1f05ca89951a3aa9","status":"passed","time":{"start":1727283468347,"stop":1727283548467,"duration":80120}},{"uid":"12edb0c6772400f9","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/12edb0c6772400f9","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1727281056464,"stop":1727281070349,"duration":13885}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"cdd8b61a44b14a4b.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}