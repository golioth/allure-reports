{"uid":"9ccfcefb9f4e1131","name":"test_int_too_small","fullName":"tests.hil.tests.settings.test_settings#test_int_too_small","historyId":"9a158ab876eb6bcacb2a056562120108","time":{"start":1727378795185,"stop":1727378808129,"duration":12944},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff99605a90>\ndevice = <golioth.golioth.Device object at 0xffff99562410>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff99562410>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727378695000,"stop":1727378695000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727378695001,"stop":1727378695001,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727378695002,"stop":1727378695002,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727378695003,"stop":1727378695004,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727378695003,"stop":1727378695003,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727378695004,"stop":1727378695004,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727378695005,"stop":1727378695005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727378695005,"stop":1727378695005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727378695006,"stop":1727378695006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727378695006,"stop":1727378695006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727378695007,"stop":1727378695007,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727378695007,"stop":1727378695007,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727378695008,"stop":1727378695437,"duration":429},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727378695437,"stop":1727378746862,"duration":51425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727378746864,"stop":1727378747842,"duration":978},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727378747843,"stop":1727378771605,"duration":23762},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff99605a90>\ndevice = <golioth.golioth.Device object at 0xffff99562410>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff99562410>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"bb95c976ced9ce97","name":"stdout","source":"bb95c976ced9ce97.txt","type":"text/plain","size":989}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727378966258,"stop":1727378966258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727378966261,"stop":1727378966621,"duration":360},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727378966623,"stop":1727378966624,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727378966626,"stop":1727378966629,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"dba4d013165e"},{"name":"thread","value":"259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":16},"items":[{"uid":"2e73927a529467b5","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/2e73927a529467b5","status":"passed","time":{"start":1727374101025,"stop":1727374114278,"duration":13253}},{"uid":"480db8ac5b8be78d","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/480db8ac5b8be78d","status":"passed","time":{"start":1727370923333,"stop":1727370936130,"duration":12797}},{"uid":"d8b25de7ea89b974","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/d8b25de7ea89b974","status":"passed","time":{"start":1727364102662,"stop":1727364115542,"duration":12880}},{"uid":"7b688d33c93631fe","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/7b688d33c93631fe","status":"passed","time":{"start":1727362159117,"stop":1727362171646,"duration":12529}},{"uid":"5acc4c0c15620107","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/5acc4c0c15620107","status":"passed","time":{"start":1727363068056,"stop":1727363081458,"duration":13402}},{"uid":"7962a48d215cf4b7","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/7962a48d215cf4b7","status":"passed","time":{"start":1727359441043,"stop":1727359455305,"duration":14262}},{"uid":"21fea58249f0fda0","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/21fea58249f0fda0","status":"passed","time":{"start":1727313583035,"stop":1727313595908,"duration":12873}},{"uid":"17836ac3ddc8f972","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/17836ac3ddc8f972","status":"passed","time":{"start":1727310980736,"stop":1727310994140,"duration":13404}},{"uid":"ab6c5faf65706144","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/ab6c5faf65706144","status":"passed","time":{"start":1727307148007,"stop":1727307162126,"duration":14119}},{"uid":"99911f8c7234df01","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/99911f8c7234df01","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727304769365,"stop":1727304782333,"duration":12968}},{"uid":"884d4f6528e4e1fb","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/884d4f6528e4e1fb","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727299904552,"stop":1727299918334,"duration":13782}},{"uid":"412de8106dda0de","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/412de8106dda0de","status":"passed","time":{"start":1727293662161,"stop":1727293675076,"duration":12915}},{"uid":"bf8948f9f5aa117a","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/bf8948f9f5aa117a","status":"passed","time":{"start":1727287416361,"stop":1727287429660,"duration":13299}},{"uid":"93e5071f1b872fd5","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/93e5071f1b872fd5","status":"passed","time":{"start":1727283726569,"stop":1727283739331,"duration":12762}},{"uid":"7523370fd41ffbea","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/7523370fd41ffbea","status":"passed","time":{"start":1727281276807,"stop":1727281290123,"duration":13316}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"9ccfcefb9f4e1131.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}