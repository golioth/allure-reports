{"uid":"3530431c75d192ca","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1727378462358,"stop":1727378475749,"duration":13391},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff7e238890>\ndevice = <golioth.golioth.Device object at 0xffff7e071b90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff7e071b90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727378393808,"stop":1727378393808,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727378393809,"stop":1727378393809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727378393810,"stop":1727378393810,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727378393811,"stop":1727378393812,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727378393811,"stop":1727378393811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727378393812,"stop":1727378393812,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727378393813,"stop":1727378393813,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727378393813,"stop":1727378393813,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727378393814,"stop":1727378393814,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727378393814,"stop":1727378393814,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727378393815,"stop":1727378393815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727378393815,"stop":1727378393815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727378393816,"stop":1727378394254,"duration":438},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727378394255,"stop":1727378443252,"duration":48997},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727378443254,"stop":1727378444221,"duration":967},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727378444221,"stop":1727378457726,"duration":13505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff7e238890>\ndevice = <golioth.golioth.Device object at 0xffff7e071b90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff7e071b90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"1420b9cfbe3c6c29","name":"stdout","source":"1420b9cfbe3c6c29.txt","type":"text/plain","size":4209}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727378612694,"stop":1727378612694,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727378612698,"stop":1727378613196,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727378613198,"stop":1727378613206,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727378613209,"stop":1727378613211,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"a483159249f9"},{"name":"thread","value":"261-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":17},"items":[{"uid":"15cea99dcee72c4","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/15cea99dcee72c4","status":"passed","time":{"start":1727374649355,"stop":1727374662249,"duration":12894}},{"uid":"c0d9b83cea8f2e15","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/c0d9b83cea8f2e15","status":"passed","time":{"start":1727370674941,"stop":1727370687826,"duration":12885}},{"uid":"7ab5d75724dc210","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/7ab5d75724dc210","status":"passed","time":{"start":1727363317763,"stop":1727363330621,"duration":12858}},{"uid":"b76fb5a4e498aaec","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b76fb5a4e498aaec","status":"passed","time":{"start":1727362425652,"stop":1727362438576,"duration":12924}},{"uid":"fbb9298cf4c8f4f4","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/fbb9298cf4c8f4f4","status":"passed","time":{"start":1727362452612,"stop":1727362465365,"duration":12753}},{"uid":"46976035978b2cad","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/46976035978b2cad","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727359327746,"stop":1727359342604,"duration":14858}},{"uid":"9a99e33548663c64","reportUrl":"https://golioth.github.io/allure-reports/1434//#testresult/9a99e33548663c64","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727359551367,"stop":1727359564220,"duration":12853}},{"uid":"efedb16e131aa5e4","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/efedb16e131aa5e4","status":"passed","time":{"start":1727313339279,"stop":1727313352061,"duration":12782}},{"uid":"54e5ae5ae7eaa0ea","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/54e5ae5ae7eaa0ea","status":"passed","time":{"start":1727310861480,"stop":1727310874237,"duration":12757}},{"uid":"7c8f3b2172cd738","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/7c8f3b2172cd738","status":"passed","time":{"start":1727306759411,"stop":1727306772307,"duration":12896}},{"uid":"44047237bfcbac90","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/44047237bfcbac90","status":"passed","time":{"start":1727303873596,"stop":1727303886424,"duration":12828}},{"uid":"4f579ba673fd3746","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/4f579ba673fd3746","status":"passed","time":{"start":1727299788887,"stop":1727299801627,"duration":12740}},{"uid":"688fcff23fd037d3","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/688fcff23fd037d3","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727293518807,"stop":1727293531876,"duration":13069}},{"uid":"11bec372fe12204c","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/11bec372fe12204c","status":"passed","time":{"start":1727287368002,"stop":1727287381498,"duration":13496}},{"uid":"c029a201b1b63998","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/c029a201b1b63998","status":"passed","time":{"start":1727283716259,"stop":1727283729186,"duration":12927}},{"uid":"f03f26db4e7c3d4e","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/f03f26db4e7c3d4e","status":"passed","time":{"start":1727281235029,"stop":1727281247827,"duration":12798}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"3530431c75d192ca.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}