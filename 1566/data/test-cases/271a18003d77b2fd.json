{"uid":"271a18003d77b2fd","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1727990713838,"stop":1727990826680,"duration":112842},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb92a7b50>\ndevice = <golioth.golioth.Device object at 0xffffb92cad10>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727990684098,"stop":1727990684098,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727990684099,"stop":1727990684100,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727990684099,"stop":1727990684099,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727990684100,"stop":1727990684100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727990684101,"stop":1727990684101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727990684101,"stop":1727990684104,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727990684105,"stop":1727990684105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727990684105,"stop":1727990684105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727990684106,"stop":1727990684622,"duration":516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727990684623,"stop":1727990685845,"duration":1222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727990685846,"stop":1727990712766,"duration":26920},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727990712767,"stop":1727990713833,"duration":1066},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb92a7b50>\ndevice = <golioth.golioth.Device object at 0xffffb92cad10>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b05c223abadc5a09","name":"log","source":"b05c223abadc5a09.txt","type":"text/plain","size":18145}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727990826914,"stop":1727990826953,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727990826955,"stop":1727990827392,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727990827395,"stop":1727990827397,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727990827402,"stop":1727990827402,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"641d6926bf23"},{"name":"thread","value":"942-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"db97afdfba619090","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727990566122,"stop":1727990679253,"duration":113131}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":6,"skipped":0,"passed":63,"unknown":0,"total":70},"items":[{"uid":"7a4fa4c5b8639619","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/7a4fa4c5b8639619","status":"passed","time":{"start":1727986393885,"stop":1727986420159,"duration":26274}},{"uid":"f91a1ae03586681c","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/f91a1ae03586681c","status":"passed","time":{"start":1727980495503,"stop":1727980519399,"duration":23896}},{"uid":"e771463f8839fb56","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/e771463f8839fb56","status":"passed","time":{"start":1727978388583,"stop":1727978410424,"duration":21841}},{"uid":"5406091c90e09697","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/5406091c90e09697","status":"passed","time":{"start":1727976717396,"stop":1727976739786,"duration":22390}},{"uid":"ed74b627523d76b5","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/ed74b627523d76b5","status":"passed","time":{"start":1727974546413,"stop":1727974571304,"duration":24891}},{"uid":"a2a2ba9e0d07221","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/a2a2ba9e0d07221","status":"passed","time":{"start":1727973476737,"stop":1727973501276,"duration":24539}},{"uid":"1c1c45af8a8b735c","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/1c1c45af8a8b735c","status":"passed","time":{"start":1727967940615,"stop":1727967962720,"duration":22105}},{"uid":"8bf3257739b53bd4","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/8bf3257739b53bd4","status":"passed","time":{"start":1727961982415,"stop":1727962009059,"duration":26644}},{"uid":"7a58a68d3a4f7027","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/7a58a68d3a4f7027","status":"passed","time":{"start":1727951516705,"stop":1727951539967,"duration":23262}},{"uid":"ecfa3e0cee4e9e54","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/ecfa3e0cee4e9e54","status":"passed","time":{"start":1727955817176,"stop":1727955843474,"duration":26298}},{"uid":"591891a164e8c77e","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/591891a164e8c77e","status":"passed","time":{"start":1727954221453,"stop":1727954262387,"duration":40934}},{"uid":"b3561a10aeae1cf","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b3561a10aeae1cf","status":"passed","time":{"start":1727928330685,"stop":1727928353275,"duration":22590}},{"uid":"50fc4a1610226927","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/50fc4a1610226927","status":"passed","time":{"start":1727951516705,"stop":1727951539967,"duration":23262}},{"uid":"f8bf3a7a0849eed","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/f8bf3a7a0849eed","status":"passed","time":{"start":1727951145776,"stop":1727951169912,"duration":24136}},{"uid":"6e39a8580327acf4","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/6e39a8580327acf4","status":"passed","time":{"start":1727950335028,"stop":1727950358434,"duration":23406}},{"uid":"4ecea0dc6cbabdc8","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/4ecea0dc6cbabdc8","status":"passed","time":{"start":1727942929324,"stop":1727942952874,"duration":23550}},{"uid":"856c94b94e11aa0e","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/856c94b94e11aa0e","status":"passed","time":{"start":1727928330685,"stop":1727928353275,"duration":22590}},{"uid":"5986c189026b5835","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/5986c189026b5835","status":"passed","time":{"start":1727928330685,"stop":1727928353275,"duration":22590}},{"uid":"72612009a36793ab","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/72612009a36793ab","status":"passed","time":{"start":1727919342770,"stop":1727919365038,"duration":22268}},{"uid":"e34fdb87754304d","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/e34fdb87754304d","status":"passed","time":{"start":1727910192445,"stop":1727910235447,"duration":43002}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"271a18003d77b2fd.json","parameterValues":["'nrf9160dk'","'zephyr'"]}