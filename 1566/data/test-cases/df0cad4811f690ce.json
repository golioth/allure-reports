{"uid":"df0cad4811f690ce","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1727990442894,"stop":1727990476465,"duration":33571},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7d7b8450>\ndevice = <golioth.golioth.Device object at 0xffff7d7bb390>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff7d921fd0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 1 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727990413406,"stop":1727990413406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1727990413406,"stop":1727990413422,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727990413422,"stop":1727990413423,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727990413423,"stop":1727990413423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727990413424,"stop":1727990413426,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727990413427,"stop":1727990413427,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727990413427,"stop":1727990413428,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727990413428,"stop":1727990413861,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727990413862,"stop":1727990415003,"duration":1141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727990415004,"stop":1727990441942,"duration":26938},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727990441942,"stop":1727990442891,"duration":949},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7d7b8450>\ndevice = <golioth.golioth.Device object at 0xffff7d7bb390>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff7d921fd0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 1 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","steps":[],"attachments":[{"uid":"ec3ade61a0cef01f","name":"log","source":"ec3ade61a0cef01f.txt","type":"text/plain","size":21179}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727990476675,"stop":1727990477072,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727990477074,"stop":1727990477586,"duration":512},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727990477589,"stop":1727990477591,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727990477596,"stop":1727990477596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"641d6926bf23"},{"name":"thread","value":"800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":10,"skipped":0,"passed":55,"unknown":0,"total":71},"items":[{"uid":"d4f5d4121c5d3316","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/d4f5d4121c5d3316","status":"passed","time":{"start":1727986207726,"stop":1727986237226,"duration":29500}},{"uid":"4656c56548b6b063","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/4656c56548b6b063","status":"passed","time":{"start":1727980374917,"stop":1727980403917,"duration":29000}},{"uid":"97fe9b2ff674b055","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/97fe9b2ff674b055","status":"passed","time":{"start":1727978019483,"stop":1727978077517,"duration":58034}},{"uid":"c6f830158d125548","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/c6f830158d125548","status":"passed","time":{"start":1727976593173,"stop":1727976626023,"duration":32850}},{"uid":"3518e48b196fe895","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/3518e48b196fe895","status":"passed","time":{"start":1727974374081,"stop":1727974404638,"duration":30557}},{"uid":"f2300399ee394dcc","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/f2300399ee394dcc","status":"passed","time":{"start":1727973278760,"stop":1727973310675,"duration":31915}},{"uid":"96c99202a25b5469","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/96c99202a25b5469","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727967661269,"stop":1727967779544,"duration":118275}},{"uid":"a72ab02e8b05acaf","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/a72ab02e8b05acaf","status":"passed","time":{"start":1727961797653,"stop":1727961828730,"duration":31077}},{"uid":"7ac47b978dff5afb","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/7ac47b978dff5afb","status":"passed","time":{"start":1727951305581,"stop":1727951363529,"duration":57948}},{"uid":"1629e2bd11458e66","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/1629e2bd11458e66","status":"passed","time":{"start":1727955631437,"stop":1727955663080,"duration":31643}},{"uid":"2dac0888caa43e42","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/2dac0888caa43e42","status":"passed","time":{"start":1727953992925,"stop":1727954036766,"duration":43841}},{"uid":"aa561de966b4767f","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/aa561de966b4767f","status":"passed","time":{"start":1727928208399,"stop":1727928239758,"duration":31359}},{"uid":"3ecc9e3a1620f507","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/3ecc9e3a1620f507","status":"passed","time":{"start":1727951305581,"stop":1727951363529,"duration":57948}},{"uid":"f2cfce19e8941222","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/f2cfce19e8941222","status":"passed","time":{"start":1727951026908,"stop":1727951056081,"duration":29173}},{"uid":"c2bf108142b2165d","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/c2bf108142b2165d","status":"passed","time":{"start":1727950145262,"stop":1727950178033,"duration":32771}},{"uid":"53b8fcdfa7019297","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/53b8fcdfa7019297","status":"passed","time":{"start":1727942749530,"stop":1727942776606,"duration":27076}},{"uid":"57999530988b8015","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/57999530988b8015","status":"passed","time":{"start":1727928208399,"stop":1727928239758,"duration":31359}},{"uid":"775fd7fcad65adb1","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/775fd7fcad65adb1","status":"passed","time":{"start":1727928208399,"stop":1727928239758,"duration":31359}},{"uid":"9605ede0ceaf6520","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/9605ede0ceaf6520","status":"passed","time":{"start":1727919130842,"stop":1727919181841,"duration":50999}},{"uid":"48509586c25f9705","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/48509586c25f9705","status":"passed","time":{"start":1727909959967,"stop":1727910000496,"duration":40529}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"df0cad4811f690ce.json","parameterValues":["'nrf9160dk'","'zephyr'"]}