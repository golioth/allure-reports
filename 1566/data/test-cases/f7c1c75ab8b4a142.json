{"uid":"f7c1c75ab8b4a142","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1727988900917,"stop":1727989013768,"duration":112851},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa06ca290>\ndevice = <golioth.golioth.Device object at 0xffffa06a6c10>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727988890874,"stop":1727988890875,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727988890874,"stop":1727988890874,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727988890875,"stop":1727988890875,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727988890876,"stop":1727988890876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727988890876,"stop":1727988890876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727988890877,"stop":1727988890879,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727988890880,"stop":1727988890880,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727988890881,"stop":1727988891464,"duration":583},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727988890881,"stop":1727988890881,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727988891464,"stop":1727988892483,"duration":1019},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727988892484,"stop":1727988900367,"duration":7883},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727988900368,"stop":1727988900914,"duration":546},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa06ca290>\ndevice = <golioth.golioth.Device object at 0xffffa06a6c10>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f82fc274cb77b336","name":"log","source":"f82fc274cb77b336.txt","type":"text/plain","size":15396}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727989013964,"stop":1727989014224,"duration":260},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727989014226,"stop":1727989014627,"duration":401},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727989014629,"stop":1727989014631,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727989014636,"stop":1727989014636,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cd8237556b6b"},{"name":"thread","value":"608-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"724f0248e8737885","status":"passed","time":{"start":1727988811722,"stop":1727988835785,"duration":24063}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":71,"unknown":0,"total":78},"items":[{"uid":"52591e9d5b758c33","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/52591e9d5b758c33","status":"passed","time":{"start":1727984987081,"stop":1727985007346,"duration":20265}},{"uid":"fcb5547e31687ebc","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/fcb5547e31687ebc","status":"passed","time":{"start":1727979881729,"stop":1727979906465,"duration":24736}},{"uid":"ae1742ccfaa50eea","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/ae1742ccfaa50eea","status":"passed","time":{"start":1727966638130,"stop":1727966663134,"duration":25004}},{"uid":"f039507cefe2dd54","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/f039507cefe2dd54","status":"passed","time":{"start":1727975157960,"stop":1727975178273,"duration":20313}},{"uid":"ce71f962919fd1b","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/ce71f962919fd1b","status":"passed","time":{"start":1727972265944,"stop":1727972289274,"duration":23330}},{"uid":"2ee4e5cd99104495","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/2ee4e5cd99104495","status":"passed","time":{"start":1727970905668,"stop":1727970930231,"duration":24563}},{"uid":"5b7d7a16b05ec0ef","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/5b7d7a16b05ec0ef","status":"passed","time":{"start":1727966638130,"stop":1727966663134,"duration":25004}},{"uid":"83f8864a0c0bd35e","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/83f8864a0c0bd35e","status":"passed","time":{"start":1727959536862,"stop":1727959556757,"duration":19895}},{"uid":"37cfe49d90da39b4","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/37cfe49d90da39b4","status":"passed","time":{"start":1727958075102,"stop":1727958099451,"duration":24349}},{"uid":"20fa809ceb567cd8","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/20fa809ceb567cd8","status":"passed","time":{"start":1727954898920,"stop":1727954923555,"duration":24635}},{"uid":"d01797e448438179","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/d01797e448438179","status":"passed","time":{"start":1727908294521,"stop":1727908314073,"duration":19552}},{"uid":"ef0c9dba75a4811c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/ef0c9dba75a4811c","status":"passed","time":{"start":1727932626784,"stop":1727932646357,"duration":19573}},{"uid":"d50c5a25ee67f8cc","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/d50c5a25ee67f8cc","status":"passed","time":{"start":1727949842168,"stop":1727949866547,"duration":24379}},{"uid":"7861a95c3fc23277","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/7861a95c3fc23277","status":"passed","time":{"start":1727947799612,"stop":1727947823014,"duration":23402}},{"uid":"c56279c92f55fbf5","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/c56279c92f55fbf5","status":"passed","time":{"start":1727947654997,"stop":1727947679323,"duration":24326}},{"uid":"3458d23c16818b90","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/3458d23c16818b90","status":"passed","time":{"start":1727834098972,"stop":1727834122381,"duration":23409}},{"uid":"f59942e8bb022762","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/f59942e8bb022762","status":"passed","time":{"start":1727932626784,"stop":1727932646357,"duration":19573}},{"uid":"92192974bc2103de","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/92192974bc2103de","status":"passed","time":{"start":1727927627436,"stop":1727927650869,"duration":23433}},{"uid":"ab22951c5364c452","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/ab22951c5364c452","status":"passed","time":{"start":1727917200270,"stop":1727917224929,"duration":24659}},{"uid":"36c536721bebe6db","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/36c536721bebe6db","status":"passed","time":{"start":1727908294521,"stop":1727908314073,"duration":19552}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"f7c1c75ab8b4a142.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}