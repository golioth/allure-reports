{"uid":"379b5386c7f18dc1","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1727989644144,"stop":1727989739506,"duration":95362},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa96db2d0>\nproject = <golioth.golioth.Project object at 0xffffa9876190>\ndevice = <golioth.golioth.Device object at 0xffffa96fa390>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727989613625,"stop":1727989613625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727989613626,"stop":1727989613626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727989613627,"stop":1727989613627,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727989613628,"stop":1727989613628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727989613628,"stop":1727989613628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727989613629,"stop":1727989613630,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727989613631,"stop":1727989613631,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727989613632,"stop":1727989613634,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727989613635,"stop":1727989614188,"duration":553},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727989614189,"stop":1727989615247,"duration":1058},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727989615247,"stop":1727989643035,"duration":27788},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727989643035,"stop":1727989644141,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa96db2d0>\nproject = <golioth.golioth.Project object at 0xffffa9876190>\ndevice = <golioth.golioth.Device object at 0xffffa96fa390>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"1e2dfc729856fbb8","name":"log","source":"1e2dfc729856fbb8.txt","type":"text/plain","size":20571}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727989739761,"stop":1727989739788,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727989739790,"stop":1727989740471,"duration":681},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727989740473,"stop":1727989740475,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727989740477,"stop":1727989740477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"641d6926bf23"},{"name":"thread","value":"573-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":18,"skipped":0,"passed":54,"unknown":0,"total":72},"items":[{"uid":"2c52be4668a16e9c","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/2c52be4668a16e9c","status":"passed","time":{"start":1727985611780,"stop":1727985626725,"duration":14945}},{"uid":"3d73c26cac83bad","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/3d73c26cac83bad","status":"passed","time":{"start":1727979804465,"stop":1727979816429,"duration":11964}},{"uid":"805044c571ea6c39","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/805044c571ea6c39","status":"passed","time":{"start":1727977345150,"stop":1727977365963,"duration":20813}},{"uid":"6bcd62270a10925f","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/6bcd62270a10925f","status":"passed","time":{"start":1727975895130,"stop":1727975912748,"duration":17618}},{"uid":"a5e104852fb31286","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/a5e104852fb31286","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727973699248,"stop":1727973717693,"duration":18445}},{"uid":"849dea36c358de3a","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/849dea36c358de3a","status":"passed","time":{"start":1727972506079,"stop":1727972526188,"duration":20109}},{"uid":"fa1f0d1c8caa18f6","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/fa1f0d1c8caa18f6","status":"passed","time":{"start":1727967165773,"stop":1727967183794,"duration":18021}},{"uid":"f0f4acd53849a15d","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/f0f4acd53849a15d","status":"passed","time":{"start":1727961324722,"stop":1727961337227,"duration":12505}},{"uid":"5a70a0fd88b6a621","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/5a70a0fd88b6a621","status":"passed","time":{"start":1727950817742,"stop":1727950836282,"duration":18540}},{"uid":"28713d9d56c0b267","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/28713d9d56c0b267","status":"passed","time":{"start":1727955143668,"stop":1727955155485,"duration":11817}},{"uid":"5a9e05a5344bccd9","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/5a9e05a5344bccd9","status":"passed","time":{"start":1727953365109,"stop":1727953395598,"duration":30489}},{"uid":"c1d8cfe7ab55eae4","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c1d8cfe7ab55eae4","status":"passed","time":{"start":1727927705848,"stop":1727927724599,"duration":18751}},{"uid":"5e9200fe51e85cc","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/5e9200fe51e85cc","status":"passed","time":{"start":1727950817742,"stop":1727950836282,"duration":18540}},{"uid":"9b24f9704917429","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/9b24f9704917429","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727950542028,"stop":1727950558283,"duration":16255}},{"uid":"dd164c05bb0a46f2","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/dd164c05bb0a46f2","status":"passed","time":{"start":1727949665632,"stop":1727949677083,"duration":11451}},{"uid":"9d8403195e29321f","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/9d8403195e29321f","status":"passed","time":{"start":1727942239014,"stop":1727942265452,"duration":26438}},{"uid":"c671deb5d6fd8d1c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c671deb5d6fd8d1c","status":"passed","time":{"start":1727927705848,"stop":1727927724599,"duration":18751}},{"uid":"ae141d792ffd1930","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/ae141d792ffd1930","status":"passed","time":{"start":1727927705848,"stop":1727927724599,"duration":18751}},{"uid":"caae35df810911b6","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/caae35df810911b6","status":"passed","time":{"start":1727918194690,"stop":1727918212775,"duration":18085}},{"uid":"4aa21f5cb4104c8a","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/4aa21f5cb4104c8a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727909281670,"stop":1727909376190,"duration":94520}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"379b5386c7f18dc1.json","parameterValues":["'nrf9160dk'","'zephyr'"]}