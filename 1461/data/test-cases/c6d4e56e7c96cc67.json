{"uid":"c6d4e56e7c96cc67","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"bfe488b0ced6617e28e9fae7ab667d7b","time":{"start":1727391049550,"stop":1727391066839,"duration":17289},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0a76a50>\ndevice = <golioth.golioth.Device object at 0xffffa0a68a90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727391039562,"stop":1727391039562,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727391039562,"stop":1727391039563,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727391039563,"stop":1727391039563,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727391039564,"stop":1727391039564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727391039564,"stop":1727391039564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727391039565,"stop":1727391039567,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727391039567,"stop":1727391039568,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727391039568,"stop":1727391039568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727391039569,"stop":1727391039994,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727391039994,"stop":1727391041067,"duration":1073},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727391041068,"stop":1727391049002,"duration":7934},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727391049002,"stop":1727391049547,"duration":545},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0a76a50>\ndevice = <golioth.golioth.Device object at 0xffffa0a68a90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"e77b6d249d0aaf05","name":"log","source":"e77b6d249d0aaf05.txt","type":"text/plain","size":23737}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727391067018,"stop":1727391067188,"duration":170},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727391067190,"stop":1727391067841,"duration":651},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727391067845,"stop":1727391067851,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727391067862,"stop":1727391067862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8c24e2c2e6f3"},{"name":"thread","value":"409-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":18,"unknown":0,"total":20},"items":[{"uid":"34d700eb3fe982f6","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/34d700eb3fe982f6","status":"passed","time":{"start":1727390754116,"stop":1727390777495,"duration":23379}},{"uid":"f48ee84773f67393","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/f48ee84773f67393","status":"passed","time":{"start":1727385188905,"stop":1727385213257,"duration":24352}},{"uid":"78a308d763e6efc9","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/78a308d763e6efc9","status":"passed","time":{"start":1727382953348,"stop":1727382978260,"duration":24912}},{"uid":"c9890538089bb939","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/c9890538089bb939","status":"passed","time":{"start":1727380060977,"stop":1727380086137,"duration":25160}},{"uid":"b88d2724f349c5e1","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/b88d2724f349c5e1","status":"passed","time":{"start":1727374004285,"stop":1727374028033,"duration":23748}},{"uid":"50baead5356886ac","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/50baead5356886ac","status":"passed","time":{"start":1727372711738,"stop":1727372735805,"duration":24067}},{"uid":"8df3b74abef8b796","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/8df3b74abef8b796","status":"passed","time":{"start":1727369664401,"stop":1727369689946,"duration":25545}},{"uid":"ef30821005a3864a","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/ef30821005a3864a","status":"passed","time":{"start":1727365330702,"stop":1727365355131,"duration":24429}},{"uid":"febd1b9f869af82b","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/febd1b9f869af82b","status":"passed","time":{"start":1727365817768,"stop":1727365841089,"duration":23321}},{"uid":"8e75d8a9358c42e2","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/8e75d8a9358c42e2","status":"failed","statusDetails":"AssertionError: assert 4 == 3","time":{"start":1727360819235,"stop":1727360852541,"duration":33306}},{"uid":"793cccae5491f8f8","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/793cccae5491f8f8","status":"passed","time":{"start":1727315591023,"stop":1727315617322,"duration":26299}},{"uid":"1ccdc8f1c41f6da0","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/1ccdc8f1c41f6da0","status":"passed","time":{"start":1727312285604,"stop":1727312308533,"duration":22929}},{"uid":"e9eeaf002ea6f85b","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/e9eeaf002ea6f85b","status":"passed","time":{"start":1727308364950,"stop":1727308389822,"duration":24872}},{"uid":"4b1131e23e7f5e96","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/4b1131e23e7f5e96","status":"passed","time":{"start":1727306111017,"stop":1727306135307,"duration":24290}},{"uid":"1a527389db222da8","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/1a527389db222da8","status":"passed","time":{"start":1727301403495,"stop":1727301423695,"duration":20200}},{"uid":"91c122204067f79a","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/91c122204067f79a","status":"passed","time":{"start":1727295094735,"stop":1727295121881,"duration":27146}},{"uid":"81db2bc6dffaf005","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/81db2bc6dffaf005","status":"passed","time":{"start":1727288932863,"stop":1727288957773,"duration":24910}},{"uid":"f7001195dfbc04b","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/f7001195dfbc04b","status":"passed","time":{"start":1727284782673,"stop":1727284807822,"duration":25149}},{"uid":"d344dc472e9ad93b","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/d344dc472e9ad93b","status":"passed","time":{"start":1727282701874,"stop":1727282726980,"duration":25106}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"c6d4e56e7c96cc67.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}