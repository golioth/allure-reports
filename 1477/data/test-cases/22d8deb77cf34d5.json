{"uid":"22d8deb77cf34d5","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"c4178e273bd3962d06b411c6f8e74f6b","time":{"start":1727745486180,"stop":1727745503622,"duration":17442},"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff81605fd0>\ndevice = <golioth.golioth.Device object at 0xffff816249d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727745455258,"stop":1727745455258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727745455259,"stop":1727745455259,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727745455259,"stop":1727745455259,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727745455260,"stop":1727745455260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727745455260,"stop":1727745455260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727745455261,"stop":1727745455263,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727745455264,"stop":1727745455264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727745455264,"stop":1727745455264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727745455265,"stop":1727745455759,"duration":494},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727745455760,"stop":1727745456983,"duration":1223},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727745456983,"stop":1727745485098,"duration":28115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727745485099,"stop":1727745486177,"duration":1078},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff81605fd0>\ndevice = <golioth.golioth.Device object at 0xffff816249d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","steps":[],"attachments":[{"uid":"bd0cd691e56fb0ec","name":"log","source":"bd0cd691e56fb0ec.txt","type":"text/plain","size":21069}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727745503854,"stop":1727745504049,"duration":195},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727745504051,"stop":1727745504612,"duration":561},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727745504614,"stop":1727745504617,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727745504622,"stop":1727745504622,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"31ee07367c8e"},{"name":"thread","value":"669-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":14,"skipped":0,"passed":17,"unknown":0,"total":31},"items":[{"uid":"257749728f9504e8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/257749728f9504e8","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1727733234586,"stop":1727733250172,"duration":15586}},{"uid":"3fcf99e17db1d22e","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/3fcf99e17db1d22e","status":"passed","time":{"start":1727659140832,"stop":1727659157638,"duration":16806}},{"uid":"38df06e94f6c92ed","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/38df06e94f6c92ed","status":"passed","time":{"start":1727572007875,"stop":1727572018986,"duration":11111}},{"uid":"e95c6d421e00f729","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/e95c6d421e00f729","status":"passed","time":{"start":1727549849723,"stop":1727549863141,"duration":13418}},{"uid":"deae14b2b02e29cf","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/deae14b2b02e29cf","status":"passed","time":{"start":1727548793998,"stop":1727548805100,"duration":11102}},{"uid":"cf11ef48ece7803","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/cf11ef48ece7803","status":"passed","time":{"start":1727548602574,"stop":1727548628148,"duration":25574}},{"uid":"d090523360757e0e","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/d090523360757e0e","status":"broken","statusDetails":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","time":{"start":1727486119816,"stop":1727486143016,"duration":23200}},{"uid":"e5d4d70e38013ab5","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/e5d4d70e38013ab5","status":"passed","time":{"start":1727478560600,"stop":1727478589100,"duration":28500}},{"uid":"cb95d71108a209f0","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/cb95d71108a209f0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727462819103,"stop":1727462911807,"duration":92704}},{"uid":"c55c9c1fe16d6ff9","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/c55c9c1fe16d6ff9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727462819103,"stop":1727462911807,"duration":92704}},{"uid":"8f01883cfa0725b3","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/8f01883cfa0725b3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727458209461,"stop":1727458302133,"duration":92672}},{"uid":"c7cdb942def6c25c","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/c7cdb942def6c25c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727454750912,"stop":1727454843606,"duration":92694}},{"uid":"12b8024a4c0df375","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/12b8024a4c0df375","status":"passed","time":{"start":1727456134459,"stop":1727456149377,"duration":14918}},{"uid":"6be0357adee6b987","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/6be0357adee6b987","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727453283453,"stop":1727453376260,"duration":92807}},{"uid":"5df09f92bad95dcb","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/5df09f92bad95dcb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727400497962,"stop":1727400590972,"duration":93010}},{"uid":"663bfbf70bb139c3","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/663bfbf70bb139c3","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1727395206566,"stop":1727395226260,"duration":19694}},{"uid":"89cd7677db41baaf","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/89cd7677db41baaf","status":"passed","time":{"start":1727392943848,"stop":1727392957860,"duration":14012}},{"uid":"9aa48969661b5ba8","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/9aa48969661b5ba8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727392217817,"stop":1727392310716,"duration":92899}},{"uid":"798c26939fe7587c","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/798c26939fe7587c","status":"passed","time":{"start":1727386502734,"stop":1727386518190,"duration":15456}},{"uid":"1d6502b3b43dfd0c","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/1d6502b3b43dfd0c","status":"passed","time":{"start":1727384168336,"stop":1727384183078,"duration":14742}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"22d8deb77cf34d5.json","parameterValues":["'nrf9160dk'","'zephyr'"]}