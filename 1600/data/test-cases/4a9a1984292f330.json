{"uid":"4a9a1984292f330","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"01782019729919a104e19f26c23c3c6e","time":{"start":1728316586439,"stop":1728316601576,"duration":15137},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f7e92a67150>\ndevice = <golioth.golioth.Device object at 0x7f7e92a59450>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"device_object","time":{"start":1728316585411,"stop":1728316585412,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728316585411,"stop":1728316585411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728316585411,"stop":1728316585411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728316585411,"stop":1728316585411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728316585411,"stop":1728316585411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728316585411,"stop":1728316585411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728316585412,"stop":1728316585412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728316585412,"stop":1728316585412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728316585412,"stop":1728316585637,"duration":225},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728316585637,"stop":1728316586335,"duration":698},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728316586335,"stop":1728316586337,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728316586337,"stop":1728316586438,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f7e92a67150>\ndevice = <golioth.golioth.Device object at 0x7f7e92a59450>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"e67a1b54aa10239f","name":"log","source":"e67a1b54aa10239f.txt","type":"text/plain","size":22867}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728316601803,"stop":1728316602323,"duration":520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728316602324,"stop":1728316602663,"duration":339},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728316602663,"stop":1728316602669,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728316602670,"stop":1728316602670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 42"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e97ca7e270cb"},{"name":"thread","value":"50142-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3c9063f752595b88","status":"passed","time":{"start":1728316583454,"stop":1728316604917,"duration":21463}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":45,"unknown":0,"total":50},"items":[{"uid":"ce6689883563c81b","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/ce6689883563c81b","status":"passed","time":{"start":1728315970156,"stop":1728315990948,"duration":20792}},{"uid":"d8f3a27b0fac590d","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/d8f3a27b0fac590d","status":"passed","time":{"start":1728309972415,"stop":1728309993435,"duration":21020}},{"uid":"efbf39e1225076ff","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/efbf39e1225076ff","status":"passed","time":{"start":1728121282917,"stop":1728121303731,"duration":20814}},{"uid":"4ffcaa08ee69bc20","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/4ffcaa08ee69bc20","status":"passed","time":{"start":1728120945358,"stop":1728120966320,"duration":20962}},{"uid":"7b1400fb2a5a9115","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/7b1400fb2a5a9115","status":"passed","time":{"start":1728260937218,"stop":1728260957850,"duration":20632}},{"uid":"52a5112c59d411a7","reportUrl":"https://golioth.github.io/allure-reports/1587//#testresult/52a5112c59d411a7","status":"passed","time":{"start":1728121181698,"stop":1728121202211,"duration":20513}},{"uid":"6316c15a3a5f69de","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/6316c15a3a5f69de","status":"passed","time":{"start":1728174597059,"stop":1728174617863,"duration":20804}},{"uid":"61a60ec6f2696e48","reportUrl":"https://golioth.github.io/allure-reports/1575//#testresult/61a60ec6f2696e48","status":"passed","time":{"start":1728057899294,"stop":1728057919825,"duration":20531}},{"uid":"2f5b9fbcb456f5ff","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/2f5b9fbcb456f5ff","status":"passed","time":{"start":1728121414450,"stop":1728121434799,"duration":20349}},{"uid":"9205212ffe01c0be","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/9205212ffe01c0be","status":"passed","time":{"start":1728121282917,"stop":1728121303731,"duration":20814}},{"uid":"6245b67e57ab719e","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/6245b67e57ab719e","status":"passed","time":{"start":1728120945358,"stop":1728120966320,"duration":20962}},{"uid":"6c9bd6e311651e27","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/6c9bd6e311651e27","status":"passed","time":{"start":1728120903742,"stop":1728120924675,"duration":20933}},{"uid":"aa9e0146e83a3281","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/aa9e0146e83a3281","status":"passed","time":{"start":1728055630499,"stop":1728055657343,"duration":26844}},{"uid":"c4a84910af574ae6","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/c4a84910af574ae6","status":"passed","time":{"start":1728050853533,"stop":1728050874559,"duration":21026}},{"uid":"d34d338e162b1d56","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/d34d338e162b1d56","status":"passed","time":{"start":1728088046624,"stop":1728088067411,"duration":20787}},{"uid":"5240023c8b2cc56b","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/5240023c8b2cc56b","status":"passed","time":{"start":1728080080964,"stop":1728080101382,"duration":20418}},{"uid":"4015ce33faa8a8a2","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/4015ce33faa8a8a2","status":"passed","time":{"start":1728066724476,"stop":1728066745271,"duration":20795}},{"uid":"8d2c017db3e8203e","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/8d2c017db3e8203e","status":"passed","time":{"start":1728064302136,"stop":1728064322892,"duration":20756}},{"uid":"7b038b17a5aff2f3","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/7b038b17a5aff2f3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728061560022,"stop":1728061584367,"duration":24345}},{"uid":"14b0e560d3ec1cc8","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/14b0e560d3ec1cc8","status":"passed","time":{"start":1728055630499,"stop":1728055657343,"duration":26844}}]},"tags":["anyio","GitHub Actions 42","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4a9a1984292f330.json","parameterValues":["''","'zephyr'"]}