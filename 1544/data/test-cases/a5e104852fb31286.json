{"uid":"a5e104852fb31286","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1727973699248,"stop":1727973717693,"duration":18445},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffac5fb590>\nproject = <golioth.golioth.Project object at 0xffffac7939d0>\ndevice = <golioth.golioth.Device object at 0xffffac6195d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727973670138,"stop":1727973670138,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727973670138,"stop":1727973670138,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727973670139,"stop":1727973670140,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727973670139,"stop":1727973670139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727973670140,"stop":1727973670141,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727973670140,"stop":1727973670140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727973670142,"stop":1727973670145,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727973670142,"stop":1727973670142,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727973670145,"stop":1727973670587,"duration":442},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727973670588,"stop":1727973671507,"duration":919},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727973671508,"stop":1727973698129,"duration":26621},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727973698129,"stop":1727973699245,"duration":1116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffac5fb590>\nproject = <golioth.golioth.Project object at 0xffffac7939d0>\ndevice = <golioth.golioth.Device object at 0xffffac6195d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"faba122f76205377","name":"log","source":"faba122f76205377.txt","type":"text/plain","size":28848}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727973717969,"stop":1727973717997,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727973717999,"stop":1727973718384,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727973718386,"stop":1727973718389,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727973718391,"stop":1727973718391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"92462790118e"},{"name":"thread","value":"562-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":50,"unknown":0,"total":67},"items":[{"uid":"849dea36c358de3a","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/849dea36c358de3a","status":"passed","time":{"start":1727972506079,"stop":1727972526188,"duration":20109}},{"uid":"fa1f0d1c8caa18f6","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/fa1f0d1c8caa18f6","status":"passed","time":{"start":1727967165773,"stop":1727967183794,"duration":18021}},{"uid":"f0f4acd53849a15d","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/f0f4acd53849a15d","status":"passed","time":{"start":1727961324722,"stop":1727961337227,"duration":12505}},{"uid":"5a70a0fd88b6a621","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/5a70a0fd88b6a621","status":"passed","time":{"start":1727950817742,"stop":1727950836282,"duration":18540}},{"uid":"28713d9d56c0b267","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/28713d9d56c0b267","status":"passed","time":{"start":1727955143668,"stop":1727955155485,"duration":11817}},{"uid":"5a9e05a5344bccd9","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/5a9e05a5344bccd9","status":"passed","time":{"start":1727953365109,"stop":1727953395598,"duration":30489}},{"uid":"c1d8cfe7ab55eae4","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c1d8cfe7ab55eae4","status":"passed","time":{"start":1727927705848,"stop":1727927724599,"duration":18751}},{"uid":"5e9200fe51e85cc","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/5e9200fe51e85cc","status":"passed","time":{"start":1727950817742,"stop":1727950836282,"duration":18540}},{"uid":"9b24f9704917429","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/9b24f9704917429","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727950542028,"stop":1727950558283,"duration":16255}},{"uid":"dd164c05bb0a46f2","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/dd164c05bb0a46f2","status":"passed","time":{"start":1727949665632,"stop":1727949677083,"duration":11451}},{"uid":"9d8403195e29321f","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/9d8403195e29321f","status":"passed","time":{"start":1727942239014,"stop":1727942265452,"duration":26438}},{"uid":"c671deb5d6fd8d1c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c671deb5d6fd8d1c","status":"passed","time":{"start":1727927705848,"stop":1727927724599,"duration":18751}},{"uid":"ae141d792ffd1930","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/ae141d792ffd1930","status":"passed","time":{"start":1727927705848,"stop":1727927724599,"duration":18751}},{"uid":"caae35df810911b6","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/caae35df810911b6","status":"passed","time":{"start":1727918194690,"stop":1727918212775,"duration":18085}},{"uid":"4aa21f5cb4104c8a","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/4aa21f5cb4104c8a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727909281670,"stop":1727909376190,"duration":94520}},{"uid":"f56b31d713350a84","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f56b31d713350a84","status":"passed","time":{"start":1727834038699,"stop":1727834052529,"duration":13830}},{"uid":"53deca7ebd629f05","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/53deca7ebd629f05","status":"passed","time":{"start":1727831407174,"stop":1727831431476,"duration":24302}},{"uid":"2c59d1073865a30e","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/2c59d1073865a30e","status":"passed","time":{"start":1727812685180,"stop":1727812703792,"duration":18612}},{"uid":"1622cafef0414301","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/1622cafef0414301","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1727814274711,"stop":1727814279692,"duration":4981}},{"uid":"c8700d58f27f4ea8","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/c8700d58f27f4ea8","status":"passed","time":{"start":1727811030774,"stop":1727811049535,"duration":18761}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"a5e104852fb31286.json","parameterValues":["'nrf9160dk'","'zephyr'"]}