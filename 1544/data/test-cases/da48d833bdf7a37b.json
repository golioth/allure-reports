{"uid":"da48d833bdf7a37b","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"b7f28a13e79ecf798f5f87d1effddc59","time":{"start":1727971583426,"stop":1727971596274,"duration":12848},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffffb7d0b650>\ndevice = <golioth.golioth.Device object at 0xffffb7d02a10>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb7d02a10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727971437237,"stop":1727971437238,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727971437238,"stop":1727971437239,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727971437239,"stop":1727971437240,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727971437240,"stop":1727971437240,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727971437241,"stop":1727971437241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727971437242,"stop":1727971437242,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727971437242,"stop":1727971437242,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727971437243,"stop":1727971437243,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727971437244,"stop":1727971437244,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727971437244,"stop":1727971437245,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727971437245,"stop":1727971437245,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727971437245,"stop":1727971437246,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727971437246,"stop":1727971437643,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727971437644,"stop":1727971452527,"duration":14883},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727971452529,"stop":1727971453527,"duration":998},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727971453528,"stop":1727971577856,"duration":124328},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffffb7d0b650>\ndevice = <golioth.golioth.Device object at 0xffffb7d02a10>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb7d02a10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"9865da6864d32bd3","name":"stdout","source":"9865da6864d32bd3.txt","type":"text/plain","size":244}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727971749772,"stop":1727971749772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727971749778,"stop":1727971750208,"duration":430},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727971750210,"stop":1727971750212,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727971750214,"stop":1727971750217,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"eb3fb678221a"},{"name":"thread","value":"308-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":12,"skipped":0,"passed":54,"unknown":0,"total":69},"items":[{"uid":"e98497f882e66cfb","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/e98497f882e66cfb","status":"passed","time":{"start":1727958821615,"stop":1727958834829,"duration":13214}},{"uid":"bff460d3e3ae65c8","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/bff460d3e3ae65c8","status":"passed","time":{"start":1727949000945,"stop":1727949014313,"duration":13368}},{"uid":"9a54f0130eb8dad0","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/9a54f0130eb8dad0","status":"passed","time":{"start":1727954440151,"stop":1727954452974,"duration":12823}},{"uid":"c3c19cc207507a2f","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/c3c19cc207507a2f","status":"passed","time":{"start":1727952899390,"stop":1727952913474,"duration":14084}},{"uid":"b0bd178e32c9b9f5","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b0bd178e32c9b9f5","status":"passed","time":{"start":1727933270712,"stop":1727933284082,"duration":13370}},{"uid":"9b686028c86cb7c9","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/9b686028c86cb7c9","status":"passed","time":{"start":1727949000945,"stop":1727949014313,"duration":13368}},{"uid":"4feca74007055bea","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/4feca74007055bea","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727943101575,"stop":1727943115877,"duration":14302}},{"uid":"809733a26af389f3","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/809733a26af389f3","status":"passed","time":{"start":1727933270712,"stop":1727933284082,"duration":13370}},{"uid":"a7db5f47cb972822","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/a7db5f47cb972822","status":"passed","time":{"start":1727926965679,"stop":1727926979048,"duration":13369}},{"uid":"a0073da0fd19a42c","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/a0073da0fd19a42c","status":"passed","time":{"start":1727916557109,"stop":1727916570581,"duration":13472}},{"uid":"df5b531d0280ccf0","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/df5b531d0280ccf0","status":"passed","time":{"start":1727907894684,"stop":1727907907648,"duration":12964}},{"uid":"f76a64b38193dbb0","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f76a64b38193dbb0","status":"passed","time":{"start":1727833261588,"stop":1727833275162,"duration":13574}},{"uid":"9d9f6cd7909661c4","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/9d9f6cd7909661c4","status":"passed","time":{"start":1727830187176,"stop":1727830201163,"duration":13987}},{"uid":"fd0cb7c5fa47f3f6","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/fd0cb7c5fa47f3f6","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727814444313,"stop":1727814444313,"duration":0}},{"uid":"725aaff16d1538b7","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/725aaff16d1538b7","status":"passed","time":{"start":1727815748515,"stop":1727815761183,"duration":12668}},{"uid":"e3b8ef330dd95364","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/e3b8ef330dd95364","status":"passed","time":{"start":1727798350999,"stop":1727798364668,"duration":13669}},{"uid":"aa4058c83f3e2b6b","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/aa4058c83f3e2b6b","status":"passed","time":{"start":1727810946364,"stop":1727810959184,"duration":12820}},{"uid":"b52cde7b3517f537","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/b52cde7b3517f537","status":"passed","time":{"start":1727806507744,"stop":1727806522032,"duration":14288}},{"uid":"5cfda5c984e1197","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/5cfda5c984e1197","status":"passed","time":{"start":1727798350999,"stop":1727798364668,"duration":13669}},{"uid":"246fc3c3d4f534de","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/246fc3c3d4f534de","status":"passed","time":{"start":1727797540587,"stop":1727797554776,"duration":14189}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"da48d833bdf7a37b.json","parameterValues":["'nrf9160dk'","'zephyr'"]}