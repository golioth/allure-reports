{"uid":"28b1de0e84b9e15c","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1727972819068,"stop":1727972841598,"duration":22530},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9c18cfd0>\ndevice = <golioth.golioth.Device object at 0xffff9c1a0310>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727972799512,"stop":1727972799512,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727972799513,"stop":1727972799514,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727972799513,"stop":1727972799513,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727972799514,"stop":1727972799514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727972799515,"stop":1727972799517,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727972799515,"stop":1727972799515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727972799518,"stop":1727972799519,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727972799518,"stop":1727972799518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727972799519,"stop":1727972799949,"duration":430},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727972799950,"stop":1727972800988,"duration":1038},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727972800989,"stop":1727972818024,"duration":17035},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727972818025,"stop":1727972819066,"duration":1041},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9c18cfd0>\ndevice = <golioth.golioth.Device object at 0xffff9c1a0310>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"793dce042e9e486f","name":"log","source":"793dce042e9e486f.txt","type":"text/plain","size":12552}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727972841952,"stop":1727972841957,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727972841959,"stop":1727972842376,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727972842378,"stop":1727972842381,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727972842386,"stop":1727972842386,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a6d653534935"},{"name":"thread","value":"468-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":7,"skipped":0,"passed":64,"unknown":0,"total":72},"items":[{"uid":"a32657a5f03aa775","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/a32657a5f03aa775","status":"passed","time":{"start":1727966603923,"stop":1727966628588,"duration":24665}},{"uid":"7cc1d1cc3247c7ae","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/7cc1d1cc3247c7ae","status":"passed","time":{"start":1727964512195,"stop":1727964536786,"duration":24591}},{"uid":"934cb7c9ae463478","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/934cb7c9ae463478","status":"passed","time":{"start":1727958033350,"stop":1727958056480,"duration":23130}},{"uid":"398a6a479e9c51b6","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/398a6a479e9c51b6","status":"passed","time":{"start":1727956953695,"stop":1727956975678,"duration":21983}},{"uid":"8781e41a5a7a752e","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/8781e41a5a7a752e","status":"passed","time":{"start":1727956414929,"stop":1727956437976,"duration":23047}},{"uid":"1376990c96dc2185","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/1376990c96dc2185","status":"passed","time":{"start":1727952315466,"stop":1727952339110,"duration":23644}},{"uid":"b55d20bf9244cc2","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b55d20bf9244cc2","status":"passed","time":{"start":1727950553698,"stop":1727950578394,"duration":24696}},{"uid":"123276f5920108d6","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/123276f5920108d6","status":"passed","time":{"start":1727948313554,"stop":1727948335927,"duration":22373}},{"uid":"8438df9df926559c","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/8438df9df926559c","status":"passed","time":{"start":1727948460355,"stop":1727948483121,"duration":22766}},{"uid":"291363304db199e5","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/291363304db199e5","status":"passed","time":{"start":1727946506349,"stop":1727946529788,"duration":23439}},{"uid":"2f9c1506143bee09","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/2f9c1506143bee09","status":"passed","time":{"start":1727933079387,"stop":1727933098808,"duration":19421}},{"uid":"e0334ab49006930","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/e0334ab49006930","status":"passed","time":{"start":1727928149285,"stop":1727928172707,"duration":23422}},{"uid":"b125dd6f8b94db0","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/b125dd6f8b94db0","status":"passed","time":{"start":1727917797593,"stop":1727917816704,"duration":19111}},{"uid":"54b5206df6f14e89","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/54b5206df6f14e89","status":"passed","time":{"start":1727908872885,"stop":1727908894316,"duration":21431}},{"uid":"75f064e32c9720a5","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/75f064e32c9720a5","status":"passed","time":{"start":1727833590661,"stop":1727833612258,"duration":21597}},{"uid":"8f12460b80ada272","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/8f12460b80ada272","status":"passed","time":{"start":1727830828601,"stop":1727830852346,"duration":23745}},{"uid":"4b3cc46db31ece49","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/4b3cc46db31ece49","status":"passed","time":{"start":1727816552632,"stop":1727816574378,"duration":21746}},{"uid":"d2c187af960c6ee4","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/d2c187af960c6ee4","status":"passed","time":{"start":1727816075916,"stop":1727816098160,"duration":22244}},{"uid":"8a807c4640b7cfba","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/8a807c4640b7cfba","status":"passed","time":{"start":1727815402578,"stop":1727815428663,"duration":26085}},{"uid":"87946538a6231182","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/87946538a6231182","status":"passed","time":{"start":1727810499212,"stop":1727810520965,"duration":21753}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"28b1de0e84b9e15c.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}