{"uid":"2e504e0025158b5b","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1727968767001,"stop":1727968791024,"duration":24023},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8bfab690>\ndevice = <golioth.golioth.Device object at 0xffff8bf23550>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8bf23550>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727968686308,"stop":1727968686309,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727968686309,"stop":1727968686310,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727968686310,"stop":1727968686310,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727968686311,"stop":1727968686311,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727968686312,"stop":1727968686312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727968686313,"stop":1727968686313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727968686314,"stop":1727968686314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727968686315,"stop":1727968686315,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727968686316,"stop":1727968686316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727968686317,"stop":1727968686318,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727968686317,"stop":1727968686317,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727968686318,"stop":1727968686318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727968686319,"stop":1727968686808,"duration":489},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727968686809,"stop":1727968736639,"duration":49830},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727968736640,"stop":1727968738199,"duration":1559},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727968738199,"stop":1727968760245,"duration":22046},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8bfab690>\ndevice = <golioth.golioth.Device object at 0xffff8bf23550>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8bf23550>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"b81077ea0727aaa7","name":"stdout","source":"b81077ea0727aaa7.txt","type":"text/plain","size":1481}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727968989386,"stop":1727968989386,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727968989390,"stop":1727968989845,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727968989847,"stop":1727968989852,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727968989855,"stop":1727968989857,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"9510ffc6750e"},{"name":"thread","value":"258-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":17,"broken":0,"skipped":0,"passed":57,"unknown":0,"total":74},"items":[{"uid":"e2be59c0fd8e9913","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/e2be59c0fd8e9913","status":"passed","time":{"start":1727967867963,"stop":1727967880903,"duration":12940}},{"uid":"7e7f7570ded0f306","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/7e7f7570ded0f306","status":"passed","time":{"start":1727964922611,"stop":1727964935625,"duration":13014}},{"uid":"afdf321f77717361","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/afdf321f77717361","status":"passed","time":{"start":1727961525003,"stop":1727961538341,"duration":13338}},{"uid":"b702e0fcfb6286b6","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b702e0fcfb6286b6","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727955569148,"stop":1727955582145,"duration":12997}},{"uid":"95c60edd0f20d6d","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/95c60edd0f20d6d","status":"passed","time":{"start":1727954677207,"stop":1727954690070,"duration":12863}},{"uid":"e0962594aad2a9f7","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/e0962594aad2a9f7","status":"passed","time":{"start":1727906815939,"stop":1727906829605,"duration":13666}},{"uid":"c4cbe9979670bf20","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c4cbe9979670bf20","status":"passed","time":{"start":1727932509928,"stop":1727932523016,"duration":13088}},{"uid":"3d18758029b5b777","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/3d18758029b5b777","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727944481467,"stop":1727944495834,"duration":14367}},{"uid":"33063d1abbf887dc","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/33063d1abbf887dc","status":"passed","time":{"start":1727943633461,"stop":1727943646442,"duration":12981}},{"uid":"6c2431a1f25cc238","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/6c2431a1f25cc238","status":"passed","time":{"start":1727942776027,"stop":1727942789868,"duration":13841}},{"uid":"3ef7c15e37604cbb","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/3ef7c15e37604cbb","status":"passed","time":{"start":1727831831959,"stop":1727831844755,"duration":12796}},{"uid":"14adc5ac679fb0e8","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/14adc5ac679fb0e8","status":"passed","time":{"start":1727932509928,"stop":1727932523016,"duration":13088}},{"uid":"4ebc4d96101c6052","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/4ebc4d96101c6052","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727926047307,"stop":1727926061892,"duration":14585}},{"uid":"9b751662c093e107","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/9b751662c093e107","status":"passed","time":{"start":1727915775542,"stop":1727915789225,"duration":13683}},{"uid":"40c3968563adbe03","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/40c3968563adbe03","status":"passed","time":{"start":1727906815939,"stop":1727906829605,"duration":13666}},{"uid":"e38ddaca2793baa8","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/e38ddaca2793baa8","status":"passed","time":{"start":1727831831959,"stop":1727831844755,"duration":12796}},{"uid":"bd7effe3c70db7ae","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/bd7effe3c70db7ae","status":"passed","time":{"start":1727829369220,"stop":1727829383912,"duration":14692}},{"uid":"8a81f658ae087ecb","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/8a81f658ae087ecb","status":"passed","time":{"start":1727800987754,"stop":1727801000530,"duration":12776}},{"uid":"aebb373295083301","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/aebb373295083301","status":"passed","time":{"start":1727800064047,"stop":1727800076884,"duration":12837}},{"uid":"8de12cbdf057dddb","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/8de12cbdf057dddb","status":"passed","time":{"start":1727811456804,"stop":1727811469531,"duration":12727}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"2e504e0025158b5b.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}