{"uid":"84f69d4d2fc36668","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1728601567140,"stop":1728601660255,"duration":93115},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb41b2c90>\ndevice = <golioth.golioth.Device object at 0xffffb41c9b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728601538411,"stop":1728601538411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728601538412,"stop":1728601538413,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728601538412,"stop":1728601538412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728601538413,"stop":1728601538413,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728601538414,"stop":1728601538416,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728601538414,"stop":1728601538414,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728601538417,"stop":1728601538417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728601538418,"stop":1728601538418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728601538418,"stop":1728601538837,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728601538837,"stop":1728601539699,"duration":862},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728601539700,"stop":1728601566074,"duration":26374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728601566074,"stop":1728601567135,"duration":1061},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb41b2c90>\ndevice = <golioth.golioth.Device object at 0xffffb41c9b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"fa0acf1ce08fd864","name":"log","source":"fa0acf1ce08fd864.txt","type":"text/plain","size":16349}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728601660608,"stop":1728601660617,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728601660618,"stop":1728601660996,"duration":378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728601660998,"stop":1728601661000,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728601661005,"stop":1728601661005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1a33e88e3176"},{"name":"thread","value":"668-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":18,"skipped":0,"passed":104,"unknown":0,"total":122},"items":[{"uid":"a879f3b277d25af9","reportUrl":"https://golioth.github.io/allure-reports/1624//#testresult/a879f3b277d25af9","status":"passed","time":{"start":1728598901664,"stop":1728598927753,"duration":26089}},{"uid":"febba7d4b5ec1458","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/febba7d4b5ec1458","status":"passed","time":{"start":1728595429796,"stop":1728595440677,"duration":10881}},{"uid":"6cff5b560e64047e","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/6cff5b560e64047e","status":"passed","time":{"start":1728536922082,"stop":1728536933066,"duration":10984}},{"uid":"f6fc7143bf17c6ae","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/f6fc7143bf17c6ae","status":"passed","time":{"start":1728523518100,"stop":1728523541705,"duration":23605}},{"uid":"d02d23ec0f697257","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/d02d23ec0f697257","status":"passed","time":{"start":1728321849544,"stop":1728321859829,"duration":10285}},{"uid":"220dd9eb689037ec","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/220dd9eb689037ec","status":"passed","time":{"start":1728494713580,"stop":1728494724049,"duration":10469}},{"uid":"f5c53993b7e1709e","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/f5c53993b7e1709e","status":"passed","time":{"start":1728486316493,"stop":1728486346010,"duration":29517}},{"uid":"7b365bd70d1c416b","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/7b365bd70d1c416b","status":"passed","time":{"start":1728437498810,"stop":1728437517846,"duration":19036}},{"uid":"119a421e8f2c1741","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/119a421e8f2c1741","status":"passed","time":{"start":1728428164748,"stop":1728428191852,"duration":27104}},{"uid":"5d340dbd2f9eddc6","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/5d340dbd2f9eddc6","status":"passed","time":{"start":1728402166551,"stop":1728402207761,"duration":41210}},{"uid":"5a013f44904f85d8","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/5a013f44904f85d8","status":"passed","time":{"start":1728401942032,"stop":1728401953452,"duration":11420}},{"uid":"24f012103280f20e","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/24f012103280f20e","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728398955739,"stop":1728398955739,"duration":0}},{"uid":"12989c39b64794f9","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/12989c39b64794f9","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728349892116,"stop":1728349892116,"duration":0}},{"uid":"da6b48403ebef025","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/da6b48403ebef025","status":"passed","time":{"start":1728346205730,"stop":1728346227566,"duration":21836}},{"uid":"9ccb0b22144e079","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9ccb0b22144e079","status":"passed","time":{"start":1728345143304,"stop":1728345154086,"duration":10782}},{"uid":"588f28648bde507b","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/588f28648bde507b","status":"passed","time":{"start":1728338039097,"stop":1728338047076,"duration":7979}},{"uid":"c4845b9fa8380fe","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/c4845b9fa8380fe","status":"passed","time":{"start":1728319805481,"stop":1728319815706,"duration":10225}},{"uid":"c43861c3fe8dbe64","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/c43861c3fe8dbe64","status":"passed","time":{"start":1728321849544,"stop":1728321859829,"duration":10285}},{"uid":"8b2a31a1d0eb70c9","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/8b2a31a1d0eb70c9","status":"passed","time":{"start":1728321849544,"stop":1728321859829,"duration":10285}},{"uid":"63728374c2aaeae8","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/63728374c2aaeae8","status":"passed","time":{"start":1728319805481,"stop":1728319815706,"duration":10225}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"84f69d4d2fc36668.json","parameterValues":["'nrf9160dk'","'zephyr'"]}