{"uid":"8b7962f1d80fee68","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1728600790815,"stop":1728600903928,"duration":113113},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92528750>\ndevice = <golioth.golioth.Device object at 0xffff9252b9d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff92698790>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728600762106,"stop":1728600762106,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1728600762107,"stop":1728600762122,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728600762122,"stop":1728600762123,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728600762123,"stop":1728600762123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728600762124,"stop":1728600762126,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728600762127,"stop":1728600762127,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728600762127,"stop":1728600762127,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728600762128,"stop":1728600762533,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728600762533,"stop":1728600763421,"duration":888},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728600763422,"stop":1728600789711,"duration":26289},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728600789712,"stop":1728600790812,"duration":1100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92528750>\ndevice = <golioth.golioth.Device object at 0xffff9252b9d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff92698790>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d7b4983c3d49cb2a","name":"log","source":"d7b4983c3d49cb2a.txt","type":"text/plain","size":16361}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728600904217,"stop":1728600904248,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728600904250,"stop":1728600904628,"duration":378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728600904630,"stop":1728600904632,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728600904637,"stop":1728600904637,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1a33e88e3176"},{"name":"thread","value":"392-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":15,"skipped":0,"passed":99,"unknown":0,"total":121},"items":[{"uid":"73c3c01a3033aa8e","reportUrl":"https://golioth.github.io/allure-reports/1624//#testresult/73c3c01a3033aa8e","status":"passed","time":{"start":1728598274837,"stop":1728598315217,"duration":40380}},{"uid":"113437fd9e8c3fa1","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/113437fd9e8c3fa1","status":"passed","time":{"start":1728594847706,"stop":1728594878354,"duration":30648}},{"uid":"5821eb0a6afdf745","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/5821eb0a6afdf745","status":"passed","time":{"start":1728536378318,"stop":1728536406932,"duration":28614}},{"uid":"6f73a6550c694dd9","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/6f73a6550c694dd9","status":"passed","time":{"start":1728522802991,"stop":1728522851506,"duration":48515}},{"uid":"69b0486b8577192f","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/69b0486b8577192f","status":"passed","time":{"start":1728322533687,"stop":1728322561941,"duration":28254}},{"uid":"a74b4f4e5984ceef","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/a74b4f4e5984ceef","status":"passed","time":{"start":1728494112280,"stop":1728494141319,"duration":29039}},{"uid":"5241b00826149386","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/5241b00826149386","status":"passed","time":{"start":1728485743605,"stop":1728485795012,"duration":51407}},{"uid":"53ab65a3a27ea0bd","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/53ab65a3a27ea0bd","status":"passed","time":{"start":1728437431747,"stop":1728437464834,"duration":33087}},{"uid":"952bc8ccdacb901d","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/952bc8ccdacb901d","status":"passed","time":{"start":1728427421870,"stop":1728427478182,"duration":56312}},{"uid":"b5f4c59182d67f45","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/b5f4c59182d67f45","status":"passed","time":{"start":1728402911997,"stop":1728402961598,"duration":49601}},{"uid":"89e543c5a841792f","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/89e543c5a841792f","status":"passed","time":{"start":1728402742920,"stop":1728402786082,"duration":43162}},{"uid":"455c2e915bce4f54","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/455c2e915bce4f54","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728399003674,"stop":1728399003674,"duration":0}},{"uid":"df391ceb88f69e28","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/df391ceb88f69e28","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728349938414,"stop":1728349938414,"duration":0}},{"uid":"b9fc2e8eaf512d99","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/b9fc2e8eaf512d99","status":"passed","time":{"start":1728347062643,"stop":1728347109745,"duration":47102}},{"uid":"6383de6c48d04d44","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/6383de6c48d04d44","status":"passed","time":{"start":1728346195612,"stop":1728346235616,"duration":40004}},{"uid":"458274ac5ffe8efe","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/458274ac5ffe8efe","status":"passed","time":{"start":1728338717118,"stop":1728338761696,"duration":44578}},{"uid":"1e1e20a83ec18072","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/1e1e20a83ec18072","status":"passed","time":{"start":1728320428876,"stop":1728320459088,"duration":30212}},{"uid":"b03ff3c08eaf2d6d","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/b03ff3c08eaf2d6d","status":"passed","time":{"start":1728322533687,"stop":1728322561941,"duration":28254}},{"uid":"9d32f3fad440da47","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/9d32f3fad440da47","status":"passed","time":{"start":1728322533687,"stop":1728322561941,"duration":28254}},{"uid":"713f1ce636afd3ba","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/713f1ce636afd3ba","status":"passed","time":{"start":1728320428876,"stop":1728320459088,"duration":30212}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"8b7962f1d80fee68.json","parameterValues":["'nrf9160dk'","'zephyr'"]}