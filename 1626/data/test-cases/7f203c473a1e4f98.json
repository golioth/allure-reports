{"uid":"7f203c473a1e4f98","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1728584433937,"stop":1728584456615,"duration":22678},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7f33f750>\ndevice = <golioth.golioth.Device object at 0xffff7f356190>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728584416497,"stop":1728584416497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728584416498,"stop":1728584416498,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728584416498,"stop":1728584416498,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728584416499,"stop":1728584416499,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728584416499,"stop":1728584416500,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728584416500,"stop":1728584416502,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728584416503,"stop":1728584416503,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728584416503,"stop":1728584416503,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728584416504,"stop":1728584416916,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728584416917,"stop":1728584417808,"duration":891},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728584417809,"stop":1728584432909,"duration":15100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728584432910,"stop":1728584433935,"duration":1025},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7f33f750>\ndevice = <golioth.golioth.Device object at 0xffff7f356190>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7cf50cd0b817f67d","name":"log","source":"7cf50cd0b817f67d.txt","type":"text/plain","size":13047}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728584456988,"stop":1728584457035,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728584457036,"stop":1728584457411,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728584457413,"stop":1728584457415,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728584457420,"stop":1728584457420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"4923e7b3fead"},{"name":"thread","value":"546-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"61a5c41f35756ec7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728584389254,"stop":1728584411874,"duration":22620}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":41,"skipped":0,"passed":87,"unknown":0,"total":128},"items":[{"uid":"db80b1fb3d0aa9e0","reportUrl":"https://golioth.github.io/allure-reports/1624//#testresult/db80b1fb3d0aa9e0","status":"passed","time":{"start":1728579532213,"stop":1728579556166,"duration":23953}},{"uid":"81647cecd6b29f82","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/81647cecd6b29f82","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728574154701,"stop":1728574177317,"duration":22616}},{"uid":"e89a9d487535b1ee","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/e89a9d487535b1ee","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728537826793,"stop":1728537849316,"duration":22523}},{"uid":"7d8494b9c27ed2ca","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/7d8494b9c27ed2ca","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728522456294,"stop":1728522478868,"duration":22574}},{"uid":"1b5546c9b02a0b72","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/1b5546c9b02a0b72","status":"passed","time":{"start":1728495406709,"stop":1728495430479,"duration":23770}},{"uid":"b6379609ae27f51e","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/b6379609ae27f51e","status":"passed","time":{"start":1728494535786,"stop":1728494561268,"duration":25482}},{"uid":"3198511c512f0024","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/3198511c512f0024","status":"passed","time":{"start":1728485437514,"stop":1728485462972,"duration":25458}},{"uid":"2781e33814c4297a","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/2781e33814c4297a","status":"passed","time":{"start":1728436346976,"stop":1728436366584,"duration":19608}},{"uid":"70900e46066678d6","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/70900e46066678d6","status":"passed","time":{"start":1728427060152,"stop":1728427085744,"duration":25592}},{"uid":"e137532e95cdbd1e","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/e137532e95cdbd1e","status":"passed","time":{"start":1728343354823,"stop":1728343376220,"duration":21397}},{"uid":"684c076ed8324ed4","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/684c076ed8324ed4","status":"passed","time":{"start":1728401717593,"stop":1728401738018,"duration":20425}},{"uid":"65f058eaded93c99","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/65f058eaded93c99","status":"passed","time":{"start":1728343354823,"stop":1728343376220,"duration":21397}},{"uid":"fe7fb6e75da514ed","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/fe7fb6e75da514ed","status":"passed","time":{"start":1728349828667,"stop":1728349849292,"duration":20625}},{"uid":"191653ba5f5d2e5d","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/191653ba5f5d2e5d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728344999519,"stop":1728345112380,"duration":112861}},{"uid":"e87ab7700ada7bf3","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/e87ab7700ada7bf3","status":"passed","time":{"start":1728343354823,"stop":1728343376220,"duration":21397}},{"uid":"371f964eb644a594","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/371f964eb644a594","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728338130325,"stop":1728338152955,"duration":22630}},{"uid":"eb1bd36bc97d2481","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/eb1bd36bc97d2481","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728328801722,"stop":1728328914525,"duration":112803}},{"uid":"3859d6a90e0facbf","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/3859d6a90e0facbf","status":"passed","time":{"start":1728328689789,"stop":1728328715209,"duration":25420}},{"uid":"83d892582b19b9e9","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/83d892582b19b9e9","status":"passed","time":{"start":1728321426795,"stop":1728321450454,"duration":23659}},{"uid":"36757aa5d380a606","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/36757aa5d380a606","status":"passed","time":{"start":1728318428838,"stop":1728318451331,"duration":22493}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7f203c473a1e4f98.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}