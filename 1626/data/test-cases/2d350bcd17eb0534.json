{"uid":"2d350bcd17eb0534","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"934caf5f97c3bf444d136e05890d35c9","time":{"start":1728583178603,"stop":1728583216589,"duration":37986},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9203eb10>\ndevice = <golioth.golioth.Device object at 0xffff92059690>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728583150012,"stop":1728583150013,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728583150013,"stop":1728583150013,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728583150014,"stop":1728583150014,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728583150014,"stop":1728583150014,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728583150015,"stop":1728583150015,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728583150015,"stop":1728583150017,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728583150018,"stop":1728583150018,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728583150019,"stop":1728583150019,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728583150020,"stop":1728583150601,"duration":581},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728583150602,"stop":1728583151956,"duration":1354},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728583151957,"stop":1728583175426,"duration":23469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728583175427,"stop":1728583178596,"duration":3169},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9203eb10>\ndevice = <golioth.golioth.Device object at 0xffff92059690>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a53931eeb9478c78","name":"log","source":"a53931eeb9478c78.txt","type":"text/plain","size":28548}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728583216878,"stop":1728583216922,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728583216924,"stop":1728583217462,"duration":538},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728583217464,"stop":1728583217466,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728583217471,"stop":1728583217471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f3bdf7833498"},{"name":"thread","value":"541-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":125,"unknown":0,"total":129},"items":[{"uid":"1154a5c2cbc37da8","reportUrl":"https://golioth.github.io/allure-reports/1624//#testresult/1154a5c2cbc37da8","status":"passed","time":{"start":1728578013043,"stop":1728578040782,"duration":27739}},{"uid":"9d04b3ae97a9ce5c","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/9d04b3ae97a9ce5c","status":"passed","time":{"start":1728571927955,"stop":1728571958117,"duration":30162}},{"uid":"21fb2dcd3487b77f","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/21fb2dcd3487b77f","status":"passed","time":{"start":1728536571331,"stop":1728536599620,"duration":28289}},{"uid":"f22c04539b5869c7","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/f22c04539b5869c7","status":"passed","time":{"start":1728521684729,"stop":1728521713066,"duration":28337}},{"uid":"177dac2a69f3d5b2","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/177dac2a69f3d5b2","status":"passed","time":{"start":1728494558534,"stop":1728494586719,"duration":28185}},{"uid":"9a52b1d40dc6451a","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/9a52b1d40dc6451a","status":"passed","time":{"start":1728493033492,"stop":1728493065655,"duration":32163}},{"uid":"b8b7f5a5e1c32249","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/b8b7f5a5e1c32249","status":"passed","time":{"start":1728484238270,"stop":1728484266511,"duration":28241}},{"uid":"bfbeeed948175f41","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/bfbeeed948175f41","status":"passed","time":{"start":1728435418902,"stop":1728435447196,"duration":28294}},{"uid":"3a20a759f92407b9","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/3a20a759f92407b9","status":"passed","time":{"start":1728425996029,"stop":1728426031094,"duration":35065}},{"uid":"e7256ef6f914bfab","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/e7256ef6f914bfab","status":"passed","time":{"start":1728342725550,"stop":1728342753294,"duration":27744}},{"uid":"d1ea745c5d514e88","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/d1ea745c5d514e88","status":"passed","time":{"start":1728401117365,"stop":1728401150320,"duration":32955}},{"uid":"57992b7510867b8b","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/57992b7510867b8b","status":"passed","time":{"start":1728342725550,"stop":1728342753294,"duration":27744}},{"uid":"8c55c5adc311e775","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/8c55c5adc311e775","status":"passed","time":{"start":1728349518346,"stop":1728349550510,"duration":32164}},{"uid":"77980fa1e0cc737","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/77980fa1e0cc737","status":"passed","time":{"start":1728344082463,"stop":1728344110815,"duration":28352}},{"uid":"9ceef5309953a260","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9ceef5309953a260","status":"passed","time":{"start":1728342725550,"stop":1728342753294,"duration":27744}},{"uid":"ccab696c5eccda1f","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/ccab696c5eccda1f","status":"passed","time":{"start":1728337731329,"stop":1728337759517,"duration":28188}},{"uid":"a9c4fc0a56da45bb","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/a9c4fc0a56da45bb","status":"passed","time":{"start":1728318175544,"stop":1728318207903,"duration":32359}},{"uid":"dda38f5deae8ed68","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/dda38f5deae8ed68","status":"passed","time":{"start":1728325225680,"stop":1728325253917,"duration":28237}},{"uid":"c768bc53a436aeb7","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/c768bc53a436aeb7","status":"passed","time":{"start":1728321137186,"stop":1728321169241,"duration":32055}},{"uid":"b9c958bdf7a4daf8","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/b9c958bdf7a4daf8","status":"passed","time":{"start":1728318175544,"stop":1728318207903,"duration":32359}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"2d350bcd17eb0534.json","parameterValues":["'nrf52840dk'","'zephyr'"]}