{"uid":"d82f0a2cae9ef911","name":"test_set_int_range_out_max","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_max","historyId":"91ac386f26c488866e25e8ea181a51f9","time":{"start":1727944415312,"stop":1727944428093,"duration":12781},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9f32a650>\ndevice = <golioth.golioth.Device object at 0xffff9f2a2bd0>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9f2a2bd0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727944288901,"stop":1727944288902,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727944288902,"stop":1727944288902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727944288903,"stop":1727944288903,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727944288904,"stop":1727944288904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727944288905,"stop":1727944288906,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727944288905,"stop":1727944288905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727944288906,"stop":1727944288907,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727944288907,"stop":1727944288907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727944288908,"stop":1727944288908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727944288909,"stop":1727944288910,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727944288909,"stop":1727944288909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727944288910,"stop":1727944289351,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727944288910,"stop":1727944288910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727944289352,"stop":1727944340674,"duration":51322},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727944340676,"stop":1727944341649,"duration":973},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727944341649,"stop":1727944358007,"duration":16358},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9f32a650>\ndevice = <golioth.golioth.Device object at 0xffff9f2a2bd0>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9f2a2bd0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"c5e335c3a7c0a151","name":"stdout","source":"c5e335c3a7c0a151.txt","type":"text/plain","size":943}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727944517996,"stop":1727944517996,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727944518001,"stop":1727944518516,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727944518518,"stop":1727944518520,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727944518522,"stop":1727944518524,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"15eceaf614a8"},{"name":"thread","value":"260-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":56,"unknown":0,"total":61},"items":[{"uid":"cc84f8be677c4d30","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/cc84f8be677c4d30","status":"passed","time":{"start":1727943681159,"stop":1727943694561,"duration":13402}},{"uid":"64aa1b79816ffa50","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/64aa1b79816ffa50","status":"passed","time":{"start":1727831847487,"stop":1727831860684,"duration":13197}},{"uid":"604563821697ceb3","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/604563821697ceb3","status":"passed","time":{"start":1727926220774,"stop":1727926234490,"duration":13716}},{"uid":"6f6fe2efe11a01a2","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/6f6fe2efe11a01a2","status":"passed","time":{"start":1727926220774,"stop":1727926234490,"duration":13716}},{"uid":"4898e5ba1dcccc20","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/4898e5ba1dcccc20","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1727915827001,"stop":1727915827001,"duration":0}},{"uid":"6968238b515ce7e5","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/6968238b515ce7e5","status":"passed","time":{"start":1727907136305,"stop":1727907150830,"duration":14525}},{"uid":"296e9b8df5e3e78f","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/296e9b8df5e3e78f","status":"passed","time":{"start":1727831847487,"stop":1727831860684,"duration":13197}},{"uid":"11f5186f6c77f2e","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/11f5186f6c77f2e","status":"passed","time":{"start":1727829396737,"stop":1727829409910,"duration":13173}},{"uid":"c8124db336364dda","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/c8124db336364dda","status":"passed","time":{"start":1727801843378,"stop":1727801856643,"duration":13265}},{"uid":"931600dd16b34269","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/931600dd16b34269","status":"passed","time":{"start":1727813406637,"stop":1727813419588,"duration":12951}},{"uid":"2a578e154d548fa3","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/2a578e154d548fa3","status":"passed","time":{"start":1727795694552,"stop":1727795707953,"duration":13401}},{"uid":"b6d5c389654b16d3","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/b6d5c389654b16d3","status":"passed","time":{"start":1727809591511,"stop":1727809605016,"duration":13505}},{"uid":"7bb013f842d293e5","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/7bb013f842d293e5","status":"passed","time":{"start":1727805709590,"stop":1727805723195,"duration":13605}},{"uid":"de1d310caf0ccd25","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/de1d310caf0ccd25","status":"passed","time":{"start":1727795694552,"stop":1727795707953,"duration":13401}},{"uid":"abcec967d218574d","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/abcec967d218574d","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727794821764,"stop":1727794836827,"duration":15063}},{"uid":"bf40aa547eab6934","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/bf40aa547eab6934","status":"passed","time":{"start":1727786283359,"stop":1727786296321,"duration":12962}},{"uid":"d7ee5d4bbec00716","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/d7ee5d4bbec00716","status":"passed","time":{"start":1727782512864,"stop":1727782526368,"duration":13504}},{"uid":"c90d7eac29eaec8f","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/c90d7eac29eaec8f","status":"passed","time":{"start":1727780790117,"stop":1727780802993,"duration":12876}},{"uid":"8f1ef102692cfd65","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/8f1ef102692cfd65","status":"passed","time":{"start":1727778997128,"stop":1727779010031,"duration":12903}},{"uid":"7dd9d1f473ee0ea7","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/7dd9d1f473ee0ea7","status":"passed","time":{"start":1727775512828,"stop":1727775525674,"duration":12846}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"d82f0a2cae9ef911.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}