{"uid":"7e4d2dba5f7ad1ff","name":"test_invalid_arg","fullName":"tests.hil.tests.rpc.test_rpc#test_invalid_arg","historyId":"48fadb83e46d2520ae9535f009e9296a","time":{"start":1727945683237,"stop":1727945688991,"duration":5754},"status":"broken","statusMessage":"golioth.golioth.RPCTimeout: RPC timeout","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:377: in handle_async_request\n    resp = await self._pool.handle_async_request(req)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:216: in handle_async_request\n    raise exc from None\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:196: in handle_async_request\n    response = await connection.handle_async_request(\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:101: in handle_async_request\n    return await self._connection.handle_async_request(request)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:143: in handle_async_request\n    raise exc\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:113: in handle_async_request\n    ) = await self._receive_response_headers(**kwargs)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:186: in _receive_response_headers\n    event = await self._receive_event(timeout=timeout)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:224: in _receive_event\n    data = await self._network_stream.read(\n/usr/local/lib/python3.11/dist-packages/httpcore/_backends/trio.py:32: in read\n    with map_exceptions(exc_map):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'trio.TooSlowError'>: <class 'httpcore.ReadTimeout'>, <class 'trio.BrokenResourceError'>: <class 'httpcore.ReadError'>, <class 'trio.ClosedResourceError'>: <class 'httpcore.ReadError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ReadTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpcore/_exceptions.py:14: ReadTimeout\n\nThe above exception was the direct cause of the following exception:\n\nself = <golioth.golioth.DeviceRPC object at 0xffff85ed40d0>\nmethod = 'basic_return_type', params = ('foo',)\n\n    async def call(self, method: str, params: Union[list, dict]):\n        async with self.http_client as c:\n            try:\n>               response = await c.post('rpc', json={\n                    \"method\": method,\n                    \"params\": params,\n                })\n\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1905: in post\n    return await self.request(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1585: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1674: in send\n    response = await self._send_handling_auth(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1702: in _send_handling_auth\n    response = await self._send_handling_redirects(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1739: in _send_handling_redirects\n    response = await self._send_single_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1776: in _send_single_request\n    response = await transport.handle_async_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:376: in handle_async_request\n    with map_httpcore_exceptions():\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ReadTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:89: ReadTimeout\n\nThe above exception was the direct cause of the following exception:\n\nboard = <esp32_devkitc_wrover.ESP32DevKitCWROVER object at 0xffff85d23590>\ndevice = <golioth.golioth.Device object at 0xffff85d47b10>\n\n    async def test_invalid_arg(board, device):\n        with pytest.raises(RPCResultError) as e:\n>           rsp = await device.rpc.basic_return_type(\"foo\")\n\ntests/hil/tests/rpc/test_rpc.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:656: in call_method\n    return await self.call(name, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <golioth.golioth.DeviceRPC object at 0xffff85ed40d0>\nmethod = 'basic_return_type', params = ('foo',)\n\n    async def call(self, method: str, params: Union[list, dict]):\n        async with self.http_client as c:\n            try:\n                response = await c.post('rpc', json={\n                    \"method\": method,\n                    \"params\": params,\n                })\n            except httpx.ReadTimeout as e:\n>               raise RPCTimeout() from e\nE               golioth.golioth.RPCTimeout: RPC timeout\n\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:638: RPCTimeout","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727945612794,"stop":1727945612794,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727945612795,"stop":1727945612795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727945612796,"stop":1727945612796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727945612796,"stop":1727945612796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727945612797,"stop":1727945612797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727945612797,"stop":1727945612797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727945612798,"stop":1727945612798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727945612798,"stop":1727945612798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727945612799,"stop":1727945612799,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727945612800,"stop":1727945612800,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727945612801,"stop":1727945612801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727945612801,"stop":1727945612801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727945612802,"stop":1727945613324,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727945613325,"stop":1727945655299,"duration":41974},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727945655301,"stop":1727945656706,"duration":1405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727945656707,"stop":1727945663330,"duration":6623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"setup::0","time":{"start":1727945740022,"stop":1727945740022,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727945740025,"stop":1727945740513,"duration":488},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727945740515,"stop":1727945740516,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727945740519,"stop":1727945740521,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_rpc"},{"name":"host","value":"cf8ee202ffab"},{"name":"thread","value":"250-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.rpc.test_rpc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":32,"skipped":0,"passed":32,"unknown":0,"total":64},"items":[{"uid":"b3afcd6bcbb383d0","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/b3afcd6bcbb383d0","status":"passed","time":{"start":1727945460658,"stop":1727945461282,"duration":624}},{"uid":"a8eab85569993bc9","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/a8eab85569993bc9","status":"passed","time":{"start":1727942304694,"stop":1727942305580,"duration":886}},{"uid":"d5a4e41c5c2fde49","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/d5a4e41c5c2fde49","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727932352315,"stop":1727932352315,"duration":0}},{"uid":"9dac359d879a3c92","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/9dac359d879a3c92","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727926758697,"stop":1727926758697,"duration":0}},{"uid":"13520d0145cf0b9","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/13520d0145cf0b9","status":"passed","time":{"start":1727916429581,"stop":1727916430233,"duration":652}},{"uid":"fed6e357137c41d9","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/fed6e357137c41d9","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727907435059,"stop":1727907435059,"duration":0}},{"uid":"2163c89e42541e6f","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2163c89e42541e6f","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727832701606,"stop":1727832701606,"duration":0}},{"uid":"96e5d55ed3dd9ede","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/96e5d55ed3dd9ede","status":"passed","time":{"start":1727830013806,"stop":1727830014437,"duration":631}},{"uid":"8196ac5e153f927c","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/8196ac5e153f927c","status":"passed","time":{"start":1727812624257,"stop":1727812625143,"duration":886}},{"uid":"3ff8051441ff3b2c","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/3ff8051441ff3b2c","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727814825103,"stop":1727814825103,"duration":0}},{"uid":"4ce07577a57caec1","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/4ce07577a57caec1","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727811312421,"stop":1727811312421,"duration":0}},{"uid":"2e01857faa56be57","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/2e01857faa56be57","status":"passed","time":{"start":1727810095428,"stop":1727810096066,"duration":638}},{"uid":"270540c17d2dc360","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/270540c17d2dc360","status":"passed","time":{"start":1727806331652,"stop":1727806332531,"duration":879}},{"uid":"bd387edadd87d21e","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/bd387edadd87d21e","status":"passed","time":{"start":1727797453822,"stop":1727797454462,"duration":640}},{"uid":"97f4929b005a0691","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/97f4929b005a0691","status":"passed","time":{"start":1727795498056,"stop":1727795498918,"duration":862}},{"uid":"479062d810512e7","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/479062d810512e7","status":"passed","time":{"start":1727788192656,"stop":1727788193314,"duration":658}},{"uid":"d7ab31098fdc602c","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/d7ab31098fdc602c","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727784132841,"stop":1727784132841,"duration":0}},{"uid":"61548fd17a039099","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/61548fd17a039099","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727782686577,"stop":1727782686577,"duration":0}},{"uid":"f5401ec1e265e481","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/f5401ec1e265e481","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727778226833,"stop":1727778226833,"duration":0}},{"uid":"2a472a5dbf293da4","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/2a472a5dbf293da4","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727776555165,"stop":1727776555165,"duration":0}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7e4d2dba5f7ad1ff.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}