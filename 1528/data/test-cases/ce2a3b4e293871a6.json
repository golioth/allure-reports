{"uid":"ce2a3b4e293871a6","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"10b2037f077ccfef7c0f9e18bf8ac46b","time":{"start":1727944938579,"stop":1727944952039,"duration":13460},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <rak5010.RAK5010 object at 0xffff8616b810>\ndevice = <golioth.golioth.Device object at 0xffff861620d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff861620d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727944858272,"stop":1727944858273,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727944858273,"stop":1727944858274,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727944858274,"stop":1727944858274,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727944858275,"stop":1727944858275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727944858275,"stop":1727944858276,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727944858276,"stop":1727944858276,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727944858276,"stop":1727944858277,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727944858277,"stop":1727944858277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727944858277,"stop":1727944858278,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727944858278,"stop":1727944858279,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727944858278,"stop":1727944858278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727944858280,"stop":1727944858280,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727944858281,"stop":1727944858716,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727944858716,"stop":1727944900236,"duration":41520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727944900238,"stop":1727944901146,"duration":908},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727944901147,"stop":1727944930701,"duration":29554},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <rak5010.RAK5010 object at 0xffff8616b810>\ndevice = <golioth.golioth.Device object at 0xffff861620d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff861620d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"8e1d4de1757ed023","name":"stdout","source":"8e1d4de1757ed023.txt","type":"text/plain","size":2942}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727945107792,"stop":1727945107792,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727945107798,"stop":1727945108215,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727945108217,"stop":1727945108219,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727945108221,"stop":1727945108223,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"791cf7a517c7"},{"name":"thread","value":"284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":5,"skipped":0,"passed":55,"unknown":0,"total":61},"items":[{"uid":"3eaed2ac842d43df","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/3eaed2ac842d43df","status":"passed","time":{"start":1727943457627,"stop":1727943470422,"duration":12795}},{"uid":"8b34d5ebf508a31b","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/8b34d5ebf508a31b","status":"passed","time":{"start":1727933480856,"stop":1727933493539,"duration":12683}},{"uid":"b43b120677d8282e","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b43b120677d8282e","status":"passed","time":{"start":1727926291536,"stop":1727926304490,"duration":12954}},{"uid":"8459b7f940e36e77","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/8459b7f940e36e77","status":"passed","time":{"start":1727915960718,"stop":1727915973525,"duration":12807}},{"uid":"91b9ccaa55dd4e9f","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/91b9ccaa55dd4e9f","status":"passed","time":{"start":1727906990436,"stop":1727907003439,"duration":13003}},{"uid":"aa90e9aa886a4227","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/aa90e9aa886a4227","status":"passed","time":{"start":1727832796187,"stop":1727832809220,"duration":13033}},{"uid":"dae46c4b423b19e6","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/dae46c4b423b19e6","status":"broken","statusDetails":"FileNotFoundError: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'","time":{"start":1727829852814,"stop":1727829852814,"duration":0}},{"uid":"9e02576d39cd54bf","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/9e02576d39cd54bf","status":"passed","time":{"start":1727802483322,"stop":1727802496151,"duration":12829}},{"uid":"8d467038769f7add","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/8d467038769f7add","status":"passed","time":{"start":1727815337852,"stop":1727815350967,"duration":13115}},{"uid":"25445ef8bc6d9de5","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/25445ef8bc6d9de5","status":"passed","time":{"start":1727811896978,"stop":1727811909707,"duration":12729}},{"uid":"d2b4b18c2e32b0d0","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/d2b4b18c2e32b0d0","status":"passed","time":{"start":1727811081706,"stop":1727811094273,"duration":12567}},{"uid":"4b8ec62626030f54","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/4b8ec62626030f54","status":"passed","time":{"start":1727806410718,"stop":1727806423394,"duration":12676}},{"uid":"dcd553a50ba593ba","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/dcd553a50ba593ba","status":"passed","time":{"start":1727796851712,"stop":1727796864542,"duration":12830}},{"uid":"fb316c623781edcd","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/fb316c623781edcd","status":"passed","time":{"start":1727795322414,"stop":1727795335563,"duration":13149}},{"uid":"db947f3c81362e98","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/db947f3c81362e98","status":"passed","time":{"start":1727790134867,"stop":1727790148023,"duration":13156}},{"uid":"4b858029915398a","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/4b858029915398a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727785543313,"stop":1727785543313,"duration":0}},{"uid":"34dec1e82035070a","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/34dec1e82035070a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727784581654,"stop":1727784581654,"duration":0}},{"uid":"ca7d506455112005","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/ca7d506455112005","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727780135330,"stop":1727780135330,"duration":0}},{"uid":"2f5f256b71b37ae6","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/2f5f256b71b37ae6","status":"passed","time":{"start":1727776945524,"stop":1727776959000,"duration":13476}},{"uid":"23786f334505fbed","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/23786f334505fbed","status":"passed","time":{"start":1727773842021,"stop":1727773854832,"duration":12811}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"ce2a3b4e293871a6.json","parameterValues":["'rak5010'","'zephyr'"]}