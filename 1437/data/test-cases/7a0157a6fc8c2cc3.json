{"uid":"7a0157a6fc8c2cc3","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1727453520788,"stop":1727453633558,"duration":112770},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7fd57a10>\ndevice = <golioth.golioth.Device object at 0xffff7fd767d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727453493532,"stop":1727453493533,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727453493533,"stop":1727453493533,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727453493534,"stop":1727453493534,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727453493534,"stop":1727453493534,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727453493535,"stop":1727453493535,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727453493535,"stop":1727453493538,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727453493539,"stop":1727453493539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727453493540,"stop":1727453493540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727453493540,"stop":1727453493944,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727453493945,"stop":1727453494747,"duration":802},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727453494748,"stop":1727453517558,"duration":22810},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727453517559,"stop":1727453520781,"duration":3222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7fd57a10>\ndevice = <golioth.golioth.Device object at 0xffff7fd767d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7e7aaf1d268c937d","name":"log","source":"7e7aaf1d268c937d.txt","type":"text/plain","size":14166}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727453633798,"stop":1727453633838,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727453633840,"stop":1727453634220,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727453634222,"stop":1727453634224,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727453634229,"stop":1727453634230,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"0843c5f3ace3"},{"name":"thread","value":"1016-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"544df65e6140a89e","status":"passed","time":{"start":1727453461683,"stop":1727453489458,"duration":27775}},{"uid":"30a062d30f53a757","status":"passed","time":{"start":1727366008182,"stop":1727366032301,"duration":24119}},{"uid":"4ca7ba6dedb5812c","status":"passed","time":{"start":1727365947502,"stop":1727365975062,"duration":27560}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":22,"unknown":0,"total":23},"items":[{"uid":"549d65eac4ca0283","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/549d65eac4ca0283","status":"passed","time":{"start":1727398642398,"stop":1727398666161,"duration":23763}},{"uid":"96dee43221c44e3f","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/96dee43221c44e3f","status":"passed","time":{"start":1727395246876,"stop":1727395270694,"duration":23818}},{"uid":"819a6454d12827","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/819a6454d12827","status":"passed","time":{"start":1727390749697,"stop":1727390773002,"duration":23305}},{"uid":"d3645e7e14d05108","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/d3645e7e14d05108","status":"passed","time":{"start":1727390399178,"stop":1727390422826,"duration":23648}},{"uid":"2e36bc76aa47d37c","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/2e36bc76aa47d37c","status":"passed","time":{"start":1727385815051,"stop":1727385838349,"duration":23298}},{"uid":"300ad17942b3f8b3","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/300ad17942b3f8b3","status":"passed","time":{"start":1727383391114,"stop":1727383414793,"duration":23679}},{"uid":"58547036531f2d1d","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/58547036531f2d1d","status":"passed","time":{"start":1727380005731,"stop":1727380029454,"duration":23723}},{"uid":"40ac3403a4040c17","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/40ac3403a4040c17","status":"passed","time":{"start":1727375342922,"stop":1727375366579,"duration":23657}},{"uid":"abef21a8ad80b257","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/abef21a8ad80b257","status":"passed","time":{"start":1727372560177,"stop":1727372584000,"duration":23823}},{"uid":"c140bd6590590e39","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/c140bd6590590e39","status":"passed","time":{"start":1727370088978,"stop":1727370112717,"duration":23739}},{"uid":"d8f2f5a7c1b0b628","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/d8f2f5a7c1b0b628","status":"passed","time":{"start":1727365539296,"stop":1727365562980,"duration":23684}},{"uid":"b5e41e0e99605e06","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/b5e41e0e99605e06","status":"passed","time":{"start":1727366008182,"stop":1727366032301,"duration":24119}},{"uid":"d72f27d1416e969c","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/d72f27d1416e969c","status":"passed","time":{"start":1727361398435,"stop":1727361422356,"duration":23921}},{"uid":"dcfca6f1bd46d7b7","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/dcfca6f1bd46d7b7","status":"passed","time":{"start":1727315218337,"stop":1727315242031,"duration":23694}},{"uid":"7fa6f203aa3f5bce","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/7fa6f203aa3f5bce","status":"passed","time":{"start":1727312786239,"stop":1727312809933,"duration":23694}},{"uid":"a02f174a5cdeb264","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/a02f174a5cdeb264","status":"passed","time":{"start":1727309002756,"stop":1727309026521,"duration":23765}},{"uid":"db3a37011f201c8","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/db3a37011f201c8","status":"passed","time":{"start":1727305872411,"stop":1727305899908,"duration":27497}},{"uid":"902ea9a476d438b7","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/902ea9a476d438b7","status":"passed","time":{"start":1727301068750,"stop":1727301092498,"duration":23748}},{"uid":"db33ce47a78ec1e1","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/db33ce47a78ec1e1","status":"passed","time":{"start":1727294832377,"stop":1727294856054,"duration":23677}},{"uid":"c893daaeff99b207","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/c893daaeff99b207","status":"passed","time":{"start":1727289200665,"stop":1727289224300,"duration":23635}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7a0157a6fc8c2cc3.json","parameterValues":["'nrf52840dk'","'zephyr'"]}