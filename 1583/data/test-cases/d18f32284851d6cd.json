{"uid":"d18f32284851d6cd","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"b3d5b97364e6f035c71c0a09d7a1be64","time":{"start":1728081806610,"stop":1728081851763,"duration":45153},"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff905e5850>\ndevice = <golioth.golioth.Device object at 0xffff905a84d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728081769203,"stop":1728081769203,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728081769204,"stop":1728081769204,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728081769204,"stop":1728081769205,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728081769205,"stop":1728081769205,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728081769206,"stop":1728081769206,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728081769206,"stop":1728081769208,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728081769209,"stop":1728081769210,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728081769209,"stop":1728081769209,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728081769210,"stop":1728081769675,"duration":465},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728081769675,"stop":1728081770654,"duration":979},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728081770654,"stop":1728081806002,"duration":35348},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728081806003,"stop":1728081806607,"duration":604},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff905e5850>\ndevice = <golioth.golioth.Device object at 0xffff905a84d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","steps":[],"attachments":[{"uid":"d0e92a7678fa4ffa","name":"log","source":"d0e92a7678fa4ffa.txt","type":"text/plain","size":34690}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728081852017,"stop":1728081852031,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728081852033,"stop":1728081852488,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728081852490,"stop":1728081852493,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728081852498,"stop":1728081852498,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"98dd3b24e115"},{"name":"thread","value":"477-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":74,"unknown":0,"total":89},"items":[{"uid":"63a2707323a0746","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/63a2707323a0746","status":"passed","time":{"start":1728075424791,"stop":1728075465570,"duration":40779}},{"uid":"7cca6e54ed33df55","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/7cca6e54ed33df55","status":"passed","time":{"start":1728072809427,"stop":1728072850369,"duration":40942}},{"uid":"cbda3f26b1714b69","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/cbda3f26b1714b69","status":"passed","time":{"start":1728069124705,"stop":1728069165122,"duration":40417}},{"uid":"82b3ffaa498dc2f4","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/82b3ffaa498dc2f4","status":"passed","time":{"start":1728026982933,"stop":1728027023426,"duration":40493}},{"uid":"2d2140b9f44c89cf","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/2d2140b9f44c89cf","status":"passed","time":{"start":1728064552516,"stop":1728064592855,"duration":40339}},{"uid":"44ec75d36d15502f","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/44ec75d36d15502f","status":"passed","time":{"start":1728037094340,"stop":1728037135557,"duration":41217}},{"uid":"e56b1cb7f8d5ab7a","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/e56b1cb7f8d5ab7a","status":"passed","time":{"start":1728056580392,"stop":1728056621369,"duration":40977}},{"uid":"a0abdd9bd780331a","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/a0abdd9bd780331a","status":"passed","time":{"start":1728037094340,"stop":1728037135557,"duration":41217}},{"uid":"c998592b78ba4f15","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/c998592b78ba4f15","status":"passed","time":{"start":1728049907263,"stop":1728049948091,"duration":40828}},{"uid":"16ca6d7c8c9fdcd5","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/16ca6d7c8c9fdcd5","status":"passed","time":{"start":1728037094340,"stop":1728037135557,"duration":41217}},{"uid":"7295dd56cef9864d","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/7295dd56cef9864d","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728028860474,"stop":1728028860474,"duration":0}},{"uid":"4c1ba35ef72ae79f","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/4c1ba35ef72ae79f","status":"passed","time":{"start":1728026982933,"stop":1728027023426,"duration":40493}},{"uid":"b4e2685c8dd65485","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/b4e2685c8dd65485","status":"passed","time":{"start":1728003366077,"stop":1728003406619,"duration":40542}},{"uid":"9bcacc83232d04ac","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/9bcacc83232d04ac","status":"passed","time":{"start":1727993466957,"stop":1727993509320,"duration":42363}},{"uid":"6be8a76b791d5d8d","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/6be8a76b791d5d8d","status":"passed","time":{"start":1727993103065,"stop":1727993144596,"duration":41531}},{"uid":"eb39c1752f8ef0a2","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/eb39c1752f8ef0a2","status":"passed","time":{"start":1727988446534,"stop":1727988488124,"duration":41590}},{"uid":"a1e1ff8e86af4d24","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/a1e1ff8e86af4d24","status":"passed","time":{"start":1727986594971,"stop":1727986635713,"duration":40742}},{"uid":"264fce3b781f0922","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/264fce3b781f0922","status":"passed","time":{"start":1727980023646,"stop":1727980066096,"duration":42450}},{"uid":"56eb26e283a9e744","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/56eb26e283a9e744","status":"passed","time":{"start":1727966596483,"stop":1727966637420,"duration":40937}},{"uid":"ebc9a8b7cde1b24c","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/ebc9a8b7cde1b24c","status":"passed","time":{"start":1727975377802,"stop":1727975419144,"duration":41342}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"d18f32284851d6cd.json","parameterValues":["'rak5010'","'zephyr'"]}