{"uid":"93dafe431cb88011","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1728080600166,"stop":1728080614507,"duration":14341},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9f5daa90>\ndevice = <golioth.golioth.Device object at 0xffff9f413d50>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9f413d50>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728080527761,"stop":1728080527761,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728080527762,"stop":1728080527763,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728080527763,"stop":1728080527763,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728080527764,"stop":1728080527764,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728080527765,"stop":1728080527765,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728080527766,"stop":1728080527766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728080527766,"stop":1728080527766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728080527766,"stop":1728080527767,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728080527767,"stop":1728080527767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728080527767,"stop":1728080527768,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728080527768,"stop":1728080527768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728080527768,"stop":1728080527769,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728080527769,"stop":1728080528239,"duration":470},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728080528240,"stop":1728080578188,"duration":49948},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728080578189,"stop":1728080579268,"duration":1079},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1728080579268,"stop":1728080592050,"duration":12782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9f5daa90>\ndevice = <golioth.golioth.Device object at 0xffff9f413d50>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9f413d50>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"3e559d8420f06906","name":"stdout","source":"3e559d8420f06906.txt","type":"text/plain","size":3892}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1728080752256,"stop":1728080752256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728080752259,"stop":1728080752714,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728080752716,"stop":1728080752721,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728080752723,"stop":1728080752725,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"b09437dd6382"},{"name":"thread","value":"260-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":2,"skipped":0,"passed":73,"unknown":0,"total":97},"items":[{"uid":"b656838a0e4512f","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/b656838a0e4512f","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728072717590,"stop":1728072730900,"duration":13310}},{"uid":"f350a5dd18fa486a","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/f350a5dd18fa486a","status":"passed","time":{"start":1728069039928,"stop":1728069052815,"duration":12887}},{"uid":"aa0928c537fe1a63","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/aa0928c537fe1a63","status":"passed","time":{"start":1728065272310,"stop":1728065285337,"duration":13027}},{"uid":"1ae9c138da64576f","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/1ae9c138da64576f","status":"passed","time":{"start":1728057466416,"stop":1728057480851,"duration":14435}},{"uid":"8585d1a4233bc3c1","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/8585d1a4233bc3c1","status":"passed","time":{"start":1728059108502,"stop":1728059121590,"duration":13088}},{"uid":"8979de214e199353","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/8979de214e199353","status":"passed","time":{"start":1728053655169,"stop":1728053668097,"duration":12928}},{"uid":"ffea3ddba2b276df","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/ffea3ddba2b276df","status":"passed","time":{"start":1728055436972,"stop":1728055449896,"duration":12924}},{"uid":"ed1314b6e6006972","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/ed1314b6e6006972","status":"passed","time":{"start":1728053655169,"stop":1728053668097,"duration":12928}},{"uid":"b790d7194204663","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/b790d7194204663","status":"passed","time":{"start":1728048705922,"stop":1728048719847,"duration":13925}},{"uid":"1aca57ecec1cdc56","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/1aca57ecec1cdc56","status":"passed","time":{"start":1728033938541,"stop":1728033951752,"duration":13211}},{"uid":"b9b017054bb682e4","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/b9b017054bb682e4","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728027022617,"stop":1728027036430,"duration":13813}},{"uid":"9306f2b01abf36e2","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/9306f2b01abf36e2","status":"passed","time":{"start":1728025385508,"stop":1728025398775,"duration":13267}},{"uid":"bac2e21802b8a8ef","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/bac2e21802b8a8ef","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1728023663533,"stop":1728023663533,"duration":0}},{"uid":"b389f04ce9c3845f","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/b389f04ce9c3845f","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1728021333011,"stop":1728021333011,"duration":0}},{"uid":"30b76422224adf32","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/30b76422224adf32","status":"passed","time":{"start":1728002166658,"stop":1728002180043,"duration":13385}},{"uid":"40f82d8a4d0bf01f","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/40f82d8a4d0bf01f","status":"passed","time":{"start":1727989656858,"stop":1727989669967,"duration":13109}},{"uid":"e2f8a1be8a37c2ee","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/e2f8a1be8a37c2ee","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727989446427,"stop":1727989459537,"duration":13110}},{"uid":"cf7fe7d50308d59a","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/cf7fe7d50308d59a","status":"passed","time":{"start":1727986434765,"stop":1727986447952,"duration":13187}},{"uid":"7322fb28cb51467c","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/7322fb28cb51467c","status":"passed","time":{"start":1727983998020,"stop":1727984011397,"duration":13377}},{"uid":"e576d244ae43cf04","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/e576d244ae43cf04","status":"passed","time":{"start":1727976363637,"stop":1727976376698,"duration":13061}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"93dafe431cb88011.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}