{"uid":"d35b6ae9477950f5","name":"test_int_too_small","fullName":"tests.hil.tests.settings.test_settings#test_int_too_small","historyId":"9a158ab876eb6bcacb2a056562120108","time":{"start":1727989538874,"stop":1727989552130,"duration":13256},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff86fabcd0>\ndevice = <golioth.golioth.Device object at 0xffff8866c690>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8866c690>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727989452940,"stop":1727989452940,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727989452941,"stop":1727989452941,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727989452941,"stop":1727989452942,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727989452942,"stop":1727989452942,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727989452943,"stop":1727989452943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727989452944,"stop":1727989452944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727989452945,"stop":1727989452945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727989452945,"stop":1727989452946,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727989452946,"stop":1727989452947,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727989452947,"stop":1727989452947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727989452948,"stop":1727989452948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727989452948,"stop":1727989452948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727989452949,"stop":1727989453346,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727989453347,"stop":1727989504763,"duration":51416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727989504764,"stop":1727989505726,"duration":962},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727989505727,"stop":1727989520559,"duration":14832},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff86fabcd0>\ndevice = <golioth.golioth.Device object at 0xffff8866c690>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8866c690>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"4bcb1aa52ddd433b","name":"stdout","source":"4bcb1aa52ddd433b.txt","type":"text/plain","size":532}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727989676799,"stop":1727989676800,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727989676802,"stop":1727989677175,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727989677177,"stop":1727989677179,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727989677181,"stop":1727989677183,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"ea4aebfb3adf"},{"name":"thread","value":"260-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":1,"skipped":0,"passed":68,"unknown":0,"total":76},"items":[{"uid":"35f535524d4d53e0","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/35f535524d4d53e0","status":"passed","time":{"start":1727986439050,"stop":1727986452658,"duration":13608}},{"uid":"1b3b8a61a20d859a","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/1b3b8a61a20d859a","status":"passed","time":{"start":1727983858623,"stop":1727983872128,"duration":13505}},{"uid":"b1e30665ee351e8b","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/b1e30665ee351e8b","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727977178890,"stop":1727977193893,"duration":15003}},{"uid":"cbfd92269b2bbac2","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/cbfd92269b2bbac2","status":"passed","time":{"start":1727964960536,"stop":1727964974245,"duration":13709}},{"uid":"7ec9f055bdb03bc9","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/7ec9f055bdb03bc9","status":"passed","time":{"start":1727973505033,"stop":1727973518154,"duration":13121}},{"uid":"48c0c67ecfb9b2f2","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/48c0c67ecfb9b2f2","status":"passed","time":{"start":1727969096514,"stop":1727969110736,"duration":14222}},{"uid":"6bf0816252f9522d","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/6bf0816252f9522d","status":"passed","time":{"start":1727968656425,"stop":1727968670480,"duration":14055}},{"uid":"ca89c5bbe796159a","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/ca89c5bbe796159a","status":"passed","time":{"start":1727964960536,"stop":1727964974245,"duration":13709}},{"uid":"66a30c93f363e3b2","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/66a30c93f363e3b2","status":"passed","time":{"start":1727959617237,"stop":1727959630021,"duration":12784}},{"uid":"eae6daca74678374","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/eae6daca74678374","status":"passed","time":{"start":1727956365745,"stop":1727956378837,"duration":13092}},{"uid":"fe08f5f4fe1c092","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/fe08f5f4fe1c092","status":"passed","time":{"start":1727955332451,"stop":1727955345751,"duration":13300}},{"uid":"ce843bf6e89538c9","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/ce843bf6e89538c9","status":"passed","time":{"start":1727951630845,"stop":1727951643693,"duration":12848}},{"uid":"355664073c82a7e7","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/355664073c82a7e7","status":"passed","time":{"start":1727926178993,"stop":1727926192500,"duration":13507}},{"uid":"760bfd81213abc17","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/760bfd81213abc17","status":"passed","time":{"start":1727945220583,"stop":1727945234025,"duration":13442}},{"uid":"129d84910842c18d","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/129d84910842c18d","status":"passed","time":{"start":1727944375793,"stop":1727944388690,"duration":12897}},{"uid":"c817000a05a5f413","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/c817000a05a5f413","status":"passed","time":{"start":1727943638975,"stop":1727943652475,"duration":13500}},{"uid":"f0c1fe5758de160d","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f0c1fe5758de160d","status":"passed","time":{"start":1727831805296,"stop":1727831818391,"duration":13095}},{"uid":"d3d068805d18b7e7","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/d3d068805d18b7e7","status":"passed","time":{"start":1727926178993,"stop":1727926192500,"duration":13507}},{"uid":"383e81057371d3d8","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/383e81057371d3d8","status":"passed","time":{"start":1727926178993,"stop":1727926192500,"duration":13507}},{"uid":"ee062a08edc4c2b","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/ee062a08edc4c2b","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1727915822036,"stop":1727915822036,"duration":0}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"d35b6ae9477950f5.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}