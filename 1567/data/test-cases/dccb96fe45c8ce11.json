{"uid":"dccb96fe45c8ce11","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1727994408056,"stop":1727994502884,"duration":94828},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3afb710>\nproject = <golioth.golioth.Project object at 0xffffa3c8ad90>\ndevice = <golioth.golioth.Device object at 0xffffa3b1a5d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727994388393,"stop":1727994388393,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727994388394,"stop":1727994388394,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727994388394,"stop":1727994388394,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727994388395,"stop":1727994388395,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727994388395,"stop":1727994388396,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727994388396,"stop":1727994388397,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727994388397,"stop":1727994388398,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727994388398,"stop":1727994388400,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727994388401,"stop":1727994388881,"duration":480},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727994388882,"stop":1727994389923,"duration":1041},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727994389924,"stop":1727994407046,"duration":17122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727994407047,"stop":1727994408053,"duration":1006},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3afb710>\nproject = <golioth.golioth.Project object at 0xffffa3c8ad90>\ndevice = <golioth.golioth.Device object at 0xffffa3b1a5d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"34b2cadcdf9d8451","name":"log","source":"34b2cadcdf9d8451.txt","type":"text/plain","size":20680}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727994503146,"stop":1727994503181,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727994503183,"stop":1727994503649,"duration":466},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727994503651,"stop":1727994503653,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727994503655,"stop":1727994503655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9eedebae560f"},{"name":"thread","value":"455-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":72,"unknown":0,"total":79},"items":[{"uid":"4dc50bd586b36a15","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/4dc50bd586b36a15","status":"passed","time":{"start":1727988621638,"stop":1727988634068,"duration":12430}},{"uid":"17a23f7efde123a6","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/17a23f7efde123a6","status":"passed","time":{"start":1727986426871,"stop":1727986440314,"duration":13443}},{"uid":"7234a310432d98ef","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/7234a310432d98ef","status":"passed","time":{"start":1727980733578,"stop":1727980745404,"duration":11826}},{"uid":"eb963c2ece1701bf","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/eb963c2ece1701bf","status":"passed","time":{"start":1727977466885,"stop":1727977477826,"duration":10941}},{"uid":"f7bf75dba4735135","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/f7bf75dba4735135","status":"passed","time":{"start":1727976168102,"stop":1727976181695,"duration":13593}},{"uid":"78969b0c90eb7411","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/78969b0c90eb7411","status":"passed","time":{"start":1727972770298,"stop":1727972795565,"duration":25267}},{"uid":"fe7c6dcd2d5c4717","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/fe7c6dcd2d5c4717","status":"passed","time":{"start":1727970962252,"stop":1727970975603,"duration":13351}},{"uid":"cd8b3657212628f7","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/cd8b3657212628f7","status":"passed","time":{"start":1727966574785,"stop":1727966584298,"duration":9513}},{"uid":"f18b5773f721a07","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/f18b5773f721a07","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727964464907,"stop":1727964490190,"duration":25283}},{"uid":"9076b463eb11ea00","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/9076b463eb11ea00","status":"passed","time":{"start":1727957998352,"stop":1727958011309,"duration":12957}},{"uid":"9ffb4894df9d05ed","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/9ffb4894df9d05ed","status":"passed","time":{"start":1727956918434,"stop":1727956932467,"duration":14033}},{"uid":"15748f0eededb7a","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/15748f0eededb7a","status":"passed","time":{"start":1727956377688,"stop":1727956392938,"duration":15250}},{"uid":"5ccc8f8eb4ed3a9b","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/5ccc8f8eb4ed3a9b","status":"passed","time":{"start":1727952281825,"stop":1727952294088,"duration":12263}},{"uid":"fae03ca96d525d8b","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/fae03ca96d525d8b","status":"passed","time":{"start":1727950521406,"stop":1727950532474,"duration":11068}},{"uid":"268375abdb4e4c79","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/268375abdb4e4c79","status":"passed","time":{"start":1727948281331,"stop":1727948293409,"duration":12078}},{"uid":"7710a70c43128dad","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/7710a70c43128dad","status":"passed","time":{"start":1727948427853,"stop":1727948438612,"duration":10759}},{"uid":"829fae85e2febd35","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/829fae85e2febd35","status":"passed","time":{"start":1727946473505,"stop":1727946484233,"duration":10728}},{"uid":"d2870181bd278747","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/d2870181bd278747","status":"passed","time":{"start":1727933049037,"stop":1727933058346,"duration":9309}},{"uid":"82034aeeceeebdc1","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/82034aeeceeebdc1","status":"passed","time":{"start":1727928114972,"stop":1727928127434,"duration":12462}},{"uid":"2eb0be61b39fcb2f","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/2eb0be61b39fcb2f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727917681742,"stop":1727917776190,"duration":94448}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"dccb96fe45c8ce11.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}