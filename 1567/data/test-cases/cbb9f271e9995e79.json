{"uid":"cbb9f271e9995e79","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1727993839590,"stop":1727993880098,"duration":40508},"status":"failed","statusMessage":"AssertionError: assert 4 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8385f90>\ndevice = <golioth.golioth.Device object at 0xffffa8398c10>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 4 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727993809668,"stop":1727993809668,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727993809669,"stop":1727993809669,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727993809669,"stop":1727993809669,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727993809670,"stop":1727993809670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727993809670,"stop":1727993809671,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727993809671,"stop":1727993809673,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727993809674,"stop":1727993809674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727993809674,"stop":1727993809674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727993809675,"stop":1727993810138,"duration":463},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727993810138,"stop":1727993811295,"duration":1157},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727993811295,"stop":1727993838513,"duration":27218},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727993838513,"stop":1727993839587,"duration":1074},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 4 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8385f90>\ndevice = <golioth.golioth.Device object at 0xffffa8398c10>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 4 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"99ae84b9209acc52","name":"log","source":"99ae84b9209acc52.txt","type":"text/plain","size":33896}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727993880266,"stop":1727993880313,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727993880315,"stop":1727993880987,"duration":672},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727993880989,"stop":1727993880991,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727993880996,"stop":1727993880996,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8bdfde472716"},{"name":"thread","value":"435-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":14,"skipped":0,"passed":56,"unknown":0,"total":73},"items":[{"uid":"8b8c2d6a7e6e2d1b","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/8b8c2d6a7e6e2d1b","status":"passed","time":{"start":1727989400782,"stop":1727989423408,"duration":22626}},{"uid":"13f389ec3519fc8e","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/13f389ec3519fc8e","status":"passed","time":{"start":1727985460930,"stop":1727985486086,"duration":25156}},{"uid":"b48c9271dd1635f0","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/b48c9271dd1635f0","status":"passed","time":{"start":1727979652436,"stop":1727979678386,"duration":25950}},{"uid":"d2d58ed716bbb05a","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/d2d58ed716bbb05a","status":"passed","time":{"start":1727977195451,"stop":1727977218970,"duration":23519}},{"uid":"457445a5f420fa61","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/457445a5f420fa61","status":"passed","time":{"start":1727975742838,"stop":1727975767917,"duration":25079}},{"uid":"8cd1f9e3eac7c4d1","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/8cd1f9e3eac7c4d1","status":"passed","time":{"start":1727973543574,"stop":1727973567936,"duration":24362}},{"uid":"290bdb04053e5fd0","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/290bdb04053e5fd0","status":"passed","time":{"start":1727972355792,"stop":1727972378474,"duration":22682}},{"uid":"e1cd830e821bc894","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/e1cd830e821bc894","status":"passed","time":{"start":1727967018251,"stop":1727967040601,"duration":22350}},{"uid":"2085d975d73d62d3","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/2085d975d73d62d3","status":"passed","time":{"start":1727961171640,"stop":1727961200536,"duration":28896}},{"uid":"984276135a5b860f","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/984276135a5b860f","status":"passed","time":{"start":1727950671354,"stop":1727950693684,"duration":22330}},{"uid":"6ecda70d40f9cfd7","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/6ecda70d40f9cfd7","status":"passed","time":{"start":1727954995436,"stop":1727955019390,"duration":23954}},{"uid":"423098e7fdb5d108","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/423098e7fdb5d108","status":"passed","time":{"start":1727953163927,"stop":1727953198121,"duration":34194}},{"uid":"5924bced09bb971e","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/5924bced09bb971e","status":"passed","time":{"start":1727927557791,"stop":1727927580163,"duration":22372}},{"uid":"b4051617a69364d3","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b4051617a69364d3","status":"passed","time":{"start":1727950671354,"stop":1727950693684,"duration":22330}},{"uid":"ec49260cd7184ef6","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/ec49260cd7184ef6","status":"passed","time":{"start":1727951088858,"stop":1727951112906,"duration":24048}},{"uid":"fde546dd4826768f","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/fde546dd4826768f","status":"passed","time":{"start":1727949510780,"stop":1727949533259,"duration":22479}},{"uid":"927987602530aca6","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/927987602530aca6","status":"passed","time":{"start":1727942085782,"stop":1727942108065,"duration":22283}},{"uid":"1d5891d478c9d544","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/1d5891d478c9d544","status":"passed","time":{"start":1727927557791,"stop":1727927580163,"duration":22372}},{"uid":"d5399dd784f2ce21","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/d5399dd784f2ce21","status":"passed","time":{"start":1727927557791,"stop":1727927580163,"duration":22372}},{"uid":"74aed0bc2f703068","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/74aed0bc2f703068","status":"passed","time":{"start":1727918025205,"stop":1727918054969,"duration":29764}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"cbb9f271e9995e79.json","parameterValues":["'nrf9160dk'","'zephyr'"]}