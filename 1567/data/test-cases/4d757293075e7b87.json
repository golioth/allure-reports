{"uid":"4d757293075e7b87","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"bfe488b0ced6617e28e9fae7ab667d7b","time":{"start":1727993346804,"stop":1727993439890,"duration":93086},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8da6650>\ndevice = <golioth.golioth.Device object at 0xffffa8d989d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727993336974,"stop":1727993336974,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727993336975,"stop":1727993336975,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727993336976,"stop":1727993336976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727993336976,"stop":1727993336976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727993336977,"stop":1727993336977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727993336977,"stop":1727993336979,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727993336980,"stop":1727993336980,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727993336981,"stop":1727993336981,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727993336981,"stop":1727993337432,"duration":451},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727993337433,"stop":1727993338322,"duration":889},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727993338323,"stop":1727993346286,"duration":7963},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727993346286,"stop":1727993346801,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8da6650>\ndevice = <golioth.golioth.Device object at 0xffffa8d989d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9a223e774eac13f6","name":"log","source":"9a223e774eac13f6.txt","type":"text/plain","size":18785}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727993440173,"stop":1727993440208,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727993440210,"stop":1727993440588,"duration":378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727993440590,"stop":1727993440592,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727993440597,"stop":1727993440598,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e701a3a63a06"},{"name":"thread","value":"409-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":1,"skipped":0,"passed":75,"unknown":0,"total":79},"items":[{"uid":"49fd7e7869663b2d","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/49fd7e7869663b2d","status":"passed","time":{"start":1727988516288,"stop":1727988541526,"duration":25238}},{"uid":"5400162e1543fef0","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/5400162e1543fef0","status":"passed","time":{"start":1727984657680,"stop":1727984681651,"duration":23971}},{"uid":"c7e4f5b5466103a6","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/c7e4f5b5466103a6","status":"passed","time":{"start":1727979449318,"stop":1727979473530,"duration":24212}},{"uid":"9773025c6c75d7ef","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/9773025c6c75d7ef","status":"passed","time":{"start":1727966286883,"stop":1727966312058,"duration":25175}},{"uid":"deedf56db75d9cb6","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/deedf56db75d9cb6","status":"passed","time":{"start":1727974715287,"stop":1727974738579,"duration":23292}},{"uid":"87f698d0c64a6b19","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/87f698d0c64a6b19","status":"passed","time":{"start":1727971906648,"stop":1727971931117,"duration":24469}},{"uid":"6a2919b03f28878f","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/6a2919b03f28878f","status":"passed","time":{"start":1727970609493,"stop":1727970633949,"duration":24456}},{"uid":"9d6b8ef633c031e8","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/9d6b8ef633c031e8","status":"passed","time":{"start":1727966286883,"stop":1727966312058,"duration":25175}},{"uid":"560b0fee900405c6","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/560b0fee900405c6","status":"passed","time":{"start":1727959136717,"stop":1727959161822,"duration":25105}},{"uid":"d767caebc8471d55","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/d767caebc8471d55","status":"passed","time":{"start":1727957671705,"stop":1727957695943,"duration":24238}},{"uid":"fac53aa3ea709fc5","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/fac53aa3ea709fc5","status":"passed","time":{"start":1727954553243,"stop":1727954577803,"duration":24560}},{"uid":"222c1c454d93a73d","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/222c1c454d93a73d","status":"passed","time":{"start":1727908003962,"stop":1727908027240,"duration":23278}},{"uid":"a29eb3cfd2ee25f2","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/a29eb3cfd2ee25f2","status":"passed","time":{"start":1727932235683,"stop":1727932261209,"duration":25526}},{"uid":"d8ab1be54ebb4a6a","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/d8ab1be54ebb4a6a","status":"passed","time":{"start":1727949504223,"stop":1727949527523,"duration":23300}},{"uid":"172a57284fb101d8","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/172a57284fb101d8","status":"passed","time":{"start":1727947436682,"stop":1727947461114,"duration":24432}},{"uid":"579109373fc35500","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/579109373fc35500","status":"passed","time":{"start":1727947301534,"stop":1727947324940,"duration":23406}},{"uid":"de14297cd5823a0","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/de14297cd5823a0","status":"passed","time":{"start":1727833784113,"stop":1727833807415,"duration":23302}},{"uid":"e3d22425df0584b3","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/e3d22425df0584b3","status":"passed","time":{"start":1727932235683,"stop":1727932261209,"duration":25526}},{"uid":"c89fa8d8f0946b41","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c89fa8d8f0946b41","status":"passed","time":{"start":1727927234819,"stop":1727927258177,"duration":23358}},{"uid":"e4ce4caf7b811a0b","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/e4ce4caf7b811a0b","status":"passed","time":{"start":1727916888011,"stop":1727916911466,"duration":23455}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"4d757293075e7b87.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}