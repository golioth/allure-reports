{"uid":"329cfc3d9baa048f","name":"test_connect","fullName":"tests.hil.tests.connection.test_connection#test_connect","historyId":"7c49dc745f88fac4a6488c0ab5d556d2","time":{"start":1727968652547,"stop":1727968652547,"duration":0},"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['4096', 'connection-zephyr.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'connection-zephyr.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1103: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '4096', 'connection-zephyr.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['4096', 'connection-zephyr.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'connection-zephyr.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1105: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_connect>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:75: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:818: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:810: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:780: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:108: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:669: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'connection-zephyr.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727968652551,"stop":1727968652551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727968652552,"stop":1727968652552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727968652553,"stop":1727968652553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727968652554,"stop":1727968652554,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727968652554,"stop":1727968652554,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727968652555,"stop":1727968652555,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727968652556,"stop":1727968652557,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727968652556,"stop":1727968652556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727968652557,"stop":1727968652557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727968652557,"stop":1727968652557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727968652558,"stop":1727968652558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727968652558,"stop":1727968652558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727968652559,"stop":1727968652704,"duration":145},"status":"broken","statusMessage":"SystemExit: 2\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py\", line 75, in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 818, in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 810, in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/outcome/_impl.py\", line 213, in unwrap\n    raise captured_error\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 780, in _run_tests_and_fixtures\n    retval = await coro\n             ^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/plugin.py\", line 108, in board\n    async with board.started():\n  File \"/usr/lib/python3.11/contextlib.py\", line 204, in __aenter__\n    return await anext(self.gen)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/board.py\", line 28, in started\n    self.program(self.fw_image)\n  File \"/usr/local/lib/python3.11/dist-packages/espboard.py\", line 19, in program\n    esptool.main(cmd)\n  File \"/usr/local/lib/python3.11/dist-packages/esptool/__init__.py\", line 669, in main\n    args = parser.parse_args(argv)\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1874, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1907, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2101, in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2078, in consume_positionals\n    take_action(action, args)\n  File \"/usr/lib/python3.11/argparse.py\", line 1983, in take_action\n    action(self, namespace, argument_values, option_string)\n  File \"/usr/lib/python3.11/argparse.py\", line 1246, in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1909, in parse_known_args\n    self.error(str(err))\n  File \"/usr/lib/python3.11/argparse.py\", line 2633, in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n  File \"/usr/lib/python3.11/argparse.py\", line 2620, in exit\n    _sys.exit(status)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['4096', 'connection-zephyr.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'connection-zephyr.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1103: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '4096', 'connection-zephyr.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['4096', 'connection-zephyr.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'connection-zephyr.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1105: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_connect>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:75: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:818: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:810: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:780: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:108: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:669: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'connection-zephyr.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","steps":[],"attachments":[{"uid":"7acc16da5075d9d2","name":"stderr","source":"7acc16da5075d9d2.txt","type":"text/plain","size":875}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_connection"},{"name":"host","value":"966365a3f706"},{"name":"thread","value":"234-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.connection.test_connection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":64,"unknown":0,"total":72},"items":[{"uid":"42a917d004267cb1","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/42a917d004267cb1","status":"passed","time":{"start":1727965599141,"stop":1727965630530,"duration":31389}},{"uid":"7a7c1cd51f75ef50","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/7a7c1cd51f75ef50","status":"passed","time":{"start":1727961018872,"stop":1727961050505,"duration":31633}},{"uid":"49e65a723950941d","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/49e65a723950941d","status":"passed","time":{"start":1727956888639,"stop":1727956919486,"duration":30847}},{"uid":"9179354c44d1e794","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/9179354c44d1e794","status":"passed","time":{"start":1727953255310,"stop":1727953286708,"duration":31398}},{"uid":"2da9a5d4e3bfecef","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/2da9a5d4e3bfecef","status":"passed","time":{"start":1727952406635,"stop":1727952438110,"duration":31475}},{"uid":"186cb3efbd10281f","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/186cb3efbd10281f","status":"passed","time":{"start":1727951427611,"stop":1727951459260,"duration":31649}},{"uid":"1edc67c070ec149c","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/1edc67c070ec149c","status":"passed","time":{"start":1727948660075,"stop":1727948687719,"duration":27644}},{"uid":"2c7c9a2f79127802","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/2c7c9a2f79127802","status":"passed","time":{"start":1727945368268,"stop":1727945402853,"duration":34585}},{"uid":"e166f7e4abe855","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/e166f7e4abe855","status":"passed","time":{"start":1727945287797,"stop":1727945319703,"duration":31906}},{"uid":"80b9ef4e48a605df","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/80b9ef4e48a605df","status":"passed","time":{"start":1727941949021,"stop":1727941980616,"duration":31595}},{"uid":"d00765e4f838502c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/d00765e4f838502c","status":"passed","time":{"start":1727932045318,"stop":1727932076013,"duration":30695}},{"uid":"7fec8650607bc6d5","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/7fec8650607bc6d5","status":"passed","time":{"start":1727926457262,"stop":1727926489932,"duration":32670}},{"uid":"7e5bd775c5f8c55f","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/7e5bd775c5f8c55f","status":"passed","time":{"start":1727916119613,"stop":1727916153840,"duration":34227}},{"uid":"e2694ff514ea983e","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/e2694ff514ea983e","status":"passed","time":{"start":1727907127932,"stop":1727907161525,"duration":33593}},{"uid":"f6f9d821c3d71089","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f6f9d821c3d71089","status":"passed","time":{"start":1727832405645,"stop":1727832433102,"duration":27457}},{"uid":"500fa750801eda34","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/500fa750801eda34","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727829716236,"stop":1727829736667,"duration":20431}},{"uid":"44186f5bd0c53423","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/44186f5bd0c53423","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727812320207,"stop":1727812340639,"duration":20432}},{"uid":"d3f9ea9b2264df80","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/d3f9ea9b2264df80","status":"passed","time":{"start":1727814529904,"stop":1727814560323,"duration":30419}},{"uid":"235ed961111d0bac","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/235ed961111d0bac","status":"passed","time":{"start":1727811008313,"stop":1727811042026,"duration":33713}},{"uid":"f13bb98b7c36d5ed","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/f13bb98b7c36d5ed","status":"passed","time":{"start":1727809782317,"stop":1727809815723,"duration":33406}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"329cfc3d9baa048f.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}