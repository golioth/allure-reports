{"uid":"bd04f80b913ff593","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"c2044a44affa44a6054bb6d6ddcfd33a","time":{"start":1727968692134,"stop":1727968706787,"duration":14653},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8e7babd0>\ndevice = <golioth.golioth.Device object at 0xffff8e733f90>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8e733f90>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727968570453,"stop":1727968570453,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727968570454,"stop":1727968570455,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727968570454,"stop":1727968570454,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727968570456,"stop":1727968570456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727968570456,"stop":1727968570456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727968570457,"stop":1727968570457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727968570458,"stop":1727968570459,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727968570458,"stop":1727968570458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727968570459,"stop":1727968570459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727968570460,"stop":1727968570461,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727968570460,"stop":1727968570460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727968570461,"stop":1727968570461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727968570462,"stop":1727968570868,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727968570869,"stop":1727968622387,"duration":51518},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727968622388,"stop":1727968623319,"duration":931},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727968623320,"stop":1727968637334,"duration":14014},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8e7babd0>\ndevice = <golioth.golioth.Device object at 0xffff8e733f90>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8e733f90>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"c30e34e47bb1396f","name":"stdout","source":"c30e34e47bb1396f.txt","type":"text/plain","size":1275}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727968841321,"stop":1727968841321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727968841324,"stop":1727968842355,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727968842357,"stop":1727968842358,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727968842360,"stop":1727968842363,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"fa1e73782262"},{"name":"thread","value":"252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":1,"skipped":0,"passed":62,"unknown":0,"total":69},"items":[{"uid":"14e80b75ff85dd66","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/14e80b75ff85dd66","status":"passed","time":{"start":1727965003650,"stop":1727965019005,"duration":15355}},{"uid":"d0f8311081b2e5fc","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/d0f8311081b2e5fc","status":"passed","time":{"start":1727959643300,"stop":1727959656116,"duration":12816}},{"uid":"b68f7fd13705bd6c","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b68f7fd13705bd6c","status":"passed","time":{"start":1727956394743,"stop":1727956408472,"duration":13729}},{"uid":"64729019008b08e2","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/64729019008b08e2","status":"passed","time":{"start":1727955359689,"stop":1727955373093,"duration":13404}},{"uid":"213ba076f02c9ef8","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/213ba076f02c9ef8","status":"passed","time":{"start":1727951665354,"stop":1727951678638,"duration":13284}},{"uid":"457c6f5a9b431407","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/457c6f5a9b431407","status":"passed","time":{"start":1727926207051,"stop":1727926220762,"duration":13711}},{"uid":"7885a2dd247ff38e","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/7885a2dd247ff38e","status":"passed","time":{"start":1727945247123,"stop":1727945260168,"duration":13045}},{"uid":"5b5e19435fd80ba7","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/5b5e19435fd80ba7","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727944402390,"stop":1727944415243,"duration":12853}},{"uid":"9458c35212fb7b34","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/9458c35212fb7b34","status":"passed","time":{"start":1727943667026,"stop":1727943681146,"duration":14120}},{"uid":"187c0ef31de4f8f3","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/187c0ef31de4f8f3","status":"passed","time":{"start":1727831833828,"stop":1727831847476,"duration":13648}},{"uid":"351affad0dc3e7ce","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/351affad0dc3e7ce","status":"passed","time":{"start":1727926207051,"stop":1727926220762,"duration":13711}},{"uid":"7b3d2fe3a7ffc938","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/7b3d2fe3a7ffc938","status":"passed","time":{"start":1727926207051,"stop":1727926220762,"duration":13711}},{"uid":"76683b52c2f46ba4","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/76683b52c2f46ba4","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1727915825945,"stop":1727915825945,"duration":0}},{"uid":"af9816115ea21267","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/af9816115ea21267","status":"passed","time":{"start":1727907122167,"stop":1727907136292,"duration":14125}},{"uid":"3e08f88e2034ce56","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/3e08f88e2034ce56","status":"passed","time":{"start":1727831833828,"stop":1727831847476,"duration":13648}},{"uid":"e77760d0e562d6f0","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/e77760d0e562d6f0","status":"passed","time":{"start":1727829382400,"stop":1727829396724,"duration":14324}},{"uid":"15ce1751046fd847","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/15ce1751046fd847","status":"passed","time":{"start":1727801829990,"stop":1727801843367,"duration":13377}},{"uid":"3739b1dd8bf6bce4","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/3739b1dd8bf6bce4","status":"passed","time":{"start":1727813393758,"stop":1727813406626,"duration":12868}},{"uid":"cbfffe9da6792d21","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/cbfffe9da6792d21","status":"passed","time":{"start":1727795680834,"stop":1727795694541,"duration":13707}},{"uid":"b4b0a685913ca51d","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/b4b0a685913ca51d","status":"passed","time":{"start":1727809577685,"stop":1727809591498,"duration":13813}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"bd04f80b913ff593.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}