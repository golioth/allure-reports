{"uid":"1d249a770d1e1c87","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1728486189463,"stop":1728486282946,"duration":93483},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8829a890>\ndevice = <golioth.golioth.Device object at 0xffff882ad550>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728486160550,"stop":1728486160550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728486160551,"stop":1728486160551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728486160551,"stop":1728486160551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728486160552,"stop":1728486160552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728486160552,"stop":1728486160553,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728486160553,"stop":1728486160555,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728486160556,"stop":1728486160556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728486160556,"stop":1728486160556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728486160557,"stop":1728486160969,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728486160970,"stop":1728486161821,"duration":851},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728486161822,"stop":1728486188348,"duration":26526},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728486188348,"stop":1728486189457,"duration":1109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8829a890>\ndevice = <golioth.golioth.Device object at 0xffff882ad550>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"968f835037ea273a","name":"log","source":"968f835037ea273a.txt","type":"text/plain","size":18482}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728486283184,"stop":1728486283217,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728486283219,"stop":1728486283604,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728486283606,"stop":1728486283608,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728486283613,"stop":1728486283613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f448d9c5d7b3"},{"name":"thread","value":"652-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":18,"skipped":0,"passed":97,"unknown":0,"total":115},"items":[{"uid":"87e97380ca0ba3ef","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/87e97380ca0ba3ef","status":"passed","time":{"start":1728436903731,"stop":1728436921707,"duration":17976}},{"uid":"f36fcb302752c812","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/f36fcb302752c812","status":"passed","time":{"start":1728428095034,"stop":1728428131753,"duration":36719}},{"uid":"9609811e0f2b7701","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9609811e0f2b7701","status":"passed","time":{"start":1728402240335,"stop":1728402275730,"duration":35395}},{"uid":"e1425bf5d556bd0e","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/e1425bf5d556bd0e","status":"passed","time":{"start":1728401985599,"stop":1728402001898,"duration":16299}},{"uid":"519de17af07528eb","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/519de17af07528eb","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728398962185,"stop":1728398962185,"duration":0}},{"uid":"4dd2db1881f4ba71","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/4dd2db1881f4ba71","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728349897793,"stop":1728349897793,"duration":0}},{"uid":"f191440ea97fcdd9","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/f191440ea97fcdd9","status":"passed","time":{"start":1728346260212,"stop":1728346288568,"duration":28356}},{"uid":"230e6f723a58aeb1","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/230e6f723a58aeb1","status":"passed","time":{"start":1728345189880,"stop":1728345205397,"duration":15517}},{"uid":"ee6da44e03f8064a","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/ee6da44e03f8064a","status":"passed","time":{"start":1728338081594,"stop":1728338095362,"duration":13768}},{"uid":"8e05bffbb107fa59","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/8e05bffbb107fa59","status":"passed","time":{"start":1728319847954,"stop":1728319866681,"duration":18727}},{"uid":"aebdf48a8b88007a","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/aebdf48a8b88007a","status":"passed","time":{"start":1728321892106,"stop":1728321908796,"duration":16690}},{"uid":"2777346d98d1f383","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/2777346d98d1f383","status":"passed","time":{"start":1728321892106,"stop":1728321908796,"duration":16690}},{"uid":"6a22b17b5e2b45c8","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/6a22b17b5e2b45c8","status":"passed","time":{"start":1728319847954,"stop":1728319866681,"duration":18727}},{"uid":"9da10e9baa8d0829","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/9da10e9baa8d0829","status":"passed","time":{"start":1728315282224,"stop":1728315299087,"duration":16863}},{"uid":"9bf2e72884282783","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/9bf2e72884282783","status":"passed","time":{"start":1728307216144,"stop":1728307242323,"duration":26179}},{"uid":"441be5aa72b440ff","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/441be5aa72b440ff","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728305800107,"stop":1728305893543,"duration":93436}},{"uid":"87789a76c5162fdb","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/87789a76c5162fdb","status":"passed","time":{"start":1728263817351,"stop":1728263841210,"duration":23859}},{"uid":"e07d8fbc22c95315","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/e07d8fbc22c95315","status":"passed","time":{"start":1728177519155,"stop":1728177536096,"duration":16941}},{"uid":"34272cb820db4813","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/34272cb820db4813","status":"passed","time":{"start":1728134823824,"stop":1728134840815,"duration":16991}},{"uid":"482acbc637ed5fe7","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/482acbc637ed5fe7","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728134197770,"stop":1728134224381,"duration":26611}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1d249a770d1e1c87.json","parameterValues":["'nrf9160dk'","'zephyr'"]}