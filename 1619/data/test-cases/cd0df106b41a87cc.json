{"uid":"cd0df106b41a87cc","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"03352d708656e4accf49c2f80b0063e1","time":{"start":1728484993581,"stop":1728485016265,"duration":22684},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbb4a9850>\ndevice = <golioth.golioth.Device object at 0xffffbb4a0b90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728484972449,"stop":1728484972450,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728484972451,"stop":1728484972451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728484972451,"stop":1728484972452,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728484972452,"stop":1728484972453,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728484972453,"stop":1728484972454,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728484972454,"stop":1728484972457,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728484972457,"stop":1728484972458,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728484972458,"stop":1728484972459,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728484972459,"stop":1728484973125,"duration":666},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728484973125,"stop":1728484974150,"duration":1025},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728484974150,"stop":1728484992557,"duration":18407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728484992557,"stop":1728484993578,"duration":1021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbb4a9850>\ndevice = <golioth.golioth.Device object at 0xffffbb4a0b90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"924a7cff2ec7ac92","name":"log","source":"924a7cff2ec7ac92.txt","type":"text/plain","size":12408}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728485016741,"stop":1728485017075,"duration":334},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728485017077,"stop":1728485017581,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728485017584,"stop":1728485017586,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728485017591,"stop":1728485017591,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1e4f818ff7a1"},{"name":"thread","value":"370-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":44,"skipped":0,"passed":73,"unknown":0,"total":117},"items":[{"uid":"d292ffea864e9c7d","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/d292ffea864e9c7d","status":"passed","time":{"start":1728436079793,"stop":1728436089626,"duration":9833}},{"uid":"e5beafb5e4a82e8e","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/e5beafb5e4a82e8e","status":"passed","time":{"start":1728426790441,"stop":1728426799883,"duration":9442}},{"uid":"9f8c5ceea2dce0b7","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9f8c5ceea2dce0b7","status":"passed","time":{"start":1728343095616,"stop":1728343106018,"duration":10402}},{"uid":"1f80260f00728d91","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/1f80260f00728d91","status":"passed","time":{"start":1728401456986,"stop":1728401466453,"duration":9467}},{"uid":"2e581e0009eda5b8","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/2e581e0009eda5b8","status":"passed","time":{"start":1728343095616,"stop":1728343106018,"duration":10402}},{"uid":"cd534ad63f61d4a8","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/cd534ad63f61d4a8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728349557364,"stop":1728349579938,"duration":22574}},{"uid":"17f2b17cd001f579","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/17f2b17cd001f579","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728344735480,"stop":1728344758022,"duration":22542}},{"uid":"8630cf82a9461897","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/8630cf82a9461897","status":"passed","time":{"start":1728343095616,"stop":1728343106018,"duration":10402}},{"uid":"7d14d16b65bd6294","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/7d14d16b65bd6294","status":"passed","time":{"start":1728337905995,"stop":1728337915104,"duration":9109}},{"uid":"f2cf4af6e3d44326","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/f2cf4af6e3d44326","status":"passed","time":{"start":1728328612478,"stop":1728328621198,"duration":8720}},{"uid":"5c9806d7dcc2c119","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/5c9806d7dcc2c119","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728327904577,"stop":1728327927254,"duration":22677}},{"uid":"827e49723ea28ca6","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/827e49723ea28ca6","status":"passed","time":{"start":1728321156082,"stop":1728321166495,"duration":10413}},{"uid":"19230ca83fa642bd","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/19230ca83fa642bd","status":"passed","time":{"start":1728318162986,"stop":1728318172736,"duration":9750}},{"uid":"5956f16267287b39","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/5956f16267287b39","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728314852958,"stop":1728314875582,"duration":22624}},{"uid":"1fbcd41cd79246e5","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/1fbcd41cd79246e5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728308488113,"stop":1728308510741,"duration":22628}},{"uid":"ffd30a87e331919a","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/ffd30a87e331919a","status":"passed","time":{"start":1728308249122,"stop":1728308259887,"duration":10765}},{"uid":"d3729986c04fccb9","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/d3729986c04fccb9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728263094906,"stop":1728263117974,"duration":23068}},{"uid":"7dbaebe1761a86e8","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/7dbaebe1761a86e8","status":"passed","time":{"start":1728176789561,"stop":1728176800709,"duration":11148}},{"uid":"f9b47681e2eb5517","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/f9b47681e2eb5517","status":"passed","time":{"start":1728134077482,"stop":1728134086494,"duration":9012}},{"uid":"4c9c685a201d967c","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/4c9c685a201d967c","status":"passed","time":{"start":1728131694468,"stop":1728131701613,"duration":7145}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"cd0df106b41a87cc.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}