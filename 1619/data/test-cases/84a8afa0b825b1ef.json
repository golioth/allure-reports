{"uid":"84a8afa0b825b1ef","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"ae1c7e14b29d468f72319f0a6ff27eb0","time":{"start":1728485830402,"stop":1728485931204,"duration":100802},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9305be10>\nproject = <golioth.golioth.Project object at 0xffff932106d0>\ndevice = <golioth.golioth.Device object at 0xffff93072a10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <670699aa3174be2c999a89eb, release_tags=[], device_tags=['670699a93174be2c999a89ea'], artifact_ids=['66da3542c36587e4581f9491'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728485798912,"stop":1728485798912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728485798913,"stop":1728485798913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728485798913,"stop":1728485798913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1728485798914,"stop":1728485798942,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728485798943,"stop":1728485798943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728485798944,"stop":1728485798944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728485798944,"stop":1728485798944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728485798945,"stop":1728485798948,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728485798945,"stop":1728485798945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728485798949,"stop":1728485799349,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"west_board","time":{"start":1728485798949,"stop":1728485798949,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728485799350,"stop":1728485800189,"duration":839},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1728485800190,"stop":1728485800563,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1728485800564,"stop":1728485800945,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1728485800945,"stop":1728485802167,"duration":1222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1728485802168,"stop":1728485802566,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728485802566,"stop":1728485829336,"duration":26770},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728485829336,"stop":1728485830399,"duration":1063},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9305be10>\nproject = <golioth.golioth.Project object at 0xffff932106d0>\ndevice = <golioth.golioth.Device object at 0xffff93072a10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <670699aa3174be2c999a89eb, release_tags=[], device_tags=['670699a93174be2c999a89ea'], artifact_ids=['66da3542c36587e4581f9491'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d6cfd24577bdc5b9","name":"log","source":"d6cfd24577bdc5b9.txt","type":"text/plain","size":33782}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728485931552,"stop":1728485931595,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1728485931597,"stop":1728485931965,"duration":368},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1728485931967,"stop":1728485932738,"duration":771},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1728485932740,"stop":1728485932740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1728485932742,"stop":1728485932743,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728485932745,"stop":1728485933121,"duration":376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728485933123,"stop":1728485933124,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728485933127,"stop":1728485933127,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1728485933162,"stop":1728485933164,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f448d9c5d7b3"},{"name":"thread","value":"468-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":39,"skipped":0,"passed":75,"unknown":0,"total":114},"items":[{"uid":"1dea455b80c532e1","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/1dea455b80c532e1","status":"passed","time":{"start":1728437106133,"stop":1728437334902,"duration":228769}},{"uid":"9909d6b32b242c33","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/9909d6b32b242c33","status":"passed","time":{"start":1728427513650,"stop":1728427828270,"duration":314620}},{"uid":"a5537e11c9312477","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/a5537e11c9312477","status":"passed","time":{"start":1728402499891,"stop":1728402796255,"duration":296364}},{"uid":"a4305a12c124d181","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/a4305a12c124d181","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728402187687,"stop":1728402481850,"duration":294163}},{"uid":"51e26605943f3302","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/51e26605943f3302","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728398986095,"stop":1728398986095,"duration":0}},{"uid":"c31ca7b4a4142e42","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/c31ca7b4a4142e42","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728349921428,"stop":1728349921428,"duration":0}},{"uid":"3a79aa46eef5d37b","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/3a79aa46eef5d37b","status":"passed","time":{"start":1728346589562,"stop":1728346895699,"duration":306137}},{"uid":"859afa8f2885b70b","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/859afa8f2885b70b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728345434869,"stop":1728346087408,"duration":652539}},{"uid":"c3e0ca2f29dfb3a0","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/c3e0ca2f29dfb3a0","status":"passed","time":{"start":1728338290931,"stop":1728338616556,"duration":325625}},{"uid":"e33376571baf484e","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/e33376571baf484e","status":"passed","time":{"start":1728320089979,"stop":1728320331204,"duration":241225}},{"uid":"d4fe770bccb556cb","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/d4fe770bccb556cb","status":"passed","time":{"start":1728322118713,"stop":1728322366395,"duration":247682}},{"uid":"f02ff9390ae6112a","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/f02ff9390ae6112a","status":"passed","time":{"start":1728322118713,"stop":1728322366395,"duration":247682}},{"uid":"e52dce6f46f5667e","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/e52dce6f46f5667e","status":"passed","time":{"start":1728320089979,"stop":1728320331204,"duration":241225}},{"uid":"63a4c7af86f63c04","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/63a4c7af86f63c04","status":"passed","time":{"start":1728315484263,"stop":1728315734975,"duration":250712}},{"uid":"3faf94a774c273a3","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/3faf94a774c273a3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728307464308,"stop":1728307565000,"duration":100692}},{"uid":"205a2af35c4aa130","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/205a2af35c4aa130","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728306351964,"stop":1728306452826,"duration":100862}},{"uid":"e5a18d38cefa22a0","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/e5a18d38cefa22a0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728264039246,"stop":1728264473116,"duration":433870}},{"uid":"e3877c6a636102bd","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/e3877c6a636102bd","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728177726921,"stop":1728178377691,"duration":650770}},{"uid":"32af0b38a5726699","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/32af0b38a5726699","status":"passed","time":{"start":1728135150347,"stop":1728135409897,"duration":259550}},{"uid":"f7fc76d7661a4dd7","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/f7fc76d7661a4dd7","status":"passed","time":{"start":1728134420555,"stop":1728134687505,"duration":266950}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"84a8afa0b825b1ef.json","parameterValues":["'nrf9160dk'","'zephyr'"]}