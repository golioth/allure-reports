{"uid":"762e3a2b90b9ed52","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1727990231325,"stop":1727990244590,"duration":13265},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb753ae90>\ndevice = <golioth.golioth.Device object at 0xffffb74b3610>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb74b3610>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727990185543,"stop":1727990185543,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727990185544,"stop":1727990185544,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727990185545,"stop":1727990185545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727990185545,"stop":1727990185545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727990185546,"stop":1727990185547,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727990185546,"stop":1727990185546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727990185547,"stop":1727990185547,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727990185548,"stop":1727990185548,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727990185548,"stop":1727990185548,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727990185549,"stop":1727990185550,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727990185550,"stop":1727990185550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727990185551,"stop":1727990185552,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727990185552,"stop":1727990185987,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727990185988,"stop":1727990211521,"duration":25533},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727990211522,"stop":1727990212425,"duration":903},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727990212426,"stop":1727990225833,"duration":13407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb753ae90>\ndevice = <golioth.golioth.Device object at 0xffffb74b3610>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb74b3610>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"702f00cbfd37b1c2","name":"stdout","source":"702f00cbfd37b1c2.txt","type":"text/plain","size":3106}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727990380154,"stop":1727990380155,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727990380160,"stop":1727990380624,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727990380626,"stop":1727990380631,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727990380633,"stop":1727990380636,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"cc1f315e7516"},{"name":"thread","value":"257-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":25,"broken":1,"skipped":0,"passed":51,"unknown":0,"total":77},"items":[{"uid":"f619946c2dabbadc","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/f619946c2dabbadc","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727989525899,"stop":1727989538666,"duration":12767}},{"uid":"7a12783ee2e6992b","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/7a12783ee2e6992b","status":"passed","time":{"start":1727986425274,"stop":1727986439038,"duration":13764}},{"uid":"26d5f183cf606184","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/26d5f183cf606184","status":"passed","time":{"start":1727983844832,"stop":1727983858611,"duration":13779}},{"uid":"61cf3ae9d790eaba","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/61cf3ae9d790eaba","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727977162463,"stop":1727977178580,"duration":16117}},{"uid":"eaeeaa15e8c9e559","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/eaeeaa15e8c9e559","status":"passed","time":{"start":1727964945311,"stop":1727964960524,"duration":15213}},{"uid":"ec86f4c0d4939be7","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/ec86f4c0d4939be7","status":"passed","time":{"start":1727973492021,"stop":1727973505021,"duration":13000}},{"uid":"d91aac40a8ef7fce","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/d91aac40a8ef7fce","status":"passed","time":{"start":1727969082825,"stop":1727969096502,"duration":13677}},{"uid":"9ba862ac6bf5a197","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/9ba862ac6bf5a197","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727968642353,"stop":1727968656216,"duration":13863}},{"uid":"5da3d52c5f38764e","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/5da3d52c5f38764e","status":"passed","time":{"start":1727964945311,"stop":1727964960524,"duration":15213}},{"uid":"729603f46decf633","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/729603f46decf633","status":"passed","time":{"start":1727959604241,"stop":1727959617225,"duration":12984}},{"uid":"69da2e5df26ccd77","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/69da2e5df26ccd77","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727956351778,"stop":1727956365537,"duration":13759}},{"uid":"929ddb82d4f3d0aa","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/929ddb82d4f3d0aa","status":"passed","time":{"start":1727955319069,"stop":1727955332439,"duration":13370}},{"uid":"59ac5a6f56b746ca","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/59ac5a6f56b746ca","status":"passed","time":{"start":1727951617829,"stop":1727951630834,"duration":13005}},{"uid":"a4b7cf4d41bbe57","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/a4b7cf4d41bbe57","status":"passed","time":{"start":1727926164691,"stop":1727926178981,"duration":14290}},{"uid":"dc5d71c221a98b30","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/dc5d71c221a98b30","status":"passed","time":{"start":1727945207044,"stop":1727945220570,"duration":13526}},{"uid":"984f072d3a9b3874","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/984f072d3a9b3874","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727944362434,"stop":1727944375585,"duration":13151}},{"uid":"f831b47dc50dc9b6","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/f831b47dc50dc9b6","status":"passed","time":{"start":1727943625587,"stop":1727943638963,"duration":13376}},{"uid":"a1c7202dd9d22b18","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/a1c7202dd9d22b18","status":"passed","time":{"start":1727831792122,"stop":1727831805284,"duration":13162}},{"uid":"710162e5fdd4d971","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/710162e5fdd4d971","status":"passed","time":{"start":1727926164691,"stop":1727926178981,"duration":14290}},{"uid":"c801f1d14e385a45","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c801f1d14e385a45","status":"passed","time":{"start":1727926164691,"stop":1727926178981,"duration":14290}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","jons_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')"]},"source":"762e3a2b90b9ed52.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}