{"uid":"6692ab4cd2b514a8","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"b5c35a8c572ef519a230d1d4d00b5c54","time":{"start":1728061791217,"stop":1728061815541,"duration":24324},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f711c831350>\nproject = <golioth.golioth.Project object at 0x7f711c985910>\ndevice = <golioth.golioth.Device object at 0x7f711c812010>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":5,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728061789649,"stop":1728061789649,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728061789650,"stop":1728061789650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728061789650,"stop":1728061789651,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728061789650,"stop":1728061789650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728061789650,"stop":1728061789650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728061789650,"stop":1728061789650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728061789650,"stop":1728061789650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728061789650,"stop":1728061789650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728061789651,"stop":1728061789940,"duration":289},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728061789940,"stop":1728061791102,"duration":1162},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728061791103,"stop":1728061791114,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728061791114,"stop":1728061791216,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f711c831350>\nproject = <golioth.golioth.Project object at 0x7f711c985910>\ndevice = <golioth.golioth.Device object at 0x7f711c812010>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"902e5707086e399f","name":"log","source":"902e5707086e399f.txt","type":"text/plain","size":28278}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728061815802,"stop":1728061816323,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728061816323,"stop":1728061816732,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728061816732,"stop":1728061816733,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728061816743,"stop":1728061816744,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 59"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a9b4e24223b5"},{"name":"thread","value":"64883-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"99d44b9994d30c2e","status":"passed","time":{"start":1728061786253,"stop":1728061836471,"duration":50218}},{"uid":"8f5c71e7a6bb2f64","status":"passed","time":{"start":1728050858435,"stop":1728050882352,"duration":23917}},{"uid":"533c0a68f972981c","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1728050843232,"stop":1728050868248,"duration":25016}},{"uid":"a541f4ad1d14f508","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728022121167,"stop":1728022214066,"duration":92899}},{"uid":"df9fb570af4cfec8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728022114041,"stop":1728022207201,"duration":93160}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":25,"unknown":0,"total":28},"items":[{"uid":"ae14c310338d3623","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/ae14c310338d3623","status":"passed","time":{"start":1728050945149,"stop":1728050953533,"duration":8384}},{"uid":"ddbccefb3607d292","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/ddbccefb3607d292","status":"passed","time":{"start":1728050858435,"stop":1728050882352,"duration":23917}},{"uid":"3f4e277627d0adc0","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/3f4e277627d0adc0","status":"passed","time":{"start":1728048257114,"stop":1728048264742,"duration":7628}},{"uid":"61a2a5d1f58a802a","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/61a2a5d1f58a802a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728022121167,"stop":1728022214066,"duration":92899}},{"uid":"51905f0ff9920717","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/51905f0ff9920717","status":"passed","time":{"start":1728021510737,"stop":1728021555066,"duration":44329}},{"uid":"7dd40359e986184d","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/7dd40359e986184d","status":"passed","time":{"start":1728021330358,"stop":1728021378488,"duration":48130}},{"uid":"71f6a7e638ea2b42","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/71f6a7e638ea2b42","status":"passed","time":{"start":1728021130951,"stop":1728021172517,"duration":41566}},{"uid":"be9de5ee055a4247","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/be9de5ee055a4247","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728020578826,"stop":1728020672623,"duration":93797}},{"uid":"38fa43428602678d","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/38fa43428602678d","status":"passed","time":{"start":1728001718200,"stop":1728001725851,"duration":7651}},{"uid":"60b678960adab122","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/60b678960adab122","status":"passed","time":{"start":1727986244338,"stop":1727986259746,"duration":15408}},{"uid":"5adeabc69f9cfd5c","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/5adeabc69f9cfd5c","status":"passed","time":{"start":1727986241971,"stop":1727986257204,"duration":15233}},{"uid":"322b15ab2f5bd629","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/322b15ab2f5bd629","status":"passed","time":{"start":1727984728131,"stop":1727984736886,"duration":8755}},{"uid":"cdba074e5c1242f8","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/cdba074e5c1242f8","status":"passed","time":{"start":1727975424595,"stop":1727975432890,"duration":8295}},{"uid":"5af72593c13fb62e","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/5af72593c13fb62e","status":"passed","time":{"start":1727970133059,"stop":1727970148982,"duration":15923}},{"uid":"90be08ce35038832","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/90be08ce35038832","status":"passed","time":{"start":1727965187931,"stop":1727965195662,"duration":7731}},{"uid":"10cc4f0848b99b6","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/10cc4f0848b99b6","status":"passed","time":{"start":1727942535546,"stop":1727942543575,"duration":8029}},{"uid":"913bb3e9a2822a1f","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/913bb3e9a2822a1f","status":"passed","time":{"start":1727943232638,"stop":1727943240791,"duration":8153}},{"uid":"e6a20d96e7037251","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/e6a20d96e7037251","status":"passed","time":{"start":1727942535546,"stop":1727942543575,"duration":8029}},{"uid":"30ae9cef44be6b39","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/30ae9cef44be6b39","status":"passed","time":{"start":1727942302518,"stop":1727942326737,"duration":24219}},{"uid":"91c2abedd8ec6e02","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/91c2abedd8ec6e02","status":"passed","time":{"start":1727795052598,"stop":1727795067442,"duration":14844}}]},"tags":["GitHub Actions 59","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6692ab4cd2b514a8.json","parameterValues":["''","'zephyr'"]}