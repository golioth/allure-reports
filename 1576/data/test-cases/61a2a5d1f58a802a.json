{"uid":"61a2a5d1f58a802a","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"b5c35a8c572ef519a230d1d4d00b5c54","time":{"start":1728022121167,"stop":1728022214066,"duration":92899},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f4201364e50>\nproject = <golioth.golioth.Project object at 0x7f420147a3d0>\ndevice = <golioth.golioth.Device object at 0x7f420134aa90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"twister_harness_config","time":{"start":1728022120700,"stop":1728022120700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728022120700,"stop":1728022120700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728022120700,"stop":1728022120700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728022120700,"stop":1728022120700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728022120700,"stop":1728022120701,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728022120700,"stop":1728022120700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728022120700,"stop":1728022120700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728022120700,"stop":1728022120700,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728022120701,"stop":1728022120840,"duration":139},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728022120840,"stop":1728022121161,"duration":321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728022121161,"stop":1728022121162,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728022121162,"stop":1728022121166,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f4201364e50>\nproject = <golioth.golioth.Project object at 0x7f420147a3d0>\ndevice = <golioth.golioth.Device object at 0x7f420134aa90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b8c0c35fc99d98be","name":"log","source":"b8c0c35fc99d98be.txt","type":"text/plain","size":18999}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728022214216,"stop":1728022214727,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728022214727,"stop":1728022214962,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728022214963,"stop":1728022214964,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728022214964,"stop":1728022214964,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 36"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"43e787aff6f8"},{"name":"thread","value":"61485-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f171c379fd07881a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728022114041,"stop":1728022207201,"duration":93160}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":22,"unknown":0,"total":24},"items":[{"uid":"51905f0ff9920717","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/51905f0ff9920717","status":"passed","time":{"start":1728021510737,"stop":1728021555066,"duration":44329}},{"uid":"7dd40359e986184d","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/7dd40359e986184d","status":"passed","time":{"start":1728021330358,"stop":1728021378488,"duration":48130}},{"uid":"71f6a7e638ea2b42","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/71f6a7e638ea2b42","status":"passed","time":{"start":1728021130951,"stop":1728021172517,"duration":41566}},{"uid":"be9de5ee055a4247","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/be9de5ee055a4247","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728020578826,"stop":1728020672623,"duration":93797}},{"uid":"38fa43428602678d","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/38fa43428602678d","status":"passed","time":{"start":1728001718200,"stop":1728001725851,"duration":7651}},{"uid":"60b678960adab122","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/60b678960adab122","status":"passed","time":{"start":1727986244338,"stop":1727986259746,"duration":15408}},{"uid":"5adeabc69f9cfd5c","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/5adeabc69f9cfd5c","status":"passed","time":{"start":1727986241971,"stop":1727986257204,"duration":15233}},{"uid":"322b15ab2f5bd629","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/322b15ab2f5bd629","status":"passed","time":{"start":1727984728131,"stop":1727984736886,"duration":8755}},{"uid":"cdba074e5c1242f8","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/cdba074e5c1242f8","status":"passed","time":{"start":1727975424595,"stop":1727975432890,"duration":8295}},{"uid":"5af72593c13fb62e","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/5af72593c13fb62e","status":"passed","time":{"start":1727970133059,"stop":1727970148982,"duration":15923}},{"uid":"90be08ce35038832","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/90be08ce35038832","status":"passed","time":{"start":1727965187931,"stop":1727965195662,"duration":7731}},{"uid":"10cc4f0848b99b6","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/10cc4f0848b99b6","status":"passed","time":{"start":1727942535546,"stop":1727942543575,"duration":8029}},{"uid":"913bb3e9a2822a1f","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/913bb3e9a2822a1f","status":"passed","time":{"start":1727943232638,"stop":1727943240791,"duration":8153}},{"uid":"e6a20d96e7037251","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/e6a20d96e7037251","status":"passed","time":{"start":1727942535546,"stop":1727942543575,"duration":8029}},{"uid":"30ae9cef44be6b39","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/30ae9cef44be6b39","status":"passed","time":{"start":1727942302518,"stop":1727942326737,"duration":24219}},{"uid":"91c2abedd8ec6e02","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/91c2abedd8ec6e02","status":"passed","time":{"start":1727795052598,"stop":1727795067442,"duration":14844}},{"uid":"7b635b51677a9eee","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/7b635b51677a9eee","status":"passed","time":{"start":1727800762299,"stop":1727800769471,"duration":7172}},{"uid":"bcaea6df0f7e844a","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/bcaea6df0f7e844a","status":"passed","time":{"start":1727797990124,"stop":1727797998280,"duration":8156}},{"uid":"53f685d485e1520a","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/53f685d485e1520a","status":"passed","time":{"start":1727781796832,"stop":1727781804219,"duration":7387}},{"uid":"b0cdd4a5d3e3036c","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/b0cdd4a5d3e3036c","status":"passed","time":{"start":1727777090750,"stop":1727777100784,"duration":10034}}]},"tags":["GitHub Actions 36","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"61a2a5d1f58a802a.json","parameterValues":["''","'zephyr'"]}