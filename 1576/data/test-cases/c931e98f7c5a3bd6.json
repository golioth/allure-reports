{"uid":"c931e98f7c5a3bd6","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"107219ae297537605b8b92c8950f3c78","time":{"start":1728035857377,"stop":1728035950125,"duration":92748},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fc82250>\ndevice = <golioth.golioth.Device object at 0xffff9fc78550>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728035847733,"stop":1728035847734,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728035847734,"stop":1728035847734,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728035847735,"stop":1728035847735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728035847735,"stop":1728035847736,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728035847736,"stop":1728035847736,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728035847736,"stop":1728035847738,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728035847739,"stop":1728035847740,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728035847740,"stop":1728035848200,"duration":460},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728035847740,"stop":1728035847740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728035848201,"stop":1728035849146,"duration":945},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728035849146,"stop":1728035856862,"duration":7716},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728035856863,"stop":1728035857374,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fc82250>\ndevice = <golioth.golioth.Device object at 0xffff9fc78550>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7dd1ea397e8c47fd","name":"log","source":"7dd1ea397e8c47fd.txt","type":"text/plain","size":15699}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728035950475,"stop":1728035950483,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728035950485,"stop":1728035950931,"duration":446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728035950933,"stop":1728035950936,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728035950941,"stop":1728035950941,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f7d829a78e78"},{"name":"thread","value":"464-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":14,"skipped":0,"passed":67,"unknown":0,"total":82},"items":[{"uid":"f2540fbaa6b83845","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/f2540fbaa6b83845","status":"passed","time":{"start":1728031920691,"stop":1728031931442,"duration":10751}},{"uid":"c9ce337fb4e52767","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/c9ce337fb4e52767","status":"passed","time":{"start":1728028601331,"stop":1728028608791,"duration":7460}},{"uid":"ad79d2898b26e297","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/ad79d2898b26e297","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728027618442,"stop":1728027711211,"duration":92769}},{"uid":"157b2027e1979ee0","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/157b2027e1979ee0","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1728023611537,"stop":1728023663767,"duration":52230}},{"uid":"3c286ded6f50aa6e","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/3c286ded6f50aa6e","status":"passed","time":{"start":1728003399131,"stop":1728003408627,"duration":9496}},{"uid":"2a4105a3ff7d87d2","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/2a4105a3ff7d87d2","status":"passed","time":{"start":1727993912640,"stop":1727993922867,"duration":10227}},{"uid":"ef2a2df4a90e3d36","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/ef2a2df4a90e3d36","status":"passed","time":{"start":1727993563953,"stop":1727993573540,"duration":9587}},{"uid":"1d7a3ec77d1ed60a","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/1d7a3ec77d1ed60a","status":"passed","time":{"start":1727988669317,"stop":1727988680106,"duration":10789}},{"uid":"8e1496f2d49ae44","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/8e1496f2d49ae44","status":"passed","time":{"start":1727984812354,"stop":1727984823552,"duration":11198}},{"uid":"db470af9940b9fb4","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/db470af9940b9fb4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727979610100,"stop":1727979702991,"duration":92891}},{"uid":"c617595639d6b4b4","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/c617595639d6b4b4","status":"passed","time":{"start":1727966446796,"stop":1727966458429,"duration":11633}},{"uid":"a70bfdd5d387c857","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/a70bfdd5d387c857","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727974865928,"stop":1727974958615,"duration":92687}},{"uid":"bcfd0565b37e2b5e","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/bcfd0565b37e2b5e","status":"passed","time":{"start":1727972058412,"stop":1727972069111,"duration":10699}},{"uid":"bf1294572a28038","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/bf1294572a28038","status":"passed","time":{"start":1727970761897,"stop":1727970773037,"duration":11140}},{"uid":"b84119134345f1a0","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/b84119134345f1a0","status":"passed","time":{"start":1727966446796,"stop":1727966458429,"duration":11633}},{"uid":"20c1ee85c846b129","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/20c1ee85c846b129","status":"passed","time":{"start":1727959295947,"stop":1727959306726,"duration":10779}},{"uid":"dc619e145d11c7d3","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/dc619e145d11c7d3","status":"passed","time":{"start":1727957837783,"stop":1727957845797,"duration":8014}},{"uid":"2fd4d35b3c1dce0b","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/2fd4d35b3c1dce0b","status":"passed","time":{"start":1727954707080,"stop":1727954713227,"duration":6147}},{"uid":"623c7a456a4c97ca","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/623c7a456a4c97ca","status":"passed","time":{"start":1727908166030,"stop":1727908176582,"duration":10552}},{"uid":"e669f685e7c3f0af","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/e669f685e7c3f0af","status":"passed","time":{"start":1727932397959,"stop":1727932409044,"duration":11085}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"c931e98f7c5a3bd6.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}