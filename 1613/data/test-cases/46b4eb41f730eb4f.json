{"uid":"46b4eb41f730eb4f","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1728343954054,"stop":1728344066815,"duration":112761},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf0b2c50>\ndevice = <golioth.golioth.Device object at 0xffffaf0a1a90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728343944471,"stop":1728343944472,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728343944471,"stop":1728343944471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728343944472,"stop":1728343944473,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728343944472,"stop":1728343944472,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728343944473,"stop":1728343944473,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728343944473,"stop":1728343944475,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728343944476,"stop":1728343944476,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728343944477,"stop":1728343944477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728343944478,"stop":1728343944887,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728343944888,"stop":1728343945720,"duration":832},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728343945721,"stop":1728343953502,"duration":7781},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728343953502,"stop":1728343954051,"duration":549},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf0b2c50>\ndevice = <golioth.golioth.Device object at 0xffffaf0a1a90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2b43ee4d16c32ff0","name":"log","source":"2b43ee4d16c32ff0.txt","type":"text/plain","size":16140}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728344067165,"stop":1728344067174,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728344067175,"stop":1728344067556,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728344067558,"stop":1728344067560,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728344067565,"stop":1728344067565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"161fcc02573f"},{"name":"thread","value":"596-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f2504bf2ed89f1d3","status":"passed","time":{"start":1728343921166,"stop":1728343940587,"duration":19421}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":12,"skipped":0,"passed":102,"unknown":0,"total":115},"items":[{"uid":"7d388f47cd7452fe","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/7d388f47cd7452fe","status":"passed","time":{"start":1728342559471,"stop":1728342583198,"duration":23727}},{"uid":"d84b22107a065ef9","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/d84b22107a065ef9","status":"passed","time":{"start":1728337580575,"stop":1728337602300,"duration":21725}},{"uid":"75c3a38e6b69da6e","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/75c3a38e6b69da6e","status":"passed","time":{"start":1728318016628,"stop":1728318040827,"duration":24199}},{"uid":"bf23788911ba7448","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/bf23788911ba7448","status":"passed","time":{"start":1728325321394,"stop":1728325344887,"duration":23493}},{"uid":"e33284d7f0f42ed1","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/e33284d7f0f42ed1","status":"passed","time":{"start":1728322032247,"stop":1728322056540,"duration":24293}},{"uid":"435d57c4925c6f75","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/435d57c4925c6f75","status":"passed","time":{"start":1728318016628,"stop":1728318040827,"duration":24199}},{"uid":"4b22c7d38993994d","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/4b22c7d38993994d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728314691294,"stop":1728314804175,"duration":112881}},{"uid":"5d5d80ef77aa5965","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/5d5d80ef77aa5965","status":"passed","time":{"start":1728306603085,"stop":1728306627391,"duration":24306}},{"uid":"5c191107cdb9a8b9","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/5c191107cdb9a8b9","status":"passed","time":{"start":1728305730041,"stop":1728305750329,"duration":20288}},{"uid":"c0d8d23037662327","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/c0d8d23037662327","status":"passed","time":{"start":1728263187066,"stop":1728263211313,"duration":24247}},{"uid":"e60794567bc0a4a1","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/e60794567bc0a4a1","status":"passed","time":{"start":1728176974082,"stop":1728177021919,"duration":47837}},{"uid":"135119309498e011","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/135119309498e011","status":"passed","time":{"start":1728133774728,"stop":1728133798562,"duration":23834}},{"uid":"b9fe2481a3efe64f","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/b9fe2481a3efe64f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728130631727,"stop":1728130744480,"duration":112753}},{"uid":"55f13139d65f5dd8","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/55f13139d65f5dd8","status":"passed","time":{"start":1728126028669,"stop":1728126053458,"duration":24789}},{"uid":"5517d4999f5f6cf0","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/5517d4999f5f6cf0","status":"passed","time":{"start":1728125305567,"stop":1728125331630,"duration":26063}},{"uid":"e681c578d770371a","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/e681c578d770371a","status":"passed","time":{"start":1728059330012,"stop":1728059354325,"duration":24313}},{"uid":"5cd31508ba4c685d","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/5cd31508ba4c685d","status":"passed","time":{"start":1728059533854,"stop":1728059558417,"duration":24563}},{"uid":"acfe6403998432c3","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/acfe6403998432c3","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1728090180805,"stop":1728090203997,"duration":23192}},{"uid":"19d50a129e1ec71c","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/19d50a129e1ec71c","status":"passed","time":{"start":1728082039133,"stop":1728082062684,"duration":23551}},{"uid":"11635cd3d626f4dd","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/11635cd3d626f4dd","status":"passed","time":{"start":1728075594646,"stop":1728075621201,"duration":26555}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"46b4eb41f730eb4f.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}