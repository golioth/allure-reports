{"uid":"2bcc0e0cef948938","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1728343437942,"stop":1728343457999,"duration":20057},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffac346390>\ndevice = <golioth.golioth.Device object at 0xffffac354f50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728343409074,"stop":1728343409074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728343409074,"stop":1728343409074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728343409075,"stop":1728343409075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728343409075,"stop":1728343409076,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728343409076,"stop":1728343409076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728343409076,"stop":1728343409079,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728343409079,"stop":1728343409079,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728343409080,"stop":1728343409482,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728343409080,"stop":1728343409080,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728343409483,"stop":1728343410644,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728343410644,"stop":1728343434723,"duration":24079},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728343434723,"stop":1728343437935,"duration":3212},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffac346390>\ndevice = <golioth.golioth.Device object at 0xffffac354f50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"e82198031780f357","name":"log","source":"e82198031780f357.txt","type":"text/plain","size":24301}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728343458178,"stop":1728343458203,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728343458205,"stop":1728343458623,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728343458625,"stop":1728343458627,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728343458632,"stop":1728343458632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8b9243f43008"},{"name":"thread","value":"435-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":1,"skipped":0,"passed":111,"unknown":0,"total":115},"items":[{"uid":"51159b71bdff2891","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/51159b71bdff2891","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728342031734,"stop":1728342031734,"duration":0}},{"uid":"e42228d2128e10af","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/e42228d2128e10af","status":"passed","time":{"start":1728337031737,"stop":1728337055325,"duration":23588}},{"uid":"6e55a34750954411","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/6e55a34750954411","status":"passed","time":{"start":1728317649042,"stop":1728317672774,"duration":23732}},{"uid":"21777b9c4ce59d9e","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/21777b9c4ce59d9e","status":"passed","time":{"start":1728325127595,"stop":1728325151338,"duration":23743}},{"uid":"d62e94638cabb9e0","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/d62e94638cabb9e0","status":"passed","time":{"start":1728320544230,"stop":1728320567529,"duration":23299}},{"uid":"6bb752bfc3a1c803","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/6bb752bfc3a1c803","status":"passed","time":{"start":1728317649042,"stop":1728317672774,"duration":23732}},{"uid":"b42b8a377c476a0c","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/b42b8a377c476a0c","status":"passed","time":{"start":1728313821030,"stop":1728313844661,"duration":23631}},{"uid":"89aa192a712cbbc5","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/89aa192a712cbbc5","status":"passed","time":{"start":1728306595774,"stop":1728306619025,"duration":23251}},{"uid":"9b981bf2e56b372c","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/9b981bf2e56b372c","status":"passed","time":{"start":1728305508432,"stop":1728305531604,"duration":23172}},{"uid":"7c0af9ad83f915bc","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/7c0af9ad83f915bc","status":"passed","time":{"start":1728262583031,"stop":1728262606623,"duration":23592}},{"uid":"bea5cd35d234e7cd","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/bea5cd35d234e7cd","status":"passed","time":{"start":1728176219576,"stop":1728176243225,"duration":23649}},{"uid":"51ff0fdd5382b5de","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/51ff0fdd5382b5de","status":"passed","time":{"start":1728131639483,"stop":1728131663160,"duration":23677}},{"uid":"caf39d66062e6bfc","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/caf39d66062e6bfc","status":"passed","time":{"start":1728130265889,"stop":1728130289670,"duration":23781}},{"uid":"51c648109c30f47f","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/51c648109c30f47f","status":"passed","time":{"start":1728124896241,"stop":1728124920028,"duration":23787}},{"uid":"f8192f9c5a527883","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/f8192f9c5a527883","status":"passed","time":{"start":1728123910976,"stop":1728123934224,"duration":23248}},{"uid":"214a09d8cd6e13ea","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/214a09d8cd6e13ea","status":"passed","time":{"start":1728121025695,"stop":1728121049425,"duration":23730}},{"uid":"7ce0eaaa04ff638e","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/7ce0eaaa04ff638e","status":"passed","time":{"start":1728120463595,"stop":1728120486752,"duration":23157}},{"uid":"5aa2526da018a07e","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/5aa2526da018a07e","status":"passed","time":{"start":1728089114901,"stop":1728089138901,"duration":24000}},{"uid":"d6b619986013653c","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/d6b619986013653c","status":"passed","time":{"start":1728081750982,"stop":1728081774762,"duration":23780}},{"uid":"b29840907e0c95d","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/b29840907e0c95d","status":"passed","time":{"start":1728075149315,"stop":1728075173254,"duration":23939}}]},"tags":["mikes_orange_pi","nrf52840dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"2bcc0e0cef948938.json","parameterValues":["'nrf52840dk'","'zephyr'"]}