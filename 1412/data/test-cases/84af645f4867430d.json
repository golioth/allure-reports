{"uid":"84af645f4867430d","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1727190316388,"stop":1727190329227,"duration":12839},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8b3e5650>\ndevice = <golioth.golioth.Device object at 0xffff8b343050>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8b343050>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"board_name","time":{"start":1727190244615,"stop":1727190244616,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"platform_name","time":{"start":1727190244617,"stop":1727190244617,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"add_allure_report_parent_suite","time":{"start":1727190244617,"stop":1727190244618,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727190244618,"stop":1727190244618,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"runner_name","time":{"start":1727190244619,"stop":1727190244619,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727190244620,"stop":1727190244620,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727190244620,"stop":1727190244620,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727190244621,"stop":1727190244621,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727190244621,"stop":1727190244621,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727190244622,"stop":1727190244622,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727190244623,"stop":1727190244623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727190244624,"stop":1727190244624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727190244624,"stop":1727190244624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727190244625,"stop":1727190244625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727190244625,"stop":1727190244625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727190244626,"stop":1727190245087,"duration":461},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727190245087,"stop":1727190294271,"duration":49184},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727190294272,"stop":1727190295374,"duration":1102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727190295374,"stop":1727190308185,"duration":12811},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"add_allure_report_device_and_platform","time":{"start":1727190316385,"stop":1727190316386,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8b3e5650>\ndevice = <golioth.golioth.Device object at 0xffff8b343050>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8b343050>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"c5fa5783c54f254b","name":"stdout","source":"c5fa5783c54f254b.txt","type":"text/plain","size":3295}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727190471230,"stop":1727190471231,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727190471235,"stop":1727190471699,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727190471701,"stop":1727190471709,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727190471712,"stop":1727190471714,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"260c54b4c918"},{"name":"thread","value":"260-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":15},"items":[{"uid":"f4af3bee20de5e84","reportUrl":"https://golioth.github.io/allure-reports/1411//#testresult/f4af3bee20de5e84","status":"passed","time":{"start":1727138167775,"stop":1727138180520,"duration":12745}},{"uid":"3f0982d602befef3","reportUrl":"https://golioth.github.io/allure-reports/1410//#testresult/3f0982d602befef3","status":"passed","time":{"start":1727130873398,"stop":1727130886204,"duration":12806}},{"uid":"8d7a696284a3ee2a","reportUrl":"https://golioth.github.io/allure-reports/1409//#testresult/8d7a696284a3ee2a","status":"passed","time":{"start":1727051788686,"stop":1727051801490,"duration":12804}},{"uid":"36d432173cd646fc","reportUrl":"https://golioth.github.io/allure-reports/1408//#testresult/36d432173cd646fc","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1726965478991,"stop":1726965491735,"duration":12744}},{"uid":"40ac3213ba2e0073","reportUrl":"https://golioth.github.io/allure-reports/1407//#testresult/40ac3213ba2e0073","status":"passed","time":{"start":1726881234421,"stop":1726881247227,"duration":12806}},{"uid":"3ec628875550abf1","reportUrl":"https://golioth.github.io/allure-reports/1406//#testresult/3ec628875550abf1","status":"passed","time":{"start":1726878877481,"stop":1726878890938,"duration":13457}},{"uid":"3d04937a6ee6de92","reportUrl":"https://golioth.github.io/allure-reports/1405//#testresult/3d04937a6ee6de92","status":"passed","time":{"start":1726870284035,"stop":1726870297279,"duration":13244}},{"uid":"a4a7e06f2e8258f6","reportUrl":"https://golioth.github.io/allure-reports/1404//#testresult/a4a7e06f2e8258f6","status":"passed","time":{"start":1726867528275,"stop":1726867541510,"duration":13235}},{"uid":"2350bb753990e5c0","reportUrl":"https://golioth.github.io/allure-reports/1403//#testresult/2350bb753990e5c0","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1726864610608,"stop":1726864623654,"duration":13046}},{"uid":"b0167d703ef12440","reportUrl":"https://golioth.github.io/allure-reports/1402//#testresult/b0167d703ef12440","status":"passed","time":{"start":1726862183840,"stop":1726862196748,"duration":12908}},{"uid":"20530d17d4c64388","reportUrl":"https://golioth.github.io/allure-reports/1400//#testresult/20530d17d4c64388","status":"passed","time":{"start":1726853175776,"stop":1726853188684,"duration":12908}},{"uid":"3075c3ab5345cd45","reportUrl":"https://golioth.github.io/allure-reports/1396//#testresult/3075c3ab5345cd45","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1726842143296,"stop":1726842157281,"duration":13985}},{"uid":"413e6af85ad4cd67","reportUrl":"https://golioth.github.io/allure-reports/1391//#testresult/413e6af85ad4cd67","status":"passed","time":{"start":1726797032129,"stop":1726797045038,"duration":12909}},{"uid":"590dd4e781242b3","reportUrl":"https://golioth.github.io/allure-reports/1388//#testresult/590dd4e781242b3","status":"passed","time":{"start":1726788748101,"stop":1726788760922,"duration":12821}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"84af645f4867430d.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}