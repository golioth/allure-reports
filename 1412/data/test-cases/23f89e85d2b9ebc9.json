{"uid":"23f89e85d2b9ebc9","name":"test_int_too_small","fullName":"tests.hil.tests.settings.test_settings#test_int_too_small","historyId":"9a158ab876eb6bcacb2a056562120108","time":{"start":1727190324011,"stop":1727190336624,"duration":12613},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8040e990>\ndevice = <golioth.golioth.Device object at 0xffff8055fc90>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8055fc90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"board_name","time":{"start":1727190232047,"stop":1727190232047,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"platform_name","time":{"start":1727190232048,"stop":1727190232048,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"add_allure_report_parent_suite","time":{"start":1727190232049,"stop":1727190232049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727190232050,"stop":1727190232050,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"runner_name","time":{"start":1727190232050,"stop":1727190232051,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727190232051,"stop":1727190232051,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727190232052,"stop":1727190232053,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727190232052,"stop":1727190232052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727190232053,"stop":1727190232053,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727190232053,"stop":1727190232053,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727190232054,"stop":1727190232054,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727190232054,"stop":1727190232054,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727190232055,"stop":1727190232055,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727190232055,"stop":1727190232055,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727190232056,"stop":1727190232453,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727190232056,"stop":1727190232056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727190232453,"stop":1727190283845,"duration":51392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727190283846,"stop":1727190284750,"duration":904},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727190284751,"stop":1727190303815,"duration":19064},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"add_allure_report_device_and_platform","time":{"start":1727190324008,"stop":1727190324009,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8040e990>\ndevice = <golioth.golioth.Device object at 0xffff8055fc90>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8055fc90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"2697408d07736bee","name":"stdout","source":"2697408d07736bee.txt","type":"text/plain","size":688}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727190469016,"stop":1727190469017,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727190469021,"stop":1727190469420,"duration":399},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727190469423,"stop":1727190469424,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727190469426,"stop":1727190469428,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"d2029cfde8e0"},{"name":"thread","value":"263-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":15},"items":[{"uid":"2235baff5914242d","reportUrl":"https://golioth.github.io/allure-reports/1411//#testresult/2235baff5914242d","status":"passed","time":{"start":1727138211444,"stop":1727138224640,"duration":13196}},{"uid":"971cd6d6302b9012","reportUrl":"https://golioth.github.io/allure-reports/1410//#testresult/971cd6d6302b9012","status":"passed","time":{"start":1727130957160,"stop":1727130970459,"duration":13299}},{"uid":"7b14fc6af9ec5e17","reportUrl":"https://golioth.github.io/allure-reports/1409//#testresult/7b14fc6af9ec5e17","status":"passed","time":{"start":1727051884759,"stop":1727051898469,"duration":13710}},{"uid":"d27ea93aeb5620a1","reportUrl":"https://golioth.github.io/allure-reports/1408//#testresult/d27ea93aeb5620a1","status":"passed","time":{"start":1726965585107,"stop":1726965598593,"duration":13486}},{"uid":"860bcc5ca019eae3","reportUrl":"https://golioth.github.io/allure-reports/1407//#testresult/860bcc5ca019eae3","status":"passed","time":{"start":1726881266915,"stop":1726881279815,"duration":12900}},{"uid":"49577173f116bfc0","reportUrl":"https://golioth.github.io/allure-reports/1406//#testresult/49577173f116bfc0","status":"passed","time":{"start":1726878955212,"stop":1726878968605,"duration":13393}},{"uid":"5aaf882688b47054","reportUrl":"https://golioth.github.io/allure-reports/1405//#testresult/5aaf882688b47054","status":"passed","time":{"start":1726869908508,"stop":1726869921787,"duration":13279}},{"uid":"b3ef939229e407e5","reportUrl":"https://golioth.github.io/allure-reports/1404//#testresult/b3ef939229e407e5","status":"passed","time":{"start":1726867247677,"stop":1726867261283,"duration":13606}},{"uid":"ac48e003ce139390","reportUrl":"https://golioth.github.io/allure-reports/1403//#testresult/ac48e003ce139390","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1726865088164,"stop":1726865100894,"duration":12730}},{"uid":"61c1ecf6ac04daf2","reportUrl":"https://golioth.github.io/allure-reports/1402//#testresult/61c1ecf6ac04daf2","status":"passed","time":{"start":1726862252060,"stop":1726862267035,"duration":14975}},{"uid":"5203396a48df57a6","reportUrl":"https://golioth.github.io/allure-reports/1400//#testresult/5203396a48df57a6","status":"passed","time":{"start":1726853555115,"stop":1726853568618,"duration":13503}},{"uid":"4a0f060de6750a48","reportUrl":"https://golioth.github.io/allure-reports/1396//#testresult/4a0f060de6750a48","status":"passed","time":{"start":1726842912190,"stop":1726842925070,"duration":12880}},{"uid":"2e30518bec0642c5","reportUrl":"https://golioth.github.io/allure-reports/1391//#testresult/2e30518bec0642c5","status":"passed","time":{"start":1726797038186,"stop":1726797051707,"duration":13521}},{"uid":"391111deacf32eee","reportUrl":"https://golioth.github.io/allure-reports/1388//#testresult/391111deacf32eee","status":"passed","time":{"start":1726789326874,"stop":1726789340535,"duration":13661}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"23f89e85d2b9ebc9.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}