{"uid":"3ab490145c61bf66","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"ab7e5d87a82ba92a14c51d247dfaf673","time":{"start":1728069904791,"stop":1728069904791,"duration":0},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_credentials>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:51: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:135: TwisterHarnessException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728069904794,"stop":1728069904794,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"anyio_backend","time":{"start":1728069904794,"stop":1728069904794,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_key","time":{"start":1728069904795,"stop":1728069904796,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"wifi_psk","time":{"start":1728069904795,"stop":1728069904795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"twister_harness_config","time":{"start":1728069904796,"stop":1728069904797,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_url","time":{"start":1728069904796,"stop":1728069904796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_object","time":{"start":1728069904797,"stop":1728069904799,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project","time":{"start":1728069904800,"stop":1728069905286,"duration":486},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_name","time":{"start":1728069905287,"stop":1728069905288,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"certificate_cred","time":{"start":1728069905288,"stop":1728069905749,"duration":461},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"dut","time":{"start":1728069905750,"stop":1728069908356,"duration":2606},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 51, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 135, in _flash_and_run\n    raise TwisterHarnessException(msg)\n","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_credentials>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:51: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:135: TwisterHarnessException","steps":[],"attachments":[{"uid":"a57be9717cc9838a","name":"log","source":"a57be9717cc9838a.txt","type":"text/plain","size":9563}],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"certificate_cred::0","time":{"start":1728069908619,"stop":1728069909063,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_name::0","time":{"start":1728069909065,"stop":1728069909473,"duration":408},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project::0","time":{"start":1728069909475,"stop":1728069909477,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_object::0","time":{"start":1728069909480,"stop":1728069909480,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"bd1e4820680a"},{"name":"thread","value":"498-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":92,"skipped":0,"passed":0,"unknown":0,"total":92},"items":[{"uid":"6f1821b2bd5afac5","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/6f1821b2bd5afac5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728071010615,"stop":1728071010615,"duration":0}},{"uid":"bd72a173a19b3c67","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/bd72a173a19b3c67","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728070746689,"stop":1728070746689,"duration":0}},{"uid":"58700dcbe4fd82f9","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/58700dcbe4fd82f9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728070695662,"stop":1728070695662,"duration":0}},{"uid":"8966b53a597d4c0d","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/8966b53a597d4c0d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728058836758,"stop":1728058836758,"duration":0}},{"uid":"60ca530480d8c940","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/60ca530480d8c940","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728058224881,"stop":1728058224881,"duration":0}},{"uid":"b82f5889e8c560d0","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/b82f5889e8c560d0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728050909685,"stop":1728050909685,"duration":0}},{"uid":"950ecce436b0d440","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/950ecce436b0d440","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728036818520,"stop":1728036818520,"duration":0}},{"uid":"2f3b509bf2d90ba3","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/2f3b509bf2d90ba3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728030946332,"stop":1728030946332,"duration":0}},{"uid":"49171f928023c815","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/49171f928023c815","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728028101923,"stop":1728028101923,"duration":0}},{"uid":"8d422a0542387700","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/8d422a0542387700","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728024385190,"stop":1728024385190,"duration":0}},{"uid":"b7290fd26c8f376c","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/b7290fd26c8f376c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1728004258383,"stop":1728004258383,"duration":0}},{"uid":"4548bd1af19eb5f7","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/4548bd1af19eb5f7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727994938579,"stop":1727994938579,"duration":0}},{"uid":"f408ec23b121b1ef","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/f408ec23b121b1ef","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727994720772,"stop":1727994720772,"duration":0}},{"uid":"f447bf751dd82cf3","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/f447bf751dd82cf3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727988865967,"stop":1727988865967,"duration":0}},{"uid":"d21b93ce2533210a","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/d21b93ce2533210a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727987165390,"stop":1727987165390,"duration":0}},{"uid":"f3a3a4e1e26e7c0a","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/f3a3a4e1e26e7c0a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727981482898,"stop":1727981482898,"duration":0}},{"uid":"3441fb81f4bf3993","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/3441fb81f4bf3993","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727977625390,"stop":1727977625390,"duration":0}},{"uid":"ef14e08a665979d2","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/ef14e08a665979d2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727976048842,"stop":1727976048842,"duration":0}},{"uid":"4a078fae2dde2a18","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/4a078fae2dde2a18","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727972929836,"stop":1727972929836,"duration":0}},{"uid":"77e4ab842fed4343","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/77e4ab842fed4343","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1727971407443,"stop":1727971407443,"duration":0}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"3ab490145c61bf66.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}