{"uid":"bfd8d5e7378c7540","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1728066060195,"stop":1728066073136,"duration":12941},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf2d9750>\ndevice = <golioth.golioth.Device object at 0xffffaf2ae510>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffaf2ae510>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728066013705,"stop":1728066013705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"board_name","time":{"start":1728066013706,"stop":1728066013706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"port","time":{"start":1728066013707,"stop":1728066013708,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"baud","time":{"start":1728066013708,"stop":1728066013709,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"wifi_ssid","time":{"start":1728066013709,"stop":1728066013710,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"wifi_psk","time":{"start":1728066013710,"stop":1728066013711,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"fw_image","time":{"start":1728066013711,"stop":1728066013711,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"serial_number","time":{"start":1728066013712,"stop":1728066013712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"bmp_port","time":{"start":1728066013713,"stop":1728066013713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_name","time":{"start":1728066013714,"stop":1728066013714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_key","time":{"start":1728066013714,"stop":1728066013714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_url","time":{"start":1728066013715,"stop":1728066013715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project","time":{"start":1728066013716,"stop":1728066014153,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"board","time":{"start":1728066014154,"stop":1728066039439,"duration":25285},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device","time":{"start":1728066039441,"stop":1728066040427,"duration":986},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1728066040427,"stop":1728066054369,"duration":13942},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf2d9750>\ndevice = <golioth.golioth.Device object at 0xffffaf2ae510>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffaf2ae510>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"22a12de6b1aae77c","name":"stdout","source":"22a12de6b1aae77c.txt","type":"text/plain","size":3232}],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1728066208116,"stop":1728066208117,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device::0","time":{"start":1728066208122,"stop":1728066208663,"duration":541},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"board::0","time":{"start":1728066208665,"stop":1728066208670,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project::0","time":{"start":1728066208672,"stop":1728066208675,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"41f9ac6bcfe4"},{"name":"thread","value":"252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":2,"skipped":0,"passed":60,"unknown":0,"total":88},"items":[{"uid":"8ee01c2179c2cc56","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/8ee01c2179c2cc56","status":"passed","time":{"start":1728058251867,"stop":1728058264758,"duration":12891}},{"uid":"29d9a57dfd458d8b","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/29d9a57dfd458d8b","status":"passed","time":{"start":1728026164909,"stop":1728026178020,"duration":13111}},{"uid":"535e54772e29c0fb","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/535e54772e29c0fb","status":"passed","time":{"start":1728034736669,"stop":1728034749576,"duration":12907}},{"uid":"acfedb0f36a76b4c","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/acfedb0f36a76b4c","status":"passed","time":{"start":1728027826136,"stop":1728027839027,"duration":12891}},{"uid":"250bb462917a19cc","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/250bb462917a19cc","status":"passed","time":{"start":1728034736669,"stop":1728034749576,"duration":12907}},{"uid":"98621e43ab440103","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/98621e43ab440103","status":"passed","time":{"start":1728048645555,"stop":1728048658927,"duration":13372}},{"uid":"ceec4af803873497","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/ceec4af803873497","status":"passed","time":{"start":1728034736669,"stop":1728034749576,"duration":12907}},{"uid":"2380626bad99eb5b","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/2380626bad99eb5b","status":"passed","time":{"start":1728027826136,"stop":1728027839027,"duration":12891}},{"uid":"81f2a0000dcb4333","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/81f2a0000dcb4333","status":"passed","time":{"start":1728026164909,"stop":1728026178020,"duration":13111}},{"uid":"fe09c0ddc5c9b16","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/fe09c0ddc5c9b16","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1728023760505,"stop":1728023760505,"duration":0}},{"uid":"762e3a2b90b9ed52","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/762e3a2b90b9ed52","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727990231325,"stop":1727990244590,"duration":13265}},{"uid":"f619946c2dabbadc","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/f619946c2dabbadc","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727989525899,"stop":1727989538666,"duration":12767}},{"uid":"7a12783ee2e6992b","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/7a12783ee2e6992b","status":"passed","time":{"start":1727986425274,"stop":1727986439038,"duration":13764}},{"uid":"26d5f183cf606184","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/26d5f183cf606184","status":"passed","time":{"start":1727983844832,"stop":1727983858611,"duration":13779}},{"uid":"61cf3ae9d790eaba","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/61cf3ae9d790eaba","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727977162463,"stop":1727977178580,"duration":16117}},{"uid":"eaeeaa15e8c9e559","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/eaeeaa15e8c9e559","status":"passed","time":{"start":1727964945311,"stop":1727964960524,"duration":15213}},{"uid":"ec86f4c0d4939be7","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/ec86f4c0d4939be7","status":"passed","time":{"start":1727973492021,"stop":1727973505021,"duration":13000}},{"uid":"d91aac40a8ef7fce","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/d91aac40a8ef7fce","status":"passed","time":{"start":1727969082825,"stop":1727969096502,"duration":13677}},{"uid":"9ba862ac6bf5a197","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/9ba862ac6bf5a197","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727968642353,"stop":1727968656216,"duration":13863}},{"uid":"5da3d52c5f38764e","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/5da3d52c5f38764e","status":"passed","time":{"start":1727964945311,"stop":1727964960524,"duration":15213}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","jons_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')"]},"source":"bfd8d5e7378c7540.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}