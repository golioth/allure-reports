{"uid":"e014d36e5138b11a","name":"test_set_float_whole","fullName":"tests.hil.tests.settings.test_settings#test_set_float_whole","historyId":"b95d1c0af81e9ba6c876e408b54a8117","time":{"start":1728067248704,"stop":1728067260039,"duration":11335},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 110304.28920440216\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <mimxrt1024evk.MIMXRT1024EVK object at 0xffff8b838190>\ndevice = <golioth.golioth.Device object at 0xffff8b7c8710>\n\n    async def test_set_float_whole(board, device):\n        await device.settings.set('TEST_FLOAT', 10)\n    \n>       assert None != await board.wait_for_regex_in_line('Received test_float: 10', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 110304.28920440216\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728067103234,"stop":1728067103234,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"board_name","time":{"start":1728067103235,"stop":1728067103235,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"port","time":{"start":1728067103236,"stop":1728067103236,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"baud","time":{"start":1728067103237,"stop":1728067103237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"wifi_ssid","time":{"start":1728067103237,"stop":1728067103237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"wifi_psk","time":{"start":1728067103238,"stop":1728067103238,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"fw_image","time":{"start":1728067103239,"stop":1728067103239,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"serial_number","time":{"start":1728067103239,"stop":1728067103239,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"bmp_port","time":{"start":1728067103240,"stop":1728067103240,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_name","time":{"start":1728067103241,"stop":1728067103241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_key","time":{"start":1728067103241,"stop":1728067103241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_url","time":{"start":1728067103242,"stop":1728067103242,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project","time":{"start":1728067103242,"stop":1728067103882,"duration":640},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"board","time":{"start":1728067103883,"stop":1728067123399,"duration":19516},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device","time":{"start":1728067123400,"stop":1728067124441,"duration":1041},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1728067124442,"stop":1728067138335,"duration":13893},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 110304.28920440216\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <mimxrt1024evk.MIMXRT1024EVK object at 0xffff8b838190>\ndevice = <golioth.golioth.Device object at 0xffff8b7c8710>\n\n    async def test_set_float_whole(board, device):\n        await device.settings.set('TEST_FLOAT', 10)\n    \n>       assert None != await board.wait_for_regex_in_line('Received test_float: 10', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 110304.28920440216\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"2982fdd0d8e0911e","name":"stdout","source":"2982fdd0d8e0911e.txt","type":"text/plain","size":386}],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1728067300109,"stop":1728067300110,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device::0","time":{"start":1728067300112,"stop":1728067300514,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"board::0","time":{"start":1728067300516,"stop":1728067300518,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project::0","time":{"start":1728067300520,"stop":1728067300522,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"bcc60cbfb14f"},{"name":"thread","value":"230-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":83,"unknown":0,"total":87},"items":[{"uid":"f732990b1af1429e","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/f732990b1af1429e","status":"passed","time":{"start":1728058592368,"stop":1728058596953,"duration":4585}},{"uid":"2261936af0f751ad","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/2261936af0f751ad","status":"passed","time":{"start":1728060063359,"stop":1728060068673,"duration":5314}},{"uid":"bb5c98d9360498c2","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/bb5c98d9360498c2","status":"passed","time":{"start":1728035322029,"stop":1728035326474,"duration":4445}},{"uid":"a228769e8a2cc215","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/a228769e8a2cc215","status":"passed","time":{"start":1728035322029,"stop":1728035326474,"duration":4445}},{"uid":"663ab032638ddbea","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/663ab032638ddbea","status":"passed","time":{"start":1728049388304,"stop":1728049392883,"duration":4579}},{"uid":"7f7c3c627dd75d75","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/7f7c3c627dd75d75","status":"passed","time":{"start":1728035322029,"stop":1728035326474,"duration":4445}},{"uid":"dd688a5294825155","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/dd688a5294825155","status":"passed","time":{"start":1728027077934,"stop":1728027082404,"duration":4470}},{"uid":"e874fd52d20d5434","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/e874fd52d20d5434","status":"passed","time":{"start":1728025674506,"stop":1728025678897,"duration":4391}},{"uid":"10dac501e871dc28","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/10dac501e871dc28","status":"passed","time":{"start":1728022444162,"stop":1728022448862,"duration":4700}},{"uid":"371463ea84140ff2","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/371463ea84140ff2","status":"passed","time":{"start":1728002831121,"stop":1728002835339,"duration":4218}},{"uid":"fb0a0d6cddd387b7","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/fb0a0d6cddd387b7","status":"passed","time":{"start":1727991482263,"stop":1727991487681,"duration":5418}},{"uid":"95885efc47efed7f","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/95885efc47efed7f","status":"passed","time":{"start":1727991711028,"stop":1727991715843,"duration":4815}},{"uid":"45d14295af410e3f","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/45d14295af410e3f","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1727987790883,"stop":1727987790883,"duration":0}},{"uid":"4b28e91d5837cfd6","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/4b28e91d5837cfd6","status":"passed","time":{"start":1727984729450,"stop":1727984735582,"duration":6132}},{"uid":"d637357261f7b1ee","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/d637357261f7b1ee","status":"passed","time":{"start":1727978351170,"stop":1727978356221,"duration":5051}},{"uid":"32a35316f6abf907","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/32a35316f6abf907","status":"passed","time":{"start":1727976554632,"stop":1727976559392,"duration":4760}},{"uid":"9af8664fe231e3f5","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/9af8664fe231e3f5","status":"passed","time":{"start":1727972911745,"stop":1727972916400,"duration":4655}},{"uid":"aa238589b07ff17e","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/aa238589b07ff17e","status":"passed","time":{"start":1727970465969,"stop":1727970470098,"duration":4129}},{"uid":"8d9cca3d207bf4e7","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/8d9cca3d207bf4e7","status":"passed","time":{"start":1727965623819,"stop":1727965629825,"duration":6006}},{"uid":"c782b6673bc13164","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/c782b6673bc13164","status":"passed","time":{"start":1727958770289,"stop":1727958775195,"duration":4906}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"e014d36e5138b11a.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}