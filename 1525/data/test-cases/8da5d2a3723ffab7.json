{"uid":"8da5d2a3723ffab7","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"03352d708656e4accf49c2f80b0063e1","time":{"start":1727956461610,"stop":1727956484334,"duration":22724},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1532190>\ndevice = <golioth.golioth.Device object at 0xffffb1545150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727956441818,"stop":1727956441818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727956441819,"stop":1727956441819,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727956441820,"stop":1727956441820,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727956441820,"stop":1727956441820,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727956441821,"stop":1727956441823,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727956441821,"stop":1727956441821,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727956441824,"stop":1727956441824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727956441825,"stop":1727956442277,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727956441825,"stop":1727956441825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727956442278,"stop":1727956443279,"duration":1001},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727956443280,"stop":1727956460648,"duration":17368},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727956460649,"stop":1727956461607,"duration":958},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1532190>\ndevice = <golioth.golioth.Device object at 0xffffb1545150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"845e274d3a68967f","name":"log","source":"845e274d3a68967f.txt","type":"text/plain","size":12896}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727956484682,"stop":1727956484695,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727956484697,"stop":1727956485077,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727956485079,"stop":1727956485081,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727956485086,"stop":1727956485086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"74b19e458235"},{"name":"thread","value":"487-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2d89ec2fcd33ae64","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727908918274,"stop":1727908940999,"duration":22725}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":24,"skipped":0,"passed":39,"unknown":0,"total":63},"items":[{"uid":"8efa9ff8ddb0218f","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/8efa9ff8ddb0218f","status":"passed","time":{"start":1727952363003,"stop":1727952374242,"duration":11239}},{"uid":"af00b67f7e2f58df","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/af00b67f7e2f58df","status":"passed","time":{"start":1727950602154,"stop":1727950613760,"duration":11606}},{"uid":"9734858d44f16bac","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/9734858d44f16bac","status":"passed","time":{"start":1727948357251,"stop":1727948367016,"duration":9765}},{"uid":"dfa9c3a989f23cf7","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/dfa9c3a989f23cf7","status":"passed","time":{"start":1727948506756,"stop":1727948513576,"duration":6820}},{"uid":"2b35fb6f1e5518bc","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2b35fb6f1e5518bc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727946553531,"stop":1727946576103,"duration":22572}},{"uid":"b05d40b2cc9d6ff0","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b05d40b2cc9d6ff0","status":"passed","time":{"start":1727933122463,"stop":1727933134224,"duration":11761}},{"uid":"2da36753a61afb63","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/2da36753a61afb63","status":"passed","time":{"start":1727928196557,"stop":1727928202429,"duration":5872}},{"uid":"73b75fd114c01094","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/73b75fd114c01094","status":"passed","time":{"start":1727917840522,"stop":1727917848302,"duration":7780}},{"uid":"7aba1596ef76f509","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/7aba1596ef76f509","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727908918274,"stop":1727908940999,"duration":22725}},{"uid":"7e8ae46ab5b2943b","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/7e8ae46ab5b2943b","status":"passed","time":{"start":1727833637239,"stop":1727833647413,"duration":10174}},{"uid":"8638ab247e05332c","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/8638ab247e05332c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727831149058,"stop":1727831171648,"duration":22590}},{"uid":"13c6415bda3f07c4","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/13c6415bda3f07c4","status":"passed","time":{"start":1727816595535,"stop":1727816605635,"duration":10100}},{"uid":"b12ae2b4b09ed8f7","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/b12ae2b4b09ed8f7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727816121874,"stop":1727816144502,"duration":22628}},{"uid":"ec1eaf04ca00c62b","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/ec1eaf04ca00c62b","status":"passed","time":{"start":1727815452429,"stop":1727815459405,"duration":6976}},{"uid":"4f931d20783e16b5","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/4f931d20783e16b5","status":"passed","time":{"start":1727810545997,"stop":1727810551925,"duration":5928}},{"uid":"ae19711ca6859de8","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/ae19711ca6859de8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727807215692,"stop":1727807238319,"duration":22627}},{"uid":"8e6b806ce3d0da3e","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/8e6b806ce3d0da3e","status":"passed","time":{"start":1727799039965,"stop":1727799049592,"duration":9627}},{"uid":"3190215ac930b1c2","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/3190215ac930b1c2","status":"passed","time":{"start":1727797733900,"stop":1727797741866,"duration":7966}},{"uid":"9eadd234244ae853","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/9eadd234244ae853","status":"passed","time":{"start":1727788979595,"stop":1727788989203,"duration":9608}},{"uid":"b3fdbd91ea7481ab","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/b3fdbd91ea7481ab","status":"passed","time":{"start":1727786905505,"stop":1727786915273,"duration":9768}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"8da5d2a3723ffab7.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}