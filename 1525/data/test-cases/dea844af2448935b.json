{"uid":"dea844af2448935b","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1727956261263,"stop":1727956354810,"duration":93547},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8184cd10>\ndevice = <golioth.golioth.Device object at 0xffff816d15d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727956242902,"stop":1727956242903,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727956242902,"stop":1727956242902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727956242903,"stop":1727956242903,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727956242904,"stop":1727956242904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727956242904,"stop":1727956242904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727956242905,"stop":1727956242907,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727956242908,"stop":1727956242908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727956242908,"stop":1727956242908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727956242909,"stop":1727956243364,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727956243364,"stop":1727956244232,"duration":868},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727956244232,"stop":1727956260238,"duration":16006},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727956260239,"stop":1727956261260,"duration":1021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8184cd10>\ndevice = <golioth.golioth.Device object at 0xffff816d15d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"968b8b325a430aa5","name":"log","source":"968b8b325a430aa5.txt","type":"text/plain","size":19036}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727956355152,"stop":1727956355159,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727956355161,"stop":1727956355630,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727956355632,"stop":1727956355634,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727956355639,"stop":1727956355639,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"74b19e458235"},{"name":"thread","value":"445-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"88716c8b531dcdd7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727908791400,"stop":1727908814822,"duration":23422}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":60,"unknown":0,"total":67},"items":[{"uid":"bffb89921cf26ab3","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/bffb89921cf26ab3","status":"passed","time":{"start":1727952244854,"stop":1727952259596,"duration":14742}},{"uid":"4c6aad2ad8d18ef0","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/4c6aad2ad8d18ef0","status":"passed","time":{"start":1727950484481,"stop":1727950498811,"duration":14330}},{"uid":"abc17837d6ae9164","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/abc17837d6ae9164","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727948237145,"stop":1727948260467,"duration":23322}},{"uid":"d90d979b8efaac02","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/d90d979b8efaac02","status":"passed","time":{"start":1727948389158,"stop":1727948405366,"duration":16208}},{"uid":"6af415325fb87ad7","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/6af415325fb87ad7","status":"passed","time":{"start":1727946434295,"stop":1727946449550,"duration":15255}},{"uid":"b089afc02efe4737","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b089afc02efe4737","status":"passed","time":{"start":1727933009453,"stop":1727933024614,"duration":15161}},{"uid":"40a64f32554deb21","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/40a64f32554deb21","status":"passed","time":{"start":1727928361327,"stop":1727928377754,"duration":16427}},{"uid":"7dca3cf286f43a1","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/7dca3cf286f43a1","status":"passed","time":{"start":1727917643888,"stop":1727917659332,"duration":15444}},{"uid":"7f3c9c7284ce8b6c","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/7f3c9c7284ce8b6c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727908791400,"stop":1727908814822,"duration":23422}},{"uid":"2aa38831d069c44a","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2aa38831d069c44a","status":"passed","time":{"start":1727833520976,"stop":1727833534147,"duration":13171}},{"uid":"bc84ebdc735f734e","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/bc84ebdc735f734e","status":"passed","time":{"start":1727830756473,"stop":1727830769713,"duration":13240}},{"uid":"bb0f1a2e8d52cf68","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/bb0f1a2e8d52cf68","status":"passed","time":{"start":1727816487509,"stop":1727816500780,"duration":13271}},{"uid":"3e4a96ae5d27e428","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/3e4a96ae5d27e428","status":"passed","time":{"start":1727816003001,"stop":1727816018182,"duration":15181}},{"uid":"e55c30ce1aff717f","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/e55c30ce1aff717f","status":"passed","time":{"start":1727815334473,"stop":1727815349956,"duration":15483}},{"uid":"cda1cdb13954e614","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/cda1cdb13954e614","status":"passed","time":{"start":1727810431878,"stop":1727810446208,"duration":14330}},{"uid":"ccd33f3dce7bf07","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/ccd33f3dce7bf07","status":"passed","time":{"start":1727807098543,"stop":1727807111938,"duration":13395}},{"uid":"c58d90ca7660c3d2","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/c58d90ca7660c3d2","status":"passed","time":{"start":1727798922939,"stop":1727798939105,"duration":16166}},{"uid":"220fb820a04d9755","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/220fb820a04d9755","status":"passed","time":{"start":1727797611475,"stop":1727797627056,"duration":15581}},{"uid":"75d81217c4d581af","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/75d81217c4d581af","status":"passed","time":{"start":1727788862591,"stop":1727788878846,"duration":16255}},{"uid":"d8ddc6faeb9c594b","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/d8ddc6faeb9c594b","status":"passed","time":{"start":1727786097813,"stop":1727786115011,"duration":17198}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"dea844af2448935b.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}