{"uid":"4aa21f5cb4104c8a","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1727909281670,"stop":1727909376190,"duration":94520},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff855ee090>\nproject = <golioth.golioth.Project object at 0xffff85752290>\ndevice = <golioth.golioth.Device object at 0xffff85600fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727909252433,"stop":1727909252433,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727909252434,"stop":1727909252434,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727909252434,"stop":1727909252434,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727909252435,"stop":1727909252435,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727909252435,"stop":1727909252436,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727909252436,"stop":1727909252436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727909252437,"stop":1727909252439,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727909252437,"stop":1727909252437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727909252440,"stop":1727909252865,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727909252865,"stop":1727909253729,"duration":864},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727909253729,"stop":1727909280564,"duration":26835},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727909280564,"stop":1727909281667,"duration":1103},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff855ee090>\nproject = <golioth.golioth.Project object at 0xffff85752290>\ndevice = <golioth.golioth.Device object at 0xffff85600fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"cde0cde67e4ac903","name":"log","source":"cde0cde67e4ac903.txt","type":"text/plain","size":20578}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727909376536,"stop":1727909376544,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727909376546,"stop":1727909376937,"duration":391},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727909376939,"stop":1727909376941,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727909376943,"stop":1727909376943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ce01392d5f22"},{"name":"thread","value":"572-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":37,"unknown":0,"total":52},"items":[{"uid":"f56b31d713350a84","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f56b31d713350a84","status":"passed","time":{"start":1727834038699,"stop":1727834052529,"duration":13830}},{"uid":"53deca7ebd629f05","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/53deca7ebd629f05","status":"passed","time":{"start":1727831407174,"stop":1727831431476,"duration":24302}},{"uid":"2c59d1073865a30e","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/2c59d1073865a30e","status":"passed","time":{"start":1727812685180,"stop":1727812703792,"duration":18612}},{"uid":"1622cafef0414301","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/1622cafef0414301","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1727814274711,"stop":1727814279692,"duration":4981}},{"uid":"c8700d58f27f4ea8","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/c8700d58f27f4ea8","status":"passed","time":{"start":1727811030774,"stop":1727811049535,"duration":18761}},{"uid":"469e1796d8475adb","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/469e1796d8475adb","status":"passed","time":{"start":1727808921363,"stop":1727808956592,"duration":35229}},{"uid":"74b715d3b84b4485","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/74b715d3b84b4485","status":"passed","time":{"start":1727807927866,"stop":1727807944717,"duration":16851}},{"uid":"7d0b0cce29a3b49f","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/7d0b0cce29a3b49f","status":"passed","time":{"start":1727800107631,"stop":1727800134233,"duration":26602}},{"uid":"48ae339445bd20fe","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/48ae339445bd20fe","status":"passed","time":{"start":1727799704558,"stop":1727799727947,"duration":23389}},{"uid":"9a4ffc59e5d3805b","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/9a4ffc59e5d3805b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727782520240,"stop":1727782614519,"duration":94279}},{"uid":"be7c871b3cf5050b","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/be7c871b3cf5050b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727780668262,"stop":1727780762635,"duration":94373}},{"uid":"6cd43edfa331f44e","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/6cd43edfa331f44e","status":"passed","time":{"start":1727778824468,"stop":1727778882124,"duration":57656}},{"uid":"d5ac61551531e4fd","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/d5ac61551531e4fd","status":"passed","time":{"start":1727775236607,"stop":1727775255211,"duration":18604}},{"uid":"90b2138dcb20618e","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/90b2138dcb20618e","status":"passed","time":{"start":1727771893765,"stop":1727771918188,"duration":24423}},{"uid":"541532d6a1dcbc51","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/541532d6a1dcbc51","status":"passed","time":{"start":1727766782416,"stop":1727766801628,"duration":19212}},{"uid":"b409fae4c07c755c","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/b409fae4c07c755c","status":"passed","time":{"start":1727765551555,"stop":1727765571073,"duration":19518}},{"uid":"79d62038d86bbcaf","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/79d62038d86bbcaf","status":"passed","time":{"start":1727745350367,"stop":1727745372545,"duration":22178}},{"uid":"b9f846737e3fcc1b","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/b9f846737e3fcc1b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727733045992,"stop":1727733140790,"duration":94798}},{"uid":"95e62651f91e175a","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/95e62651f91e175a","status":"passed","time":{"start":1727659022352,"stop":1727659042371,"duration":20019}},{"uid":"95b4693ddbbd37b8","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/95b4693ddbbd37b8","status":"passed","time":{"start":1727571897428,"stop":1727571915241,"duration":17813}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4aa21f5cb4104c8a.json","parameterValues":["'nrf9160dk'","'zephyr'"]}