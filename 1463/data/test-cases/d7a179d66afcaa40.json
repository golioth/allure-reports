{"uid":"d7a179d66afcaa40","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1727399828038,"stop":1727399940796,"duration":112758},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa804a150>\ndevice = <golioth.golioth.Device object at 0xffffa80283d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727399818566,"stop":1727399818566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727399818567,"stop":1727399818567,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727399818567,"stop":1727399818568,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727399818568,"stop":1727399818568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727399818569,"stop":1727399818569,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727399818569,"stop":1727399818572,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727399818573,"stop":1727399818573,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727399818573,"stop":1727399818573,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727399818574,"stop":1727399819003,"duration":429},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727399819003,"stop":1727399819809,"duration":806},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727399819810,"stop":1727399827503,"duration":7693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727399827504,"stop":1727399828035,"duration":531},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa804a150>\ndevice = <golioth.golioth.Device object at 0xffffa80283d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a2d2fe7e926607df","name":"log","source":"a2d2fe7e926607df.txt","type":"text/plain","size":14703}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727399941137,"stop":1727399941150,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727399941152,"stop":1727399941524,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727399941526,"stop":1727399941528,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727399941533,"stop":1727399941533,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ba24c64e3d71"},{"name":"thread","value":"621-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6c5577068a0973c9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727399594021,"stop":1727399706830,"duration":112809}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":21,"unknown":0,"total":22},"items":[{"uid":"543a7b9ea552d6c9","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/543a7b9ea552d6c9","status":"passed","time":{"start":1727394383865,"stop":1727394408281,"duration":24416}},{"uid":"d2a29a032ae61b6d","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/d2a29a032ae61b6d","status":"passed","time":{"start":1727391398635,"stop":1727391423464,"duration":24829}},{"uid":"3e9dac42e0bfc50a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/3e9dac42e0bfc50a","status":"passed","time":{"start":1727391102421,"stop":1727391125813,"duration":23392}},{"uid":"ea588644567e7cff","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/ea588644567e7cff","status":"passed","time":{"start":1727385540616,"stop":1727385565000,"duration":24384}},{"uid":"502de585ee562919","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/502de585ee562919","status":"passed","time":{"start":1727383293122,"stop":1727383317374,"duration":24252}},{"uid":"4031dbd21f56f6f7","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/4031dbd21f56f6f7","status":"passed","time":{"start":1727380401283,"stop":1727380425542,"duration":24259}},{"uid":"e7772b9966a5a549","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/e7772b9966a5a549","status":"passed","time":{"start":1727374385634,"stop":1727374410454,"duration":24820}},{"uid":"f7862a5cd1d98ed8","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/f7862a5cd1d98ed8","status":"passed","time":{"start":1727373040938,"stop":1727373065838,"duration":24900}},{"uid":"130d33b698571486","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/130d33b698571486","status":"passed","time":{"start":1727370108133,"stop":1727370132209,"duration":24076}},{"uid":"4cb890bcd46130b1","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/4cb890bcd46130b1","status":"passed","time":{"start":1727365729129,"stop":1727365752586,"duration":23457}},{"uid":"e7ecd57531ed6d13","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/e7ecd57531ed6d13","status":"passed","time":{"start":1727366125819,"stop":1727366150258,"duration":24439}},{"uid":"b2ed94daeffdb6a","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/b2ed94daeffdb6a","status":"passed","time":{"start":1727361233641,"stop":1727361258661,"duration":25020}},{"uid":"82656af1f6648e98","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/82656af1f6648e98","status":"passed","time":{"start":1727315939394,"stop":1727315959702,"duration":20308}},{"uid":"2e61be37c10e8c2","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/2e61be37c10e8c2","status":"passed","time":{"start":1727312645395,"stop":1727312665042,"duration":19647}},{"uid":"202d9ffd6a2aeaf","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/202d9ffd6a2aeaf","status":"passed","time":{"start":1727308699134,"stop":1727308718800,"duration":19666}},{"uid":"a3f28444feee215","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/a3f28444feee215","status":"passed","time":{"start":1727306464466,"stop":1727306488975,"duration":24509}},{"uid":"59012462c22288c9","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/59012462c22288c9","status":"passed","time":{"start":1727301801706,"stop":1727301820994,"duration":19288}},{"uid":"ca4bea67c1a3bcce","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/ca4bea67c1a3bcce","status":"passed","time":{"start":1727295481892,"stop":1727295505398,"duration":23506}},{"uid":"7ff654a04f498eaa","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/7ff654a04f498eaa","status":"passed","time":{"start":1727289239237,"stop":1727289263693,"duration":24456}},{"uid":"53e75178fefe935c","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/53e75178fefe935c","status":"passed","time":{"start":1727285133455,"stop":1727285158680,"duration":25225}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"d7a179d66afcaa40.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}