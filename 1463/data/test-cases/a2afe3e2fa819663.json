{"uid":"a2afe3e2fa819663","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1727399318146,"stop":1727399412448,"duration":94302},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb60e3ad0>\nproject = <golioth.golioth.Project object at 0xffffb628ded0>\ndevice = <golioth.golioth.Device object at 0xffffb6105ed0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727399297676,"stop":1727399297676,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727399297677,"stop":1727399297677,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727399297677,"stop":1727399297677,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727399297678,"stop":1727399297678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727399297678,"stop":1727399297678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727399297679,"stop":1727399297680,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727399297680,"stop":1727399297680,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727399297681,"stop":1727399297683,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727399297683,"stop":1727399298102,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727399298103,"stop":1727399298912,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727399298912,"stop":1727399317233,"duration":18321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727399317234,"stop":1727399318143,"duration":909},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb60e3ad0>\nproject = <golioth.golioth.Project object at 0xffffb628ded0>\ndevice = <golioth.golioth.Device object at 0xffffb6105ed0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"cdd6d2b95ade2ba","name":"log","source":"cdd6d2b95ade2ba.txt","type":"text/plain","size":22303}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727399412741,"stop":1727399412768,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727399412770,"stop":1727399413156,"duration":386},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727399413158,"stop":1727399413161,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727399413163,"stop":1727399413163,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2870f2689776"},{"name":"thread","value":"465-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":20,"unknown":0,"total":22},"items":[{"uid":"50973aebdd85b46b","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/50973aebdd85b46b","status":"passed","time":{"start":1727394977340,"stop":1727394990009,"duration":12669}},{"uid":"61f84c765e62bdc7","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/61f84c765e62bdc7","status":"passed","time":{"start":1727391131804,"stop":1727391146124,"duration":14320}},{"uid":"3cde4aeb111fc29b","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/3cde4aeb111fc29b","status":"passed","time":{"start":1727391495732,"stop":1727391507172,"duration":11440}},{"uid":"2d1351d518fa873e","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/2d1351d518fa873e","status":"passed","time":{"start":1727385983759,"stop":1727385994571,"duration":10812}},{"uid":"a7eff4b2b27742b0","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/a7eff4b2b27742b0","status":"passed","time":{"start":1727383368428,"stop":1727383380862,"duration":12434}},{"uid":"80b4aa344c45c9d9","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/80b4aa344c45c9d9","status":"passed","time":{"start":1727380492264,"stop":1727380501193,"duration":8929}},{"uid":"6aef2dd5ab855e30","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/6aef2dd5ab855e30","status":"passed","time":{"start":1727378610874,"stop":1727378620630,"duration":9756}},{"uid":"9c5969fad4c7214e","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/9c5969fad4c7214e","status":"passed","time":{"start":1727372997402,"stop":1727373012385,"duration":14983}},{"uid":"9530c6d0698f9877","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/9530c6d0698f9877","status":"passed","time":{"start":1727369913785,"stop":1727369927022,"duration":13237}},{"uid":"2ec9288600c442a1","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/2ec9288600c442a1","status":"passed","time":{"start":1727366473449,"stop":1727366482568,"duration":9119}},{"uid":"f0f8c8d2caea425e","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/f0f8c8d2caea425e","status":"passed","time":{"start":1727366606984,"stop":1727366618773,"duration":11789}},{"uid":"d3a6bd490e777da3","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/d3a6bd490e777da3","status":"passed","time":{"start":1727361010569,"stop":1727361022630,"duration":12061}},{"uid":"78d3c2aee786bbe2","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/78d3c2aee786bbe2","status":"passed","time":{"start":1727315192249,"stop":1727315204676,"duration":12427}},{"uid":"85ad9b6433730a46","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/85ad9b6433730a46","status":"passed","time":{"start":1727312653586,"stop":1727312663611,"duration":10025}},{"uid":"32fa6d1a85ae7c6e","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/32fa6d1a85ae7c6e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727309090170,"stop":1727309184552,"duration":94382}},{"uid":"5d45d6713e403b05","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/5d45d6713e403b05","status":"passed","time":{"start":1727306056641,"stop":1727306069715,"duration":13074}},{"uid":"b394144ddab3e5bd","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/b394144ddab3e5bd","status":"passed","time":{"start":1727301356617,"stop":1727301373208,"duration":16591}},{"uid":"4db26f794281a08f","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/4db26f794281a08f","status":"passed","time":{"start":1727295321236,"stop":1727295333571,"duration":12335}},{"uid":"dbbed1a34e874dd1","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/dbbed1a34e874dd1","status":"passed","time":{"start":1727289029473,"stop":1727289041142,"duration":11669}},{"uid":"ebc2998987e8eb8e","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/ebc2998987e8eb8e","status":"passed","time":{"start":1727285506477,"stop":1727285518626,"duration":12149}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"a2afe3e2fa819663.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}