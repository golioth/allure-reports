{"uid":"36683027c5513610","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"466fcb31cd63d28758a28daeb9320ffb","time":{"start":1727398771291,"stop":1727398864427,"duration":93136},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5367dd0>\ndevice = <golioth.golioth.Device object at 0xffffa5359250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727398761775,"stop":1727398761775,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727398761776,"stop":1727398761776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727398761776,"stop":1727398761776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727398761777,"stop":1727398761777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727398761777,"stop":1727398761778,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727398761778,"stop":1727398761780,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727398761781,"stop":1727398761781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727398761781,"stop":1727398761782,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727398761782,"stop":1727398762189,"duration":407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727398762189,"stop":1727398763012,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727398763013,"stop":1727398770744,"duration":7731},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727398770745,"stop":1727398771288,"duration":543},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5367dd0>\ndevice = <golioth.golioth.Device object at 0xffffa5359250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"1b53f237ca5948a","name":"log","source":"1b53f237ca5948a.txt","type":"text/plain","size":18832}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727398864750,"stop":1727398864795,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727398864797,"stop":1727398865172,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727398865174,"stop":1727398865177,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727398865182,"stop":1727398865182,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ba24c64e3d71"},{"name":"thread","value":"402-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":21,"unknown":0,"total":22},"items":[{"uid":"1bfb548c61270ef5","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/1bfb548c61270ef5","status":"passed","time":{"start":1727394054182,"stop":1727394060724,"duration":6542}},{"uid":"e976ec5c1d8f67a7","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/e976ec5c1d8f67a7","status":"passed","time":{"start":1727391081006,"stop":1727391093263,"duration":12257}},{"uid":"f7a14051dd22fd79","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/f7a14051dd22fd79","status":"passed","time":{"start":1727390790651,"stop":1727390800638,"duration":9987}},{"uid":"9009bf006d0dd689","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/9009bf006d0dd689","status":"passed","time":{"start":1727385226824,"stop":1727385236279,"duration":9455}},{"uid":"f70dc980ec05b979","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/f70dc980ec05b979","status":"passed","time":{"start":1727382992212,"stop":1727383003394,"duration":11182}},{"uid":"1decf1006ae5b99c","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/1decf1006ae5b99c","status":"passed","time":{"start":1727380099896,"stop":1727380106593,"duration":6697}},{"uid":"393ec05c335f18aa","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/393ec05c335f18aa","status":"passed","time":{"start":1727374042097,"stop":1727374053063,"duration":10966}},{"uid":"c8db55dc324b46ba","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/c8db55dc324b46ba","status":"passed","time":{"start":1727372749714,"stop":1727372761047,"duration":11333}},{"uid":"21c71e560139147a","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/21c71e560139147a","status":"passed","time":{"start":1727369704012,"stop":1727369710606,"duration":6594}},{"uid":"acf05225d25503f7","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/acf05225d25503f7","status":"passed","time":{"start":1727365368586,"stop":1727365379183,"duration":10597}},{"uid":"a800c6b2b443bc37","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/a800c6b2b443bc37","status":"passed","time":{"start":1727365854254,"stop":1727365864836,"duration":10582}},{"uid":"5fe7e46dfdf906ce","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/5fe7e46dfdf906ce","status":"passed","time":{"start":1727360867518,"stop":1727360878083,"duration":10565}},{"uid":"34c58d0d5fff7a86","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/34c58d0d5fff7a86","status":"passed","time":{"start":1727315633123,"stop":1727315645001,"duration":11878}},{"uid":"431dd721a5187f35","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/431dd721a5187f35","status":"passed","time":{"start":1727312321760,"stop":1727312333146,"duration":11386}},{"uid":"8c08ae02b218fd8b","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/8c08ae02b218fd8b","status":"passed","time":{"start":1727308403590,"stop":1727308413913,"duration":10323}},{"uid":"3b3b7155088e6d87","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/3b3b7155088e6d87","status":"passed","time":{"start":1727306149686,"stop":1727306161315,"duration":11629}},{"uid":"e21b5ab13b9594b2","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/e21b5ab13b9594b2","status":"passed","time":{"start":1727301437250,"stop":1727301446977,"duration":9727}},{"uid":"463d40c9c4ff28f0","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/463d40c9c4ff28f0","status":"passed","time":{"start":1727295136462,"stop":1727295147351,"duration":10889}},{"uid":"407c289c52e46b1f","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/407c289c52e46b1f","status":"passed","time":{"start":1727288971202,"stop":1727288981559,"duration":10357}},{"uid":"8b10dd3e3cbc9c54","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/8b10dd3e3cbc9c54","status":"passed","time":{"start":1727284822198,"stop":1727284833789,"duration":11591}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"36683027c5513610.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}