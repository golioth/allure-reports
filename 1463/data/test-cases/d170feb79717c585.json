{"uid":"d170feb79717c585","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1727399434177,"stop":1727399456848,"duration":22671},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff905d5a10>\ndevice = <golioth.golioth.Device object at 0xffff905f0810>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727399416448,"stop":1727399416449,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727399416449,"stop":1727399416449,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727399416450,"stop":1727399416450,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727399416450,"stop":1727399416450,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727399416451,"stop":1727399416453,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727399416451,"stop":1727399416451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727399416454,"stop":1727399416454,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727399416455,"stop":1727399416873,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727399416455,"stop":1727399416455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727399416874,"stop":1727399417796,"duration":922},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727399417797,"stop":1727399433120,"duration":15323},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727399433121,"stop":1727399434174,"duration":1053},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff905d5a10>\ndevice = <golioth.golioth.Device object at 0xffff905f0810>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e6c40a9d7404a12c","name":"log","source":"e6c40a9d7404a12c.txt","type":"text/plain","size":13050}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727399457188,"stop":1727399457218,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727399457220,"stop":1727399457601,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727399457603,"stop":1727399457605,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727399457610,"stop":1727399457610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2870f2689776"},{"name":"thread","value":"480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":19,"unknown":0,"total":22},"items":[{"uid":"e01b0d110a48d797","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/e01b0d110a48d797","status":"passed","time":{"start":1727395011880,"stop":1727395035162,"duration":23282}},{"uid":"37475f77eab11194","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/37475f77eab11194","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727391167688,"stop":1727391190310,"duration":22622}},{"uid":"43f490272525d08","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/43f490272525d08","status":"passed","time":{"start":1727391526802,"stop":1727391549532,"duration":22730}},{"uid":"24c8d4ce62624857","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/24c8d4ce62624857","status":"passed","time":{"start":1727386015894,"stop":1727386039406,"duration":23512}},{"uid":"42429e226c6e31be","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/42429e226c6e31be","status":"passed","time":{"start":1727383402363,"stop":1727383424094,"duration":21731}},{"uid":"ce602ba8fd958129","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/ce602ba8fd958129","status":"passed","time":{"start":1727380743946,"stop":1727380764588,"duration":20642}},{"uid":"98e91fe13f6123c0","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/98e91fe13f6123c0","status":"passed","time":{"start":1727378642461,"stop":1727378666471,"duration":24010}},{"uid":"64c67d75aa0d2b36","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/64c67d75aa0d2b36","status":"passed","time":{"start":1727373033514,"stop":1727373052816,"duration":19302}},{"uid":"7b8b3323c740d17d","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/7b8b3323c740d17d","status":"passed","time":{"start":1727369948207,"stop":1727369967898,"duration":19691}},{"uid":"36346681fc1d6bcd","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/36346681fc1d6bcd","status":"passed","time":{"start":1727366504154,"stop":1727366526686,"duration":22532}},{"uid":"bed5b717c5fbbb5a","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/bed5b717c5fbbb5a","status":"passed","time":{"start":1727366639852,"stop":1727366660662,"duration":20810}},{"uid":"fc17e66554646f99","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/fc17e66554646f99","status":"passed","time":{"start":1727361046617,"stop":1727361069673,"duration":23056}},{"uid":"e232a7aa15fd452f","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/e232a7aa15fd452f","status":"passed","time":{"start":1727315226178,"stop":1727315247825,"duration":21647}},{"uid":"9d6d52976bdb8c6b","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/9d6d52976bdb8c6b","status":"passed","time":{"start":1727312685082,"stop":1727312708601,"duration":23519}},{"uid":"d2f9d98c8de064fb","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/d2f9d98c8de064fb","status":"passed","time":{"start":1727309206541,"stop":1727309229241,"duration":22700}},{"uid":"b334a61b7305af68","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/b334a61b7305af68","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727306091569,"stop":1727306114246,"duration":22677}},{"uid":"405da93a373340bd","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/405da93a373340bd","status":"passed","time":{"start":1727301394929,"stop":1727301417394,"duration":22465}},{"uid":"79aed3eaeeb42e34","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/79aed3eaeeb42e34","status":"passed","time":{"start":1727295354419,"stop":1727295375823,"duration":21404}},{"uid":"1ceee964fc30d30","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/1ceee964fc30d30","status":"passed","time":{"start":1727289062864,"stop":1727289085359,"duration":22495}},{"uid":"d67e18c9478044fd","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/d67e18c9478044fd","status":"passed","time":{"start":1727285539849,"stop":1727285564406,"duration":24557}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d170feb79717c585.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}