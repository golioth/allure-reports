{"uid":"bd01050022f16f61","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"590f0375d3da0823de2fcad609f6b87b","time":{"start":1727398985070,"stop":1727399079374,"duration":94304},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb3a064d0>\nproject = <golioth.golioth.Project object at 0xffffb4f4ad90>\ndevice = <golioth.golioth.Device object at 0xffffb39e6310>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727398975606,"stop":1727398975606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727398975606,"stop":1727398975606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727398975607,"stop":1727398975608,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727398975607,"stop":1727398975607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727398975608,"stop":1727398975609,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727398975608,"stop":1727398975608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727398975610,"stop":1727398975610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727398975610,"stop":1727398975612,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727398975613,"stop":1727398976041,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727398976042,"stop":1727398976842,"duration":800},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727398976842,"stop":1727398984528,"duration":7686},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727398984528,"stop":1727398985068,"duration":540},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb3a064d0>\nproject = <golioth.golioth.Project object at 0xffffb4f4ad90>\ndevice = <golioth.golioth.Device object at 0xffffb39e6310>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"86b9b26fe57b8d6","name":"log","source":"86b9b26fe57b8d6.txt","type":"text/plain","size":21150}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727399079664,"stop":1727399079688,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727399079690,"stop":1727399080057,"duration":367},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727399080060,"stop":1727399080062,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727399080064,"stop":1727399080064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ba24c64e3d71"},{"name":"thread","value":"440-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":20,"unknown":0,"total":22},"items":[{"uid":"4226a9a3f46c985b","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/4226a9a3f46c985b","status":"passed","time":{"start":1727394103788,"stop":1727394118077,"duration":14289}},{"uid":"3654f4d5976dc965","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/3654f4d5976dc965","status":"passed","time":{"start":1727391142029,"stop":1727391154069,"duration":12040}},{"uid":"c82ca88b855e1b88","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/c82ca88b855e1b88","status":"passed","time":{"start":1727390841695,"stop":1727390853773,"duration":12078}},{"uid":"a03d55d228dfcdae","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/a03d55d228dfcdae","status":"passed","time":{"start":1727385278078,"stop":1727385289148,"duration":11070}},{"uid":"2115f09eae6876a6","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/2115f09eae6876a6","status":"passed","time":{"start":1727383047655,"stop":1727383061149,"duration":13494}},{"uid":"7e6672507e026201","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/7e6672507e026201","status":"passed","time":{"start":1727380151807,"stop":1727380163298,"duration":11491}},{"uid":"3641cf3fa43ded51","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/3641cf3fa43ded51","status":"passed","time":{"start":1727374098041,"stop":1727374110926,"duration":12885}},{"uid":"81bcc95a199b83f6","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/81bcc95a199b83f6","status":"passed","time":{"start":1727372805310,"stop":1727372824570,"duration":19260}},{"uid":"ee93d2cfa2c6fce3","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/ee93d2cfa2c6fce3","status":"passed","time":{"start":1727369752106,"stop":1727369766599,"duration":14493}},{"uid":"25dbaac9353aa523","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/25dbaac9353aa523","status":"passed","time":{"start":1727365420989,"stop":1727365432094,"duration":11105}},{"uid":"5dddee27a3453764","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/5dddee27a3453764","status":"passed","time":{"start":1727365905790,"stop":1727365917031,"duration":11241}},{"uid":"31e0c821b6f69591","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/31e0c821b6f69591","status":"passed","time":{"start":1727360925933,"stop":1727360939526,"duration":13593}},{"uid":"374bbbc17a7eab85","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/374bbbc17a7eab85","status":"passed","time":{"start":1727315701444,"stop":1727315718020,"duration":16576}},{"uid":"5a253ce22950339a","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/5a253ce22950339a","status":"passed","time":{"start":1727312377197,"stop":1727312387631,"duration":10434}},{"uid":"1787af6fe57b6e8f","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/1787af6fe57b6e8f","status":"passed","time":{"start":1727308459129,"stop":1727308473407,"duration":14278}},{"uid":"a6d724ba91484f81","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/a6d724ba91484f81","status":"passed","time":{"start":1727306207286,"stop":1727306226537,"duration":19251}},{"uid":"2677b414614250a5","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/2677b414614250a5","status":"passed","time":{"start":1727301488281,"stop":1727301499426,"duration":11145}},{"uid":"646911fa1223e680","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/646911fa1223e680","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727295171875,"stop":1727295189716,"duration":17841}},{"uid":"7037d7044dbf7a09","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/7037d7044dbf7a09","status":"passed","time":{"start":1727289027567,"stop":1727289040653,"duration":13086}},{"uid":"a4ee746a7815cfa6","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/a4ee746a7815cfa6","status":"passed","time":{"start":1727284879996,"stop":1727284893190,"duration":13194}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"bd01050022f16f61.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}