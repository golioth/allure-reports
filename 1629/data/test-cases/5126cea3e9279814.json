{"uid":"5126cea3e9279814","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"1c3f2c0d9c38a2f03a05e8ca5e7158fa","time":{"start":1728606728385,"stop":1728606741646,"duration":13261},"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb1bf9b10>\ndevice = <golioth.golioth.Device object at 0xffffb1bb0e50>\nproject = <golioth.golioth.Project object at 0xffffb1b39b90>\nreleases = {'test_blocks': Release <670871fe1725f739cf25d1ce, release_tags=[], device_tags=['670871fd1725f739cf25d1cb'], artifact..., release_tags=[], device_tags=['670871fd1725f739cf25d1cb'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728606657768,"stop":1728606657769,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728606657769,"stop":1728606657770,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728606657770,"stop":1728606657770,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728606657771,"stop":1728606657771,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728606657771,"stop":1728606657772,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728606657772,"stop":1728606657772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728606657772,"stop":1728606657772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728606657773,"stop":1728606657774,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728606657773,"stop":1728606657773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728606657774,"stop":1728606657775,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728606657775,"stop":1728606657775,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728606657776,"stop":1728606657776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728606657777,"stop":1728606709630,"duration":51853},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728606709632,"stop":1728606710165,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728606710165,"stop":1728606710948,"duration":783},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1728606710949,"stop":1728606716249,"duration":5300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1728606716251,"stop":1728606716719,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1728606716720,"stop":1728606717508,"duration":788},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1728606717509,"stop":1728606719019,"duration":1510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1728606728382,"stop":1728606728383,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb1bf9b10>\ndevice = <golioth.golioth.Device object at 0xffffb1bb0e50>\nproject = <golioth.golioth.Project object at 0xffffb1b39b90>\nreleases = {'test_blocks': Release <670871fe1725f739cf25d1ce, release_tags=[], device_tags=['670871fd1725f739cf25d1cb'], artifact..., release_tags=[], device_tags=['670871fd1725f739cf25d1cb'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","steps":[],"attachments":[{"uid":"24df2ba9833dc7f9","name":"stdout","source":"24df2ba9833dc7f9.txt","type":"text/plain","size":881}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1728606741697,"stop":1728606742625,"duration":928},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1728606742628,"stop":1728606744071,"duration":1443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1728606744074,"stop":1728606744838,"duration":764},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1728606744840,"stop":1728606744840,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1728606744842,"stop":1728606744842,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728606744844,"stop":1728606745288,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728606745291,"stop":1728606745291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728606745293,"stop":1728606745296,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"6ad5cc5286d7"},{"name":"thread","value":"240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":31,"broken":13,"skipped":0,"passed":85,"unknown":0,"total":129},"items":[{"uid":"43e47a555dad7422","reportUrl":"https://golioth.github.io/allure-reports/1626//#testresult/43e47a555dad7422","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728581460796,"stop":1728581460796,"duration":0}},{"uid":"f3939670a65a6348","reportUrl":"https://golioth.github.io/allure-reports/1624//#testresult/f3939670a65a6348","status":"failed","statusDetails":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","time":{"start":1728576153174,"stop":1728576173292,"duration":20118}},{"uid":"492499a593ec4ca3","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/492499a593ec4ca3","status":"passed","time":{"start":1728567424571,"stop":1728567505906,"duration":81335}},{"uid":"5ea538705552fb26","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/5ea538705552fb26","status":"passed","time":{"start":1728536387486,"stop":1728536468340,"duration":80854}},{"uid":"5f3659f3a672ebff","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/5f3659f3a672ebff","status":"failed","statusDetails":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","time":{"start":1728520321607,"stop":1728520344122,"duration":22515}},{"uid":"ed6f4ef5fe6a1356","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/ed6f4ef5fe6a1356","status":"passed","time":{"start":1728319731891,"stop":1728319813140,"duration":81249}},{"uid":"bbc24f73e4797efe","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/bbc24f73e4797efe","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1728491471934,"stop":1728491543086,"duration":71152}},{"uid":"e5a6785a016440a9","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/e5a6785a016440a9","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1728483246070,"stop":1728483260115,"duration":14045}},{"uid":"ae856f62bf4cdc16","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/ae856f62bf4cdc16","status":"passed","time":{"start":1728433963323,"stop":1728434040403,"duration":77080}},{"uid":"b0a84dce561db2d5","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/b0a84dce561db2d5","status":"passed","time":{"start":1728424582480,"stop":1728424659924,"duration":77444}},{"uid":"ac9958de96f8bbfd","reportUrl":"https://golioth.github.io/allure-reports/1606//#testresult/ac9958de96f8bbfd","status":"passed","time":{"start":1728330217052,"stop":1728330294387,"duration":77335}},{"uid":"812eb4388a457b5c","reportUrl":"https://golioth.github.io/allure-reports/1604//#testresult/812eb4388a457b5c","status":"passed","time":{"start":1728327194069,"stop":1728327275262,"duration":81193}},{"uid":"9f010bacc25d4a6","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9f010bacc25d4a6","status":"passed","time":{"start":1728338778244,"stop":1728338859624,"duration":81380}},{"uid":"e4b936dd374038a3","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/e4b936dd374038a3","status":"failed","statusDetails":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","time":{"start":1728399090179,"stop":1728399110904,"duration":20725}},{"uid":"68b8d768b03e845e","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/68b8d768b03e845e","status":"passed","time":{"start":1728338778244,"stop":1728338859624,"duration":81380}},{"uid":"8847af46d370eaf0","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/8847af46d370eaf0","status":"passed","time":{"start":1728347673032,"stop":1728347750141,"duration":77109}},{"uid":"f24afd9289e0873e","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/f24afd9289e0873e","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1728339597687,"stop":1728339610952,"duration":13265}},{"uid":"9861263b76fb6082","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9861263b76fb6082","status":"passed","time":{"start":1728338778244,"stop":1728338859624,"duration":81380}},{"uid":"c2f2916d9df84f8d","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/c2f2916d9df84f8d","status":"passed","time":{"start":1728335639122,"stop":1728335716539,"duration":77417}},{"uid":"318b5bf0acd086f3","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/318b5bf0acd086f3","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1728328002336,"stop":1728328016101,"duration":13765}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"5126cea3e9279814.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}