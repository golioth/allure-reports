{"uid":"321d0deac08b1367","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"c4178e273bd3962d06b411c6f8e74f6b","time":{"start":1728609267414,"stop":1728609360179,"duration":92765},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffba4b6750>\ndevice = <golioth.golioth.Device object at 0xffffba4a8e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728609237626,"stop":1728609237627,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728609237627,"stop":1728609237627,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728609237628,"stop":1728609237628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728609237628,"stop":1728609237628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728609237629,"stop":1728609237629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728609237629,"stop":1728609237631,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728609237632,"stop":1728609237632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728609237633,"stop":1728609238176,"duration":543},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728609237633,"stop":1728609237633,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728609238177,"stop":1728609239069,"duration":892},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728609239070,"stop":1728609266313,"duration":27243},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728609266313,"stop":1728609267412,"duration":1099},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffba4b6750>\ndevice = <golioth.golioth.Device object at 0xffffba4a8e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"47bb0a64129071e5","name":"log","source":"47bb0a64129071e5.txt","type":"text/plain","size":14167}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728609360457,"stop":1728609360498,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728609360500,"stop":1728609360870,"duration":370},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728609360872,"stop":1728609360874,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728609360879,"stop":1728609360879,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3f0ca1ffaead"},{"name":"thread","value":"374-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":28,"skipped":0,"passed":91,"unknown":0,"total":119},"items":[{"uid":"758d57205a0e0658","reportUrl":"https://golioth.github.io/allure-reports/1626//#testresult/758d57205a0e0658","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728600664964,"stop":1728600757607,"duration":92643}},{"uid":"b794953370804ce6","reportUrl":"https://golioth.github.io/allure-reports/1624//#testresult/b794953370804ce6","status":"passed","time":{"start":1728598218432,"stop":1728598242106,"duration":23674}},{"uid":"a350db3f03bacc2e","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/a350db3f03bacc2e","status":"passed","time":{"start":1728594803227,"stop":1728594814984,"duration":11757}},{"uid":"143187c4d163da7","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/143187c4d163da7","status":"passed","time":{"start":1728536333594,"stop":1728536345369,"duration":11775}},{"uid":"fb9e69ee343a699","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/fb9e69ee343a699","status":"passed","time":{"start":1728522746204,"stop":1728522769968,"duration":23764}},{"uid":"d287a6ef816c80a7","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/d287a6ef816c80a7","status":"passed","time":{"start":1728322069542,"stop":1728322083497,"duration":13955}},{"uid":"69493ea3e0ef479c","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/69493ea3e0ef479c","status":"passed","time":{"start":1728494068042,"stop":1728494079777,"duration":11735}},{"uid":"9f545bd5b626bbc","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/9f545bd5b626bbc","status":"passed","time":{"start":1728485683186,"stop":1728485710885,"duration":27699}},{"uid":"7937c64aeb98385f","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/7937c64aeb98385f","status":"passed","time":{"start":1728437058326,"stop":1728437070708,"duration":12382}},{"uid":"c1476053e080fb64","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/c1476053e080fb64","status":"passed","time":{"start":1728427363260,"stop":1728427389059,"duration":25799}},{"uid":"a6220b0a25a2d0ca","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/a6220b0a25a2d0ca","status":"passed","time":{"start":1728402434074,"stop":1728402464385,"duration":30311}},{"uid":"ab0975afd37486a1","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/ab0975afd37486a1","status":"passed","time":{"start":1728402138109,"stop":1728402151845,"duration":13736}},{"uid":"964e3ac7451fc27e","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/964e3ac7451fc27e","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728398979992,"stop":1728398979992,"duration":0}},{"uid":"35b5c0c4b9235850","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/35b5c0c4b9235850","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728349915392,"stop":1728349915392,"duration":0}},{"uid":"9f417cd7e54ec0ac","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/9f417cd7e54ec0ac","status":"passed","time":{"start":1728346472589,"stop":1728346553791,"duration":81202}},{"uid":"758b139659c32362","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/758b139659c32362","status":"passed","time":{"start":1728345360974,"stop":1728345396619,"duration":35645}},{"uid":"2d537c838621d672","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/2d537c838621d672","status":"passed","time":{"start":1728338238436,"stop":1728338253075,"duration":14639}},{"uid":"3ddd2d1a32d53bd6","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/3ddd2d1a32d53bd6","status":"passed","time":{"start":1728320012124,"stop":1728320054348,"duration":42224}},{"uid":"94d69c4f06b4a0fa","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/94d69c4f06b4a0fa","status":"passed","time":{"start":1728322069542,"stop":1728322083497,"duration":13955}},{"uid":"b95313779aa6e049","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/b95313779aa6e049","status":"passed","time":{"start":1728322069542,"stop":1728322083497,"duration":13955}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"321d0deac08b1367.json","parameterValues":["'nrf9160dk'","'zephyr'"]}