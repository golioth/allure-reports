{"uid":"edc5b2d29f84f8a","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"934caf5f97c3bf444d136e05890d35c9","time":{"start":1727807246478,"stop":1727807339607,"duration":93129},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b572210>\ndevice = <golioth.golioth.Device object at 0xffff8b588c50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727807218705,"stop":1727807218706,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727807218705,"stop":1727807218705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727807218706,"stop":1727807218706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727807218706,"stop":1727807218707,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727807218707,"stop":1727807218707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727807218708,"stop":1727807218710,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727807218710,"stop":1727807218711,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727807218711,"stop":1727807218711,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727807218712,"stop":1727807219139,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727807219140,"stop":1727807220085,"duration":945},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727807220085,"stop":1727807243059,"duration":22974},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727807243060,"stop":1727807246471,"duration":3411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b572210>\ndevice = <golioth.golioth.Device object at 0xffff8b588c50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9a5966362a65fdb7","name":"log","source":"9a5966362a65fdb7.txt","type":"text/plain","size":17591}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727807339867,"stop":1727807339903,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727807339905,"stop":1727807340300,"duration":395},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727807340302,"stop":1727807340304,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727807340309,"stop":1727807340309,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b6b4bd7d4f42"},{"name":"thread","value":"922-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":48,"unknown":0,"total":51},"items":[{"uid":"284f3a00c7a1195f","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/284f3a00c7a1195f","status":"passed","time":{"start":1727798056799,"stop":1727798085122,"duration":28323}},{"uid":"f5fd595928a0d2bd","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/f5fd595928a0d2bd","status":"passed","time":{"start":1727796790126,"stop":1727796822088,"duration":31962}},{"uid":"f5a14286679d8e5b","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/f5a14286679d8e5b","status":"passed","time":{"start":1727787570066,"stop":1727787602316,"duration":32250}},{"uid":"511cb1b4ff65af8e","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/511cb1b4ff65af8e","status":"passed","time":{"start":1727785866158,"stop":1727785894492,"duration":28334}},{"uid":"93b5f5c94d5f91ce","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/93b5f5c94d5f91ce","status":"passed","time":{"start":1727781701549,"stop":1727781729293,"duration":27744}},{"uid":"b87c267a02e4b96e","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/b87c267a02e4b96e","status":"passed","time":{"start":1727781289749,"stop":1727781317999,"duration":28250}},{"uid":"40970f57c486a21c","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/40970f57c486a21c","status":"passed","time":{"start":1727777609706,"stop":1727777642471,"duration":32765}},{"uid":"841a7de475b757bc","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/841a7de475b757bc","status":"passed","time":{"start":1727775037738,"stop":1727775070180,"duration":32442}},{"uid":"d695319ef2497cf","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/d695319ef2497cf","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1727771282336,"stop":1727771289271,"duration":6935}},{"uid":"138e10d37f42e27f","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/138e10d37f42e27f","status":"passed","time":{"start":1727770276300,"stop":1727770304287,"duration":27987}},{"uid":"3b82ff2d27d2c5e1","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/3b82ff2d27d2c5e1","status":"passed","time":{"start":1727765369532,"stop":1727765402068,"duration":32536}},{"uid":"9ece831305b2b5ae","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/9ece831305b2b5ae","status":"passed","time":{"start":1727764760649,"stop":1727764789335,"duration":28686}},{"uid":"c1d3d71e517fb8b8","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/c1d3d71e517fb8b8","status":"passed","time":{"start":1727760749167,"stop":1727760777843,"duration":28676}},{"uid":"497640a1acd7ec16","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/497640a1acd7ec16","status":"passed","time":{"start":1727744926131,"stop":1727744954553,"duration":28422}},{"uid":"10861c2bbbe7360f","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/10861c2bbbe7360f","status":"passed","time":{"start":1727732823542,"stop":1727732851981,"duration":28439}},{"uid":"9b951ce68398122e","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/9b951ce68398122e","status":"passed","time":{"start":1727657945836,"stop":1727657974258,"duration":28422}},{"uid":"d8262f9c78ef209c","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/d8262f9c78ef209c","status":"passed","time":{"start":1727572085275,"stop":1727572113667,"duration":28392}},{"uid":"d1514a82a81410c1","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/d1514a82a81410c1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727547124978,"stop":1727547162749,"duration":37771}},{"uid":"90556e87493a6cfd","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/90556e87493a6cfd","status":"passed","time":{"start":1727545965736,"stop":1727545993475,"duration":27739}},{"uid":"9357bfa5b280c9c4","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/9357bfa5b280c9c4","status":"passed","time":{"start":1727544856518,"stop":1727544884773,"duration":28255}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"edc5b2d29f84f8a.json","parameterValues":["'nrf52840dk'","'zephyr'"]}