{"uid":"a9ad50b07a193228","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"107219ae297537605b8b92c8950f3c78","time":{"start":1727485107784,"stop":1727485200572,"duration":92788},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb0d92990>\ndevice = <golioth.golioth.Device object at 0xffffb0d84c90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727485098239,"stop":1727485098240,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727485098240,"stop":1727485098240,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727485098241,"stop":1727485098241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727485098241,"stop":1727485098241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727485098242,"stop":1727485098242,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727485098242,"stop":1727485098244,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727485098245,"stop":1727485098245,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727485098246,"stop":1727485098667,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727485098246,"stop":1727485098246,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727485098667,"stop":1727485099501,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727485099501,"stop":1727485107229,"duration":7728},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727485107230,"stop":1727485107781,"duration":551},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb0d92990>\ndevice = <golioth.golioth.Device object at 0xffffb0d84c90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d7c521e0f2c08711","name":"log","source":"d7c521e0f2c08711.txt","type":"text/plain","size":14175}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727485200777,"stop":1727485200782,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727485200784,"stop":1727485201167,"duration":383},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727485201169,"stop":1727485201171,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727485201176,"stop":1727485201177,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"6c8935958c62"},{"name":"thread","value":"469-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":20,"unknown":0,"total":26},"items":[{"uid":"e3d8f75968761e77","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/e3d8f75968761e77","status":"passed","time":{"start":1727477106541,"stop":1727477116146,"duration":9605}},{"uid":"393adf2f33398e27","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/393adf2f33398e27","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727464946851,"stop":1727465039638,"duration":92787}},{"uid":"39b3656dead441d9","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/39b3656dead441d9","status":"passed","time":{"start":1727462514133,"stop":1727462523843,"duration":9710}},{"uid":"824e478dbc0b57ec","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/824e478dbc0b57ec","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727457060972,"stop":1727457153764,"duration":92792}},{"uid":"31e12bacf9fb8d8c","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/31e12bacf9fb8d8c","status":"passed","time":{"start":1727394173506,"stop":1727394184017,"duration":10511}},{"uid":"2fb6148170ba11ea","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/2fb6148170ba11ea","status":"passed","time":{"start":1727455121208,"stop":1727455126577,"duration":5369}},{"uid":"11f06fd137c89f14","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/11f06fd137c89f14","status":"passed","time":{"start":1727365965755,"stop":1727365975233,"duration":9478}},{"uid":"2217946b1661eff2","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/2217946b1661eff2","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1727399273555,"stop":1727399322112,"duration":48557}},{"uid":"6f5d41217bb83046","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/6f5d41217bb83046","status":"passed","time":{"start":1727394173506,"stop":1727394184017,"duration":10511}},{"uid":"e9f1125ee7054dc4","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/e9f1125ee7054dc4","status":"passed","time":{"start":1727391210884,"stop":1727391222612,"duration":11728}},{"uid":"daeccf5d715e381a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/daeccf5d715e381a","status":"passed","time":{"start":1727390903278,"stop":1727390913701,"duration":10423}},{"uid":"25d47b83dcbe76ed","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/25d47b83dcbe76ed","status":"passed","time":{"start":1727385338039,"stop":1727385347630,"duration":9591}},{"uid":"51ea02790d783cc6","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/51ea02790d783cc6","status":"passed","time":{"start":1727383111821,"stop":1727383120188,"duration":8367}},{"uid":"bad23965696c168f","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/bad23965696c168f","status":"passed","time":{"start":1727380211423,"stop":1727380216922,"duration":5499}},{"uid":"b578842bd1bffb1b","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/b578842bd1bffb1b","status":"passed","time":{"start":1727374159951,"stop":1727374171141,"duration":11190}},{"uid":"4aac4f965e383a62","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/4aac4f965e383a62","status":"passed","time":{"start":1727372862618,"stop":1727372873702,"duration":11084}},{"uid":"85fcf4855b12f2e9","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/85fcf4855b12f2e9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727369803287,"stop":1727369896199,"duration":92912}},{"uid":"38d16d0c7558e5b6","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/38d16d0c7558e5b6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727365481224,"stop":1727365573865,"duration":92641}},{"uid":"3cdd0a48a04dd1d6","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/3cdd0a48a04dd1d6","status":"passed","time":{"start":1727365965755,"stop":1727365975233,"duration":9478}},{"uid":"c9c2faeb7b8c2bd3","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/c9c2faeb7b8c2bd3","status":"passed","time":{"start":1727360990903,"stop":1727361001932,"duration":11029}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"a9ad50b07a193228.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}