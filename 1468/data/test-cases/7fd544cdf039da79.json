{"uid":"7fd544cdf039da79","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1727485831088,"stop":1727485868075,"duration":36987},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff89aedf50>\ndevice = <golioth.golioth.Device object at 0xffff89b08d50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727485800906,"stop":1727485800907,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727485800907,"stop":1727485800907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727485800908,"stop":1727485800909,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727485800908,"stop":1727485800908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727485800909,"stop":1727485800911,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727485800909,"stop":1727485800909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727485800912,"stop":1727485800912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727485800913,"stop":1727485800913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727485800914,"stop":1727485801581,"duration":667},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727485801582,"stop":1727485802839,"duration":1257},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727485802839,"stop":1727485829990,"duration":27151},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727485829990,"stop":1727485831082,"duration":1092},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff89aedf50>\ndevice = <golioth.golioth.Device object at 0xffff89b08d50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ac6b851aba9ba253","name":"log","source":"ac6b851aba9ba253.txt","type":"text/plain","size":26865}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727485868359,"stop":1727485868403,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727485868405,"stop":1727485869029,"duration":624},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727485869031,"stop":1727485869034,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727485869038,"stop":1727485869038,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"98c32fcb33b9"},{"name":"thread","value":"409-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":19,"unknown":0,"total":28},"items":[{"uid":"6b38daf72f442ee8","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/6b38daf72f442ee8","status":"passed","time":{"start":1727478124425,"stop":1727478173351,"duration":48926}},{"uid":"212fd4a46fcc3fa4","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/212fd4a46fcc3fa4","status":"passed","time":{"start":1727462541133,"stop":1727462568811,"duration":27678}},{"uid":"b142b40eed2d37ec","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/b142b40eed2d37ec","status":"passed","time":{"start":1727462541133,"stop":1727462568811,"duration":27678}},{"uid":"3b672d7b901226f9","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/3b672d7b901226f9","status":"passed","time":{"start":1727457808585,"stop":1727457853099,"duration":44514}},{"uid":"9582821c24dfa1be","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/9582821c24dfa1be","status":"passed","time":{"start":1727454473903,"stop":1727454503719,"duration":29816}},{"uid":"6957cb80768a71e9","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6957cb80768a71e9","status":"passed","time":{"start":1727455852654,"stop":1727455879717,"duration":27063}},{"uid":"f4db8d4cbf1a2b4e","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/f4db8d4cbf1a2b4e","status":"passed","time":{"start":1727453009053,"stop":1727453036528,"duration":27475}},{"uid":"5cf3b4a4ec7cc13c","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/5cf3b4a4ec7cc13c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727399828615,"stop":1727399922578,"duration":93963}},{"uid":"cd68c82f44f018e0","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/cd68c82f44f018e0","status":"failed","statusDetails":"AssertionError: assert 1 == 0","time":{"start":1727394693311,"stop":1727394719832,"duration":26521}},{"uid":"f79ee21a49e17dce","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/f79ee21a49e17dce","status":"passed","time":{"start":1727393389812,"stop":1727393414961,"duration":25149}},{"uid":"e73b226c61f78b72","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/e73b226c61f78b72","status":"passed","time":{"start":1727391888074,"stop":1727391917034,"duration":28960}},{"uid":"7519f3eedc5dc40a","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/7519f3eedc5dc40a","status":"passed","time":{"start":1727386154512,"stop":1727386181248,"duration":26736}},{"uid":"9497dc8e0b8bd08f","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/9497dc8e0b8bd08f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727383749526,"stop":1727383842816,"duration":93290}},{"uid":"54f2781f5e590f4","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/54f2781f5e590f4","status":"passed","time":{"start":1727380856041,"stop":1727380883942,"duration":27901}},{"uid":"5a85d6617da8a38a","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/5a85d6617da8a38a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727374844482,"stop":1727374937818,"duration":93336}},{"uid":"a1cf1f5006b9265c","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/a1cf1f5006b9265c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727373221325,"stop":1727373314403,"duration":93078}},{"uid":"879b26a0e29a9646","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/879b26a0e29a9646","status":"passed","time":{"start":1727370590528,"stop":1727370617381,"duration":26853}},{"uid":"87a3b2e53e5e6e44","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/87a3b2e53e5e6e44","status":"passed","time":{"start":1727368077557,"stop":1727368104570,"duration":27013}},{"uid":"5d191de8d285c15f","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/5d191de8d285c15f","status":"passed","time":{"start":1727361618309,"stop":1727361645541,"duration":27232}},{"uid":"fbb14cddd3255eb7","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/fbb14cddd3255eb7","status":"passed","time":{"start":1727315927199,"stop":1727315957521,"duration":30322}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7fd544cdf039da79.json","parameterValues":["'nrf9160dk'","'zephyr'"]}