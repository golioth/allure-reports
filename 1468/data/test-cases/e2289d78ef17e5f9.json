{"uid":"e2289d78ef17e5f9","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"81df5c8b47896d9914743c5dbee29611","time":{"start":1727484431997,"stop":1727484526328,"duration":94331},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff86d77310>\nproject = <golioth.golioth.Project object at 0xffff886d8750>\ndevice = <golioth.golioth.Device object at 0xffff86d95710>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727484404196,"stop":1727484404196,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727484404197,"stop":1727484404197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727484404197,"stop":1727484404197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727484404198,"stop":1727484404198,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727484404198,"stop":1727484404198,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727484404199,"stop":1727484404200,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727484404200,"stop":1727484404200,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727484404201,"stop":1727484404203,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727484404204,"stop":1727484404630,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727484404631,"stop":1727484405452,"duration":821},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727484405453,"stop":1727484428750,"duration":23297},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727484428750,"stop":1727484431990,"duration":3240},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff86d77310>\nproject = <golioth.golioth.Project object at 0xffff886d8750>\ndevice = <golioth.golioth.Device object at 0xffff86d95710>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"872632e9c4e829ab","name":"log","source":"872632e9c4e829ab.txt","type":"text/plain","size":20361}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727484526665,"stop":1727484526709,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727484526711,"stop":1727484527086,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727484527088,"stop":1727484527090,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727484527092,"stop":1727484527092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"61e912b6a1b8"},{"name":"thread","value":"591-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"45b8b822c71e55c5","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/45b8b822c71e55c5","status":"passed","time":{"start":1727477046136,"stop":1727477057577,"duration":11441}},{"uid":"530c47f68a74c163","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/530c47f68a74c163","status":"passed","time":{"start":1727462414622,"stop":1727462429265,"duration":14643}},{"uid":"8a6d0d54d41919c4","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/8a6d0d54d41919c4","status":"passed","time":{"start":1727462414622,"stop":1727462429265,"duration":14643}},{"uid":"2864693658671239","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/2864693658671239","status":"passed","time":{"start":1727457280472,"stop":1727457299694,"duration":19222}},{"uid":"3d708090bb55e6fc","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/3d708090bb55e6fc","status":"passed","time":{"start":1727454135299,"stop":1727454146771,"duration":11472}},{"uid":"c6c7aed1ffabd10b","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/c6c7aed1ffabd10b","status":"passed","time":{"start":1727455840224,"stop":1727455852437,"duration":12213}},{"uid":"a271034d91987d55","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/a271034d91987d55","status":"passed","time":{"start":1727453065043,"stop":1727453076572,"duration":11529}},{"uid":"a725e4eb0615025b","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/a725e4eb0615025b","status":"passed","time":{"start":1727398062110,"stop":1727398075698,"duration":13588}},{"uid":"606d122d2dbc8e2d","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/606d122d2dbc8e2d","status":"passed","time":{"start":1727394745710,"stop":1727394757287,"duration":11577}},{"uid":"71e98b13f3b5b95","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/71e98b13f3b5b95","status":"passed","time":{"start":1727390180045,"stop":1727390190975,"duration":10930}},{"uid":"2c877522addc6a14","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/2c877522addc6a14","status":"passed","time":{"start":1727389845835,"stop":1727389857513,"duration":11678}},{"uid":"54644feb46e8a7f7","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/54644feb46e8a7f7","status":"passed","time":{"start":1727385249997,"stop":1727385261185,"duration":11188}},{"uid":"ca944ee509171704","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/ca944ee509171704","status":"passed","time":{"start":1727382834245,"stop":1727382845873,"duration":11628}},{"uid":"b49aee80a5ae35d9","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/b49aee80a5ae35d9","status":"passed","time":{"start":1727379496876,"stop":1727379516529,"duration":19653}},{"uid":"ba2b53297b68e847","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/ba2b53297b68e847","status":"passed","time":{"start":1727374843828,"stop":1727374855006,"duration":11178}},{"uid":"f0ebf8f2dde549e1","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/f0ebf8f2dde549e1","status":"passed","time":{"start":1727371996135,"stop":1727372007865,"duration":11730}},{"uid":"5cba9708cda515d8","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/5cba9708cda515d8","status":"passed","time":{"start":1727369531386,"stop":1727369543299,"duration":11913}},{"uid":"b23ab84043afb37b","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b23ab84043afb37b","status":"passed","time":{"start":1727364855034,"stop":1727364866305,"duration":11271}},{"uid":"91c642aed8e9f1b2","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/91c642aed8e9f1b2","status":"passed","time":{"start":1727365493200,"stop":1727365503865,"duration":10665}},{"uid":"29b2c40f9894fce4","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/29b2c40f9894fce4","status":"passed","time":{"start":1727360835859,"stop":1727360848189,"duration":12330}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e2289d78ef17e5f9.json","parameterValues":["'nrf52840dk'","'zephyr'"]}