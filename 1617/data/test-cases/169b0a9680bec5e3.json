{"uid":"169b0a9680bec5e3","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1728426629442,"stop":1728426652371,"duration":22929},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dd32a90>\ndevice = <golioth.golioth.Device object at 0xffff9dd4da50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728426611801,"stop":1728426611801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728426611802,"stop":1728426611802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728426611802,"stop":1728426611802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728426611803,"stop":1728426611803,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728426611803,"stop":1728426611804,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728426611804,"stop":1728426611806,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728426611807,"stop":1728426611807,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728426611807,"stop":1728426611807,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728426611808,"stop":1728426612228,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728426612229,"stop":1728426613063,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728426613064,"stop":1728426628568,"duration":15504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728426628569,"stop":1728426629439,"duration":870},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dd32a90>\ndevice = <golioth.golioth.Device object at 0xffff9dd4da50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e7244d7caa0120c2","name":"log","source":"e7244d7caa0120c2.txt","type":"text/plain","size":15199}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728426652684,"stop":1728426652689,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728426652691,"stop":1728426653082,"duration":391},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728426653084,"stop":1728426653086,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728426653091,"stop":1728426653091,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f684bb0bf10f"},{"name":"thread","value":"416-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":109,"unknown":0,"total":119},"items":[{"uid":"b29047692ea7671a","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/b29047692ea7671a","status":"passed","time":{"start":1728342953043,"stop":1728342960777,"duration":7734}},{"uid":"e2f4a29e6286749f","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/e2f4a29e6286749f","status":"passed","time":{"start":1728401306254,"stop":1728401313006,"duration":6752}},{"uid":"afd40ce44f4653f8","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/afd40ce44f4653f8","status":"passed","time":{"start":1728342953043,"stop":1728342960777,"duration":7734}},{"uid":"10df593a6144d427","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/10df593a6144d427","status":"passed","time":{"start":1728349408808,"stop":1728349417522,"duration":8714}},{"uid":"7bb277a9a9bb6cbb","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/7bb277a9a9bb6cbb","status":"passed","time":{"start":1728344580042,"stop":1728344597534,"duration":17492}},{"uid":"9b63ae9d534b9347","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9b63ae9d534b9347","status":"passed","time":{"start":1728342953043,"stop":1728342960777,"duration":7734}},{"uid":"dbcbf8543d77d1a5","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/dbcbf8543d77d1a5","status":"passed","time":{"start":1728337751335,"stop":1728337760922,"duration":9587}},{"uid":"35694b1e06bc5b7d","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/35694b1e06bc5b7d","status":"passed","time":{"start":1728328452603,"stop":1728328459127,"duration":6524}},{"uid":"4e485f235d928ae5","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/4e485f235d928ae5","status":"passed","time":{"start":1728327765107,"stop":1728327776648,"duration":11541}},{"uid":"41dda6d6da6b9529","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/41dda6d6da6b9529","status":"passed","time":{"start":1728321000435,"stop":1728321011806,"duration":11371}},{"uid":"9b82c745b135339c","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/9b82c745b135339c","status":"passed","time":{"start":1728318018362,"stop":1728318027370,"duration":9008}},{"uid":"d101b0ea5a8021e4","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/d101b0ea5a8021e4","status":"passed","time":{"start":1728314711100,"stop":1728314720738,"duration":9638}},{"uid":"70a4b7d77c0dca93","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/70a4b7d77c0dca93","status":"passed","time":{"start":1728308349519,"stop":1728308357247,"duration":7728}},{"uid":"47280375bbb6c56a","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/47280375bbb6c56a","status":"passed","time":{"start":1728308420826,"stop":1728308428445,"duration":7619}},{"uid":"4c3947efcaeafdc0","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/4c3947efcaeafdc0","status":"passed","time":{"start":1728262945196,"stop":1728262952872,"duration":7676}},{"uid":"c43ed265240db89c","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/c43ed265240db89c","status":"passed","time":{"start":1728176642725,"stop":1728176652637,"duration":9912}},{"uid":"def9544bffdcfcd8","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/def9544bffdcfcd8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728133841426,"stop":1728133934572,"duration":93146}},{"uid":"82c06791380955e2","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/82c06791380955e2","status":"passed","time":{"start":1728131541224,"stop":1728131549828,"duration":8604}},{"uid":"7750e6c88cedf61d","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/7750e6c88cedf61d","status":"passed","time":{"start":1728127535481,"stop":1728127544639,"duration":9158}},{"uid":"ff05a42d36f0ec64","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/ff05a42d36f0ec64","status":"passed","time":{"start":1728126893364,"stop":1728126902578,"duration":9214}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"169b0a9680bec5e3.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}