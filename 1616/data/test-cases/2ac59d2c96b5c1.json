{"uid":"2ac59d2c96b5c1","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"c3c56fd394e8a51c6a7b951f90915fb9","time":{"start":1728400855826,"stop":1728400913073,"duration":57247},"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a687490>\ndevice = <golioth.golioth.Device object at 0xffff9a665590>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728400819418,"stop":1728400819418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728400819418,"stop":1728400819419,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728400819419,"stop":1728400819420,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728400819419,"stop":1728400819419,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728400819420,"stop":1728400819420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728400819421,"stop":1728400819423,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728400819424,"stop":1728400819424,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728400819424,"stop":1728400819424,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728400819425,"stop":1728400819851,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728400819851,"stop":1728400820722,"duration":871},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728400820722,"stop":1728400855178,"duration":34456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728400855178,"stop":1728400855823,"duration":645},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a687490>\ndevice = <golioth.golioth.Device object at 0xffff9a665590>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"6382bc1629bad1c9","name":"log","source":"6382bc1629bad1c9.txt","type":"text/plain","size":40810}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728400913243,"stop":1728400913272,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728400913274,"stop":1728400913654,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728400913656,"stop":1728400913658,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728400913663,"stop":1728400913663,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"78caed356569"},{"name":"thread","value":"402-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":4,"skipped":0,"passed":109,"unknown":0,"total":115},"items":[{"uid":"c8e20390141cc08a","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/c8e20390141cc08a","status":"passed","time":{"start":1728342548323,"stop":1728342602745,"duration":54422}},{"uid":"da8a2412ee1ce220","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/da8a2412ee1ce220","status":"passed","time":{"start":1728348995227,"stop":1728349048817,"duration":53590}},{"uid":"483544cbc3ed200c","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/483544cbc3ed200c","status":"passed","time":{"start":1728343334984,"stop":1728343388370,"duration":53386}},{"uid":"9f7fc7077daf8f77","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/9f7fc7077daf8f77","status":"passed","time":{"start":1728342548323,"stop":1728342602745,"duration":54422}},{"uid":"d0125869a5823b4d","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/d0125869a5823b4d","status":"passed","time":{"start":1728337004103,"stop":1728337057912,"duration":53809}},{"uid":"355331d8edf62643","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/355331d8edf62643","status":"passed","time":{"start":1728317795393,"stop":1728317849255,"duration":53862}},{"uid":"b7f0a5815a611400","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/b7f0a5815a611400","status":"passed","time":{"start":1728320884085,"stop":1728320937707,"duration":53622}},{"uid":"8041cc08e1929a89","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/8041cc08e1929a89","status":"passed","time":{"start":1728320884085,"stop":1728320937707,"duration":53622}},{"uid":"239c447a38054894","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/239c447a38054894","status":"passed","time":{"start":1728317795393,"stop":1728317849255,"duration":53862}},{"uid":"f8e6b138bfddd7f5","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/f8e6b138bfddd7f5","status":"passed","time":{"start":1728313946733,"stop":1728314000837,"duration":54104}},{"uid":"524e4eca195ab7f2","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/524e4eca195ab7f2","status":"passed","time":{"start":1728130019074,"stop":1728130072613,"duration":53539}},{"uid":"6aa961880658c89c","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/6aa961880658c89c","status":"passed","time":{"start":1728125329554,"stop":1728125383074,"duration":53520}},{"uid":"c76f367235234318","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/c76f367235234318","status":"passed","time":{"start":1728262684881,"stop":1728262738178,"duration":53297}},{"uid":"90f0d916f0a8b86b","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/90f0d916f0a8b86b","status":"passed","time":{"start":1728176202673,"stop":1728176256488,"duration":53815}},{"uid":"ec46f73c7492c781","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/ec46f73c7492c781","status":"passed","time":{"start":1728131625477,"stop":1728131681486,"duration":56009}},{"uid":"5a302f0bf254f96f","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/5a302f0bf254f96f","status":"passed","time":{"start":1728130019074,"stop":1728130072613,"duration":53539}},{"uid":"fababe8a22847165","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/fababe8a22847165","status":"passed","time":{"start":1728125329554,"stop":1728125383074,"duration":53520}},{"uid":"c036249fc5f21159","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/c036249fc5f21159","status":"passed","time":{"start":1728124450779,"stop":1728124505226,"duration":54447}},{"uid":"c88accf6c2c61452","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/c88accf6c2c61452","status":"passed","time":{"start":1728026540265,"stop":1728026593696,"duration":53431}},{"uid":"e938a8f5c2312c02","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/e938a8f5c2312c02","status":"passed","time":{"start":1728064220835,"stop":1728064274866,"duration":54031}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"2ac59d2c96b5c1.json","parameterValues":["'rak5010'","'zephyr'"]}