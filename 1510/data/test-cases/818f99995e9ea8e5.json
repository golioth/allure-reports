{"uid":"818f99995e9ea8e5","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6de3eafb2765c88fcbba2d44b75da8e7","time":{"start":1727788110298,"stop":1727788203931,"duration":93633},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff936b9f50>\ndevice = <golioth.golioth.Device object at 0xffff93680bd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727788073831,"stop":1727788073832,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727788073832,"stop":1727788073832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727788073833,"stop":1727788073833,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727788073833,"stop":1727788073833,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727788073834,"stop":1727788073836,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727788073834,"stop":1727788073834,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727788073837,"stop":1727788073837,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727788073838,"stop":1727788073838,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727788073838,"stop":1727788074282,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727788074283,"stop":1727788075193,"duration":910},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727788075193,"stop":1727788109676,"duration":34483},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727788109677,"stop":1727788110295,"duration":618},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff936b9f50>\ndevice = <golioth.golioth.Device object at 0xffff93680bd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"def8d30d99f1b26e","name":"log","source":"def8d30d99f1b26e.txt","type":"text/plain","size":31777}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727788204270,"stop":1727788204604,"duration":334},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727788204606,"stop":1727788204991,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727788204994,"stop":1727788204996,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727788205001,"stop":1727788205001,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5654ae72691e"},{"name":"thread","value":"417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":43,"unknown":0,"total":48},"items":[{"uid":"7e4f19f7a8641598","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/7e4f19f7a8641598","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727786198683,"stop":1727786292290,"duration":93607}},{"uid":"53083fe756329125","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/53083fe756329125","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727783606852,"stop":1727783700535,"duration":93683}},{"uid":"4d30f233004ed187","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/4d30f233004ed187","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727781963287,"stop":1727782056869,"duration":93582}},{"uid":"675343a5a2de0983","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/675343a5a2de0983","status":"passed","time":{"start":1727777043922,"stop":1727777097368,"duration":53446}},{"uid":"2564c4b9bafbb38","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/2564c4b9bafbb38","status":"passed","time":{"start":1727774479475,"stop":1727774524737,"duration":45262}},{"uid":"4a87cfa7600ea656","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/4a87cfa7600ea656","status":"passed","time":{"start":1727771470629,"stop":1727771515476,"duration":44847}},{"uid":"a520ef0ba97504a4","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/a520ef0ba97504a4","status":"passed","time":{"start":1727768973365,"stop":1727769018384,"duration":45019}},{"uid":"feac7ecfcbc8f4eb","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/feac7ecfcbc8f4eb","status":"passed","time":{"start":1727765328616,"stop":1727765372862,"duration":44246}},{"uid":"2e19dfbfca8b6f1f","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/2e19dfbfca8b6f1f","status":"passed","time":{"start":1727764109722,"stop":1727764154292,"duration":44570}},{"uid":"7a42f1e1186a494e","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/7a42f1e1186a494e","status":"passed","time":{"start":1727760260529,"stop":1727760305468,"duration":44939}},{"uid":"d479fe88560cb619","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/d479fe88560cb619","status":"passed","time":{"start":1727744631882,"stop":1727744676613,"duration":44731}},{"uid":"3d405ee2630f9ae4","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/3d405ee2630f9ae4","status":"passed","time":{"start":1727732112808,"stop":1727732157919,"duration":45111}},{"uid":"3fe2abd12aea6dd3","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/3fe2abd12aea6dd3","status":"passed","time":{"start":1727658189872,"stop":1727658234089,"duration":44217}},{"uid":"4cb1c8c4e95232eb","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/4cb1c8c4e95232eb","status":"passed","time":{"start":1727571789406,"stop":1727571834456,"duration":45050}},{"uid":"4dedf0ad3694fec2","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/4dedf0ad3694fec2","status":"passed","time":{"start":1727547306922,"stop":1727547351486,"duration":44564}},{"uid":"a467cd70c1cd7409","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/a467cd70c1cd7409","status":"passed","time":{"start":1727544308642,"stop":1727544354001,"duration":45359}},{"uid":"60ced8e30283f20f","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/60ced8e30283f20f","status":"passed","time":{"start":1727544104030,"stop":1727544150335,"duration":46305}},{"uid":"c6904d21a631e695","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/c6904d21a631e695","status":"passed","time":{"start":1727485403976,"stop":1727485448630,"duration":44654}},{"uid":"b24768687456e63f","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/b24768687456e63f","status":"passed","time":{"start":1727476774950,"stop":1727476819997,"duration":45047}},{"uid":"34bbb3606027a581","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/34bbb3606027a581","status":"passed","time":{"start":1727462545319,"stop":1727462590148,"duration":44829}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"818f99995e9ea8e5.json","parameterValues":["'rak5010'","'zephyr'"]}