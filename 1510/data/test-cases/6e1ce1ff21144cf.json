{"uid":"6e1ce1ff21144cf","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1727787690165,"stop":1727787802915,"duration":112750},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa6f279d0>\ndevice = <golioth.golioth.Device object at 0xffffa6f48150>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727787662750,"stop":1727787662750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727787662750,"stop":1727787662750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727787662751,"stop":1727787662752,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727787662751,"stop":1727787662751,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727787662752,"stop":1727787662752,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727787662752,"stop":1727787662755,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727787662756,"stop":1727787662756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727787662757,"stop":1727787663189,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727787662757,"stop":1727787662757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727787663190,"stop":1727787664074,"duration":884},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727787664075,"stop":1727787686935,"duration":22860},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727787686935,"stop":1727787690158,"duration":3223},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa6f279d0>\ndevice = <golioth.golioth.Device object at 0xffffa6f48150>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"daf1c30e351779e1","name":"log","source":"daf1c30e351779e1.txt","type":"text/plain","size":14138}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727787803256,"stop":1727787803265,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727787803266,"stop":1727787803647,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727787803650,"stop":1727787803652,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727787803657,"stop":1727787803657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a4d3d24c8a18"},{"name":"thread","value":"1044-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f48b0b493550261f","status":"passed","time":{"start":1727787634104,"stop":1727787658074,"duration":23970}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":45,"unknown":0,"total":48},"items":[{"uid":"50910c3c59a337b2","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/50910c3c59a337b2","status":"passed","time":{"start":1727785926259,"stop":1727785949941,"duration":23682}},{"uid":"49fd8b600f346131","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/49fd8b600f346131","status":"passed","time":{"start":1727781762608,"stop":1727781785727,"duration":23119}},{"uid":"34f59629bee30d29","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/34f59629bee30d29","status":"passed","time":{"start":1727781350611,"stop":1727781374308,"duration":23697}},{"uid":"906e9a94f563f274","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/906e9a94f563f274","status":"passed","time":{"start":1727777730381,"stop":1727777754400,"duration":24019}},{"uid":"69eb1e423b74c582","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/69eb1e423b74c582","status":"passed","time":{"start":1727775159443,"stop":1727775183509,"duration":24066}},{"uid":"1d7ee3d61517462b","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/1d7ee3d61517462b","status":"passed","time":{"start":1727771401012,"stop":1727771424844,"duration":23832}},{"uid":"31a0c256cfb6ee97","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/31a0c256cfb6ee97","status":"passed","time":{"start":1727770219014,"stop":1727770242364,"duration":23350}},{"uid":"aecba24745218890","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/aecba24745218890","status":"passed","time":{"start":1727765490171,"stop":1727765514155,"duration":23984}},{"uid":"9a10d6ad4cc75867","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/9a10d6ad4cc75867","status":"passed","time":{"start":1727764821406,"stop":1727764845294,"duration":23888}},{"uid":"4b7000e193fcc503","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/4b7000e193fcc503","status":"passed","time":{"start":1727760692853,"stop":1727760716867,"duration":24014}},{"uid":"76a1a603308cec9e","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/76a1a603308cec9e","status":"passed","time":{"start":1727744985974,"stop":1727745009652,"duration":23678}},{"uid":"f8b50224bd22f984","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/f8b50224bd22f984","status":"passed","time":{"start":1727732768181,"stop":1727732792077,"duration":23896}},{"uid":"5b4f8d3a62bd4166","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/5b4f8d3a62bd4166","status":"passed","time":{"start":1727657890564,"stop":1727657914349,"duration":23785}},{"uid":"f5a8f71c3edb4b0a","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/f5a8f71c3edb4b0a","status":"passed","time":{"start":1727572145012,"stop":1727572168685,"duration":23673}},{"uid":"53c772b207fbcd44","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/53c772b207fbcd44","status":"passed","time":{"start":1727547251506,"stop":1727547274963,"duration":23457}},{"uid":"be51595c44efb27e","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/be51595c44efb27e","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1727546110900,"stop":1727546138963,"duration":28063}},{"uid":"e0e384a3f0e9570d","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/e0e384a3f0e9570d","status":"passed","time":{"start":1727544801282,"stop":1727544825032,"duration":23750}},{"uid":"5f89131203c046f3","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/5f89131203c046f3","status":"passed","time":{"start":1727485083391,"stop":1727485107021,"duration":23630}},{"uid":"52c6383ba9aee444","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/52c6383ba9aee444","status":"passed","time":{"start":1727477675966,"stop":1727477699695,"duration":23729}},{"uid":"86a7b91e89b575ea","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/86a7b91e89b575ea","status":"passed","time":{"start":1727462916582,"stop":1727462940221,"duration":23639}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6e1ce1ff21144cf.json","parameterValues":["'nrf52840dk'","'zephyr'"]}