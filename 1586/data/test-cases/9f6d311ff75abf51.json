{"uid":"9f6d311ff75abf51","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1728305548956,"stop":1728305642131,"duration":93175},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff826a5d50>\ndevice = <golioth.golioth.Device object at 0xffff826b8950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728305520312,"stop":1728305520313,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728305520313,"stop":1728305520313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728305520314,"stop":1728305520314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728305520314,"stop":1728305520314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728305520315,"stop":1728305520315,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728305520315,"stop":1728305520317,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728305520318,"stop":1728305520318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728305520319,"stop":1728305520737,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728305520319,"stop":1728305520319,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728305520738,"stop":1728305521620,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728305521620,"stop":1728305547891,"duration":26271},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728305547892,"stop":1728305548953,"duration":1061},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff826a5d50>\ndevice = <golioth.golioth.Device object at 0xffff826b8950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"604bfec3b9ad6348","name":"log","source":"604bfec3b9ad6348.txt","type":"text/plain","size":16342}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728305642381,"stop":1728305642412,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728305642414,"stop":1728305642799,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728305642801,"stop":1728305642803,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728305642808,"stop":1728305642808,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"20b7c607b0d2"},{"name":"thread","value":"420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"37aea5929f150bc9","status":"passed","time":{"start":1728129968498,"stop":1728129990152,"duration":21654}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":19,"skipped":0,"passed":77,"unknown":0,"total":99},"items":[{"uid":"8d9615d1142ecaa6","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/8d9615d1142ecaa6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728263711056,"stop":1728263733413,"duration":22357}},{"uid":"792a20de1603554f","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/792a20de1603554f","status":"passed","time":{"start":1728177416311,"stop":1728177438622,"duration":22311}},{"uid":"dc4a4e9c35605f0","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/dc4a4e9c35605f0","status":"passed","time":{"start":1728134724225,"stop":1728134749314,"duration":25089}},{"uid":"2637c9f187d067e9","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/2637c9f187d067e9","status":"passed","time":{"start":1728134098761,"stop":1728134120717,"duration":21956}},{"uid":"b77c9fe7b071a774","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/b77c9fe7b071a774","status":"passed","time":{"start":1728129968498,"stop":1728129990152,"duration":21654}},{"uid":"e6f2a2ffdcdc4e53","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/e6f2a2ffdcdc4e53","status":"passed","time":{"start":1728128052263,"stop":1728128074442,"duration":22179}},{"uid":"8c1ee556e83979ae","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/8c1ee556e83979ae","status":"passed","time":{"start":1728052404536,"stop":1728052430081,"duration":25545}},{"uid":"128731a346b1b90e","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/128731a346b1b90e","status":"passed","time":{"start":1728121231803,"stop":1728121256716,"duration":24913}},{"uid":"bf29ed2a68b97612","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/bf29ed2a68b97612","status":"passed","time":{"start":1728090581568,"stop":1728090603957,"duration":22389}},{"uid":"797660927131a5a5","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/797660927131a5a5","status":"passed","time":{"start":1728082799311,"stop":1728082846878,"duration":47567}},{"uid":"12901010c3d17aa9","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/12901010c3d17aa9","status":"passed","time":{"start":1728075957241,"stop":1728075979361,"duration":22120}},{"uid":"a435bb7da96776c6","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/a435bb7da96776c6","status":"passed","time":{"start":1728073255059,"stop":1728073277315,"duration":22256}},{"uid":"ed8b34c065ee1907","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/ed8b34c065ee1907","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1728070447881,"stop":1728070463404,"duration":15523}},{"uid":"7a625b4613995ef8","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/7a625b4613995ef8","status":"passed","time":{"start":1728052404536,"stop":1728052430081,"duration":25545}},{"uid":"c8aeaad03171dd85","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/c8aeaad03171dd85","status":"passed","time":{"start":1728064220093,"stop":1728064256828,"duration":36735}},{"uid":"521fcc7576c1b1dd","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/521fcc7576c1b1dd","status":"passed","time":{"start":1728066204441,"stop":1728066227019,"duration":22578}},{"uid":"b2db974f56ae33b6","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/b2db974f56ae33b6","status":"passed","time":{"start":1728033542454,"stop":1728033588528,"duration":46074}},{"uid":"79ab162e26747895","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/79ab162e26747895","status":"passed","time":{"start":1728055185012,"stop":1728055230532,"duration":45520}},{"uid":"33fed910973a1273","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/33fed910973a1273","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728051013904,"stop":1728051107207,"duration":93303}},{"uid":"cd3e0b3597c46bf3","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/cd3e0b3597c46bf3","status":"passed","time":{"start":1728036693137,"stop":1728036714653,"duration":21516}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"9f6d311ff75abf51.json","parameterValues":["'nrf9160dk'","'zephyr'"]}