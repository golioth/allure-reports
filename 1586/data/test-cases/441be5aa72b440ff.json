{"uid":"441be5aa72b440ff","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1728305800107,"stop":1728305893543,"duration":93436},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1fadd90>\ndevice = <golioth.golioth.Device object at 0xffffb1fc0bd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728305771686,"stop":1728305771686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728305771686,"stop":1728305771687,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728305771687,"stop":1728305771687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728305771688,"stop":1728305771688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728305771688,"stop":1728305771688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728305771689,"stop":1728305771691,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728305771692,"stop":1728305771692,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728305771692,"stop":1728305771692,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728305771693,"stop":1728305772129,"duration":436},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728305772129,"stop":1728305773070,"duration":941},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728305773071,"stop":1728305799017,"duration":25946},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728305799018,"stop":1728305800104,"duration":1086},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1fadd90>\ndevice = <golioth.golioth.Device object at 0xffffb1fc0bd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f4da6ffefb8b5bf9","name":"log","source":"f4da6ffefb8b5bf9.txt","type":"text/plain","size":18484}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728305893829,"stop":1728305893871,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728305893873,"stop":1728305894261,"duration":388},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728305894264,"stop":1728305894266,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728305894271,"stop":1728305894271,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"20b7c607b0d2"},{"name":"thread","value":"512-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4781eec01c64536","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728130067050,"stop":1728130160797,"duration":93747}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":84,"unknown":0,"total":99},"items":[{"uid":"87789a76c5162fdb","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/87789a76c5162fdb","status":"passed","time":{"start":1728263817351,"stop":1728263841210,"duration":23859}},{"uid":"e07d8fbc22c95315","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/e07d8fbc22c95315","status":"passed","time":{"start":1728177519155,"stop":1728177536096,"duration":16941}},{"uid":"34272cb820db4813","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/34272cb820db4813","status":"passed","time":{"start":1728134823824,"stop":1728134840815,"duration":16991}},{"uid":"482acbc637ed5fe7","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/482acbc637ed5fe7","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728134197770,"stop":1728134224381,"duration":26611}},{"uid":"b2f1ac15ae55939a","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/b2f1ac15ae55939a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728130067050,"stop":1728130160797,"duration":93747}},{"uid":"1c18989944413d41","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/1c18989944413d41","status":"passed","time":{"start":1728128151577,"stop":1728128164957,"duration":13380}},{"uid":"1d17b33e2425bb68","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/1d17b33e2425bb68","status":"passed","time":{"start":1728052506557,"stop":1728052522856,"duration":16299}},{"uid":"d439b4fbbcfd44b2","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/d439b4fbbcfd44b2","status":"passed","time":{"start":1728120590564,"stop":1728120608309,"duration":17745}},{"uid":"1a3a381e0f27d53f","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/1a3a381e0f27d53f","status":"passed","time":{"start":1728090682300,"stop":1728090696364,"duration":14064}},{"uid":"789461bf81403054","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/789461bf81403054","status":"passed","time":{"start":1728082941767,"stop":1728082980413,"duration":38646}},{"uid":"929df59e9d781e50","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/929df59e9d781e50","status":"passed","time":{"start":1728076056506,"stop":1728076070123,"duration":13617}},{"uid":"105155aec49a918e","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/105155aec49a918e","status":"passed","time":{"start":1728073353702,"stop":1728073367709,"duration":14007}},{"uid":"fddc8d41ce9b9a35","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/fddc8d41ce9b9a35","status":"passed","time":{"start":1728070541039,"stop":1728070554651,"duration":13612}},{"uid":"8a53b6a6e13f0030","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/8a53b6a6e13f0030","status":"passed","time":{"start":1728052506557,"stop":1728052522856,"duration":16299}},{"uid":"53f0c2fe13e76232","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/53f0c2fe13e76232","status":"passed","time":{"start":1728064333040,"stop":1728064354895,"duration":21855}},{"uid":"f45aff388a0eece2","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/f45aff388a0eece2","status":"passed","time":{"start":1728066305052,"stop":1728066319497,"duration":14445}},{"uid":"1cfeffae2d392d8","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/1cfeffae2d392d8","status":"passed","time":{"start":1728033683201,"stop":1728033706374,"duration":23173}},{"uid":"a784839e2cf6e157","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/a784839e2cf6e157","status":"passed","time":{"start":1728055389452,"stop":1728055425252,"duration":35800}},{"uid":"87217716b1220fdb","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/87217716b1220fdb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728051266963,"stop":1728051360599,"duration":93636}},{"uid":"fd6bd3641d9641b1","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/fd6bd3641d9641b1","status":"passed","time":{"start":1728036791150,"stop":1728036805323,"duration":14173}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"441be5aa72b440ff.json","parameterValues":["'nrf9160dk'","'zephyr'"]}