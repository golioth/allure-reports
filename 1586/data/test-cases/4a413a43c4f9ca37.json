{"uid":"4a413a43c4f9ca37","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"c4178e273bd3962d06b411c6f8e74f6b","time":{"start":1728306223950,"stop":1728306316573,"duration":92623},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb2e8d910>\ndevice = <golioth.golioth.Device object at 0xffffb2ea46d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728306195093,"stop":1728306195093,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728306195094,"stop":1728306195094,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728306195094,"stop":1728306195094,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728306195095,"stop":1728306195095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728306195095,"stop":1728306195096,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728306195096,"stop":1728306195098,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728306195099,"stop":1728306195099,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728306195099,"stop":1728306195100,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728306195100,"stop":1728306195523,"duration":423},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728306195524,"stop":1728306196357,"duration":833},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728306196358,"stop":1728306222863,"duration":26505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728306222863,"stop":1728306223945,"duration":1082},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb2e8d910>\ndevice = <golioth.golioth.Device object at 0xffffb2ea46d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"1392be1f537097a5","name":"log","source":"1392be1f537097a5.txt","type":"text/plain","size":14166}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728306316849,"stop":1728306316892,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728306316893,"stop":1728306317275,"duration":382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728306317277,"stop":1728306317280,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728306317284,"stop":1728306317285,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"20b7c607b0d2"},{"name":"thread","value":"649-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"15c824ef7b196d17","status":"passed","time":{"start":1728130304731,"stop":1728130314957,"duration":10226}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":24,"skipped":0,"passed":71,"unknown":0,"total":95},"items":[{"uid":"4189d6c77963ed2d","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/4189d6c77963ed2d","status":"passed","time":{"start":1728263990778,"stop":1728264001713,"duration":10935}},{"uid":"5090f67ad053cf75","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/5090f67ad053cf75","status":"passed","time":{"start":1728177678443,"stop":1728177689435,"duration":10992}},{"uid":"3315fd805e836fd9","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/3315fd805e836fd9","status":"passed","time":{"start":1728135102314,"stop":1728135114527,"duration":12213}},{"uid":"2f507f3f0e815a7f","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/2f507f3f0e815a7f","status":"passed","time":{"start":1728134370116,"stop":1728134383750,"duration":13634}},{"uid":"2678e858a892eb80","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/2678e858a892eb80","status":"passed","time":{"start":1728130304731,"stop":1728130314957,"duration":10226}},{"uid":"bad2d255f813b729","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/bad2d255f813b729","status":"passed","time":{"start":1728128308441,"stop":1728128321986,"duration":13545}},{"uid":"3f347fccdbd25a79","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/3f347fccdbd25a79","status":"passed","time":{"start":1728052657464,"stop":1728052671166,"duration":13702}},{"uid":"46f2383f7d724d16","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/46f2383f7d724d16","status":"passed","time":{"start":1728120743193,"stop":1728120755803,"duration":12610}},{"uid":"7847236ade2ccba0","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/7847236ade2ccba0","status":"passed","time":{"start":1728090799331,"stop":1728090813096,"duration":13765}},{"uid":"420f08930370d425","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/420f08930370d425","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728083842607,"stop":1728083935397,"duration":92790}},{"uid":"2be710e115ca026d","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/2be710e115ca026d","status":"passed","time":{"start":1728076215041,"stop":1728076226077,"duration":11036}},{"uid":"9562028d1b7a09f4","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/9562028d1b7a09f4","status":"passed","time":{"start":1728073589272,"stop":1728073598850,"duration":9578}},{"uid":"32033f18540efe27","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/32033f18540efe27","status":"passed","time":{"start":1728070692348,"stop":1728070702101,"duration":9753}},{"uid":"efc241b22647dd15","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/efc241b22647dd15","status":"passed","time":{"start":1728052657464,"stop":1728052671166,"duration":13702}},{"uid":"b7e8dae3cb3bfca6","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/b7e8dae3cb3bfca6","status":"passed","time":{"start":1728064498766,"stop":1728064509748,"duration":10982}},{"uid":"d3a755bb711ca210","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/d3a755bb711ca210","status":"passed","time":{"start":1728066465791,"stop":1728066477813,"duration":12022}},{"uid":"3d0fbb53e12f9206","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/3d0fbb53e12f9206","status":"passed","time":{"start":1728033877376,"stop":1728033909885,"duration":32509}},{"uid":"3be61702a731f3ca","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/3be61702a731f3ca","status":"passed","time":{"start":1728055767410,"stop":1728055851109,"duration":83699}},{"uid":"e103890fc54d4fd2","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/e103890fc54d4fd2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728051536053,"stop":1728051628802,"duration":92749}},{"uid":"d93f0429177cdefc","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/d93f0429177cdefc","status":"passed","time":{"start":1728036950624,"stop":1728036963036,"duration":12412}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4a413a43c4f9ca37.json","parameterValues":["'nrf9160dk'","'zephyr'"]}