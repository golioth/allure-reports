{"uid":"b45531f5462ccf83","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1728305423549,"stop":1728305516296,"duration":92747},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff96406cd0>\ndevice = <golioth.golioth.Device object at 0xffff9651d210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728305393428,"stop":1728305393428,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728305393429,"stop":1728305393429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728305393429,"stop":1728305393429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728305393430,"stop":1728305393430,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728305393430,"stop":1728305393430,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728305393431,"stop":1728305393433,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728305393434,"stop":1728305393434,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728305393434,"stop":1728305393434,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728305393435,"stop":1728305393960,"duration":525},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728305393961,"stop":1728305394802,"duration":841},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728305394803,"stop":1728305422421,"duration":27618},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728305422422,"stop":1728305423544,"duration":1122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff96406cd0>\ndevice = <golioth.golioth.Device object at 0xffff9651d210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7256844993d6e573","name":"log","source":"7256844993d6e573.txt","type":"text/plain","size":14174}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728305516564,"stop":1728305516610,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728305516612,"stop":1728305517014,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728305517016,"stop":1728305517018,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728305517023,"stop":1728305517023,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"20b7c607b0d2"},{"name":"thread","value":"374-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"25be4d59a1309ad0","status":"passed","time":{"start":1728129917917,"stop":1728129934424,"duration":16507}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":17,"skipped":0,"passed":81,"unknown":0,"total":99},"items":[{"uid":"7f5665b57204ea7c","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/7f5665b57204ea7c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728263584019,"stop":1728263676815,"duration":92796}},{"uid":"3aac774aae60828d","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/3aac774aae60828d","status":"passed","time":{"start":1728177366213,"stop":1728177382659,"duration":16446}},{"uid":"9fbbeff41600a7fe","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/9fbbeff41600a7fe","status":"passed","time":{"start":1728134672377,"stop":1728134691960,"duration":19583}},{"uid":"4bb68fefc8d35c58","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/4bb68fefc8d35c58","status":"passed","time":{"start":1728134047971,"stop":1728134064990,"duration":17019}},{"uid":"d068dab773494dca","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/d068dab773494dca","status":"passed","time":{"start":1728129917917,"stop":1728129934424,"duration":16507}},{"uid":"afc3a911a1840159","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/afc3a911a1840159","status":"passed","time":{"start":1728128001536,"stop":1728128018235,"duration":16699}},{"uid":"86ea6ef2b1164676","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/86ea6ef2b1164676","status":"passed","time":{"start":1728052351943,"stop":1728052371935,"duration":19992}},{"uid":"656f552d35231396","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/656f552d35231396","status":"passed","time":{"start":1728120440122,"stop":1728120459009,"duration":18887}},{"uid":"aa76949545b05d09","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/aa76949545b05d09","status":"passed","time":{"start":1728090529866,"stop":1728090547349,"duration":17483}},{"uid":"8c5f3eaf4b620e87","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/8c5f3eaf4b620e87","status":"passed","time":{"start":1728082725597,"stop":1728082766327,"duration":40730}},{"uid":"f8d0d140de354c77","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/f8d0d140de354c77","status":"passed","time":{"start":1728075905887,"stop":1728075922799,"duration":16912}},{"uid":"153fdf6e1ed812aa","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/153fdf6e1ed812aa","status":"passed","time":{"start":1728073204076,"stop":1728073220639,"duration":16563}},{"uid":"cc4e11d3e6d34b7d","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/cc4e11d3e6d34b7d","status":"passed","time":{"start":1728070396041,"stop":1728070413432,"duration":17391}},{"uid":"58b60759e21eed9b","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/58b60759e21eed9b","status":"passed","time":{"start":1728052351943,"stop":1728052371935,"duration":19992}},{"uid":"9259143c256b7c06","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/9259143c256b7c06","status":"passed","time":{"start":1728064166651,"stop":1728064185187,"duration":18536}},{"uid":"357e38cafa6f5303","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/357e38cafa6f5303","status":"passed","time":{"start":1728066153114,"stop":1728066170069,"duration":16955}},{"uid":"2822d1e28535b906","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/2822d1e28535b906","status":"passed","time":{"start":1728033463800,"stop":1728033509533,"duration":45733}},{"uid":"3325f9500060db7c","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/3325f9500060db7c","status":"passed","time":{"start":1728055113308,"stop":1728055151752,"duration":38444}},{"uid":"c8a389d7f3c26f37","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/c8a389d7f3c26f37","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728050887590,"stop":1728050980443,"duration":92853}},{"uid":"ba687082deac2e83","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/ba687082deac2e83","status":"passed","time":{"start":1728036641746,"stop":1728036658516,"duration":16770}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b45531f5462ccf83.json","parameterValues":["'nrf9160dk'","'zephyr'"]}