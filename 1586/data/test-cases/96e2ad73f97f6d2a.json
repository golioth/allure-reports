{"uid":"96e2ad73f97f6d2a","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1728306667255,"stop":1728306781721,"duration":114466},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9bc28350>\ndevice = <golioth.golioth.Device object at 0xffff9bc2b390>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff9bd91650>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728306639283,"stop":1728306639283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1728306639284,"stop":1728306639299,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728306639300,"stop":1728306639300,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728306639300,"stop":1728306639300,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728306639301,"stop":1728306639303,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728306639304,"stop":1728306639305,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728306639304,"stop":1728306639304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728306639305,"stop":1728306639757,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728306639757,"stop":1728306640667,"duration":910},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728306640668,"stop":1728306666170,"duration":25502},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728306666171,"stop":1728306667248,"duration":1077},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9bc28350>\ndevice = <golioth.golioth.Device object at 0xffff9bc2b390>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff9bd91650>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"88be071a695ae14c","name":"log","source":"88be071a695ae14c.txt","type":"text/plain","size":16359}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728306782082,"stop":1728306782411,"duration":329},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728306782413,"stop":1728306782807,"duration":394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728306782809,"stop":1728306782811,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728306782816,"stop":1728306782816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"20b7c607b0d2"},{"name":"thread","value":"815-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e19891d00736b86b","status":"passed","time":{"start":1728130687258,"stop":1728130719961,"duration":32703}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":12,"skipped":0,"passed":79,"unknown":0,"total":98},"items":[{"uid":"5245216cfa8891f0","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/5245216cfa8891f0","status":"passed","time":{"start":1728264565059,"stop":1728264604254,"duration":39195}},{"uid":"de021b4f7f04b4eb","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/de021b4f7f04b4eb","status":"passed","time":{"start":1728178477185,"stop":1728178505379,"duration":28194}},{"uid":"e3a69b48c9d09805","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/e3a69b48c9d09805","status":"passed","time":{"start":1728135505203,"stop":1728135533615,"duration":28412}},{"uid":"62c236a86f86296a","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/62c236a86f86296a","status":"passed","time":{"start":1728134785056,"stop":1728134819122,"duration":34066}},{"uid":"977502bf55bd24c1","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/977502bf55bd24c1","status":"passed","time":{"start":1728130687258,"stop":1728130719961,"duration":32703}},{"uid":"95c22428fc7c4ff2","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/95c22428fc7c4ff2","status":"passed","time":{"start":1728128691212,"stop":1728128722791,"duration":31579}},{"uid":"98d39d8f6ec968e2","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/98d39d8f6ec968e2","status":"passed","time":{"start":1728053138896,"stop":1728053169509,"duration":30613}},{"uid":"a02eea0bc6955eab","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/a02eea0bc6955eab","status":"passed","time":{"start":1728121168649,"stop":1728121199074,"duration":30425}},{"uid":"11faf6e4369c395d","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/11faf6e4369c395d","status":"passed","time":{"start":1728091186555,"stop":1728091219960,"duration":33405}},{"uid":"db0b0f474001a507","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/db0b0f474001a507","status":"passed","time":{"start":1728083759440,"stop":1728083808785,"duration":49345}},{"uid":"e986dcf2f4c68429","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/e986dcf2f4c68429","status":"passed","time":{"start":1728076594814,"stop":1728076624631,"duration":29817}},{"uid":"6a1bd5478e59c140","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/6a1bd5478e59c140","status":"passed","time":{"start":1728073965820,"stop":1728073994433,"duration":28613}},{"uid":"b148f15e79a728ea","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/b148f15e79a728ea","status":"passed","time":{"start":1728071100831,"stop":1728071132821,"duration":31990}},{"uid":"1f55780a2e74c78b","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/1f55780a2e74c78b","status":"passed","time":{"start":1728053138896,"stop":1728053169509,"duration":30613}},{"uid":"d6c4a9df53ccfef1","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/d6c4a9df53ccfef1","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 2 == 3","time":{"start":1728064876604,"stop":1728064912625,"duration":36021}},{"uid":"8f833d8fd56c06cf","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/8f833d8fd56c06cf","status":"passed","time":{"start":1728066924045,"stop":1728066956246,"duration":32201}},{"uid":"ae2a5128851390f","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/ae2a5128851390f","status":"passed","time":{"start":1728034376353,"stop":1728034428105,"duration":51752}},{"uid":"d10c679e68b6d189","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/d10c679e68b6d189","status":"passed","time":{"start":1728056604768,"stop":1728056652060,"duration":47292}},{"uid":"87920485dc35dd51","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/87920485dc35dd51","status":"passed","time":{"start":1728052145964,"stop":1728052187364,"duration":41400}},{"uid":"e158861c584d13f6","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/e158861c584d13f6","status":"passed","time":{"start":1728037724596,"stop":1728037756346,"duration":31750}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"96e2ad73f97f6d2a.json","parameterValues":["'nrf9160dk'","'zephyr'"]}