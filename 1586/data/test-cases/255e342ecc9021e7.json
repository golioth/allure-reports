{"uid":"255e342ecc9021e7","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1728306815238,"stop":1728306928010,"duration":112772},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb58d97d0>\ndevice = <golioth.golioth.Device object at 0xffffb58d8650>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728306786520,"stop":1728306786520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728306786521,"stop":1728306786521,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728306786521,"stop":1728306786521,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728306786522,"stop":1728306786522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728306786522,"stop":1728306786522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728306786523,"stop":1728306786525,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728306786526,"stop":1728306786526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728306786526,"stop":1728306786526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728306786527,"stop":1728306786945,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728306786946,"stop":1728306787797,"duration":851},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728306787798,"stop":1728306814113,"duration":26315},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728306814114,"stop":1728306815231,"duration":1117},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb58d97d0>\ndevice = <golioth.golioth.Device object at 0xffffb58d8650>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"72df8e7e64d9ac4a","name":"log","source":"72df8e7e64d9ac4a.txt","type":"text/plain","size":14174}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728306928329,"stop":1728306928471,"duration":142},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728306928473,"stop":1728306928855,"duration":382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728306928857,"stop":1728306928860,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728306928865,"stop":1728306928865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"20b7c607b0d2"},{"name":"thread","value":"863-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3c966953bee35123","status":"passed","time":{"start":1728130872247,"stop":1728130894910,"duration":22663}},{"uid":"93e04e5ad29d5cea","status":"passed","time":{"start":1728130816622,"stop":1728130838235,"duration":21613}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":11,"skipped":0,"passed":85,"unknown":0,"total":97},"items":[{"uid":"a4ee57b9c9f33cdf","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/a4ee57b9c9f33cdf","status":"passed","time":{"start":1728264765762,"stop":1728264793284,"duration":27522}},{"uid":"4a9271a28ed6f91d","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/4a9271a28ed6f91d","status":"passed","time":{"start":1728178665466,"stop":1728178688372,"duration":22906}},{"uid":"9eb0269bc1c5be36","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/9eb0269bc1c5be36","status":"passed","time":{"start":1728135688809,"stop":1728135715357,"duration":26548}},{"uid":"f8f0244a28ecc110","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/f8f0244a28ecc110","status":"passed","time":{"start":1728134855268,"stop":1728134877518,"duration":22250}},{"uid":"37bcf99cd2dd859c","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/37bcf99cd2dd859c","status":"passed","time":{"start":1728130872247,"stop":1728130894910,"duration":22663}},{"uid":"633432f6211961a","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/633432f6211961a","status":"passed","time":{"start":1728128878117,"stop":1728128900779,"duration":22662}},{"uid":"b3c86508576d2ad2","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/b3c86508576d2ad2","status":"passed","time":{"start":1728053323561,"stop":1728053348812,"duration":25251}},{"uid":"e699542941269a85","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/e699542941269a85","status":"passed","time":{"start":1728121353793,"stop":1728121379442,"duration":25649}},{"uid":"5b5dc8e8072f90e6","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/5b5dc8e8072f90e6","status":"passed","time":{"start":1728091375373,"stop":1728091398570,"duration":23197}},{"uid":"cacf57fb8dac76b8","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/cacf57fb8dac76b8","status":"passed","time":{"start":1728084055305,"stop":1728084099791,"duration":44486}},{"uid":"c3d15c0e17bba34c","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/c3d15c0e17bba34c","status":"passed","time":{"start":1728076779481,"stop":1728076802815,"duration":23334}},{"uid":"381ea5a0a775bb13","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/381ea5a0a775bb13","status":"passed","time":{"start":1728074148492,"stop":1728074172100,"duration":23608}},{"uid":"bd2825d367aca741","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/bd2825d367aca741","status":"passed","time":{"start":1728071224224,"stop":1728071246986,"duration":22762}},{"uid":"5e70daa452c0c1e","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/5e70daa452c0c1e","status":"passed","time":{"start":1728053323561,"stop":1728053348812,"duration":25251}},{"uid":"c45caa1bca22b75f","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/c45caa1bca22b75f","status":"passed","time":{"start":1728065070080,"stop":1728065093346,"duration":23266}},{"uid":"9c51441788627117","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/9c51441788627117","status":"passed","time":{"start":1728067112329,"stop":1728067137286,"duration":24957}},{"uid":"70275962fd34c040","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/70275962fd34c040","status":"passed","time":{"start":1728034626027,"stop":1728034669472,"duration":43445}},{"uid":"1cd38c46107972db","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/1cd38c46107972db","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728056374535,"stop":1728056487387,"duration":112852}},{"uid":"bd24500f5c608f08","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/bd24500f5c608f08","status":"passed","time":{"start":1728052271949,"stop":1728052305443,"duration":33494}},{"uid":"848f72ff00ff7776","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/848f72ff00ff7776","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728037939415,"stop":1728038052210,"duration":112795}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"255e342ecc9021e7.json","parameterValues":["'nrf9160dk'","'zephyr'"]}