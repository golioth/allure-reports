{"uid":"f18b5773f721a07","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1727964464907,"stop":1727964490190,"duration":25283},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9e557690>\nproject = <golioth.golioth.Project object at 0xffff9e6ead90>\ndevice = <golioth.golioth.Device object at 0xffff9e575b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727964445857,"stop":1727964445857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727964445857,"stop":1727964445857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727964445858,"stop":1727964445858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727964445858,"stop":1727964445858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727964445859,"stop":1727964445859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727964445859,"stop":1727964445860,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727964445861,"stop":1727964445861,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727964445861,"stop":1727964445863,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727964445864,"stop":1727964446278,"duration":414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727964446279,"stop":1727964447176,"duration":897},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727964447177,"stop":1727964464007,"duration":16830},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727964464007,"stop":1727964464904,"duration":897},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9e557690>\nproject = <golioth.golioth.Project object at 0xffff9e6ead90>\ndevice = <golioth.golioth.Device object at 0xffff9e575b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"94dcd862723f68b7","name":"log","source":"94dcd862723f68b7.txt","type":"text/plain","size":19429}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727964490587,"stop":1727964490599,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727964490600,"stop":1727964490990,"duration":390},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727964490992,"stop":1727964490994,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727964490996,"stop":1727964490996,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d2350d1cac67"},{"name":"thread","value":"446-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":64,"unknown":0,"total":70},"items":[{"uid":"9076b463eb11ea00","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/9076b463eb11ea00","status":"passed","time":{"start":1727957998352,"stop":1727958011309,"duration":12957}},{"uid":"9ffb4894df9d05ed","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/9ffb4894df9d05ed","status":"passed","time":{"start":1727956918434,"stop":1727956932467,"duration":14033}},{"uid":"15748f0eededb7a","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/15748f0eededb7a","status":"passed","time":{"start":1727956377688,"stop":1727956392938,"duration":15250}},{"uid":"5ccc8f8eb4ed3a9b","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/5ccc8f8eb4ed3a9b","status":"passed","time":{"start":1727952281825,"stop":1727952294088,"duration":12263}},{"uid":"fae03ca96d525d8b","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/fae03ca96d525d8b","status":"passed","time":{"start":1727950521406,"stop":1727950532474,"duration":11068}},{"uid":"268375abdb4e4c79","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/268375abdb4e4c79","status":"passed","time":{"start":1727948281331,"stop":1727948293409,"duration":12078}},{"uid":"7710a70c43128dad","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/7710a70c43128dad","status":"passed","time":{"start":1727948427853,"stop":1727948438612,"duration":10759}},{"uid":"829fae85e2febd35","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/829fae85e2febd35","status":"passed","time":{"start":1727946473505,"stop":1727946484233,"duration":10728}},{"uid":"d2870181bd278747","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/d2870181bd278747","status":"passed","time":{"start":1727933049037,"stop":1727933058346,"duration":9309}},{"uid":"82034aeeceeebdc1","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/82034aeeceeebdc1","status":"passed","time":{"start":1727928114972,"stop":1727928127434,"duration":12462}},{"uid":"2eb0be61b39fcb2f","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/2eb0be61b39fcb2f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727917681742,"stop":1727917776190,"duration":94448}},{"uid":"58ac572bd137c04f","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/58ac572bd137c04f","status":"passed","time":{"start":1727908837921,"stop":1727908850941,"duration":13020}},{"uid":"cd9a0418cdcf10f3","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/cd9a0418cdcf10f3","status":"passed","time":{"start":1727833556845,"stop":1727833568724,"duration":11879}},{"uid":"d780572342c7e2d4","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/d780572342c7e2d4","status":"passed","time":{"start":1727830792472,"stop":1727830806789,"duration":14317}},{"uid":"97574b40c8ceebe","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/97574b40c8ceebe","status":"passed","time":{"start":1727816521024,"stop":1727816531048,"duration":10024}},{"uid":"893443e0c48c432e","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/893443e0c48c432e","status":"passed","time":{"start":1727816040817,"stop":1727816054008,"duration":13191}},{"uid":"5fdeeb0cd906259c","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/5fdeeb0cd906259c","status":"passed","time":{"start":1727815372154,"stop":1727815381573,"duration":9419}},{"uid":"90cc58f41eab0fa7","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/90cc58f41eab0fa7","status":"passed","time":{"start":1727810468825,"stop":1727810478282,"duration":9457}},{"uid":"1538c027b2610c61","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/1538c027b2610c61","status":"passed","time":{"start":1727807134392,"stop":1727807146632,"duration":12240}},{"uid":"2183544d7dd91482","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/2183544d7dd91482","status":"passed","time":{"start":1727798961432,"stop":1727798972717,"duration":11285}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f18b5773f721a07.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}