{"uid":"b3045be4ed3bdb44","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1727964293785,"stop":1727964316420,"duration":22635},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92bc2510>\ndevice = <golioth.golioth.Device object at 0xffff92be1e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727964274684,"stop":1727964274685,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727964274685,"stop":1727964274686,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727964274686,"stop":1727964274686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727964274687,"stop":1727964274687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727964274688,"stop":1727964274688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727964274689,"stop":1727964274691,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727964274692,"stop":1727964274693,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727964274693,"stop":1727964274693,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727964274694,"stop":1727964275321,"duration":627},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727964275322,"stop":1727964276353,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727964276354,"stop":1727964292729,"duration":16375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727964292729,"stop":1727964293782,"duration":1053},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92bc2510>\ndevice = <golioth.golioth.Device object at 0xffff92be1e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f767ecb8fd1b6e30","name":"log","source":"f767ecb8fd1b6e30.txt","type":"text/plain","size":12415}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727964316762,"stop":1727964316770,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727964316772,"stop":1727964317152,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727964317154,"stop":1727964317157,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727964317161,"stop":1727964317162,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d2350d1cac67"},{"name":"thread","value":"372-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":22,"skipped":0,"passed":48,"unknown":0,"total":70},"items":[{"uid":"ef9341217b4e0034","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/ef9341217b4e0034","status":"passed","time":{"start":1727957843971,"stop":1727957864480,"duration":20509}},{"uid":"8fbae4ab398c66f4","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/8fbae4ab398c66f4","status":"passed","time":{"start":1727956768893,"stop":1727956786370,"duration":17477}},{"uid":"5815e778ead50b64","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/5815e778ead50b64","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727956126048,"stop":1727956148674,"duration":22626}},{"uid":"fa4f00d801ee15cf","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/fa4f00d801ee15cf","status":"passed","time":{"start":1727952132977,"stop":1727952149368,"duration":16391}},{"uid":"1ddc3a688eeb3b5","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/1ddc3a688eeb3b5","status":"passed","time":{"start":1727950363278,"stop":1727950387831,"duration":24553}},{"uid":"59ac50571b7a75ae","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/59ac50571b7a75ae","status":"passed","time":{"start":1727948124744,"stop":1727948149320,"duration":24576}},{"uid":"589b98d912622df7","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/589b98d912622df7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727948266325,"stop":1727948288962,"duration":22637}},{"uid":"2700e88c55cd4a5d","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2700e88c55cd4a5d","status":"passed","time":{"start":1727946313410,"stop":1727946334021,"duration":20611}},{"uid":"9469252d4b232fd1","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/9469252d4b232fd1","status":"passed","time":{"start":1727932890358,"stop":1727932913240,"duration":22882}},{"uid":"baed6542a8fe8b5c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/baed6542a8fe8b5c","status":"passed","time":{"start":1727927950636,"stop":1727927967032,"duration":16396}},{"uid":"8e2bbda9af4f5a63","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/8e2bbda9af4f5a63","status":"passed","time":{"start":1727917523780,"stop":1727917544992,"duration":21212}},{"uid":"8094398f87fce591","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/8094398f87fce591","status":"passed","time":{"start":1727908670277,"stop":1727908690878,"duration":20601}},{"uid":"f709b55ea5706a07","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f709b55ea5706a07","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727833315982,"stop":1727833338604,"duration":22622}},{"uid":"f04500b16e2385ff","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/f04500b16e2385ff","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727830633260,"stop":1727830655894,"duration":22634}},{"uid":"87e276537f947796","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/87e276537f947796","status":"passed","time":{"start":1727816359664,"stop":1727816381124,"duration":21460}},{"uid":"3d1be2e2002f16d","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/3d1be2e2002f16d","status":"passed","time":{"start":1727815879649,"stop":1727815902555,"duration":22906}},{"uid":"70d847a1a8b3aca6","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/70d847a1a8b3aca6","status":"passed","time":{"start":1727815219645,"stop":1727815241515,"duration":21870}},{"uid":"211f95c4a095024e","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/211f95c4a095024e","status":"passed","time":{"start":1727810318661,"stop":1727810335245,"duration":16584}},{"uid":"fa7bef675fca1943","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/fa7bef675fca1943","status":"passed","time":{"start":1727806979907,"stop":1727806997427,"duration":17520}},{"uid":"80c7c8a819d94fa5","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/80c7c8a819d94fa5","status":"passed","time":{"start":1727798807268,"stop":1727798828812,"duration":21544}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b3045be4ed3bdb44.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}