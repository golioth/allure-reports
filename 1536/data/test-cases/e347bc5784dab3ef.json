{"uid":"e347bc5784dab3ef","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"d8e686a250b0b2521ef0135246e5fe06","time":{"start":1727961638915,"stop":1727961734018,"duration":95103},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92af2590>\nproject = <golioth.golioth.Project object at 0xffff92c730d0>\ndevice_name = 'certificate-QveMhifIbwJmeeoT'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_001050273096-if00,baud=115200']\ncertificate_cred = '66fe9a082860a8ee0e302877', wifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727961607654,"stop":1727961607654,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727961607655,"stop":1727961607655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727961607655,"stop":1727961607655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727961607656,"stop":1727961607656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727961607656,"stop":1727961607657,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727961607657,"stop":1727961607659,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727961607657,"stop":1727961607657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727961607660,"stop":1727961608401,"duration":741},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727961608402,"stop":1727961608403,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1727961608403,"stop":1727961608902,"duration":499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727961608902,"stop":1727961635498,"duration":26596},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727961635499,"stop":1727961638906,"duration":3407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1727961638907,"stop":1727961638908,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92af2590>\nproject = <golioth.golioth.Project object at 0xffff92c730d0>\ndevice_name = 'certificate-QveMhifIbwJmeeoT'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_001050273096-if00,baud=115200']\ncertificate_cred = '66fe9a082860a8ee0e302877', wifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"baa262e6358cb0c1","name":"log","source":"baa262e6358cb0c1.txt","type":"text/plain","size":15588}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727961734325,"stop":1727961734492,"duration":167},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1727961734494,"stop":1727961734915,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1727961734917,"stop":1727961735385,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727961735387,"stop":1727961735389,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727961735391,"stop":1727961735391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"6180c7b80097"},{"name":"thread","value":"846-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":64,"skipped":0,"passed":6,"unknown":0,"total":70},"items":[{"uid":"49437d5f0cecf68f","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/49437d5f0cecf68f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727957112791,"stop":1727957207964,"duration":95173}},{"uid":"fc8f8afb129e3f42","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/fc8f8afb129e3f42","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727955415200,"stop":1727955510361,"duration":95161}},{"uid":"4ee4eaeeb5f1ac77","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/4ee4eaeeb5f1ac77","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727953566401,"stop":1727953661809,"duration":95408}},{"uid":"a415f7c9fb16fdd8","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/a415f7c9fb16fdd8","status":"passed","time":{"start":1727951660565,"stop":1727951701540,"duration":40975}},{"uid":"b67dadfca321a4c7","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b67dadfca321a4c7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727949844324,"stop":1727949939430,"duration":95106}},{"uid":"c7d4b28a99fada2b","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/c7d4b28a99fada2b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727947371771,"stop":1727947467249,"duration":95478}},{"uid":"e8401e9f7f8ccc1d","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/e8401e9f7f8ccc1d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727946778287,"stop":1727946873757,"duration":95470}},{"uid":"216e9c561f8e4a86","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/216e9c561f8e4a86","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727942574180,"stop":1727942669587,"duration":95407}},{"uid":"91ec13b0f1d9b4d7","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/91ec13b0f1d9b4d7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727932667784,"stop":1727932762900,"duration":95116}},{"uid":"b53f01e1c956fea0","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b53f01e1c956fea0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727927692604,"stop":1727927787648,"duration":95044}},{"uid":"3616d65b777321e5","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/3616d65b777321e5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727917396932,"stop":1727917492383,"duration":95451}},{"uid":"b50dc18fff5acb64","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/b50dc18fff5acb64","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727908811017,"stop":1727908906449,"duration":95432}},{"uid":"f7c3c1d48fe8f936","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f7c3c1d48fe8f936","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727833599841,"stop":1727833694940,"duration":95099}},{"uid":"ad2f0ebf4ee2d85c","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/ad2f0ebf4ee2d85c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727830382253,"stop":1727830477402,"duration":95149}},{"uid":"112408e07c5a09a3","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/112408e07c5a09a3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727812709860,"stop":1727812804988,"duration":95128}},{"uid":"6ce1d01195e644ff","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/6ce1d01195e644ff","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727813772977,"stop":1727813868120,"duration":95143}},{"uid":"291c7ceea95115be","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/291c7ceea95115be","status":"passed","time":{"start":1727797907111,"stop":1727797948016,"duration":40905}},{"uid":"1ed3482d2db89702","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/1ed3482d2db89702","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727808990295,"stop":1727809085409,"duration":95114}},{"uid":"e2283b908738cf4a","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/e2283b908738cf4a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727807118316,"stop":1727807213484,"duration":95168}},{"uid":"d7ca34cdc6a47c80","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/d7ca34cdc6a47c80","status":"passed","time":{"start":1727797907111,"stop":1727797948016,"duration":40905}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e347bc5784dab3ef.json","parameterValues":["'nrf52840dk'","'zephyr'"]}