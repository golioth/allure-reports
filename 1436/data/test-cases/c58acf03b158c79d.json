{"uid":"c58acf03b158c79d","name":"test_cancel_all","fullName":"tests.hil.tests.settings.test_settings#test_cancel_all","historyId":"8de308f2572101a59ba29cdfe7585b27","time":{"start":1727458680315,"stop":1727458723809,"duration":43494},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 156285.83039012543\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <nrf9160dk.nRF9160DK object at 0xffff8dbfb190>\ndevice = <golioth.golioth.Device object at 0xffff8daaf110>\n\n    async def test_cancel_all(board, device):\n        # Cancel all settings\n        await device.settings.set('TEST_CANCEL', True)\n    \n        assert None != await board.wait_for_regex_in_line('Cancelling settings', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Settings have been cancelled', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_INT', 1337)\n    \n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_int', timeout_s=10)\n    \n        # Reset to expected value so we don't re-trigger test on settings registration\n        await device.settings.set('TEST_CANCEL', False)\n    \n        # Wait for device to automatically re-register all settings\n        assert None != await board.wait_for_regex_in_line('Settings have been reregistered', timeout_s=10)\n    \n        await device.settings.set('TEST_INT', 72)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 72', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 156285.83039012543\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727458503070,"stop":1727458503070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727458503071,"stop":1727458503071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727458503072,"stop":1727458503072,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727458503073,"stop":1727458503073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727458503073,"stop":1727458503073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727458503074,"stop":1727458503074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727458503075,"stop":1727458503075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727458503075,"stop":1727458503075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727458503076,"stop":1727458503076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727458503076,"stop":1727458503076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727458503077,"stop":1727458503077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727458503077,"stop":1727458503077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727458503078,"stop":1727458503765,"duration":687},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727458503765,"stop":1727458518506,"duration":14741},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727458518508,"stop":1727458520918,"duration":2410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727458520919,"stop":1727458544910,"duration":23991},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 156285.83039012543\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <nrf9160dk.nRF9160DK object at 0xffff8dbfb190>\ndevice = <golioth.golioth.Device object at 0xffff8daaf110>\n\n    async def test_cancel_all(board, device):\n        # Cancel all settings\n        await device.settings.set('TEST_CANCEL', True)\n    \n        assert None != await board.wait_for_regex_in_line('Cancelling settings', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Settings have been cancelled', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_INT', 1337)\n    \n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_int', timeout_s=10)\n    \n        # Reset to expected value so we don't re-trigger test on settings registration\n        await device.settings.set('TEST_CANCEL', False)\n    \n        # Wait for device to automatically re-register all settings\n        assert None != await board.wait_for_regex_in_line('Settings have been reregistered', timeout_s=10)\n    \n        await device.settings.set('TEST_INT', 72)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 72', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 156285.83039012543\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"880eb306f73eef1f","name":"stdout","source":"880eb306f73eef1f.txt","type":"text/plain","size":7605}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727458774468,"stop":1727458774468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727458774470,"stop":1727458775151,"duration":681},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727458775154,"stop":1727458775166,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727458775168,"stop":1727458775170,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"112586bfa715"},{"name":"thread","value":"320-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1a0ab44a8bcd47ea","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727364944836,"stop":1727364944836,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":18,"unknown":0,"total":26},"items":[{"uid":"d1615880188aee40","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/d1615880188aee40","status":"passed","time":{"start":1727455769505,"stop":1727455804868,"duration":35363}},{"uid":"fcf0cd96879ec700","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/fcf0cd96879ec700","status":"passed","time":{"start":1727457273010,"stop":1727457310053,"duration":37043}},{"uid":"6647b0f4d517c93b","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/6647b0f4d517c93b","status":"passed","time":{"start":1727454248842,"stop":1727454286718,"duration":37876}},{"uid":"51edc809c396d68a","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/51edc809c396d68a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727399231498,"stop":1727399231498,"duration":0}},{"uid":"fda67436ae1ce843","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/fda67436ae1ce843","status":"passed","time":{"start":1727394163229,"stop":1727394195870,"duration":32641}},{"uid":"7ca4b6ea5ad0b82d","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/7ca4b6ea5ad0b82d","status":"passed","time":{"start":1727389607162,"stop":1727389639670,"duration":32508}},{"uid":"148c89bb2f814008","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/148c89bb2f814008","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727389930582,"stop":1727389930582,"duration":0}},{"uid":"8810f0ae93aa3c4f","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/8810f0ae93aa3c4f","status":"passed","time":{"start":1727386000816,"stop":1727386033896,"duration":33080}},{"uid":"c3abffe7f39ceb2d","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/c3abffe7f39ceb2d","status":"passed","time":{"start":1727382594828,"stop":1727382628067,"duration":33239}},{"uid":"e72be82f8362351b","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/e72be82f8362351b","status":"passed","time":{"start":1727380240748,"stop":1727380272393,"duration":31645}},{"uid":"dd4c0860a116fd5f","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/dd4c0860a116fd5f","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727376324013,"stop":1727376324013,"duration":0}},{"uid":"28635778d25002cc","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/28635778d25002cc","status":"passed","time":{"start":1727372678271,"stop":1727372712299,"duration":34028}},{"uid":"d0e375fa968e135d","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/d0e375fa968e135d","status":"passed","time":{"start":1727369049457,"stop":1727369083438,"duration":33981}},{"uid":"a45acd9522f4012c","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/a45acd9522f4012c","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727364944836,"stop":1727364944836,"duration":0}},{"uid":"122de936a3dfc15d","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/122de936a3dfc15d","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1727364900931,"stop":1727364900931,"duration":0}},{"uid":"139f48f0473fd38","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/139f48f0473fd38","status":"passed","time":{"start":1727360381438,"stop":1727360416527,"duration":35089}},{"uid":"6f25989942ec5de9","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/6f25989942ec5de9","status":"passed","time":{"start":1727315037423,"stop":1727315071084,"duration":33661}},{"uid":"2dc869dd269ba42e","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/2dc869dd269ba42e","status":"passed","time":{"start":1727311926417,"stop":1727311961148,"duration":34731}},{"uid":"24cf7c3e3027bbd4","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/24cf7c3e3027bbd4","status":"passed","time":{"start":1727307992366,"stop":1727308028000,"duration":35634}},{"uid":"6cbb96af122c3f12","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/6cbb96af122c3f12","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727305698527,"stop":1727305698527,"duration":0}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c58acf03b158c79d.json","parameterValues":["'nrf9160dk'","'zephyr'"]}