{"uid":"cfe32b6b85ee7ab1","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1727460010448,"stop":1727460103877,"duration":93429},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbae51c90>\ndevice = <golioth.golioth.Device object at 0xffffbae70dd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727459992436,"stop":1727459992437,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727459992436,"stop":1727459992436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727459992437,"stop":1727459992437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727459992438,"stop":1727459992438,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727459992438,"stop":1727459992438,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727459992439,"stop":1727459992441,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727459992442,"stop":1727459992442,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727459992442,"stop":1727459992442,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727459992443,"stop":1727459992854,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727459992855,"stop":1727459993718,"duration":863},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727459993719,"stop":1727460009394,"duration":15675},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727460009394,"stop":1727460010445,"duration":1051},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbae51c90>\ndevice = <golioth.golioth.Device object at 0xffffbae70dd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a19075ab985614a4","name":"log","source":"a19075ab985614a4.txt","type":"text/plain","size":19028}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727460104163,"stop":1727460104202,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727460104204,"stop":1727460104580,"duration":376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727460104582,"stop":1727460104584,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727460104590,"stop":1727460104590,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"0f215b322fa9"},{"name":"thread","value":"444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"837c90e770094e1a","status":"passed","time":{"start":1727366437741,"stop":1727366450973,"duration":13232}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":23,"unknown":0,"total":26},"items":[{"uid":"512c928e4c69ba24","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/512c928e4c69ba24","status":"passed","time":{"start":1727459438055,"stop":1727459453816,"duration":15761}},{"uid":"cb1c291e7545462","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/cb1c291e7545462","status":"passed","time":{"start":1727459707445,"stop":1727459721994,"duration":14549}},{"uid":"7a03a57d215b58f2","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/7a03a57d215b58f2","status":"passed","time":{"start":1727459225375,"stop":1727459240718,"duration":15343}},{"uid":"b42fdd547e6fbdfe","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/b42fdd547e6fbdfe","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727399199892,"stop":1727399293692,"duration":93800}},{"uid":"bfeb56ec9f6b1312","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/bfeb56ec9f6b1312","status":"passed","time":{"start":1727394937805,"stop":1727394953026,"duration":15221}},{"uid":"fdb4f9a79f0bea94","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/fdb4f9a79f0bea94","status":"passed","time":{"start":1727391093872,"stop":1727391109089,"duration":15217}},{"uid":"d85a85effa3ae724","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/d85a85effa3ae724","status":"passed","time":{"start":1727391463064,"stop":1727391475238,"duration":12174}},{"uid":"c6bb8b83af3cf5c0","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/c6bb8b83af3cf5c0","status":"passed","time":{"start":1727386219862,"stop":1727386237167,"duration":17305}},{"uid":"fbb473a6c117aaf0","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/fbb473a6c117aaf0","status":"passed","time":{"start":1727383330528,"stop":1727383345907,"duration":15379}},{"uid":"d70ca0566a2e1658","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/d70ca0566a2e1658","status":"passed","time":{"start":1727380452988,"stop":1727380469788,"duration":16800}},{"uid":"5f4cd42b0818b624","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/5f4cd42b0818b624","status":"passed","time":{"start":1727378575953,"stop":1727378588110,"duration":12157}},{"uid":"672fffd156e74cb6","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/672fffd156e74cb6","status":"passed","time":{"start":1727372957865,"stop":1727372975176,"duration":17311}},{"uid":"e4e942c7308ecf3b","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/e4e942c7308ecf3b","status":"passed","time":{"start":1727369880528,"stop":1727369892923,"duration":12395}},{"uid":"b8d46e201121cd73","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b8d46e201121cd73","status":"passed","time":{"start":1727366437741,"stop":1727366450973,"duration":13232}},{"uid":"cdfbbeb61c6f00b1","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/cdfbbeb61c6f00b1","status":"passed","time":{"start":1727366567855,"stop":1727366584349,"duration":16494}},{"uid":"88306fb641faeb4b","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/88306fb641faeb4b","status":"passed","time":{"start":1727360971973,"stop":1727360987992,"duration":16019}},{"uid":"af50164f3f382605","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/af50164f3f382605","status":"passed","time":{"start":1727315155175,"stop":1727315169731,"duration":14556}},{"uid":"b581dba9c588da35","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/b581dba9c588da35","status":"passed","time":{"start":1727312613607,"stop":1727312629157,"duration":15550}},{"uid":"8af12a97c1d6bd05","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/8af12a97c1d6bd05","status":"passed","time":{"start":1727309049968,"stop":1727309067339,"duration":17371}},{"uid":"424526d306d170af","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/424526d306d170af","status":"passed","time":{"start":1727306018228,"stop":1727306034425,"duration":16197}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"cfe32b6b85ee7ab1.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}