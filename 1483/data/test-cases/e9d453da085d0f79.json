{"uid":"e9d453da085d0f79","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1727766207657,"stop":1727766224468,"duration":16811},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5c42050>\ndevice = <golioth.golioth.Device object at 0xffffb5c58e90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727766169908,"stop":1727766169908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727766169909,"stop":1727766169909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727766169910,"stop":1727766169910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727766169910,"stop":1727766169910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727766169911,"stop":1727766169911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727766169911,"stop":1727766169913,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727766169914,"stop":1727766169914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727766169915,"stop":1727766169915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727766169915,"stop":1727766173421,"duration":3506},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727766173422,"stop":1727766179414,"duration":5992},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727766179414,"stop":1727766206537,"duration":27123},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727766206538,"stop":1727766207652,"duration":1114},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5c42050>\ndevice = <golioth.golioth.Device object at 0xffffb5c58e90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c0c9504e540837f5","name":"log","source":"c0c9504e540837f5.txt","type":"text/plain","size":20830}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727766224773,"stop":1727766224924,"duration":151},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727766224926,"stop":1727766225773,"duration":847},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727766225775,"stop":1727766225777,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727766225782,"stop":1727766225783,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3b73d6530d50"},{"name":"thread","value":"895-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":22,"unknown":0,"total":34},"items":[{"uid":"716b1f3fe406cc38","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/716b1f3fe406cc38","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727746357276,"stop":1727746450734,"duration":93458}},{"uid":"ca2b28103bbd10ae","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/ca2b28103bbd10ae","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727734255834,"stop":1727734289060,"duration":33226}},{"uid":"8d2dfad8b00f90a9","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/8d2dfad8b00f90a9","status":"passed","time":{"start":1727660036906,"stop":1727660065066,"duration":28160}},{"uid":"d3d7db3ac737972a","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/d3d7db3ac737972a","status":"passed","time":{"start":1727572859372,"stop":1727572892618,"duration":33246}},{"uid":"3be83230345db7a9","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/3be83230345db7a9","status":"passed","time":{"start":1727550334327,"stop":1727550365839,"duration":31512}},{"uid":"261d7df6a19da0b8","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/261d7df6a19da0b8","status":"passed","time":{"start":1727549348551,"stop":1727549379287,"duration":30736}},{"uid":"99192f7c0f7c66eb","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/99192f7c0f7c66eb","status":"passed","time":{"start":1727549180754,"stop":1727549228810,"duration":48056}},{"uid":"39406531a29b3766","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/39406531a29b3766","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727486785203,"stop":1727486823623,"duration":38420}},{"uid":"c1e3b608048b35f8","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/c1e3b608048b35f8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727479190142,"stop":1727479283344,"duration":93202}},{"uid":"30fe9b97c77cf223","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/30fe9b97c77cf223","status":"passed","time":{"start":1727463501376,"stop":1727463538179,"duration":36803}},{"uid":"ccdf299166f3052b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ccdf299166f3052b","status":"passed","time":{"start":1727463501376,"stop":1727463538179,"duration":36803}},{"uid":"b7d61b6137efd754","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/b7d61b6137efd754","status":"passed","time":{"start":1727458986475,"stop":1727459035989,"duration":49514}},{"uid":"294777025236c242","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/294777025236c242","status":"passed","time":{"start":1727455319323,"stop":1727455351002,"duration":31679}},{"uid":"8c5910c3bf5a5f2c","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/8c5910c3bf5a5f2c","status":"passed","time":{"start":1727456734946,"stop":1727456768944,"duration":33998}},{"uid":"1431fb6ed85d96cb","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/1431fb6ed85d96cb","status":"passed","time":{"start":1727453863983,"stop":1727453895555,"duration":31572}},{"uid":"603e6fad56e7646c","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/603e6fad56e7646c","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727395637562,"stop":1727395637562,"duration":0}},{"uid":"7286e8d71b6b2739","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/7286e8d71b6b2739","status":"passed","time":{"start":1727393504966,"stop":1727393537142,"duration":32176}},{"uid":"f63ca28a04721806","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/f63ca28a04721806","status":"passed","time":{"start":1727387108236,"stop":1727387141162,"duration":32926}},{"uid":"61a9f88549e3715d","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/61a9f88549e3715d","status":"passed","time":{"start":1727384692844,"stop":1727384724592,"duration":31748}},{"uid":"6e24c63520958eaa","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/6e24c63520958eaa","status":"passed","time":{"start":1727381731956,"stop":1727381767068,"duration":35112}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e9d453da085d0f79.json","parameterValues":["'nrf9160dk'","'zephyr'"]}