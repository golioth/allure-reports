{"uid":"d00dcbb16f5a85f3","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1727765852804,"stop":1727765946055,"duration":93251},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8925f90>\ndevice = <golioth.golioth.Device object at 0xffffa893cdd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727765835079,"stop":1727765835080,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727765835080,"stop":1727765835080,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727765835081,"stop":1727765835082,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727765835081,"stop":1727765835081,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727765835082,"stop":1727765835082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727765835083,"stop":1727765835085,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727765835085,"stop":1727765835086,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727765835086,"stop":1727765835086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727765835087,"stop":1727765835550,"duration":463},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727765835551,"stop":1727765836525,"duration":974},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727765836526,"stop":1727765851861,"duration":15335},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727765851862,"stop":1727765852801,"duration":939},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8925f90>\ndevice = <golioth.golioth.Device object at 0xffffa893cdd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a7a037a6edc4fd","name":"log","source":"a7a037a6edc4fd.txt","type":"text/plain","size":16420}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727765946416,"stop":1727765946598,"duration":182},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727765946600,"stop":1727765947010,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727765947012,"stop":1727765947014,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727765947019,"stop":1727765947019,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"eef22c016875"},{"name":"thread","value":"429-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":38,"unknown":0,"total":39},"items":[{"uid":"8fb38f37474f6c5e","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/8fb38f37474f6c5e","status":"passed","time":{"start":1727761108593,"stop":1727761119303,"duration":10710}},{"uid":"f5917b600efe6ede","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/f5917b600efe6ede","status":"passed","time":{"start":1727744546877,"stop":1727744558615,"duration":11738}},{"uid":"7fc2cc6287d48917","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/7fc2cc6287d48917","status":"passed","time":{"start":1727732514052,"stop":1727732523206,"duration":9154}},{"uid":"6bf2734f32ecf303","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/6bf2734f32ecf303","status":"passed","time":{"start":1727658313050,"stop":1727658322769,"duration":9719}},{"uid":"d1f0e79f33ffffe","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/d1f0e79f33ffffe","status":"passed","time":{"start":1727572438422,"stop":1727572445027,"duration":6605}},{"uid":"da1fbc018128d1f0","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/da1fbc018128d1f0","status":"passed","time":{"start":1727547973924,"stop":1727547982501,"duration":8577}},{"uid":"e9ad3f1f43991622","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/e9ad3f1f43991622","status":"passed","time":{"start":1727547140767,"stop":1727547151325,"duration":10558}},{"uid":"3e71bbd917eb5287","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/3e71bbd917eb5287","status":"passed","time":{"start":1727545806098,"stop":1727545815058,"duration":8960}},{"uid":"f563dc22ec0c0235","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/f563dc22ec0c0235","status":"passed","time":{"start":1727485441340,"stop":1727485450397,"duration":9057}},{"uid":"7892c19040ba535e","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/7892c19040ba535e","status":"passed","time":{"start":1727477681762,"stop":1727477692686,"duration":10924}},{"uid":"acd12a443817202f","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/acd12a443817202f","status":"passed","time":{"start":1727463209675,"stop":1727463220341,"duration":10666}},{"uid":"b128c38a3da37a1d","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/b128c38a3da37a1d","status":"passed","time":{"start":1727463209675,"stop":1727463220341,"duration":10666}},{"uid":"62bda22a73dab818","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/62bda22a73dab818","status":"passed","time":{"start":1727459980861,"stop":1727459988596,"duration":7735}},{"uid":"5074fdeeca17471a","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/5074fdeeca17471a","status":"passed","time":{"start":1727459406758,"stop":1727459418402,"duration":11644}},{"uid":"3a93a8eda2d458ed","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/3a93a8eda2d458ed","status":"passed","time":{"start":1727459675940,"stop":1727459685902,"duration":9962}},{"uid":"a67b05b3b9f3176b","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/a67b05b3b9f3176b","status":"passed","time":{"start":1727459197364,"stop":1727459203994,"duration":6630}},{"uid":"3ec475b5c573eb66","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/3ec475b5c573eb66","status":"passed","time":{"start":1727399117340,"stop":1727399178599,"duration":61259}},{"uid":"88250908e4e0c57f","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/88250908e4e0c57f","status":"passed","time":{"start":1727394906671,"stop":1727394916301,"duration":9630}},{"uid":"aa9661143698ac60","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/aa9661143698ac60","status":"passed","time":{"start":1727391065137,"stop":1727391071748,"duration":6611}},{"uid":"820712ac952d0905","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/820712ac952d0905","status":"passed","time":{"start":1727391434532,"stop":1727391443248,"duration":8716}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d00dcbb16f5a85f3.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}