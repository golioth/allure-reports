{"uid":"52ef12b654349dd1","name":"test_restart","fullName":"tests.hil.tests.settings.test_settings#test_restart","historyId":"4f8434923d992d91d812f32452b194f1","time":{"start":1727762280812,"stop":1727762330568,"duration":49756},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 223066.68477674603\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <nrf52840dk.nRF52840DK object at 0xffffab88bc50>\ndevice = <golioth.golioth.Device object at 0xffffab882190>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n        assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Ending session', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_RESTART', False)\n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_restart: false', timeout_s=5)\n    \n        # Wait for client to restart\n        assert None != await board.wait_for_regex_in_line('Client restarted', timeout_s=60)\n    \n        # Wait for rush of initial settings log messages to pass\n        await trio.sleep(2)\n    \n        await device.settings.set('TEST_INT', 2320)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 2320', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 223066.68477674603\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727762076863,"stop":1727762076863,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727762076864,"stop":1727762076864,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727762076865,"stop":1727762076865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727762076866,"stop":1727762076866,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727762076866,"stop":1727762076867,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727762076867,"stop":1727762076867,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727762076868,"stop":1727762076869,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727762076868,"stop":1727762076868,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727762076869,"stop":1727762076869,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727762076870,"stop":1727762076870,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727762076870,"stop":1727762076871,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727762076870,"stop":1727762076870,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727762076871,"stop":1727762077366,"duration":495},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727762077367,"stop":1727762090178,"duration":12811},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727762090180,"stop":1727762091607,"duration":1427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727762091607,"stop":1727762113989,"duration":22382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 223066.68477674603\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <nrf52840dk.nRF52840DK object at 0xffffab88bc50>\ndevice = <golioth.golioth.Device object at 0xffffab882190>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n        assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Ending session', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_RESTART', False)\n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_restart: false', timeout_s=5)\n    \n        # Wait for client to restart\n        assert None != await board.wait_for_regex_in_line('Client restarted', timeout_s=60)\n    \n        # Wait for rush of initial settings log messages to pass\n        await trio.sleep(2)\n    \n        await device.settings.set('TEST_INT', 2320)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 2320', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 223066.68477674603\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"8df89a693104d792","name":"stdout","source":"8df89a693104d792.txt","type":"text/plain","size":7433}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727762331080,"stop":1727762331081,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727762331083,"stop":1727762331533,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727762331535,"stop":1727762331558,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727762331560,"stop":1727762331562,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"c24b18075811"},{"name":"thread","value":"320-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":34,"unknown":0,"total":38},"items":[{"uid":"47f052c73307037d","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/47f052c73307037d","status":"passed","time":{"start":1727759383845,"stop":1727759414757,"duration":30912}},{"uid":"276af6c60c10af77","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/276af6c60c10af77","status":"passed","time":{"start":1727743273356,"stop":1727743304853,"duration":31497}},{"uid":"316e47c799cef3b2","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/316e47c799cef3b2","status":"passed","time":{"start":1727730731359,"stop":1727730764288,"duration":32929}},{"uid":"703137e8bbb2f6d7","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/703137e8bbb2f6d7","status":"passed","time":{"start":1727656748175,"stop":1727656782758,"duration":34583}},{"uid":"6abe405673ff0b85","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/6abe405673ff0b85","status":"passed","time":{"start":1727570465617,"stop":1727570497493,"duration":31876}},{"uid":"b7793dd4c94bc205","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/b7793dd4c94bc205","status":"passed","time":{"start":1727545362927,"stop":1727545393435,"duration":30508}},{"uid":"3f98b066bd7ade5","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/3f98b066bd7ade5","status":"passed","time":{"start":1727542867839,"stop":1727542897712,"duration":29873}},{"uid":"40fc3f42a2ac2876","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/40fc3f42a2ac2876","status":"passed","time":{"start":1727541493406,"stop":1727541524740,"duration":31334}},{"uid":"dd71a4b05bc88ead","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/dd71a4b05bc88ead","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1727483744683,"stop":1727483744683,"duration":0}},{"uid":"10983106f28e72c7","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/10983106f28e72c7","status":"passed","time":{"start":1727475850606,"stop":1727475881429,"duration":30823}},{"uid":"d57f9406f55397b0","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d57f9406f55397b0","status":"passed","time":{"start":1727461118927,"stop":1727461151482,"duration":32555}},{"uid":"465235eaf1c7c660","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/465235eaf1c7c660","status":"passed","time":{"start":1727461118927,"stop":1727461151482,"duration":32555}},{"uid":"ecaa2ecb098cc3b4","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/ecaa2ecb098cc3b4","status":"passed","time":{"start":1727458796685,"stop":1727458826940,"duration":30255}},{"uid":"fccdf5db602991b3","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/fccdf5db602991b3","status":"passed","time":{"start":1727393662852,"stop":1727393693012,"duration":30160}},{"uid":"35f00ba5aaef95cc","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/35f00ba5aaef95cc","status":"passed","time":{"start":1727387590796,"stop":1727387621670,"duration":30874}},{"uid":"d2ca762c53d3d602","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/d2ca762c53d3d602","status":"passed","time":{"start":1727363960875,"stop":1727363992393,"duration":31518}},{"uid":"b31e454effb3496","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/b31e454effb3496","status":"passed","time":{"start":1727393662852,"stop":1727393693012,"duration":30160}},{"uid":"438e4a49984d5bf9","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/438e4a49984d5bf9","status":"passed","time":{"start":1727388334011,"stop":1727388365545,"duration":31534}},{"uid":"5eda30614536f12a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/5eda30614536f12a","status":"passed","time":{"start":1727387590796,"stop":1727387621670,"duration":30874}},{"uid":"6571cfc052ee5c4c","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/6571cfc052ee5c4c","status":"passed","time":{"start":1727384450564,"stop":1727384480646,"duration":30082}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"52ef12b654349dd1.json","parameterValues":["'nrf52840dk'","'zephyr'"]}