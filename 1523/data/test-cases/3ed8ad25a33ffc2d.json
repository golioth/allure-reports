{"uid":"3ed8ad25a33ffc2d","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"81df5c8b47896d9914743c5dbee29611","time":{"start":1727830042824,"stop":1727830057855,"duration":15031},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9cfa3850>\nproject = <golioth.golioth.Project object at 0xffff9d136510>\ndevice = <golioth.golioth.Device object at 0xffff9cfc58d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727830015064,"stop":1727830015064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727830015064,"stop":1727830015064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727830015065,"stop":1727830015065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727830015065,"stop":1727830015065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727830015066,"stop":1727830015066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727830015066,"stop":1727830015067,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727830015068,"stop":1727830015070,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727830015068,"stop":1727830015068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727830015071,"stop":1727830015478,"duration":407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727830015479,"stop":1727830016331,"duration":852},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727830016332,"stop":1727830039585,"duration":23253},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727830039586,"stop":1727830042817,"duration":3231},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9cfa3850>\nproject = <golioth.golioth.Project object at 0xffff9d136510>\ndevice = <golioth.golioth.Device object at 0xffff9cfc58d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e182f91789227d66","name":"log","source":"e182f91789227d66.txt","type":"text/plain","size":28387}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727830058126,"stop":1727830058176,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727830058178,"stop":1727830058553,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727830058555,"stop":1727830058557,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727830058559,"stop":1727830058559,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"685e785ae30f"},{"name":"thread","value":"588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":54,"unknown":0,"total":56},"items":[{"uid":"90b91be052ea2578","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/90b91be052ea2578","status":"passed","time":{"start":1727812394604,"stop":1727812405831,"duration":11227}},{"uid":"d4a5f3ba59f5db8d","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/d4a5f3ba59f5db8d","status":"passed","time":{"start":1727813456512,"stop":1727813469338,"duration":12826}},{"uid":"767423a592510364","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/767423a592510364","status":"passed","time":{"start":1727797571732,"stop":1727797584369,"duration":12637}},{"uid":"e60d8e38d699f9d6","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/e60d8e38d699f9d6","status":"passed","time":{"start":1727808679538,"stop":1727808690706,"duration":11168}},{"uid":"575253bbdfe6b278","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/575253bbdfe6b278","status":"passed","time":{"start":1727806807295,"stop":1727806819129,"duration":11834}},{"uid":"68c539aecbf9382c","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/68c539aecbf9382c","status":"passed","time":{"start":1727797571732,"stop":1727797584369,"duration":12637}},{"uid":"be101c4445f072c6","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/be101c4445f072c6","status":"passed","time":{"start":1727796338249,"stop":1727796352104,"duration":13855}},{"uid":"f760328e17f56b91","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/f760328e17f56b91","status":"passed","time":{"start":1727787185132,"stop":1727787197062,"duration":11930}},{"uid":"42e231f28cb0a2b4","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/42e231f28cb0a2b4","status":"passed","time":{"start":1727785268736,"stop":1727785280602,"duration":11866}},{"uid":"fbcf7ec5f99dea43","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/fbcf7ec5f99dea43","status":"passed","time":{"start":1727781182703,"stop":1727781195922,"duration":13219}},{"uid":"87ecf97b0ee7cfd0","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/87ecf97b0ee7cfd0","status":"passed","time":{"start":1727780766189,"stop":1727780778434,"duration":12245}},{"uid":"55eb4916ee27005f","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/55eb4916ee27005f","status":"passed","time":{"start":1727777140216,"stop":1727777151994,"duration":11778}},{"uid":"34edeb07412b91a9","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/34edeb07412b91a9","status":"passed","time":{"start":1727774562420,"stop":1727774578902,"duration":16482}},{"uid":"273f9aa2267f1d2e","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/273f9aa2267f1d2e","status":"passed","time":{"start":1727770749344,"stop":1727770761319,"duration":11975}},{"uid":"76feebc9f8ade03d","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/76feebc9f8ade03d","status":"passed","time":{"start":1727769712373,"stop":1727769728713,"duration":16340}},{"uid":"7863ee418e63ac34","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/7863ee418e63ac34","status":"passed","time":{"start":1727764903395,"stop":1727764917442,"duration":14047}},{"uid":"b3f1c2fc5f151971","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/b3f1c2fc5f151971","status":"passed","time":{"start":1727764255200,"stop":1727764267327,"duration":12127}},{"uid":"d96367c33884c68a","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/d96367c33884c68a","status":"passed","time":{"start":1727760163028,"stop":1727760175758,"duration":12730}},{"uid":"8f17507c95fcbed0","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/8f17507c95fcbed0","status":"passed","time":{"start":1727744425774,"stop":1727744437948,"duration":12174}},{"uid":"5e6a869206f7ccca","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/5e6a869206f7ccca","status":"passed","time":{"start":1727732187161,"stop":1727732198983,"duration":11822}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"3ed8ad25a33ffc2d.json","parameterValues":["'nrf52840dk'","'zephyr'"]}