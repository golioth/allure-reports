{"uid":"17f5b9869e8eecba","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1727829341361,"stop":1727829354636,"duration":13275},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff976ab090>\ndevice = <golioth.golioth.Device object at 0xffff97622bd0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff97622bd0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727829266784,"stop":1727829266785,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727829266785,"stop":1727829266786,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727829266787,"stop":1727829266787,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727829266788,"stop":1727829266788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727829266789,"stop":1727829266789,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727829266790,"stop":1727829266790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727829266791,"stop":1727829266792,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727829266791,"stop":1727829266791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727829266792,"stop":1727829266792,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727829266793,"stop":1727829266793,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727829266793,"stop":1727829266793,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727829266794,"stop":1727829266794,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727829266794,"stop":1727829267186,"duration":392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727829267187,"stop":1727829318639,"duration":51452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727829318641,"stop":1727829319586,"duration":945},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727829319587,"stop":1727829335078,"duration":15491},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff976ab090>\ndevice = <golioth.golioth.Device object at 0xffff97622bd0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff97622bd0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"aa40e77914cd4a7b","name":"stdout","source":"aa40e77914cd4a7b.txt","type":"text/plain","size":4335}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727829498271,"stop":1727829498271,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727829498273,"stop":1727829498759,"duration":486},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727829498761,"stop":1727829498762,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727829498765,"stop":1727829498767,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"8618df0ec9b1"},{"name":"thread","value":"256-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":0,"skipped":0,"passed":34,"unknown":0,"total":53},"items":[{"uid":"2568940566a9ea1c","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/2568940566a9ea1c","status":"passed","time":{"start":1727801789552,"stop":1727801802422,"duration":12870}},{"uid":"feaa5bc70ee2b1b3","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/feaa5bc70ee2b1b3","status":"passed","time":{"start":1727813353939,"stop":1727813366932,"duration":12993}},{"uid":"c666eb30e8da17b7","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/c666eb30e8da17b7","status":"passed","time":{"start":1727795638262,"stop":1727795652452,"duration":14190}},{"uid":"97ce49def3350b8b","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/97ce49def3350b8b","status":"passed","time":{"start":1727809535429,"stop":1727809548894,"duration":13465}},{"uid":"f99e3025c1d84c7b","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/f99e3025c1d84c7b","status":"passed","time":{"start":1727805648180,"stop":1727805663085,"duration":14905}},{"uid":"f1dbcff4c05decd2","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/f1dbcff4c05decd2","status":"passed","time":{"start":1727795638262,"stop":1727795652452,"duration":14190}},{"uid":"41d809a0671a7ea1","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/41d809a0671a7ea1","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727794752113,"stop":1727794768520,"duration":16407}},{"uid":"977ae7c783bf153b","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/977ae7c783bf153b","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727786232159,"stop":1727786245168,"duration":13009}},{"uid":"612b7ff5a187b68f","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/612b7ff5a187b68f","status":"passed","time":{"start":1727782458521,"stop":1727782471992,"duration":13471}},{"uid":"e5df334b86c745a2","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/e5df334b86c745a2","status":"passed","time":{"start":1727780737844,"stop":1727780750757,"duration":12913}},{"uid":"1e9761a49a6cb0fd","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/1e9761a49a6cb0fd","status":"passed","time":{"start":1727778945822,"stop":1727778958688,"duration":12866}},{"uid":"8ea59d7217701b8b","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/8ea59d7217701b8b","status":"passed","time":{"start":1727775460768,"stop":1727775473945,"duration":13177}},{"uid":"86118c7a9f80ab6","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/86118c7a9f80ab6","status":"passed","time":{"start":1727768205036,"stop":1727768219223,"duration":14187}},{"uid":"5beed9d1e59f1360","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/5beed9d1e59f1360","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727767624097,"stop":1727767637239,"duration":13142}},{"uid":"ba7ffa4271c78bf2","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/ba7ffa4271c78bf2","status":"passed","time":{"start":1727762423410,"stop":1727762436757,"duration":13347}},{"uid":"86f046d1c0911d55","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/86f046d1c0911d55","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727743107221,"stop":1727743120134,"duration":12913}},{"uid":"9f07dcde923605d8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/9f07dcde923605d8","status":"passed","time":{"start":1727730759859,"stop":1727730775183,"duration":15324}},{"uid":"61a312aecbcbf89e","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/61a312aecbcbf89e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727656688780,"stop":1727656701939,"duration":13159}},{"uid":"650ed01943a7045e","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/650ed01943a7045e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727570288401,"stop":1727570301274,"duration":12873}},{"uid":"fb30b7d28e9a4675","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/fb30b7d28e9a4675","status":"passed","time":{"start":1727544024501,"stop":1727544037873,"duration":13372}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"17f5b9869e8eecba.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}