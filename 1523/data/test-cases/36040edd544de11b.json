{"uid":"36040edd544de11b","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1727831021777,"stop":1727831134646,"duration":112869},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff967b61d0>\ndevice = <golioth.golioth.Device object at 0xffff96794290>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727831011904,"stop":1727831011905,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727831011905,"stop":1727831011905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727831011906,"stop":1727831011906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727831011906,"stop":1727831011906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727831011907,"stop":1727831011907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727831011907,"stop":1727831011910,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727831011911,"stop":1727831011911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727831011912,"stop":1727831012369,"duration":457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727831011912,"stop":1727831011912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727831012369,"stop":1727831013395,"duration":1026},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727831013396,"stop":1727831021269,"duration":7873},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727831021270,"stop":1727831021774,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff967b61d0>\ndevice = <golioth.golioth.Device object at 0xffff96794290>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"63d45c0930d7e942","name":"log","source":"63d45c0930d7e942.txt","type":"text/plain","size":15221}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727831134913,"stop":1727831135088,"duration":175},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727831135089,"stop":1727831135762,"duration":673},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727831135765,"stop":1727831135767,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727831135772,"stop":1727831135772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"0a91caf975bb"},{"name":"thread","value":"608-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"10f20b72bf8eec21","status":"passed","time":{"start":1727830939391,"stop":1727830963578,"duration":24187}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":50,"unknown":0,"total":56},"items":[{"uid":"dd4c00459d24bac7","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/dd4c00459d24bac7","status":"passed","time":{"start":1727804660079,"stop":1727804679644,"duration":19565}},{"uid":"afc371284129cb4d","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/afc371284129cb4d","status":"passed","time":{"start":1727813512102,"stop":1727813531397,"duration":19295}},{"uid":"ab5954272b7b3d26","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/ab5954272b7b3d26","status":"passed","time":{"start":1727798790502,"stop":1727798814129,"duration":23627}},{"uid":"1ca4faa5a0fdd5ef","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/1ca4faa5a0fdd5ef","status":"passed","time":{"start":1727808236418,"stop":1727808259701,"duration":23283}},{"uid":"7b37ec8d1ffceaa","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/7b37ec8d1ffceaa","status":"passed","time":{"start":1727807393114,"stop":1727807417485,"duration":24371}},{"uid":"78c88bbfb74bcfc4","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/78c88bbfb74bcfc4","status":"passed","time":{"start":1727798790502,"stop":1727798814129,"duration":23627}},{"uid":"a7d9780301091db7","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/a7d9780301091db7","status":"passed","time":{"start":1727797230884,"stop":1727797255393,"duration":24509}},{"uid":"d92713a418835895","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/d92713a418835895","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727787640186,"stop":1727787752951,"duration":112765}},{"uid":"1a48951f5167a262","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/1a48951f5167a262","status":"passed","time":{"start":1727785917755,"stop":1727785938504,"duration":20749}},{"uid":"32a09593c45da339","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/32a09593c45da339","status":"passed","time":{"start":1727775166722,"stop":1727775191095,"duration":24373}},{"uid":"f5fdbf760e19d15e","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/f5fdbf760e19d15e","status":"passed","time":{"start":1727780605470,"stop":1727780625896,"duration":20426}},{"uid":"930aa320eb19b555","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/930aa320eb19b555","status":"passed","time":{"start":1727778050873,"stop":1727778074960,"duration":24087}},{"uid":"885e056aebb9022f","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/885e056aebb9022f","status":"passed","time":{"start":1727775166722,"stop":1727775191095,"duration":24373}},{"uid":"f390703507611ab3","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/f390703507611ab3","status":"passed","time":{"start":1727772072479,"stop":1727772095998,"duration":23519}},{"uid":"3b43784c10ad45c8","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/3b43784c10ad45c8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727770256474,"stop":1727770369178,"duration":112704}},{"uid":"92496f8ea6abcf00","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/92496f8ea6abcf00","status":"passed","time":{"start":1727765480465,"stop":1727765504956,"duration":24491}},{"uid":"6cbad33793c40d71","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/6cbad33793c40d71","status":"passed","time":{"start":1727764404706,"stop":1727764428271,"duration":23565}},{"uid":"5a5bc71cfd5ac24e","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/5a5bc71cfd5ac24e","status":"passed","time":{"start":1727760711822,"stop":1727760735210,"duration":23388}},{"uid":"cac74a4952bda7ac","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/cac74a4952bda7ac","status":"passed","time":{"start":1727744832842,"stop":1727744857447,"duration":24605}},{"uid":"81df6e696c5312bb","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/81df6e696c5312bb","status":"passed","time":{"start":1727732098091,"stop":1727732119953,"duration":21862}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"36040edd544de11b.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}