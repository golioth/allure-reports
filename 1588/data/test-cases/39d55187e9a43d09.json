{"uid":"39d55187e9a43d09","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1728307090112,"stop":1728307183309,"duration":93197},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9f6e5f50>\ndevice = <golioth.golioth.Device object at 0xffff9f6f9290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728307061284,"stop":1728307061285,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728307061284,"stop":1728307061284,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728307061285,"stop":1728307061286,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728307061285,"stop":1728307061285,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728307061286,"stop":1728307061286,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728307061287,"stop":1728307061289,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728307061289,"stop":1728307061290,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728307061290,"stop":1728307061290,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728307061291,"stop":1728307061713,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728307061714,"stop":1728307062520,"duration":806},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728307062521,"stop":1728307089022,"duration":26501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728307089023,"stop":1728307090105,"duration":1082},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9f6e5f50>\ndevice = <golioth.golioth.Device object at 0xffff9f6f9290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7fd0d5829cf4f654","name":"log","source":"7fd0d5829cf4f654.txt","type":"text/plain","size":16348}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728307183597,"stop":1728307183628,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728307183630,"stop":1728307183998,"duration":368},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728307184000,"stop":1728307184002,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728307184007,"stop":1728307184007,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"77b4a5a5ed1b"},{"name":"thread","value":"467-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8afb73d3da12ebe2","status":"passed","time":{"start":1728134154772,"stop":1728134163800,"duration":9028}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":85,"unknown":0,"total":100},"items":[{"uid":"2b9f7a231d6bcf0","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/2b9f7a231d6bcf0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728305674573,"stop":1728305767703,"duration":93130}},{"uid":"654864b18b22aa8c","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/654864b18b22aa8c","status":"passed","time":{"start":1728263767792,"stop":1728263782817,"duration":15025}},{"uid":"1491367f5566e79b","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/1491367f5566e79b","status":"passed","time":{"start":1728177472634,"stop":1728177485215,"duration":12581}},{"uid":"7ad39911f74c1662","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/7ad39911f74c1662","status":"passed","time":{"start":1728134781458,"stop":1728134791580,"duration":10122}},{"uid":"9c443e294067e0f9","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/9c443e294067e0f9","status":"passed","time":{"start":1728134154772,"stop":1728134163800,"duration":9028}},{"uid":"91789584cb880698","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/91789584cb880698","status":"passed","time":{"start":1728130024309,"stop":1728130032413,"duration":8104}},{"uid":"23e2178ab23105f6","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/23e2178ab23105f6","status":"passed","time":{"start":1728128108635,"stop":1728128118122,"duration":9487}},{"uid":"7b3c06ea0c2a42bf","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/7b3c06ea0c2a42bf","status":"passed","time":{"start":1728052462782,"stop":1728052473732,"duration":10950}},{"uid":"a41bf4862629baeb","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/a41bf4862629baeb","status":"passed","time":{"start":1728120547394,"stop":1728120558278,"duration":10884}},{"uid":"dd03ee17ae59d542","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/dd03ee17ae59d542","status":"passed","time":{"start":1728090638634,"stop":1728090647145,"duration":8511}},{"uid":"b42a28ef7fa41fa4","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/b42a28ef7fa41fa4","status":"passed","time":{"start":1728082879549,"stop":1728082909294,"duration":29745}},{"uid":"e47f4a7fd1e18896","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/e47f4a7fd1e18896","status":"passed","time":{"start":1728076013197,"stop":1728076022006,"duration":8809}},{"uid":"3c03b725b8be133e","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/3c03b725b8be133e","status":"passed","time":{"start":1728073311490,"stop":1728073319465,"duration":7975}},{"uid":"ad6d9d6b41e5d139","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/ad6d9d6b41e5d139","status":"passed","time":{"start":1728070498218,"stop":1728070506442,"duration":8224}},{"uid":"9f4d0e79ddd0a603","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/9f4d0e79ddd0a603","status":"passed","time":{"start":1728052462782,"stop":1728052473732,"duration":10950}},{"uid":"89d9364fffae5016","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/89d9364fffae5016","status":"passed","time":{"start":1728064290454,"stop":1728064298921,"duration":8467}},{"uid":"23f0735c975c5486","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/23f0735c975c5486","status":"passed","time":{"start":1728066262395,"stop":1728066270574,"duration":8179}},{"uid":"6fb9f731164ec702","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/6fb9f731164ec702","status":"passed","time":{"start":1728033621207,"stop":1728033649535,"duration":28328}},{"uid":"86d5ed0eb1f7d494","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/86d5ed0eb1f7d494","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728055263288,"stop":1728055356532,"duration":93244}},{"uid":"41bafae5d86fb740","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/41bafae5d86fb740","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728051140526,"stop":1728051233815,"duration":93289}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"39d55187e9a43d09.json","parameterValues":["'nrf9160dk'","'zephyr'"]}