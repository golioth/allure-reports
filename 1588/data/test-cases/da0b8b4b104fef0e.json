{"uid":"da0b8b4b104fef0e","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1728131647992,"stop":1728131670714,"duration":22722},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9f4d050>\ndevice = <golioth.golioth.Device object at 0xffffa9f60390>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728131630994,"stop":1728131630994,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728131630995,"stop":1728131630995,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728131630995,"stop":1728131630995,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728131630996,"stop":1728131630996,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728131630997,"stop":1728131630997,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728131630997,"stop":1728131630999,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728131631000,"stop":1728131631000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728131631000,"stop":1728131631001,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728131631001,"stop":1728131631426,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728131631426,"stop":1728131632262,"duration":836},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728131632263,"stop":1728131647011,"duration":14748},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728131647011,"stop":1728131647989,"duration":978},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9f4d050>\ndevice = <golioth.golioth.Device object at 0xffffa9f60390>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"496d909864436e94","name":"log","source":"496d909864436e94.txt","type":"text/plain","size":13257}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728131671053,"stop":1728131671083,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728131671085,"stop":1728131671455,"duration":370},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728131671457,"stop":1728131671459,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728131671464,"stop":1728131671464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"120a005af83c"},{"name":"thread","value":"427-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":10,"skipped":0,"passed":88,"unknown":0,"total":99},"items":[{"uid":"907523e8a6b0fff4","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/907523e8a6b0fff4","status":"passed","time":{"start":1728127643604,"stop":1728127666580,"duration":22976}},{"uid":"bbcb1ad0efc3353d","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/bbcb1ad0efc3353d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728126991113,"stop":1728127013736,"duration":22623}},{"uid":"2c444915cd4e7d13","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/2c444915cd4e7d13","status":"passed","time":{"start":1728125697852,"stop":1728125718462,"duration":20610}},{"uid":"a08069eb0419e158","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/a08069eb0419e158","status":"passed","time":{"start":1728121834586,"stop":1728121859335,"duration":24749}},{"uid":"872e4f2d5f9c8ba4","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/872e4f2d5f9c8ba4","status":"passed","time":{"start":1728090162054,"stop":1728090185856,"duration":23802}},{"uid":"e693335f8323777f","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/e693335f8323777f","status":"passed","time":{"start":1728082508608,"stop":1728082530664,"duration":22056}},{"uid":"e12221f0e86b4bed","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/e12221f0e86b4bed","status":"passed","time":{"start":1728075369575,"stop":1728075390295,"duration":20720}},{"uid":"c9453f8013c903af","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/c9453f8013c903af","status":"passed","time":{"start":1728072670090,"stop":1728072692182,"duration":22092}},{"uid":"462b55a8a78687c0","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/462b55a8a78687c0","status":"passed","time":{"start":1728070807546,"stop":1728070826150,"duration":18604}},{"uid":"39d0a2ba24e9b92a","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/39d0a2ba24e9b92a","status":"passed","time":{"start":1728070040068,"stop":1728070064874,"duration":24806}},{"uid":"2c887674f23b0b56","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/2c887674f23b0b56","status":"passed","time":{"start":1728070504533,"stop":1728070527006,"duration":22473}},{"uid":"b6b310133059df28","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/b6b310133059df28","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728058640173,"stop":1728058662813,"duration":22640}},{"uid":"c200934d68f74263","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/c200934d68f74263","status":"passed","time":{"start":1728058028994,"stop":1728058052620,"duration":23626}},{"uid":"11f174bab2a01f9f","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/11f174bab2a01f9f","status":"passed","time":{"start":1728050718840,"stop":1728050741136,"duration":22296}},{"uid":"9a3ed5b95ee70c3f","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/9a3ed5b95ee70c3f","status":"passed","time":{"start":1728036612809,"stop":1728036632723,"duration":19914}},{"uid":"db45383dbe8eff96","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/db45383dbe8eff96","status":"passed","time":{"start":1728030747831,"stop":1728030766826,"duration":18995}},{"uid":"bc51bb622973b6a3","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/bc51bb622973b6a3","status":"passed","time":{"start":1728027904100,"stop":1728027926438,"duration":22338}},{"uid":"94e3abeb2d994e78","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/94e3abeb2d994e78","status":"passed","time":{"start":1728024189534,"stop":1728024210951,"duration":21417}},{"uid":"f81c2b4a606a8010","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/f81c2b4a606a8010","status":"passed","time":{"start":1728004067197,"stop":1728004089764,"duration":22567}},{"uid":"52b3e6043131097b","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/52b3e6043131097b","status":"passed","time":{"start":1727994232733,"stop":1727994254664,"duration":21931}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"da0b8b4b104fef0e.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}