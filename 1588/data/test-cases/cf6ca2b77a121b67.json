{"uid":"cf6ca2b77a121b67","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1728134265942,"stop":1728134279820,"duration":13878},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff826638d0>\nproject = <golioth.golioth.Project object at 0xffff8280d3d0>\ndevice = <golioth.golioth.Device object at 0xffff82686250>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728134235389,"stop":1728134235389,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728134235390,"stop":1728134235390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728134235390,"stop":1728134235390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728134235391,"stop":1728134235391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728134235391,"stop":1728134235391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728134235392,"stop":1728134235393,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728134235393,"stop":1728134235394,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728134235394,"stop":1728134235396,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728134235397,"stop":1728134236313,"duration":916},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728134236313,"stop":1728134237344,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728134237345,"stop":1728134264865,"duration":27520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728134264866,"stop":1728134265936,"duration":1070},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff826638d0>\nproject = <golioth.golioth.Project object at 0xffff8280d3d0>\ndevice = <golioth.golioth.Device object at 0xffff82686250>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ba45734b00ccc2cf","name":"log","source":"ba45734b00ccc2cf.txt","type":"text/plain","size":28454}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728134280080,"stop":1728134280129,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728134280131,"stop":1728134280737,"duration":606},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728134280739,"stop":1728134280741,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728134280744,"stop":1728134280744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f43bbb33ca36"},{"name":"thread","value":"554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":26,"skipped":0,"passed":69,"unknown":0,"total":95},"items":[{"uid":"3fbd1a961125ac11","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/3fbd1a961125ac11","status":"passed","time":{"start":1728130195682,"stop":1728130214515,"duration":18833}},{"uid":"7fad4a7b4d45f2f7","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/7fad4a7b4d45f2f7","status":"passed","time":{"start":1728128199159,"stop":1728128216898,"duration":17739}},{"uid":"59bc892689d0378b","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/59bc892689d0378b","status":"passed","time":{"start":1728052555372,"stop":1728052567453,"duration":12081}},{"uid":"8a196ea099198c5c","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/8a196ea099198c5c","status":"passed","time":{"start":1728120640964,"stop":1728120652943,"duration":11979}},{"uid":"4842a44252b911e4","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/4842a44252b911e4","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1728090700452,"stop":1728090700452,"duration":0}},{"uid":"f7859ef891cc9fcc","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/f7859ef891cc9fcc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728083013682,"stop":1728083062093,"duration":48411}},{"uid":"8da775754cc88898","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/8da775754cc88898","status":"passed","time":{"start":1728076104449,"stop":1728076123144,"duration":18695}},{"uid":"d0255af34b050a70","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/d0255af34b050a70","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728073402071,"stop":1728073497727,"duration":95656}},{"uid":"55a0556eb8c728fc","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/55a0556eb8c728fc","status":"passed","time":{"start":1728070589718,"stop":1728070602148,"duration":12430}},{"uid":"9e63028dfa51a06","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/9e63028dfa51a06","status":"passed","time":{"start":1728052555372,"stop":1728052567453,"duration":12081}},{"uid":"9231636385cefd60","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/9231636385cefd60","status":"passed","time":{"start":1728064389132,"stop":1728064406103,"duration":16971}},{"uid":"4d99bdcc0080d3e5","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/4d99bdcc0080d3e5","status":"passed","time":{"start":1728066354939,"stop":1728066375553,"duration":20614}},{"uid":"7bebf3d708d1621f","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/7bebf3d708d1621f","status":"passed","time":{"start":1728033739675,"stop":1728033770306,"duration":30631}},{"uid":"33a3afcbbe0f6ffe","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/33a3afcbbe0f6ffe","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728055458584,"stop":1728055553232,"duration":94648}},{"uid":"2c0173afa6f548af","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/2c0173afa6f548af","status":"passed","time":{"start":1728051394018,"stop":1728051428129,"duration":34111}},{"uid":"6138e6f2862c132d","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/6138e6f2862c132d","status":"passed","time":{"start":1728036840288,"stop":1728036858286,"duration":17998}},{"uid":"9493fbeaadc706ff","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/9493fbeaadc706ff","status":"passed","time":{"start":1728033739675,"stop":1728033770306,"duration":30631}},{"uid":"ff4a260f956139eb","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/ff4a260f956139eb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728029639164,"stop":1728029735369,"duration":96205}},{"uid":"65b1e98861bfbbc9","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/65b1e98861bfbbc9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728024537687,"stop":1728024633436,"duration":95749}},{"uid":"ae2474695b278b76","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/ae2474695b278b76","status":"passed","time":{"start":1728003596264,"stop":1728003614513,"duration":18249}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"cf6ca2b77a121b67.json","parameterValues":["'nrf9160dk'","'zephyr'"]}