{"uid":"3a300be0567ed6f5","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1728571945927,"stop":1728572058616,"duration":112689},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9c373390>\ndevice = <golioth.golioth.Device object at 0xffff9c360fd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728571936265,"stop":1728571936265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728571936266,"stop":1728571936266,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728571936266,"stop":1728571936267,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728571936267,"stop":1728571936267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728571936268,"stop":1728571936270,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728571936268,"stop":1728571936268,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728571936271,"stop":1728571936271,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728571936272,"stop":1728571936272,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728571936272,"stop":1728571936682,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728571936682,"stop":1728571937696,"duration":1014},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728571937697,"stop":1728571945419,"duration":7722},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728571945420,"stop":1728571945924,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9c373390>\ndevice = <golioth.golioth.Device object at 0xffff9c360fd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f840c82f1b9b0d56","name":"log","source":"f840c82f1b9b0d56.txt","type":"text/plain","size":14674}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728572058966,"stop":1728572058975,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728572058977,"stop":1728572059391,"duration":414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728572059393,"stop":1728572059396,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728572059401,"stop":1728572059401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"aec4c80b6330"},{"name":"thread","value":"587-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"41222802d4835fca","status":"passed","time":{"start":1728571907987,"stop":1728571932227,"duration":24240}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":13,"skipped":0,"passed":112,"unknown":0,"total":126},"items":[{"uid":"919cd190248f3ae1","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/919cd190248f3ae1","status":"passed","time":{"start":1728536739491,"stop":1728536764004,"duration":24513}},{"uid":"1d0fe09eff971b34","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/1d0fe09eff971b34","status":"passed","time":{"start":1728522319864,"stop":1728522343026,"duration":23162}},{"uid":"8fe14dfb6b35e73","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/8fe14dfb6b35e73","status":"passed","time":{"start":1728325321394,"stop":1728325344887,"duration":23493}},{"uid":"1046587dda67bbaf","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/1046587dda67bbaf","status":"passed","time":{"start":1728493233659,"stop":1728493258119,"duration":24460}},{"uid":"7acf9a1ab8ae142c","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/7acf9a1ab8ae142c","status":"passed","time":{"start":1728435577026,"stop":1728435601350,"duration":24324}},{"uid":"6459b5deb8d79e3d","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/6459b5deb8d79e3d","status":"passed","time":{"start":1728426276767,"stop":1728426301162,"duration":24395}},{"uid":"b306e1cd3a6f9492","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/b306e1cd3a6f9492","status":"passed","time":{"start":1728342559471,"stop":1728342583198,"duration":23727}},{"uid":"aeb45bfc76220bcb","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/aeb45bfc76220bcb","status":"passed","time":{"start":1728400910373,"stop":1728400934861,"duration":24488}},{"uid":"b58fe2a13641175c","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/b58fe2a13641175c","status":"passed","time":{"start":1728342559471,"stop":1728342583198,"duration":23727}},{"uid":"b1ff3878c1a0d78e","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/b1ff3878c1a0d78e","status":"passed","time":{"start":1728349197399,"stop":1728349221845,"duration":24446}},{"uid":"46b4eb41f730eb4f","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/46b4eb41f730eb4f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728343954054,"stop":1728344066815,"duration":112761}},{"uid":"7d388f47cd7452fe","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/7d388f47cd7452fe","status":"passed","time":{"start":1728342559471,"stop":1728342583198,"duration":23727}},{"uid":"d84b22107a065ef9","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/d84b22107a065ef9","status":"passed","time":{"start":1728337580575,"stop":1728337602300,"duration":21725}},{"uid":"75c3a38e6b69da6e","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/75c3a38e6b69da6e","status":"passed","time":{"start":1728318016628,"stop":1728318040827,"duration":24199}},{"uid":"bf23788911ba7448","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/bf23788911ba7448","status":"passed","time":{"start":1728325321394,"stop":1728325344887,"duration":23493}},{"uid":"e33284d7f0f42ed1","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/e33284d7f0f42ed1","status":"passed","time":{"start":1728322032247,"stop":1728322056540,"duration":24293}},{"uid":"435d57c4925c6f75","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/435d57c4925c6f75","status":"passed","time":{"start":1728318016628,"stop":1728318040827,"duration":24199}},{"uid":"4b22c7d38993994d","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/4b22c7d38993994d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728314691294,"stop":1728314804175,"duration":112881}},{"uid":"5d5d80ef77aa5965","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/5d5d80ef77aa5965","status":"passed","time":{"start":1728306603085,"stop":1728306627391,"duration":24306}},{"uid":"5c191107cdb9a8b9","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/5c191107cdb9a8b9","status":"passed","time":{"start":1728305730041,"stop":1728305750329,"duration":20288}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"3a300be0567ed6f5.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}