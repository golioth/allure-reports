{"uid":"30b968d0b671e6b1","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"b1823a9d92c30d86bb4dda05227594bd","time":{"start":1727731603411,"stop":1727731616924,"duration":13513},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffff972ca450>\ndevice = <golioth.golioth.Device object at 0xffff972c1850>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff972c1850>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727731503353,"stop":1727731503354,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727731503354,"stop":1727731503354,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727731503355,"stop":1727731503355,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727731503356,"stop":1727731503356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727731503357,"stop":1727731503357,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727731503357,"stop":1727731503358,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727731503358,"stop":1727731503358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727731503359,"stop":1727731503359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727731503360,"stop":1727731503360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727731503360,"stop":1727731503360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727731503361,"stop":1727731503361,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727731503362,"stop":1727731503866,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727731503362,"stop":1727731503362,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727731503866,"stop":1727731518679,"duration":14813},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727731518682,"stop":1727731520114,"duration":1432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727731520115,"stop":1727731550685,"duration":30570},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffff972ca450>\ndevice = <golioth.golioth.Device object at 0xffff972c1850>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff972c1850>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"7911ba03e029447b","name":"stdout","source":"7911ba03e029447b.txt","type":"text/plain","size":985}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727731736990,"stop":1727731736991,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727731736996,"stop":1727731737650,"duration":654},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727731737652,"stop":1727731737678,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727731737680,"stop":1727731737683,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"a19816b89a5f"},{"name":"thread","value":"322-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":27,"unknown":0,"total":36},"items":[{"uid":"81f346d7738ac5b6","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/81f346d7738ac5b6","status":"passed","time":{"start":1727658307662,"stop":1727658320469,"duration":12807}},{"uid":"a49c72bb57db6626","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/a49c72bb57db6626","status":"passed","time":{"start":1727571096137,"stop":1727571108963,"duration":12826}},{"uid":"e35fa25eefecef6d","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/e35fa25eefecef6d","status":"passed","time":{"start":1727547969400,"stop":1727547983931,"duration":14531}},{"uid":"987661fbed05220d","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/987661fbed05220d","status":"passed","time":{"start":1727545605561,"stop":1727545618351,"duration":12790}},{"uid":"c32caf5944df19b5","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/c32caf5944df19b5","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1727543280618,"stop":1727543280618,"duration":0}},{"uid":"51095029f0de61b4","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/51095029f0de61b4","status":"passed","time":{"start":1727484721742,"stop":1727484734491,"duration":12749}},{"uid":"656ef60c47dda4d6","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/656ef60c47dda4d6","status":"passed","time":{"start":1727476893620,"stop":1727476907123,"duration":13503}},{"uid":"a83b5231409b7e90","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/a83b5231409b7e90","status":"passed","time":{"start":1727461985272,"stop":1727461998777,"duration":13505}},{"uid":"1cf8350677b51b84","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/1cf8350677b51b84","status":"passed","time":{"start":1727461985272,"stop":1727461998777,"duration":13505}},{"uid":"c337b3e506657cab","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/c337b3e506657cab","status":"passed","time":{"start":1727458611741,"stop":1727458626375,"duration":14634}},{"uid":"45caa05ca9121abd","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/45caa05ca9121abd","status":"passed","time":{"start":1727455715892,"stop":1727455729202,"duration":13310}},{"uid":"d23b9b9e0934ff4","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/d23b9b9e0934ff4","status":"passed","time":{"start":1727457217302,"stop":1727457230670,"duration":13368}},{"uid":"d19dab2424eb7378","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/d19dab2424eb7378","status":"passed","time":{"start":1727454193524,"stop":1727454206311,"duration":12787}},{"uid":"de7cd018a04ad0","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/de7cd018a04ad0","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727399228646,"stop":1727399228646,"duration":0}},{"uid":"2394bb5c0342ea80","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/2394bb5c0342ea80","status":"passed","time":{"start":1727394103427,"stop":1727394117444,"duration":14017}},{"uid":"aac57f1f021b0c17","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/aac57f1f021b0c17","status":"passed","time":{"start":1727389547972,"stop":1727389561785,"duration":13813}},{"uid":"265f44ca4db5c3de","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/265f44ca4db5c3de","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727389927750,"stop":1727389927750,"duration":0}},{"uid":"f7b7bc5c500795f9","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/f7b7bc5c500795f9","status":"passed","time":{"start":1727385948130,"stop":1727385960905,"duration":12775}},{"uid":"4b534ad71aec9997","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/4b534ad71aec9997","status":"passed","time":{"start":1727382540400,"stop":1727382553552,"duration":13152}},{"uid":"9585622be6f0878d","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/9585622be6f0878d","status":"passed","time":{"start":1727380188482,"stop":1727380201224,"duration":12742}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"30b968d0b671e6b1.json","parameterValues":["'nrf9160dk'","'zephyr'"]}