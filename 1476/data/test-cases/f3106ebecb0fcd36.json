{"uid":"f3106ebecb0fcd36","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"f9f5fc54eebc09467a311bd3212c0fe3","time":{"start":1727731397861,"stop":1727731417236,"duration":19375},"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffffb159aa90>\ndevice = <golioth.golioth.Device object at 0xffffb16b3210>\nproject = <golioth.golioth.Project object at 0xffffb16afc50>\nreleases = {'test_blocks': Release <66fb16a40e704510295cab28, release_tags=[], device_tags=['66fb16a20e704510295cab25'], artifact..., release_tags=[], device_tags=['66fb16a20e704510295cab25'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727731339081,"stop":1727731339082,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727731339082,"stop":1727731339083,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727731339083,"stop":1727731339083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727731339084,"stop":1727731339084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727731339084,"stop":1727731339085,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727731339085,"stop":1727731339086,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727731339086,"stop":1727731339086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727731339087,"stop":1727731339087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727731339087,"stop":1727731339087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727731339088,"stop":1727731339088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727731339088,"stop":1727731339088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727731339088,"stop":1727731339089,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727731339089,"stop":1727731353944,"duration":14855},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727731353946,"stop":1727731354666,"duration":720},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727731354666,"stop":1727731355608,"duration":942},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727731355609,"stop":1727731361904,"duration":6295},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1727731361906,"stop":1727731362417,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1727731362418,"stop":1727731363437,"duration":1019},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1727731363437,"stop":1727731365322,"duration":1885},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1727731397858,"stop":1727731397858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffffb159aa90>\ndevice = <golioth.golioth.Device object at 0xffffb16b3210>\nproject = <golioth.golioth.Project object at 0xffffb16afc50>\nreleases = {'test_blocks': Release <66fb16a40e704510295cab28, release_tags=[], device_tags=['66fb16a20e704510295cab25'], artifact..., release_tags=[], device_tags=['66fb16a20e704510295cab25'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","steps":[],"attachments":[{"uid":"4cc0290f481ecc68","name":"stdout","source":"4cc0290f481ecc68.txt","type":"text/plain","size":1313}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1727731417396,"stop":1727731422379,"duration":4983},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1727731422381,"stop":1727731424153,"duration":1772},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1727731424155,"stop":1727731425219,"duration":1064},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1727731425221,"stop":1727731425221,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1727731425223,"stop":1727731425223,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727731425225,"stop":1727731425905,"duration":680},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727731425907,"stop":1727731425907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727731425909,"stop":1727731425923,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"a19816b89a5f"},{"name":"thread","value":"287-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":11,"skipped":0,"passed":22,"unknown":0,"total":36},"items":[{"uid":"eca01dc58e79d622","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/eca01dc58e79d622","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727658020607,"stop":1727658106556,"duration":85949}},{"uid":"fdbd95d96d80c73c","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/fdbd95d96d80c73c","status":"passed","time":{"start":1727570835409,"stop":1727570917322,"duration":81913}},{"uid":"ec7fdc03ef7e3102","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/ec7fdc03ef7e3102","status":"passed","time":{"start":1727547676624,"stop":1727547759854,"duration":83230}},{"uid":"bc84344aa173c854","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/bc84344aa173c854","status":"passed","time":{"start":1727545332392,"stop":1727545416902,"duration":84510}},{"uid":"32a8bf1f59b4b51a","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/32a8bf1f59b4b51a","status":"passed","time":{"start":1727543053997,"stop":1727543136668,"duration":82671}},{"uid":"501ecc2f71bff6d9","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/501ecc2f71bff6d9","status":"passed","time":{"start":1727484456944,"stop":1727484540221,"duration":83277}},{"uid":"10f2cab75fc50a8c","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/10f2cab75fc50a8c","status":"passed","time":{"start":1727476579825,"stop":1727476663152,"duration":83327}},{"uid":"fbb0960bc073dcdf","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/fbb0960bc073dcdf","status":"passed","time":{"start":1727461744080,"stop":1727461827556,"duration":83476}},{"uid":"69838721c0536c25","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/69838721c0536c25","status":"passed","time":{"start":1727461744080,"stop":1727461827556,"duration":83476}},{"uid":"8a6d58cd6b3bec70","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/8a6d58cd6b3bec70","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727458352326,"stop":1727458352326,"duration":0}},{"uid":"ff9451eefb4f8050","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/ff9451eefb4f8050","status":"failed","statusDetails":"AssertionError: assert 3 == 2\n +  where 3 = int('3')","time":{"start":1727455482519,"stop":1727455511313,"duration":28794}},{"uid":"4f23ca49840cb365","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/4f23ca49840cb365","status":"passed","time":{"start":1727456946460,"stop":1727457029960,"duration":83500}},{"uid":"58aa4ff7392f8914","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/58aa4ff7392f8914","status":"passed","time":{"start":1727453903754,"stop":1727453987716,"duration":83962}},{"uid":"305ef4c93fc0db17","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/305ef4c93fc0db17","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727398616886,"stop":1727398703035,"duration":86149}},{"uid":"2452512341339dd4","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/2452512341339dd4","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727393872087,"stop":1727393872087,"duration":0}},{"uid":"2a53bf757d2decc5","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/2a53bf757d2decc5","status":"passed","time":{"start":1727389221902,"stop":1727389311784,"duration":89882}},{"uid":"db3a53deac101a8e","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/db3a53deac101a8e","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727389670637,"stop":1727389670637,"duration":0}},{"uid":"226fa4967df857e6","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/226fa4967df857e6","status":"passed","time":{"start":1727385683440,"stop":1727385767384,"duration":83944}},{"uid":"6b023891e870ab27","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/6b023891e870ab27","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727382354387,"stop":1727382354387,"duration":0}},{"uid":"572ff90b99c9cbf5","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/572ff90b99c9cbf5","status":"failed","statusDetails":"AssertionError: assert 2 == 1\n +  where 2 = int('2')","time":{"start":1727379993226,"stop":1727380014032,"duration":20806}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f3106ebecb0fcd36.json","parameterValues":["'nrf9160dk'","'zephyr'"]}