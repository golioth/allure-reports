{"uid":"6a62c37d58736433","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"b7f28a13e79ecf798f5f87d1effddc59","time":{"start":1727731557057,"stop":1727731570324,"duration":13267},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffff972ca450>\ndevice = <golioth.golioth.Device object at 0xffff972c1850>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff972c1850>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727731503353,"stop":1727731503354,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727731503354,"stop":1727731503354,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727731503355,"stop":1727731503355,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727731503356,"stop":1727731503356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727731503357,"stop":1727731503357,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727731503357,"stop":1727731503358,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727731503358,"stop":1727731503358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727731503359,"stop":1727731503359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727731503360,"stop":1727731503360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727731503360,"stop":1727731503360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727731503361,"stop":1727731503361,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727731503362,"stop":1727731503866,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727731503362,"stop":1727731503362,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727731503866,"stop":1727731518679,"duration":14813},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727731518682,"stop":1727731520114,"duration":1432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727731520115,"stop":1727731550685,"duration":30570},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffff972ca450>\ndevice = <golioth.golioth.Device object at 0xffff972c1850>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff972c1850>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"9eca6e5e0247aedc","name":"stdout","source":"9eca6e5e0247aedc.txt","type":"text/plain","size":1828}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727731736990,"stop":1727731736991,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727731736996,"stop":1727731737650,"duration":654},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727731737652,"stop":1727731737678,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727731737680,"stop":1727731737683,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"a19816b89a5f"},{"name":"thread","value":"322-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":27,"unknown":0,"total":36},"items":[{"uid":"1623c0d4ae526617","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/1623c0d4ae526617","status":"passed","time":{"start":1727658266082,"stop":1727658278763,"duration":12681}},{"uid":"5d8075a5e7e64def","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/5d8075a5e7e64def","status":"passed","time":{"start":1727571047852,"stop":1727571061008,"duration":13156}},{"uid":"a31956b31eda9873","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/a31956b31eda9873","status":"passed","time":{"start":1727547915777,"stop":1727547929453,"duration":13676}},{"uid":"a2ebccf246500bfa","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/a2ebccf246500bfa","status":"passed","time":{"start":1727545554741,"stop":1727545567474,"duration":12733}},{"uid":"15dda2d8d44d8c9f","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/15dda2d8d44d8c9f","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1727543275930,"stop":1727543275930,"duration":0}},{"uid":"863298918c2cae10","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/863298918c2cae10","status":"passed","time":{"start":1727484678504,"stop":1727484692462,"duration":13958}},{"uid":"53af543cc7c30aac","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/53af543cc7c30aac","status":"passed","time":{"start":1727476846035,"stop":1727476859406,"duration":13371}},{"uid":"7a5770b4f567b3e8","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/7a5770b4f567b3e8","status":"passed","time":{"start":1727461941682,"stop":1727461955153,"duration":13471}},{"uid":"6cb8fd5562dd7105","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/6cb8fd5562dd7105","status":"passed","time":{"start":1727461941682,"stop":1727461955153,"duration":13471}},{"uid":"eaeb932abcc86c7b","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/eaeb932abcc86c7b","status":"passed","time":{"start":1727458553509,"stop":1727458568723,"duration":15214}},{"uid":"9a3d8d58a2d672d7","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/9a3d8d58a2d672d7","status":"passed","time":{"start":1727455669729,"stop":1727455682430,"duration":12701}},{"uid":"8e0ce5f34aa9540c","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/8e0ce5f34aa9540c","status":"passed","time":{"start":1727457164753,"stop":1727457177522,"duration":12769}},{"uid":"5104411135510b3d","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/5104411135510b3d","status":"passed","time":{"start":1727454146123,"stop":1727454158874,"duration":12751}},{"uid":"17d4ff10bda185ac","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/17d4ff10bda185ac","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727399226794,"stop":1727399226795,"duration":1}},{"uid":"ead2aeab2082fc54","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/ead2aeab2082fc54","status":"passed","time":{"start":1727394059837,"stop":1727394073411,"duration":13574}},{"uid":"ee6b7d67ed168419","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/ee6b7d67ed168419","status":"passed","time":{"start":1727389504690,"stop":1727389518162,"duration":13472}},{"uid":"a194a8af7e6530c6","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/a194a8af7e6530c6","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727389925907,"stop":1727389925907,"duration":0}},{"uid":"d2eab0b0cfbeb0b3","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/d2eab0b0cfbeb0b3","status":"passed","time":{"start":1727385906017,"stop":1727385918754,"duration":12737}},{"uid":"59fda47fc3945980","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/59fda47fc3945980","status":"passed","time":{"start":1727382498303,"stop":1727382511769,"duration":13466}},{"uid":"d07920ebe6ae370d","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/d07920ebe6ae370d","status":"passed","time":{"start":1727380145267,"stop":1727380157985,"duration":12718}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6a62c37d58736433.json","parameterValues":["'nrf9160dk'","'zephyr'"]}