{"uid":"4eacb75c1e070ac3","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"304ee2a1c41b0469e6badbdc5c89ddc4","time":{"start":1727732284796,"stop":1727732377536,"duration":92740},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa4b695d0>\ndevice = <golioth.golioth.Device object at 0xffffa4b88750>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727732257145,"stop":1727732257145,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727732257146,"stop":1727732257146,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727732257146,"stop":1727732257146,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727732257147,"stop":1727732257148,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727732257147,"stop":1727732257147,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727732257148,"stop":1727732257150,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727732257151,"stop":1727732257152,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727732257151,"stop":1727732257151,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727732257152,"stop":1727732257623,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727732257623,"stop":1727732258455,"duration":832},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727732258456,"stop":1727732281532,"duration":23076},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727732281532,"stop":1727732284788,"duration":3256},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa4b695d0>\ndevice = <golioth.golioth.Device object at 0xffffa4b88750>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d4069e16fe6413d0","name":"log","source":"d4069e16fe6413d0.txt","type":"text/plain","size":13950}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727732377813,"stop":1727732377855,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727732377857,"stop":1727732378231,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727732378233,"stop":1727732378235,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727732378240,"stop":1727732378240,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5320b8a46596"},{"name":"thread","value":"703-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":30,"unknown":0,"total":32},"items":[{"uid":"1b6329c296b4c95d","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/1b6329c296b4c95d","status":"passed","time":{"start":1727657489618,"stop":1727657499959,"duration":10341}},{"uid":"74bd1869e0b2fbb4","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/74bd1869e0b2fbb4","status":"passed","time":{"start":1727571683699,"stop":1727571694099,"duration":10400}},{"uid":"5c3e28e435db1908","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/5c3e28e435db1908","status":"passed","time":{"start":1727546766199,"stop":1727546776513,"duration":10314}},{"uid":"f1d0288048143815","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/f1d0288048143815","status":"passed","time":{"start":1727545689940,"stop":1727545704588,"duration":14648}},{"uid":"d9e9f4814c059d69","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/d9e9f4814c059d69","status":"passed","time":{"start":1727544399239,"stop":1727544409638,"duration":10399}},{"uid":"fb4cf2c9fb745d68","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/fb4cf2c9fb745d68","status":"passed","time":{"start":1727484612404,"stop":1727484623384,"duration":10980}},{"uid":"6a1ae3b01ce3220d","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/6a1ae3b01ce3220d","status":"passed","time":{"start":1727477270578,"stop":1727477281301,"duration":10723}},{"uid":"ad823c91a53da46b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ad823c91a53da46b","status":"passed","time":{"start":1727462514727,"stop":1727462525856,"duration":11129}},{"uid":"905bc602c461c55b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/905bc602c461c55b","status":"passed","time":{"start":1727462514727,"stop":1727462525856,"duration":11129}},{"uid":"3959690781cf0a39","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/3959690781cf0a39","status":"broken","statusDetails":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","time":{"start":1727457391280,"stop":1727457407701,"duration":16421}},{"uid":"6560004493cba566","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/6560004493cba566","status":"passed","time":{"start":1727454233877,"stop":1727454246303,"duration":12426}},{"uid":"ed5bb1a1028335e8","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/ed5bb1a1028335e8","status":"passed","time":{"start":1727455938276,"stop":1727455948749,"duration":10473}},{"uid":"17ff0551ec9df5d3","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/17ff0551ec9df5d3","status":"passed","time":{"start":1727453162043,"stop":1727453172537,"duration":10494}},{"uid":"eb957ade8b50071c","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/eb957ade8b50071c","status":"passed","time":{"start":1727398163339,"stop":1727398174168,"duration":10829}},{"uid":"437cc3fd60cdfe6b","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/437cc3fd60cdfe6b","status":"passed","time":{"start":1727394842635,"stop":1727394853227,"duration":10592}},{"uid":"215622cdabf0ab3","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/215622cdabf0ab3","status":"passed","time":{"start":1727390279415,"stop":1727390290173,"duration":10758}},{"uid":"69bab524e75ba891","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/69bab524e75ba891","status":"passed","time":{"start":1727389943026,"stop":1727389953577,"duration":10551}},{"uid":"365400b9ecf85ef1","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/365400b9ecf85ef1","status":"passed","time":{"start":1727385349113,"stop":1727385359172,"duration":10059}},{"uid":"f7c0e6eddf9e9172","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/f7c0e6eddf9e9172","status":"passed","time":{"start":1727382931485,"stop":1727382941777,"duration":10292}},{"uid":"b100328cf16adc89","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/b100328cf16adc89","status":"passed","time":{"start":1727379602958,"stop":1727379613576,"duration":10618}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4eacb75c1e070ac3.json","parameterValues":["'nrf52840dk'","'zephyr'"]}