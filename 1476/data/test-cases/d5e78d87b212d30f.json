{"uid":"d5e78d87b212d30f","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1727734198686,"stop":1727734221239,"duration":22553},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff94cb7b10>\ndevice = <golioth.golioth.Device object at 0xffff94cd8210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727734168736,"stop":1727734168736,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727734168737,"stop":1727734168737,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727734168737,"stop":1727734168737,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727734168738,"stop":1727734168739,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727734168738,"stop":1727734168738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727734168739,"stop":1727734168742,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727734168742,"stop":1727734168743,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727734168743,"stop":1727734168743,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727734168744,"stop":1727734169369,"duration":625},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727734169369,"stop":1727734170291,"duration":922},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727734170291,"stop":1727734197612,"duration":27321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727734197613,"stop":1727734198681,"duration":1068},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff94cb7b10>\ndevice = <golioth.golioth.Device object at 0xffff94cd8210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","steps":[],"attachments":[{"uid":"9672670d51bb29b2","name":"log","source":"9672670d51bb29b2.txt","type":"text/plain","size":18467}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727734221411,"stop":1727734221460,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727734221462,"stop":1727734221896,"duration":434},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727734221899,"stop":1727734221901,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727734221906,"stop":1727734221906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"636fcc78c66e"},{"name":"thread","value":"929-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"87b094d96d9c65d2","status":"passed","time":{"start":1727734122830,"stop":1727734163767,"duration":40937}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":28,"unknown":0,"total":32},"items":[{"uid":"e1d444202cf9c5c5","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/e1d444202cf9c5c5","status":"passed","time":{"start":1727660099660,"stop":1727660123082,"duration":23422}},{"uid":"1a67edec4bf29592","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/1a67edec4bf29592","status":"passed","time":{"start":1727572984372,"stop":1727573006300,"duration":21928}},{"uid":"9268a8ea84c3a541","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/9268a8ea84c3a541","status":"passed","time":{"start":1727550456576,"stop":1727550482926,"duration":26350}},{"uid":"1d3d109cd9e518cb","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/1d3d109cd9e518cb","status":"passed","time":{"start":1727549290702,"stop":1727549313580,"duration":22878}},{"uid":"be7e916784208162","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/be7e916784208162","status":"passed","time":{"start":1727549329196,"stop":1727549371756,"duration":42560}},{"uid":"f5ea4242f270b284","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/f5ea4242f270b284","status":"passed","time":{"start":1727486915641,"stop":1727486943035,"duration":27394}},{"uid":"8b6566c37e072103","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/8b6566c37e072103","status":"passed","time":{"start":1727479390834,"stop":1727479428223,"duration":37389}},{"uid":"778396f9cf10548","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/778396f9cf10548","status":"passed","time":{"start":1727463438942,"stop":1727463466103,"duration":27161}},{"uid":"e5c68bbcb3482021","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/e5c68bbcb3482021","status":"passed","time":{"start":1727463438942,"stop":1727463466103,"duration":27161}},{"uid":"aa5bd921ab961b50","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/aa5bd921ab961b50","status":"passed","time":{"start":1727458907007,"stop":1727458953138,"duration":46131}},{"uid":"f92029e7cc9a4fe4","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/f92029e7cc9a4fe4","status":"passed","time":{"start":1727455446450,"stop":1727455475136,"duration":28686}},{"uid":"e4cc02da813b38e9","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/e4cc02da813b38e9","status":"passed","time":{"start":1727456673612,"stop":1727456700200,"duration":26588}},{"uid":"286f5e2ea56a1fb8","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/286f5e2ea56a1fb8","status":"passed","time":{"start":1727454078306,"stop":1727454104518,"duration":26212}},{"uid":"377cd8cee8d7da79","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/377cd8cee8d7da79","status":"passed","time":{"start":1727395686939,"stop":1727395725521,"duration":38582}},{"uid":"9d8eccfd05e6acb5","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/9d8eccfd05e6acb5","status":"passed","time":{"start":1727393447320,"stop":1727393471495,"duration":24175}},{"uid":"8bed4ef9851f354b","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/8bed4ef9851f354b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727393192312,"stop":1727393305182,"duration":112870}},{"uid":"45cc189d29911829","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/45cc189d29911829","status":"passed","time":{"start":1727387174869,"stop":1727387202241,"duration":27372}},{"uid":"6b8ec22298eb14e4","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/6b8ec22298eb14e4","status":"passed","time":{"start":1727384758863,"stop":1727384787166,"duration":28303}},{"uid":"c95976a52e65b1d2","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/c95976a52e65b1d2","status":"passed","time":{"start":1727381802135,"stop":1727381829604,"duration":27469}},{"uid":"8ac23d3d42c2ab88","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/8ac23d3d42c2ab88","status":"passed","time":{"start":1727376051094,"stop":1727376078352,"duration":27258}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d5e78d87b212d30f.json","parameterValues":["'nrf9160dk'","'zephyr'"]}