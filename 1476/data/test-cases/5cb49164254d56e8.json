{"uid":"5cb49164254d56e8","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1727732870047,"stop":1727732963423,"duration":93376},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9bdb2350>\ndevice = <golioth.golioth.Device object at 0xffff9bdc9050>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727732840344,"stop":1727732840345,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727732840344,"stop":1727732840344,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727732840345,"stop":1727732840345,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727732840346,"stop":1727732840346,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727732840346,"stop":1727732840346,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727732840347,"stop":1727732840349,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727732840350,"stop":1727732840350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727732840350,"stop":1727732840350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727732840351,"stop":1727732840795,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727732840796,"stop":1727732841752,"duration":956},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727732841752,"stop":1727732868926,"duration":27174},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727732868927,"stop":1727732870042,"duration":1115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9bdb2350>\ndevice = <golioth.golioth.Device object at 0xffff9bdc9050>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e69869e723a61ec1","name":"log","source":"e69869e723a61ec1.txt","type":"text/plain","size":18518}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727732963779,"stop":1727732964173,"duration":394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727732964175,"stop":1727732964614,"duration":439},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727732964616,"stop":1727732964618,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727732964623,"stop":1727732964623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"636fcc78c66e"},{"name":"thread","value":"486-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":27,"unknown":0,"total":34},"items":[{"uid":"d8a1f96ae9ae16c8","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/d8a1f96ae9ae16c8","status":"passed","time":{"start":1727658928152,"stop":1727658938728,"duration":10576}},{"uid":"dd300c85d95a118f","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/dd300c85d95a118f","status":"passed","time":{"start":1727571806352,"stop":1727571814628,"duration":8276}},{"uid":"72ce8d1b39cc74bb","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/72ce8d1b39cc74bb","status":"passed","time":{"start":1727549654204,"stop":1727549665392,"duration":11188}},{"uid":"65f0645078bcffbf","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/65f0645078bcffbf","status":"passed","time":{"start":1727548591962,"stop":1727548600750,"duration":8788}},{"uid":"4c0351133ff3187e","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/4c0351133ff3187e","status":"passed","time":{"start":1727548332377,"stop":1727548361876,"duration":29499}},{"uid":"e94fe5d38bc6b53f","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/e94fe5d38bc6b53f","status":"passed","time":{"start":1727485902253,"stop":1727485915861,"duration":13608}},{"uid":"ef781e04b199148e","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/ef781e04b199148e","status":"passed","time":{"start":1727478205938,"stop":1727478226688,"duration":20750}},{"uid":"dfbb2818c7d44969","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/dfbb2818c7d44969","status":"passed","time":{"start":1727462602995,"stop":1727462615729,"duration":12734}},{"uid":"a86fc3be5735208a","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/a86fc3be5735208a","status":"passed","time":{"start":1727462602995,"stop":1727462615729,"duration":12734}},{"uid":"d8804566f4fa2ec1","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/d8804566f4fa2ec1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727457885888,"stop":1727457979096,"duration":93208}},{"uid":"180847fc3ecb0a81","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/180847fc3ecb0a81","status":"passed","time":{"start":1727454537738,"stop":1727454551320,"duration":13582}},{"uid":"ef03c92e2ec00603","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/ef03c92e2ec00603","status":"passed","time":{"start":1727455913881,"stop":1727455929647,"duration":15766}},{"uid":"581bdf2f91f34a12","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/581bdf2f91f34a12","status":"passed","time":{"start":1727453070377,"stop":1727453083973,"duration":13596}},{"uid":"bfa4f47d2645c7a7","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/bfa4f47d2645c7a7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727399959897,"stop":1727400053824,"duration":93927}},{"uid":"45ed805e6f7fa40c","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/45ed805e6f7fa40c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727394754053,"stop":1727394847418,"duration":93365}},{"uid":"ba03e4abecd74910","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/ba03e4abecd74910","status":"passed","time":{"start":1727392744725,"stop":1727392756348,"duration":11623}},{"uid":"8f4b85d717eca00d","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/8f4b85d717eca00d","status":"passed","time":{"start":1727391950749,"stop":1727391980445,"duration":29696}},{"uid":"7286cdbcaebf2b84","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/7286cdbcaebf2b84","status":"passed","time":{"start":1727386215035,"stop":1727386228190,"duration":13155}},{"uid":"9667392bfe1a97ed","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/9667392bfe1a97ed","status":"passed","time":{"start":1727383877087,"stop":1727383890071,"duration":12984}},{"uid":"aff1bdf11d78c239","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/aff1bdf11d78c239","status":"passed","time":{"start":1727380917453,"stop":1727380931791,"duration":14338}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"5cb49164254d56e8.json","parameterValues":["'nrf9160dk'","'zephyr'"]}