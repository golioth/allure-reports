{"uid":"1b41ae9004ea098d","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"03352d708656e4accf49c2f80b0063e1","time":{"start":1727732310262,"stop":1727732332835,"duration":22573},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa6c5d6d0>\ndevice = <golioth.golioth.Device object at 0xffffa6c7c650>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727732290804,"stop":1727732290804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727732290804,"stop":1727732290804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727732290805,"stop":1727732290806,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727732290805,"stop":1727732290805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727732290806,"stop":1727732290806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727732290807,"stop":1727732290809,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727732290809,"stop":1727732290810,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727732290810,"stop":1727732290810,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727732290811,"stop":1727732291232,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727732291232,"stop":1727732292080,"duration":848},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727732292080,"stop":1727732309316,"duration":17236},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727732309317,"stop":1727732310259,"duration":942},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa6c5d6d0>\ndevice = <golioth.golioth.Device object at 0xffffa6c7c650>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ebf4c2c268b86807","name":"log","source":"ebf4c2c268b86807.txt","type":"text/plain","size":12895}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727732333176,"stop":1727732333206,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727732333208,"stop":1727732333596,"duration":388},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727732333598,"stop":1727732333600,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727732333605,"stop":1727732333606,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"907d69976f7d"},{"name":"thread","value":"458-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":13,"skipped":0,"passed":19,"unknown":0,"total":32},"items":[{"uid":"bf53ae73d64dd52","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/bf53ae73d64dd52","status":"passed","time":{"start":1727658462798,"stop":1727658473066,"duration":10268}},{"uid":"97a8da67ba0e6011","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/97a8da67ba0e6011","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727572574373,"stop":1727572667123,"duration":92750}},{"uid":"9e8673e47497d5fd","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/9e8673e47497d5fd","status":"passed","time":{"start":1727548120937,"stop":1727548126697,"duration":5760}},{"uid":"648c270f1e9688f0","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/648c270f1e9688f0","status":"passed","time":{"start":1727547286173,"stop":1727547294841,"duration":8668}},{"uid":"f8647f05150af547","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/f8647f05150af547","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727545949869,"stop":1727545972442,"duration":22573}},{"uid":"7ee6e2646536f5f5","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/7ee6e2646536f5f5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727485580069,"stop":1727485602655,"duration":22586}},{"uid":"15fed8989800f339","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/15fed8989800f339","status":"passed","time":{"start":1727477842294,"stop":1727477852011,"duration":9717}},{"uid":"d42147d0dd74f9b3","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d42147d0dd74f9b3","status":"passed","time":{"start":1727463351128,"stop":1727463359922,"duration":8794}},{"uid":"66c5aaf848c91083","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/66c5aaf848c91083","status":"passed","time":{"start":1727463351128,"stop":1727463359922,"duration":8794}},{"uid":"301c754167469f2e","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/301c754167469f2e","status":"passed","time":{"start":1727460207285,"stop":1727460218027,"duration":10742}},{"uid":"66f63f354dba9452","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/66f63f354dba9452","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727459689566,"stop":1727459712197,"duration":22631}},{"uid":"d87d5d65222e9d6a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/d87d5d65222e9d6a","status":"passed","time":{"start":1727459826696,"stop":1727459835365,"duration":8669}},{"uid":"78853046d45921d8","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/78853046d45921d8","status":"passed","time":{"start":1727459339161,"stop":1727459344759,"duration":5598}},{"uid":"9feafcd281aba1ab","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/9feafcd281aba1ab","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727399480533,"stop":1727399573283,"duration":92750}},{"uid":"62b6bb2c6e338519","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/62b6bb2c6e338519","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727395058733,"stop":1727395081411,"duration":22678}},{"uid":"cc830b158a122bd5","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/cc830b158a122bd5","status":"passed","time":{"start":1727391214058,"stop":1727391221863,"duration":7805}},{"uid":"e8c76447ff9c2bf9","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/e8c76447ff9c2bf9","status":"passed","time":{"start":1727391570685,"stop":1727391581396,"duration":10711}},{"uid":"926aa2e3569dd96f","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/926aa2e3569dd96f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727386063186,"stop":1727386085863,"duration":22677}},{"uid":"4014c3db282f7616","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/4014c3db282f7616","status":"passed","time":{"start":1727383447838,"stop":1727383453710,"duration":5872}},{"uid":"12987268a9247e23","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/12987268a9247e23","status":"passed","time":{"start":1727380573274,"stop":1727380579965,"duration":6691}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1b41ae9004ea098d.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}