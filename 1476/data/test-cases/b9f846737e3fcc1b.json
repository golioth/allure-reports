{"uid":"b9f846737e3fcc1b","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1727733045992,"stop":1727733140790,"duration":94798},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff841f3790>\nproject = <golioth.golioth.Project object at 0xffff84384950>\ndevice = <golioth.golioth.Device object at 0xffff84216350>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727733015332,"stop":1727733015332,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727733015332,"stop":1727733015332,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727733015333,"stop":1727733015334,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727733015333,"stop":1727733015333,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727733015334,"stop":1727733015335,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727733015334,"stop":1727733015334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727733015336,"stop":1727733015339,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727733015336,"stop":1727733015336,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727733015339,"stop":1727733015806,"duration":467},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727733015807,"stop":1727733017149,"duration":1342},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727733017150,"stop":1727733044876,"duration":27726},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727733044876,"stop":1727733045990,"duration":1114},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff841f3790>\nproject = <golioth.golioth.Project object at 0xffff84384950>\ndevice = <golioth.golioth.Device object at 0xffff84216350>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"6bea369f534aad69","name":"log","source":"6bea369f534aad69.txt","type":"text/plain","size":20571}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727733141152,"stop":1727733141334,"duration":182},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727733141336,"stop":1727733141787,"duration":451},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727733141789,"stop":1727733141791,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727733141793,"stop":1727733141793,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"636fcc78c66e"},{"name":"thread","value":"576-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":23,"unknown":0,"total":34},"items":[{"uid":"95e62651f91e175a","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/95e62651f91e175a","status":"passed","time":{"start":1727659022352,"stop":1727659042371,"duration":20019}},{"uid":"95b4693ddbbd37b8","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/95b4693ddbbd37b8","status":"passed","time":{"start":1727571897428,"stop":1727571915241,"duration":17813}},{"uid":"bf7ad1fea72c9acd","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/bf7ad1fea72c9acd","status":"passed","time":{"start":1727549748141,"stop":1727549760305,"duration":12164}},{"uid":"80f5e62a2c3c3e7a","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/80f5e62a2c3c3e7a","status":"passed","time":{"start":1727548683695,"stop":1727548699911,"duration":16216}},{"uid":"ea3a287b7421beec","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/ea3a287b7421beec","status":"passed","time":{"start":1727548463561,"stop":1727548490024,"duration":26463}},{"uid":"c319200a3663cf45","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/c319200a3663cf45","status":"passed","time":{"start":1727486005866,"stop":1727486022923,"duration":17057}},{"uid":"461d1c2930e6f722","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/461d1c2930e6f722","status":"passed","time":{"start":1727478326178,"stop":1727478351152,"duration":24974}},{"uid":"508e351f95c3a6db","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/508e351f95c3a6db","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727462703890,"stop":1727462714515,"duration":10625}},{"uid":"85b89fe44e42013d","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/85b89fe44e42013d","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727462703890,"stop":1727462714515,"duration":10625}},{"uid":"3e8c76fb155b8175","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/3e8c76fb155b8175","status":"passed","time":{"start":1727458071658,"stop":1727458096376,"duration":24718}},{"uid":"3b63bbc621c8652c","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/3b63bbc621c8652c","status":"passed","time":{"start":1727454638193,"stop":1727454653693,"duration":15500}},{"uid":"120c9270d82c0596","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/120c9270d82c0596","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1727456017894,"stop":1727456036320,"duration":18426}},{"uid":"8d0fe9d32bf15664","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/8d0fe9d32bf15664","status":"passed","time":{"start":1727453170667,"stop":1727453185612,"duration":14945}},{"uid":"ae873a77e772f087","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/ae873a77e772f087","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727400217548,"stop":1727400312994,"duration":95446}},{"uid":"2a3d36eaa93ab9ca","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/2a3d36eaa93ab9ca","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727395011275,"stop":1727395106444,"duration":95169}},{"uid":"b7f2cf2bef91d8ef","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/b7f2cf2bef91d8ef","status":"passed","time":{"start":1727392836996,"stop":1727392853062,"duration":16066}},{"uid":"56d7553373e682a6","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/56d7553373e682a6","status":"passed","time":{"start":1727392088865,"stop":1727392112286,"duration":23421}},{"uid":"29b61ae0e3ce9f84","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/29b61ae0e3ce9f84","status":"passed","time":{"start":1727386391782,"stop":1727386406082,"duration":14300}},{"uid":"615cfc03bf76476a","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/615cfc03bf76476a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727383977451,"stop":1727384072469,"duration":95018}},{"uid":"3c53f71f8a7c8556","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/3c53f71f8a7c8556","status":"passed","time":{"start":1727381021846,"stop":1727381037997,"duration":16151}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b9f846737e3fcc1b.json","parameterValues":["'nrf9160dk'","'zephyr'"]}