{"uid":"3752cc3b5bf0fb9c","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1727734021617,"stop":1727734087402,"duration":65785},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9528bd90>\ndevice = <golioth.golioth.Device object at 0xffff952a7450>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff95411890>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727733991593,"stop":1727733991593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1727733991593,"stop":1727733991608,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727733991609,"stop":1727733991609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727733991610,"stop":1727733991610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727733991611,"stop":1727733991613,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727733991614,"stop":1727733991614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727733991614,"stop":1727733991614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727733991615,"stop":1727733992233,"duration":618},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727733992233,"stop":1727733993570,"duration":1337},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727733993571,"stop":1727734020546,"duration":26975},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727734020546,"stop":1727734021610,"duration":1064},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9528bd90>\ndevice = <golioth.golioth.Device object at 0xffff952a7450>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff95411890>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","steps":[],"attachments":[{"uid":"487e9e2091887960","name":"log","source":"487e9e2091887960.txt","type":"text/plain","size":20907}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727734087613,"stop":1727734087660,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727734087662,"stop":1727734088386,"duration":724},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727734088388,"stop":1727734088391,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727734088396,"stop":1727734088396,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"636fcc78c66e"},{"name":"thread","value":"833-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":5,"skipped":0,"passed":25,"unknown":0,"total":33},"items":[{"uid":"d5d4d8fdc62116c9","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/d5d4d8fdc62116c9","status":"passed","time":{"start":1727659918603,"stop":1727659946023,"duration":27420}},{"uid":"d6996fb5f77f288c","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/d6996fb5f77f288c","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","time":{"start":1727572786341,"stop":1727572824058,"duration":37717}},{"uid":"bac5200d1f6699a8","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/bac5200d1f6699a8","status":"passed","time":{"start":1727550272557,"stop":1727550301746,"duration":29189}},{"uid":"257fb47e6f073f3c","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/257fb47e6f073f3c","status":"passed","time":{"start":1727549165927,"stop":1727549198785,"duration":32858}},{"uid":"e89264be958ba69e","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/e89264be958ba69e","status":"passed","time":{"start":1727549096061,"stop":1727549147214,"duration":51153}},{"uid":"f3abd36bbe76099d","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/f3abd36bbe76099d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727486631640,"stop":1727486749691,"duration":118051}},{"uid":"3a49615b77bc71aa","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/3a49615b77bc71aa","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727479043246,"stop":1727479156424,"duration":113178}},{"uid":"ac49b0f1dcd88d10","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ac49b0f1dcd88d10","status":"passed","time":{"start":1727463289822,"stop":1727463327657,"duration":37835}},{"uid":"5efb7b2abb77f2e6","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/5efb7b2abb77f2e6","status":"passed","time":{"start":1727463289822,"stop":1727463327657,"duration":37835}},{"uid":"6d5b9baff076f98b","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/6d5b9baff076f98b","status":"passed","time":{"start":1727458767464,"stop":1727458821752,"duration":54288}},{"uid":"97931bb832fe7187","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/97931bb832fe7187","status":"passed","time":{"start":1727455246796,"stop":1727455284599,"duration":37803}},{"uid":"8661fe0d4ed784e6","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/8661fe0d4ed784e6","status":"passed","time":{"start":1727456538620,"stop":1727456575988,"duration":37368}},{"uid":"163099052d3cf2a6","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/163099052d3cf2a6","status":"passed","time":{"start":1727453791694,"stop":1727453828339,"duration":36645}},{"uid":"d10d8faca28b4b53","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/d10d8faca28b4b53","status":"passed","time":{"start":1727395504136,"stop":1727395541730,"duration":37594}},{"uid":"cc4185613d8a3180","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/cc4185613d8a3180","status":"passed","time":{"start":1727393325926,"stop":1727393356578,"duration":30652}},{"uid":"65ca0f4689a45a8a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/65ca0f4689a45a8a","status":"passed","time":{"start":1727393064730,"stop":1727393103878,"duration":39148}},{"uid":"709367b5c06a8d0c","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/709367b5c06a8d0c","status":"passed","time":{"start":1727386980272,"stop":1727387019761,"duration":39489}},{"uid":"d8a19e070eb19b01","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/d8a19e070eb19b01","status":"passed","time":{"start":1727384559909,"stop":1727384597459,"duration":37550}},{"uid":"d3fe70dddb7a2436","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/d3fe70dddb7a2436","status":"passed","time":{"start":1727381508985,"stop":1727381546128,"duration":37143}},{"uid":"381e5d89672fcd5","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/381e5d89672fcd5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727375712276,"stop":1727375827029,"duration":114753}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"3752cc3b5bf0fb9c.json","parameterValues":["'nrf9160dk'","'zephyr'"]}