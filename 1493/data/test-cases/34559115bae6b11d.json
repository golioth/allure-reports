{"uid":"34559115bae6b11d","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"ddbd6781d4488af4f57eae6c3dca1e27","time":{"start":1727783719175,"stop":1727783813673,"duration":94498},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a260c10>\nproject = <golioth.golioth.Project object at 0xffff9a38ad90>\ndevice = <golioth.golioth.Device object at 0xffff9a219910>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727783704545,"stop":1727783704545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727783704546,"stop":1727783704546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727783704546,"stop":1727783704547,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727783704547,"stop":1727783704548,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727783704547,"stop":1727783704547,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727783704548,"stop":1727783704549,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727783704549,"stop":1727783704550,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727783704550,"stop":1727783704552,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727783704553,"stop":1727783704956,"duration":403},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727783704957,"stop":1727783705850,"duration":893},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727783705851,"stop":1727783718532,"duration":12681},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727783718533,"stop":1727783719172,"duration":639},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a260c10>\nproject = <golioth.golioth.Project object at 0xffff9a38ad90>\ndevice = <golioth.golioth.Device object at 0xffff9a219910>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e743ae47173f796d","name":"log","source":"e743ae47173f796d.txt","type":"text/plain","size":26107}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727783813980,"stop":1727783814011,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727783814013,"stop":1727783814402,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727783814404,"stop":1727783814406,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727783814408,"stop":1727783814409,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d0eeb52a0a3f"},{"name":"thread","value":"471-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4d90c91817bb4623","status":"passed","time":{"start":1727774566011,"stop":1727774606630,"duration":40619}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":42,"unknown":0,"total":46},"items":[{"uid":"c4bb3dd2dcdb7d77","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/c4bb3dd2dcdb7d77","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727782075644,"stop":1727782170354,"duration":94710}},{"uid":"237b5e98bfc6be2c","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/237b5e98bfc6be2c","status":"passed","time":{"start":1727777116151,"stop":1727777158271,"duration":42120}},{"uid":"1d2c04899138732f","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/1d2c04899138732f","status":"passed","time":{"start":1727774566011,"stop":1727774606630,"duration":40619}},{"uid":"14edf8734856f09d","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/14edf8734856f09d","status":"passed","time":{"start":1727771556554,"stop":1727771598685,"duration":42131}},{"uid":"c88078f67f312ca5","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/c88078f67f312ca5","status":"passed","time":{"start":1727769037121,"stop":1727769078649,"duration":41528}},{"uid":"adad358563262a7f","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/adad358563262a7f","status":"passed","time":{"start":1727765414366,"stop":1727765455963,"duration":41597}},{"uid":"5e4874fecbc4b557","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/5e4874fecbc4b557","status":"passed","time":{"start":1727764195571,"stop":1727764236699,"duration":41128}},{"uid":"a39cc4ee55488a7c","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/a39cc4ee55488a7c","status":"passed","time":{"start":1727760346832,"stop":1727760388718,"duration":41886}},{"uid":"803a8510ae5fd043","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/803a8510ae5fd043","status":"passed","time":{"start":1727744717649,"stop":1727744758227,"duration":40578}},{"uid":"1d0570a266f80204","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/1d0570a266f80204","status":"passed","time":{"start":1727732176330,"stop":1727732218343,"duration":42013}},{"uid":"eb7f3b1b722c887c","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/eb7f3b1b722c887c","status":"passed","time":{"start":1727658275173,"stop":1727658316409,"duration":41236}},{"uid":"61e703c38ee1a83b","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/61e703c38ee1a83b","status":"passed","time":{"start":1727571875498,"stop":1727571917474,"duration":41976}},{"uid":"d08177eac091529b","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/d08177eac091529b","status":"passed","time":{"start":1727547369888,"stop":1727547410282,"duration":40394}},{"uid":"aba49a1414345746","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/aba49a1414345746","status":"passed","time":{"start":1727544394971,"stop":1727544438958,"duration":43987}},{"uid":"73c333fd78d80276","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/73c333fd78d80276","status":"passed","time":{"start":1727544168855,"stop":1727544209753,"duration":40898}},{"uid":"7ee2f9c5754a45fd","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/7ee2f9c5754a45fd","status":"passed","time":{"start":1727485489460,"stop":1727485531582,"duration":42122}},{"uid":"ef76aa1f7e5b7c36","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/ef76aa1f7e5b7c36","status":"passed","time":{"start":1727476860912,"stop":1727476902973,"duration":42061}},{"uid":"6277a3b3e5e10805","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/6277a3b3e5e10805","status":"passed","time":{"start":1727462631066,"stop":1727462673213,"duration":42147}},{"uid":"5ec601da0b82428b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/5ec601da0b82428b","status":"passed","time":{"start":1727462631066,"stop":1727462673213,"duration":42147}},{"uid":"72cfac65e21b599c","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/72cfac65e21b599c","status":"passed","time":{"start":1727365412857,"stop":1727365453193,"duration":40336}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"34559115bae6b11d.json","parameterValues":["'rak5010'","'zephyr'"]}