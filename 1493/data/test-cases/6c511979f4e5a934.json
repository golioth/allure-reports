{"uid":"6c511979f4e5a934","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"c9ae6dc826a01d1d44d52fc2bf414310","time":{"start":1727783495191,"stop":1727783588353,"duration":93162},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb2f26790>\ndevice = <golioth.golioth.Device object at 0xffffb2f09010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727783480917,"stop":1727783480918,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727783480918,"stop":1727783480918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727783480919,"stop":1727783480919,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727783480919,"stop":1727783480919,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727783480920,"stop":1727783480920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727783480920,"stop":1727783480922,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727783480923,"stop":1727783480923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727783480924,"stop":1727783481330,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727783480924,"stop":1727783480924,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727783481330,"stop":1727783482167,"duration":837},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727783482168,"stop":1727783494555,"duration":12387},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727783494556,"stop":1727783495188,"duration":632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb2f26790>\ndevice = <golioth.golioth.Device object at 0xffffb2f09010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8f90c9cb592c9a51","name":"log","source":"8f90c9cb592c9a51.txt","type":"text/plain","size":22056}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727783588619,"stop":1727783588665,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727783588667,"stop":1727783589062,"duration":395},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727783589064,"stop":1727783589066,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727783589071,"stop":1727783589071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d0eeb52a0a3f"},{"name":"thread","value":"431-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1e63abde4fcb060","status":"passed","time":{"start":1727774399560,"stop":1727774439258,"duration":39698}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":42,"unknown":0,"total":46},"items":[{"uid":"536a2c87c67a52a0","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/536a2c87c67a52a0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727781851944,"stop":1727781945027,"duration":93083}},{"uid":"81a400ccf33de3b1","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/81a400ccf33de3b1","status":"passed","time":{"start":1727776985578,"stop":1727777025524,"duration":39946}},{"uid":"93629d398fe1a2cb","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/93629d398fe1a2cb","status":"passed","time":{"start":1727774399560,"stop":1727774439258,"duration":39698}},{"uid":"1271d8f5e8860f09","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/1271d8f5e8860f09","status":"passed","time":{"start":1727771390719,"stop":1727771429982,"duration":39263}},{"uid":"9ba506c6271100e0","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/9ba506c6271100e0","status":"passed","time":{"start":1727768914697,"stop":1727768954551,"duration":39854}},{"uid":"e099fdafd3371664","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/e099fdafd3371664","status":"passed","time":{"start":1727765248276,"stop":1727765288170,"duration":39894}},{"uid":"b31f9cc01e32ae93","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/b31f9cc01e32ae93","status":"passed","time":{"start":1727764030419,"stop":1727764069424,"duration":39005}},{"uid":"19d19cca6c64e203","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/19d19cca6c64e203","status":"passed","time":{"start":1727760180687,"stop":1727760220303,"duration":39616}},{"uid":"6a10ea1fa727d3f3","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/6a10ea1fa727d3f3","status":"passed","time":{"start":1727744552475,"stop":1727744591881,"duration":39406}},{"uid":"f13969556c71e820","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/f13969556c71e820","status":"passed","time":{"start":1727732055482,"stop":1727732094654,"duration":39172}},{"uid":"a318dc23199b5078","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/a318dc23199b5078","status":"passed","time":{"start":1727658110250,"stop":1727658149605,"duration":39355}},{"uid":"479699a5867424ed","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/479699a5867424ed","status":"passed","time":{"start":1727571709842,"stop":1727571749346,"duration":39504}},{"uid":"576b7159b60e072e","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/576b7159b60e072e","status":"passed","time":{"start":1727547249301,"stop":1727547288665,"duration":39364}},{"uid":"d45e083309a638eb","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/d45e083309a638eb","status":"passed","time":{"start":1727544227788,"stop":1727544268540,"duration":40752}},{"uid":"284847a861482cb2","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/284847a861482cb2","status":"passed","time":{"start":1727544046670,"stop":1727544085856,"duration":39186}},{"uid":"23e30b230ce51370","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/23e30b230ce51370","status":"passed","time":{"start":1727485324343,"stop":1727485363736,"duration":39393}},{"uid":"dda42fed90ffe69a","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/dda42fed90ffe69a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727476690157,"stop":1727476734659,"duration":44502}},{"uid":"9d6395ff96664634","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/9d6395ff96664634","status":"passed","time":{"start":1727462465190,"stop":1727462504450,"duration":39260}},{"uid":"93fd95a6cb04054b","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/93fd95a6cb04054b","status":"passed","time":{"start":1727462465190,"stop":1727462504450,"duration":39260}},{"uid":"2b71fa11c808d406","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/2b71fa11c808d406","status":"passed","time":{"start":1727365235895,"stop":1727365275483,"duration":39588}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"6c511979f4e5a934.json","parameterValues":["'rak5010'","'zephyr'"]}