{"uid":"5dc31f5e19a5892c","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1727775655906,"stop":1727775678529,"duration":22623},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8f8c5910>\ndevice = <golioth.golioth.Device object at 0xffff8f8e0450>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727775638404,"stop":1727775638404,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727775638405,"stop":1727775638405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727775638405,"stop":1727775638405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727775638406,"stop":1727775638406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727775638406,"stop":1727775638407,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727775638407,"stop":1727775638409,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727775638410,"stop":1727775638410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727775638410,"stop":1727775638410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727775638411,"stop":1727775638863,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727775638863,"stop":1727775639825,"duration":962},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727775639826,"stop":1727775654882,"duration":15056},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727775654882,"stop":1727775655903,"duration":1021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8f8c5910>\ndevice = <golioth.golioth.Device object at 0xffff8f8e0450>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"cb726e61775ce95b","name":"log","source":"cb726e61775ce95b.txt","type":"text/plain","size":12550}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727775678732,"stop":1727775678739,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727775678741,"stop":1727775679146,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727775679149,"stop":1727775679151,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727775679156,"stop":1727775679156,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a7641989c77f"},{"name":"thread","value":"472-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":38,"unknown":0,"total":43},"items":[{"uid":"7dc53f1b8b01e012","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/7dc53f1b8b01e012","status":"passed","time":{"start":1727771888943,"stop":1727771910975,"duration":22032}},{"uid":"b7107b82d66d992e","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/b7107b82d66d992e","status":"passed","time":{"start":1727770855254,"stop":1727770878376,"duration":23122}},{"uid":"c21cd56d182e7a33","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/c21cd56d182e7a33","status":"passed","time":{"start":1727765991015,"stop":1727766013471,"duration":22456}},{"uid":"daec68cf51d05623","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/daec68cf51d05623","status":"passed","time":{"start":1727766039853,"stop":1727766063255,"duration":23402}},{"uid":"892cb1e243245e5f","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/892cb1e243245e5f","status":"passed","time":{"start":1727761207798,"stop":1727761229865,"duration":22067}},{"uid":"26db585200606164","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/26db585200606164","status":"passed","time":{"start":1727744646461,"stop":1727744668120,"duration":21659}},{"uid":"14eb9382603afabc","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/14eb9382603afabc","status":"passed","time":{"start":1727732262137,"stop":1727732286892,"duration":24755}},{"uid":"592761392765725e","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/592761392765725e","status":"passed","time":{"start":1727658415489,"stop":1727658439264,"duration":23775}},{"uid":"68644efd35901b9e","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/68644efd35901b9e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727572529595,"stop":1727572552226,"duration":22631}},{"uid":"226aa7f62992d57c","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/226aa7f62992d57c","status":"passed","time":{"start":1727548078354,"stop":1727548097517,"duration":19163}},{"uid":"6d41b1229b5b7f7f","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/6d41b1229b5b7f7f","status":"passed","time":{"start":1727547243138,"stop":1727547262762,"duration":19624}},{"uid":"549ed8f33f06c112","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/549ed8f33f06c112","status":"passed","time":{"start":1727545904694,"stop":1727545927891,"duration":23197}},{"uid":"1c5e43790952664c","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/1c5e43790952664c","status":"passed","time":{"start":1727485537222,"stop":1727485556643,"duration":19421}},{"uid":"5dc68f640599ea33","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/5dc68f640599ea33","status":"passed","time":{"start":1727477797038,"stop":1727477818756,"duration":21718}},{"uid":"9d918592300071f7","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/9d918592300071f7","status":"passed","time":{"start":1727463307687,"stop":1727463329556,"duration":21869}},{"uid":"6ada0f9e847cd204","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/6ada0f9e847cd204","status":"passed","time":{"start":1727463307687,"stop":1727463329556,"duration":21869}},{"uid":"9084e2af9a7d4105","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/9084e2af9a7d4105","status":"passed","time":{"start":1727460159805,"stop":1727460183410,"duration":23605}},{"uid":"5bdc12fd6e2192f5","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/5bdc12fd6e2192f5","status":"passed","time":{"start":1727395011880,"stop":1727395035162,"duration":23282}},{"uid":"7d16fc7898b3348a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/7d16fc7898b3348a","status":"passed","time":{"start":1727459782430,"stop":1727459803369,"duration":20939}},{"uid":"bc1b5d71215f935e","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/bc1b5d71215f935e","status":"passed","time":{"start":1727459294978,"stop":1727459315614,"duration":20636}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"5dc31f5e19a5892c.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}