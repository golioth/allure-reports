{"uid":"be36fcebbb9ae6d","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"fbdcf5b89e903e4e31b43e980f10a270","time":{"start":1727784570655,"stop":1727784663700,"duration":93045},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff83145bd0>\ndevice = <golioth.golioth.Device object at 0xffff8315c9d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727784551425,"stop":1727784551425,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727784551425,"stop":1727784551426,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727784551426,"stop":1727784551426,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727784551427,"stop":1727784551427,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727784551427,"stop":1727784551427,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727784551428,"stop":1727784551430,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727784551430,"stop":1727784551431,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727784551431,"stop":1727784551431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727784551432,"stop":1727784551838,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727784551839,"stop":1727784552673,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727784552673,"stop":1727784569603,"duration":16930},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727784569604,"stop":1727784570652,"duration":1048},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff83145bd0>\ndevice = <golioth.golioth.Device object at 0xffff8315c9d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f5b058c4e540810","name":"log","source":"f5b058c4e540810.txt","type":"text/plain","size":16412}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727784663981,"stop":1727784664019,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727784664021,"stop":1727784664394,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727784664396,"stop":1727784664398,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727784664403,"stop":1727784664403,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"613c385acdb3"},{"name":"thread","value":"390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dc585ffbe9c37f2b","status":"passed","time":{"start":1727775518952,"stop":1727775541986,"duration":23034}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":42,"unknown":0,"total":46},"items":[{"uid":"7cbba0afed802138","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/7cbba0afed802138","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727780906088,"stop":1727780999168,"duration":93080}},{"uid":"c534932f5d9e0ca5","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/c534932f5d9e0ca5","status":"passed","time":{"start":1727777529314,"stop":1727777553926,"duration":24612}},{"uid":"1691c287e77e7fa7","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/1691c287e77e7fa7","status":"passed","time":{"start":1727775518952,"stop":1727775541986,"duration":23034}},{"uid":"2a89e87e39063518","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/2a89e87e39063518","status":"passed","time":{"start":1727771746480,"stop":1727771770334,"duration":23854}},{"uid":"35ae353d6fb7c460","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/35ae353d6fb7c460","status":"passed","time":{"start":1727770709161,"stop":1727770731668,"duration":22507}},{"uid":"aa2aa59867feb54f","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/aa2aa59867feb54f","status":"passed","time":{"start":1727765851576,"stop":1727765872133,"duration":20557}},{"uid":"4cebc3b30eeeb402","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/4cebc3b30eeeb402","status":"passed","time":{"start":1727765807579,"stop":1727765831237,"duration":23658}},{"uid":"d9fa5fb7e931314f","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/d9fa5fb7e931314f","status":"passed","time":{"start":1727761066130,"stop":1727761088682,"duration":22552}},{"uid":"e10acbbf9dc06576","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/e10acbbf9dc06576","status":"passed","time":{"start":1727744497040,"stop":1727744526839,"duration":29799}},{"uid":"deb4d20be82c9b08","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/deb4d20be82c9b08","status":"passed","time":{"start":1727732093683,"stop":1727732121148,"duration":27465}},{"uid":"18b90ceff1c9ca8f","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/18b90ceff1c9ca8f","status":"passed","time":{"start":1727658269257,"stop":1727658291790,"duration":22533}},{"uid":"9f16f6d782ad4336","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/9f16f6d782ad4336","status":"passed","time":{"start":1727572392605,"stop":1727572418944,"duration":26339}},{"uid":"44ec2c64cc1a69fa","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/44ec2c64cc1a69fa","status":"passed","time":{"start":1727547929205,"stop":1727547952593,"duration":23388}},{"uid":"fb2f06a967612668","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/fb2f06a967612668","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727547096090,"stop":1727547119114,"duration":23024}},{"uid":"d7b4d13e16e5bb87","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/d7b4d13e16e5bb87","status":"passed","time":{"start":1727545764007,"stop":1727545786657,"duration":22650}},{"uid":"2ece39ea38d2b1da","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/2ece39ea38d2b1da","status":"passed","time":{"start":1727485395813,"stop":1727485420251,"duration":24438}},{"uid":"8cbf07d8ef6db707","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/8cbf07d8ef6db707","status":"passed","time":{"start":1727477635058,"stop":1727477660365,"duration":25307}},{"uid":"f3627d943e5f2f9e","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/f3627d943e5f2f9e","status":"passed","time":{"start":1727463166493,"stop":1727463189872,"duration":23379}},{"uid":"8b212078eef153d2","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/8b212078eef153d2","status":"passed","time":{"start":1727463166493,"stop":1727463189872,"duration":23379}},{"uid":"f619a0c4e8327fcc","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/f619a0c4e8327fcc","status":"passed","time":{"start":1727459935215,"stop":1727459957879,"duration":22664}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"be36fcebbb9ae6d.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}