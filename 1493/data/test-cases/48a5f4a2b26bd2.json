{"uid":"48a5f4a2b26bd2","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1727782142061,"stop":1727782235273,"duration":93212},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb2405d90>\ndevice = <golioth.golioth.Device object at 0xffffb2418a50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727782113378,"stop":1727782113379,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727782113379,"stop":1727782113379,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727782113380,"stop":1727782113380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727782113380,"stop":1727782113380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727782113381,"stop":1727782113384,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727782113381,"stop":1727782113381,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727782113384,"stop":1727782113385,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727782113385,"stop":1727782113385,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727782113386,"stop":1727782113876,"duration":490},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727782113877,"stop":1727782114823,"duration":946},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727782114824,"stop":1727782140991,"duration":26167},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727782140992,"stop":1727782142056,"duration":1064},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb2405d90>\ndevice = <golioth.golioth.Device object at 0xffffb2418a50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"6f724da4fc426335","name":"log","source":"6f724da4fc426335.txt","type":"text/plain","size":16341}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727782235602,"stop":1727782235647,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727782235649,"stop":1727782236049,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727782236051,"stop":1727782236053,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727782236058,"stop":1727782236058,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"db99627a3fa7"},{"name":"thread","value":"434-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b3882b8c7b55443e","status":"passed","time":{"start":1727775081488,"stop":1727775103344,"duration":21856}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":13,"skipped":0,"passed":28,"unknown":0,"total":42},"items":[{"uid":"4b4a73e497deb667","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/4b4a73e497deb667","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727780288661,"stop":1727780382028,"duration":93367}},{"uid":"8b88856caf619629","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/8b88856caf619629","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727778445165,"stop":1727778538470,"duration":93305}},{"uid":"83ecd866eb023254","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/83ecd866eb023254","status":"passed","time":{"start":1727775081488,"stop":1727775103344,"duration":21856}},{"uid":"733937fbfc9203ea","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/733937fbfc9203ea","status":"passed","time":{"start":1727771738311,"stop":1727771760278,"duration":21967}},{"uid":"3e39de5fceeaed81","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/3e39de5fceeaed81","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727766620087,"stop":1727766644279,"duration":24192}},{"uid":"f5205091cd90dac8","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/f5205091cd90dac8","status":"passed","time":{"start":1727765398354,"stop":1727765420892,"duration":22538}},{"uid":"d21225db75579fe2","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/d21225db75579fe2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727745174084,"stop":1727745210064,"duration":35980}},{"uid":"5534490c63615e8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/5534490c63615e8","status":"passed","time":{"start":1727732800014,"stop":1727732836488,"duration":36474}},{"uid":"6f45a565d7e2b39c","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/6f45a565d7e2b39c","status":"passed","time":{"start":1727658864328,"stop":1727658893901,"duration":29573}},{"uid":"da70b72ca2c949e8","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/da70b72ca2c949e8","status":"passed","time":{"start":1727571750031,"stop":1727571772063,"duration":22032}},{"uid":"c8d79e4ce643def0","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/c8d79e4ce643def0","status":"passed","time":{"start":1727549596787,"stop":1727549621824,"duration":25037}},{"uid":"f9e15fb50d28875e","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/f9e15fb50d28875e","status":"passed","time":{"start":1727548535143,"stop":1727548557067,"duration":21924}},{"uid":"809eac859d7ebac2","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/809eac859d7ebac2","status":"passed","time":{"start":1727548259255,"stop":1727548299762,"duration":40507}},{"uid":"7fd544cdf039da79","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/7fd544cdf039da79","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727485831088,"stop":1727485868075,"duration":36987}},{"uid":"6b38daf72f442ee8","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/6b38daf72f442ee8","status":"passed","time":{"start":1727478124425,"stop":1727478173351,"duration":48926}},{"uid":"212fd4a46fcc3fa4","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/212fd4a46fcc3fa4","status":"passed","time":{"start":1727462541133,"stop":1727462568811,"duration":27678}},{"uid":"b142b40eed2d37ec","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/b142b40eed2d37ec","status":"passed","time":{"start":1727462541133,"stop":1727462568811,"duration":27678}},{"uid":"3b672d7b901226f9","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/3b672d7b901226f9","status":"passed","time":{"start":1727457808585,"stop":1727457853099,"duration":44514}},{"uid":"9582821c24dfa1be","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/9582821c24dfa1be","status":"passed","time":{"start":1727454473903,"stop":1727454503719,"duration":29816}},{"uid":"6957cb80768a71e9","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6957cb80768a71e9","status":"passed","time":{"start":1727455852654,"stop":1727455879717,"duration":27063}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"48a5f4a2b26bd2.json","parameterValues":["'nrf9160dk'","'zephyr'"]}