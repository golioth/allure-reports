{"uid":"c535a8a9e71039e3","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1727782393771,"stop":1727782487349,"duration":93578},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7ec515d0>\ndevice = <golioth.golioth.Device object at 0xffff7ec686d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727782365177,"stop":1727782365177,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727782365178,"stop":1727782365178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727782365178,"stop":1727782365178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727782365179,"stop":1727782365179,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727782365180,"stop":1727782365182,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727782365180,"stop":1727782365180,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727782365183,"stop":1727782365183,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727782365184,"stop":1727782365610,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727782365184,"stop":1727782365184,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727782365611,"stop":1727782366482,"duration":871},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727782366483,"stop":1727782392689,"duration":26206},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727782392690,"stop":1727782393766,"duration":1076},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7ec515d0>\ndevice = <golioth.golioth.Device object at 0xffff7ec686d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d6af81ef3cf9ad2d","name":"log","source":"d6af81ef3cf9ad2d.txt","type":"text/plain","size":18482}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727782487604,"stop":1727782487616,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727782487618,"stop":1727782487997,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727782487999,"stop":1727782488001,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727782488006,"stop":1727782488006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"db99627a3fa7"},{"name":"thread","value":"526-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"23193a346c1bd191","status":"passed","time":{"start":1727775860917,"stop":1727775880366,"duration":19449}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":33,"unknown":0,"total":42},"items":[{"uid":"22b2ea929941b95f","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/22b2ea929941b95f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727780540978,"stop":1727780634721,"duration":93743}},{"uid":"64d5718fd4046a06","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/64d5718fd4046a06","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727778697583,"stop":1727778791202,"duration":93619}},{"uid":"4d1ce8ddb255f834","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/4d1ce8ddb255f834","status":"passed","time":{"start":1727775860917,"stop":1727775880366,"duration":19449}},{"uid":"f9120f081c599bae","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/f9120f081c599bae","status":"passed","time":{"start":1727771837860,"stop":1727771859167,"duration":21307}},{"uid":"d0baf9acbe7cc185","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/d0baf9acbe7cc185","status":"passed","time":{"start":1727766730399,"stop":1727766745466,"duration":15067}},{"uid":"abb5f40af8b8dcd9","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/abb5f40af8b8dcd9","status":"passed","time":{"start":1727765500782,"stop":1727765515408,"duration":14626}},{"uid":"df2d7c596ca4ca05","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/df2d7c596ca4ca05","status":"passed","time":{"start":1727745299792,"stop":1727745315982,"duration":16190}},{"uid":"1ad4c5e2ab6e6c20","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/1ad4c5e2ab6e6c20","status":"passed","time":{"start":1727732997173,"stop":1727733011490,"duration":14317}},{"uid":"f777b9da75291dec","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/f777b9da75291dec","status":"passed","time":{"start":1727658973011,"stop":1727658988212,"duration":15201}},{"uid":"6a92283ed095b746","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/6a92283ed095b746","status":"passed","time":{"start":1727571848433,"stop":1727571862805,"duration":14372}},{"uid":"eb12b0606ffaa571","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/eb12b0606ffaa571","status":"passed","time":{"start":1727549697971,"stop":1727549715400,"duration":17429}},{"uid":"cfad54701aa760b8","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/cfad54701aa760b8","status":"passed","time":{"start":1727548635487,"stop":1727548649463,"duration":13976}},{"uid":"22bd350294ffa106","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/22bd350294ffa106","status":"passed","time":{"start":1727548394505,"stop":1727548430509,"duration":36004}},{"uid":"a6b3d4a1c4327d24","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/a6b3d4a1c4327d24","status":"passed","time":{"start":1727485950542,"stop":1727485971612,"duration":21070}},{"uid":"a46c54f83fc267a7","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/a46c54f83fc267a7","status":"passed","time":{"start":1727478259280,"stop":1727478293370,"duration":34090}},{"uid":"a8d173dad3a00bf9","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/a8d173dad3a00bf9","status":"passed","time":{"start":1727462650466,"stop":1727462668666,"duration":18200}},{"uid":"8adbc7c6c57c0614","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/8adbc7c6c57c0614","status":"passed","time":{"start":1727462650466,"stop":1727462668666,"duration":18200}},{"uid":"425e07ebce0fc087","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/425e07ebce0fc087","status":"passed","time":{"start":1727458011913,"stop":1727458038778,"duration":26865}},{"uid":"536fb62c273698a2","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/536fb62c273698a2","status":"passed","time":{"start":1727454585662,"stop":1727454604110,"duration":18448}},{"uid":"e7a08573bb11b9ee","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/e7a08573bb11b9ee","status":"passed","time":{"start":1727455964124,"stop":1727455982940,"duration":18816}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c535a8a9e71039e3.json","parameterValues":["'nrf9160dk'","'zephyr'"]}