{"uid":"2dba3e14f8fe0ce5","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"d863d307dfacb440b83f8a44acfa67f4","time":{"start":1727784437570,"stop":1727784530819,"duration":93249},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf6f5750>\ndevice = <golioth.golioth.Device object at 0xffffaf6b8a90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727784423043,"stop":1727784423044,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727784423044,"stop":1727784423044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727784423045,"stop":1727784423045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727784423045,"stop":1727784423046,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727784423046,"stop":1727784423048,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727784423046,"stop":1727784423046,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727784423049,"stop":1727784423049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727784423050,"stop":1727784423050,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727784423050,"stop":1727784423473,"duration":423},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727784423473,"stop":1727784424347,"duration":874},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727784424347,"stop":1727784436947,"duration":12600},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727784436947,"stop":1727784437568,"duration":621},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf6f5750>\ndevice = <golioth.golioth.Device object at 0xffffaf6b8a90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c9bf887ea7ed84af","name":"log","source":"c9bf887ea7ed84af.txt","type":"text/plain","size":24320}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727784531049,"stop":1727784531093,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727784531095,"stop":1727784531501,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727784531503,"stop":1727784531506,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727784531510,"stop":1727784531511,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d0eeb52a0a3f"},{"name":"thread","value":"583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"82c25a11d87e6a2c","status":"passed","time":{"start":1727775147143,"stop":1727775206337,"duration":59194}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":43,"unknown":0,"total":46},"items":[{"uid":"107b2392a92f80fc","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/107b2392a92f80fc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727782926624,"stop":1727783019812,"duration":93188}},{"uid":"1cdc75e41f38b6ab","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/1cdc75e41f38b6ab","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727777477650,"stop":1727777525787,"duration":48137}},{"uid":"1a76ce7f5745071d","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/1a76ce7f5745071d","status":"passed","time":{"start":1727775147143,"stop":1727775206337,"duration":59194}},{"uid":"1ebbafd654475042","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/1ebbafd654475042","status":"passed","time":{"start":1727771940576,"stop":1727771998919,"duration":58343}},{"uid":"46a67c0df4a6abc","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/46a67c0df4a6abc","status":"passed","time":{"start":1727769397475,"stop":1727769456819,"duration":59344}},{"uid":"9cbe03f870086e6","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/9cbe03f870086e6","status":"passed","time":{"start":1727765985525,"stop":1727766044358,"duration":58833}},{"uid":"dc0e942de442358c","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/dc0e942de442358c","status":"passed","time":{"start":1727764581598,"stop":1727764640236,"duration":58638}},{"uid":"22180667873868d3","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/22180667873868d3","status":"passed","time":{"start":1727760822172,"stop":1727760880791,"duration":58619}},{"uid":"6ab8b8c8931edaa3","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/6ab8b8c8931edaa3","status":"passed","time":{"start":1727745284936,"stop":1727745342831,"duration":57895}},{"uid":"fc30cadc1e7e8b44","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/fc30cadc1e7e8b44","status":"passed","time":{"start":1727732551101,"stop":1727732609591,"duration":58490}},{"uid":"c7a72dd8e29bb8ed","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/c7a72dd8e29bb8ed","status":"passed","time":{"start":1727658663730,"stop":1727658722726,"duration":58996}},{"uid":"e7e6f2e81817b381","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/e7e6f2e81817b381","status":"passed","time":{"start":1727572349579,"stop":1727572408510,"duration":58931}},{"uid":"b41af58048362e2a","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/b41af58048362e2a","status":"passed","time":{"start":1727547727729,"stop":1727547786570,"duration":58841}},{"uid":"b3bed863a815ddb5","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/b3bed863a815ddb5","status":"passed","time":{"start":1727544982427,"stop":1727545042027,"duration":59600}},{"uid":"688def90b7d77145","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/688def90b7d77145","status":"passed","time":{"start":1727544534389,"stop":1727544592810,"duration":58421}},{"uid":"e33d35babd2491de","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/e33d35babd2491de","status":"passed","time":{"start":1727486058273,"stop":1727486117278,"duration":59005}},{"uid":"ba55d684b374f1aa","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/ba55d684b374f1aa","status":"passed","time":{"start":1727477243662,"stop":1727477303598,"duration":59936}},{"uid":"d90a85c5585ecbb2","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d90a85c5585ecbb2","status":"passed","time":{"start":1727463011778,"stop":1727463070922,"duration":59144}},{"uid":"ed47fb7d151bda69","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ed47fb7d151bda69","status":"passed","time":{"start":1727463011778,"stop":1727463070922,"duration":59144}},{"uid":"45ed69ce133e8f36","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/45ed69ce133e8f36","status":"passed","time":{"start":1727365986194,"stop":1727366044481,"duration":58287}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"2dba3e14f8fe0ce5.json","parameterValues":["'rak5010'","'zephyr'"]}