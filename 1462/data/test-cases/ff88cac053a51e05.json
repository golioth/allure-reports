{"uid":"ff88cac053a51e05","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"ddc2f31d085089b8b5f25dfb44556fd5","time":{"start":1727390647735,"stop":1727390740528,"duration":92793},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff897d9f50>\ndevice = <golioth.golioth.Device object at 0xffff89a3ce10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727390638462,"stop":1727390638462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727390638462,"stop":1727390638462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727390638463,"stop":1727390638463,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727390638463,"stop":1727390638464,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727390638464,"stop":1727390638464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727390638464,"stop":1727390638467,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727390638467,"stop":1727390638468,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727390638468,"stop":1727390639016,"duration":548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727390638468,"stop":1727390638468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727390639017,"stop":1727390639851,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727390639852,"stop":1727390647229,"duration":7377},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727390647230,"stop":1727390647732,"duration":502},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff897d9f50>\ndevice = <golioth.golioth.Device object at 0xffff89a3ce10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"efe7cddc956c76ad","name":"log","source":"efe7cddc956c76ad.txt","type":"text/plain","size":15404}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727390740798,"stop":1727390740843,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727390740845,"stop":1727390741219,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727390741221,"stop":1727390741224,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727390741228,"stop":1727390741229,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8fee96e2d1ad"},{"name":"thread","value":"389-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":17,"unknown":0,"total":19},"items":[{"uid":"6c42a18eb8179dd1","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/6c42a18eb8179dd1","status":"passed","time":{"start":1727385156404,"stop":1727385175647,"duration":19243}},{"uid":"f0bccd0bb4e14170","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/f0bccd0bb4e14170","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1727382910429,"stop":1727382910429,"duration":0}},{"uid":"13fa559920c8bb4d","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/13fa559920c8bb4d","status":"passed","time":{"start":1727380028076,"stop":1727380047610,"duration":19534}},{"uid":"f3eb2c4c08599e2e","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/f3eb2c4c08599e2e","status":"passed","time":{"start":1727373972197,"stop":1727373990260,"duration":18063}},{"uid":"4184711aab592742","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/4184711aab592742","status":"passed","time":{"start":1727372683197,"stop":1727372698053,"duration":14856}},{"uid":"844fa995939617d6","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/844fa995939617d6","status":"passed","time":{"start":1727369635885,"stop":1727369650633,"duration":14748}},{"uid":"df6127875f3a9bd7","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/df6127875f3a9bd7","status":"passed","time":{"start":1727365300289,"stop":1727365316917,"duration":16628}},{"uid":"ecc39bfe9eb8c3ce","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/ecc39bfe9eb8c3ce","status":"passed","time":{"start":1727365787574,"stop":1727365804395,"duration":16821}},{"uid":"52d47ea6c6fe518e","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/52d47ea6c6fe518e","status":"passed","time":{"start":1727360776638,"stop":1727360800062,"duration":23424}},{"uid":"40cb35d9371a9f30","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/40cb35d9371a9f30","status":"passed","time":{"start":1727315556025,"stop":1727315577799,"duration":21774}},{"uid":"ac5d0d6b873d5321","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/ac5d0d6b873d5321","status":"passed","time":{"start":1727312255496,"stop":1727312271127,"duration":15631}},{"uid":"474d1bb0816f72ee","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/474d1bb0816f72ee","status":"passed","time":{"start":1727308335971,"stop":1727308351019,"duration":15048}},{"uid":"3da0a52c90906481","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/3da0a52c90906481","status":"passed","time":{"start":1727306081032,"stop":1727306096380,"duration":15348}},{"uid":"1333e00328963775","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/1333e00328963775","status":"passed","time":{"start":1727301371510,"stop":1727301389890,"duration":18380}},{"uid":"b9d3a765e57a7ed9","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/b9d3a765e57a7ed9","status":"passed","time":{"start":1727295058403,"stop":1727295079020,"duration":20617}},{"uid":"9ddb68fb5d42ca43","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/9ddb68fb5d42ca43","status":"passed","time":{"start":1727288900197,"stop":1727288918821,"duration":18624}},{"uid":"a48e1516cf1ea5d8","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/a48e1516cf1ea5d8","status":"passed","time":{"start":1727284753584,"stop":1727284768837,"duration":15253}},{"uid":"960dc213faf0a864","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/960dc213faf0a864","status":"passed","time":{"start":1727282669846,"stop":1727282687226,"duration":17380}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"ff88cac053a51e05.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}