{"uid":"e497565cf0377e84","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"bb4a636b6b2082650c724d1259211759","time":{"start":1727455318644,"stop":1727455411772,"duration":93128},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9653a4d0>\ndevice = <golioth.golioth.Device object at 0xffff9652c610>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727455309148,"stop":1727455309148,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727455309148,"stop":1727455309148,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727455309149,"stop":1727455309149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727455309149,"stop":1727455309149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727455309150,"stop":1727455309150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727455309151,"stop":1727455309153,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727455309153,"stop":1727455309154,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727455309154,"stop":1727455309154,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727455309155,"stop":1727455309572,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727455309572,"stop":1727455310414,"duration":842},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727455310415,"stop":1727455318118,"duration":7703},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727455318118,"stop":1727455318641,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9653a4d0>\ndevice = <golioth.golioth.Device object at 0xffff9652c610>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"73b79de27208c14f","name":"log","source":"73b79de27208c14f.txt","type":"text/plain","size":17881}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727455412134,"stop":1727455412295,"duration":161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727455412297,"stop":1727455412669,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727455412672,"stop":1727455412674,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727455412679,"stop":1727455412679,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cf0995f61e09"},{"name":"thread","value":"635-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6a82844ad7b50b46","status":"passed","time":{"start":1727391028255,"stop":1727391056089,"duration":27834}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":20,"unknown":0,"total":24},"items":[{"uid":"191c8f69be3ad5ec","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/191c8f69be3ad5ec","status":"passed","time":{"start":1727366163850,"stop":1727366192782,"duration":28932}},{"uid":"df3e054d62a3025d","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/df3e054d62a3025d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727399721235,"stop":1727399814276,"duration":93041}},{"uid":"4feb9b52221ed05","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/4feb9b52221ed05","status":"passed","time":{"start":1727394341009,"stop":1727394369938,"duration":28929}},{"uid":"b47996c63fadc31c","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/b47996c63fadc31c","status":"passed","time":{"start":1727391437888,"stop":1727391469046,"duration":31158}},{"uid":"489261014e95600b","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/489261014e95600b","status":"passed","time":{"start":1727391028255,"stop":1727391056089,"duration":27834}},{"uid":"1687980fa11d1200","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/1687980fa11d1200","status":"passed","time":{"start":1727385497695,"stop":1727385526634,"duration":28939}},{"uid":"7e80177bce93d5ec","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/7e80177bce93d5ec","status":"passed","time":{"start":1727383331989,"stop":1727383359431,"duration":27442}},{"uid":"7e960f0d9993d2ea","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/7e960f0d9993d2ea","status":"passed","time":{"start":1727380440463,"stop":1727380469374,"duration":28911}},{"uid":"c3df020b6c6501ca","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/c3df020b6c6501ca","status":"passed","time":{"start":1727374341567,"stop":1727374370413,"duration":28846}},{"uid":"e73b0e681eb7af7c","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/e73b0e681eb7af7c","status":"passed","time":{"start":1727373079906,"stop":1727373108701,"duration":28795}},{"uid":"74b0304c1f824b30","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/74b0304c1f824b30","status":"passed","time":{"start":1727370028301,"stop":1727370055157,"duration":26856}},{"uid":"6717907238b9c125","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/6717907238b9c125","status":"passed","time":{"start":1727365766119,"stop":1727365795005,"duration":28886}},{"uid":"67c9a7ca7f924fb6","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/67c9a7ca7f924fb6","status":"passed","time":{"start":1727366163850,"stop":1727366192782,"duration":28932}},{"uid":"3bfb164ecfea2417","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/3bfb164ecfea2417","status":"passed","time":{"start":1727361189215,"stop":1727361218968,"duration":29753}},{"uid":"f4b6b56d9fd3e3cc","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/f4b6b56d9fd3e3cc","status":"passed","time":{"start":1727315977130,"stop":1727316007267,"duration":30137}},{"uid":"3a9f7bb4eeb466ed","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/3a9f7bb4eeb466ed","status":"passed","time":{"start":1727312564720,"stop":1727312593242,"duration":28522}},{"uid":"999cb3ee4ad6db60","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/999cb3ee4ad6db60","status":"passed","time":{"start":1727308733031,"stop":1727308759511,"duration":26480}},{"uid":"b9787e39e8b646de","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/b9787e39e8b646de","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727306507789,"stop":1727306524011,"duration":16222}},{"uid":"767dc42810576989","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/767dc42810576989","status":"passed","time":{"start":1727301833938,"stop":1727301862902,"duration":28964}},{"uid":"c391cfccefc54f2b","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/c391cfccefc54f2b","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727295408920,"stop":1727295423360,"duration":14440}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"e497565cf0377e84.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}