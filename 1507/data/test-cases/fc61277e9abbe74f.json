{"uid":"fc61277e9abbe74f","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"467e555cbdae75d46aefa9c64cb6440a","time":{"start":1727786486657,"stop":1727786599399,"duration":112742},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffabfe5e10>\ndevice = <golioth.golioth.Device object at 0xffffabfab050>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727786450310,"stop":1727786450310,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727786450311,"stop":1727786450312,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727786450311,"stop":1727786450311,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727786450312,"stop":1727786450312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727786450313,"stop":1727786450316,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727786450313,"stop":1727786450313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727786450317,"stop":1727786450318,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727786450317,"stop":1727786450317,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727786450318,"stop":1727786450741,"duration":423},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727786450741,"stop":1727786451603,"duration":862},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727786451604,"stop":1727786486048,"duration":34444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727786486048,"stop":1727786486654,"duration":606},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffabfe5e10>\ndevice = <golioth.golioth.Device object at 0xffffabfab050>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"362f430b9a94b483","name":"log","source":"362f430b9a94b483.txt","type":"text/plain","size":24425}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727786599748,"stop":1727786599756,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727786599758,"stop":1727786600167,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727786600169,"stop":1727786600171,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727786600176,"stop":1727786600176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8a30f11aeb85"},{"name":"thread","value":"574-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d6c43aa8f4f0c24e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727786332900,"stop":1727786445531,"duration":112631}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":42,"unknown":0,"total":47},"items":[{"uid":"7701605e941402de","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/7701605e941402de","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727784549702,"stop":1727784662507,"duration":112805}},{"uid":"491ac3bd8c080dc","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/491ac3bd8c080dc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727782682421,"stop":1727782795266,"duration":112845}},{"uid":"e6986c08ea181264","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/e6986c08ea181264","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727777544638,"stop":1727777657519,"duration":112881}},{"uid":"4a28c154043246f7","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/4a28c154043246f7","status":"passed","time":{"start":1727775051658,"stop":1727775105702,"duration":54044}},{"uid":"d045f04d433420b6","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/d045f04d433420b6","status":"passed","time":{"start":1727772132383,"stop":1727772185481,"duration":53098}},{"uid":"b891b084bb33e115","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/b891b084bb33e115","status":"passed","time":{"start":1727769475295,"stop":1727769528230,"duration":52935}},{"uid":"6800eeb815d7af2d","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/6800eeb815d7af2d","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1727765891318,"stop":1727765944316,"duration":52998}},{"uid":"229efe2b264eaad4","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/229efe2b264eaad4","status":"passed","time":{"start":1727764775115,"stop":1727764828015,"duration":52900}},{"uid":"e00f070d8d0f8a6c","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/e00f070d8d0f8a6c","status":"passed","time":{"start":1727760922071,"stop":1727760975551,"duration":53480}},{"uid":"d410d2839927464f","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/d410d2839927464f","status":"passed","time":{"start":1727745190749,"stop":1727745243897,"duration":53148}},{"uid":"180c405bac7c2760","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/180c405bac7c2760","status":"passed","time":{"start":1727732478936,"stop":1727732532038,"duration":53102}},{"uid":"eeaf2651959a96cc","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/eeaf2651959a96cc","status":"passed","time":{"start":1727658857578,"stop":1727658910419,"duration":52841}},{"uid":"8016abd60bab6c1e","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/8016abd60bab6c1e","status":"passed","time":{"start":1727572449488,"stop":1727572502762,"duration":53274}},{"uid":"f45090278929ef7e","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/f45090278929ef7e","status":"passed","time":{"start":1727547656645,"stop":1727547709303,"duration":52658}},{"uid":"e6318307a604a8b5","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/e6318307a604a8b5","status":"passed","time":{"start":1727544881417,"stop":1727544941322,"duration":59905}},{"uid":"fe4fbda3485bbec","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/fe4fbda3485bbec","status":"passed","time":{"start":1727544611191,"stop":1727544664280,"duration":53089}},{"uid":"4f8e8127a440953c","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/4f8e8127a440953c","status":"passed","time":{"start":1727485964365,"stop":1727486017743,"duration":53378}},{"uid":"958b46b77f7a12e6","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/958b46b77f7a12e6","status":"passed","time":{"start":1727477442541,"stop":1727477495028,"duration":52487}},{"uid":"c080bba63d1537ca","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/c080bba63d1537ca","status":"passed","time":{"start":1727463205521,"stop":1727463258994,"duration":53473}},{"uid":"84f44831247b3d6a","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/84f44831247b3d6a","status":"passed","time":{"start":1727463205521,"stop":1727463258994,"duration":53473}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"fc61277e9abbe74f.json","parameterValues":["'rak5010'","'zephyr'"]}