{"uid":"1e61a22a7a9b3422","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a7312cf31d6314ecf7ffd5a0a0af0ddc","time":{"start":1727786210478,"stop":1727786233453,"duration":22975},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95be2390>\ndevice = <golioth.golioth.Device object at 0xffff95bfd490>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727786194525,"stop":1727786194525,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727786194525,"stop":1727786194525,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727786194526,"stop":1727786194526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727786194526,"stop":1727786194526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727786194527,"stop":1727786194527,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727786194527,"stop":1727786194529,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727786194530,"stop":1727786194530,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727786194531,"stop":1727786194950,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727786194531,"stop":1727786194531,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727786194950,"stop":1727786195802,"duration":852},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727786195803,"stop":1727786209545,"duration":13742},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727786209545,"stop":1727786210476,"duration":931},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95be2390>\ndevice = <golioth.golioth.Device object at 0xffff95bfd490>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"5c6e3aa87dbb13c3","name":"log","source":"5c6e3aa87dbb13c3.txt","type":"text/plain","size":15070}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727786233799,"stop":1727786233826,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727786233828,"stop":1727786234220,"duration":392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727786234222,"stop":1727786234224,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727786234229,"stop":1727786234229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b690ce1cba85"},{"name":"thread","value":"461-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":39,"unknown":0,"total":47},"items":[{"uid":"aee122e4e249cdf8","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/aee122e4e249cdf8","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727784748413,"stop":1727784748413,"duration":0}},{"uid":"6cdd9a773aae40cb","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/6cdd9a773aae40cb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727781268847,"stop":1727781291923,"duration":23076}},{"uid":"ca1438b7d491c726","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/ca1438b7d491c726","status":"passed","time":{"start":1727777679111,"stop":1727777706979,"duration":27868}},{"uid":"6632c6daead2b9bf","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/6632c6daead2b9bf","status":"passed","time":{"start":1727775896888,"stop":1727775924372,"duration":27484}},{"uid":"4e2e4fc6d4f98a6a","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/4e2e4fc6d4f98a6a","status":"passed","time":{"start":1727772105288,"stop":1727772134115,"duration":28827}},{"uid":"637c20d9bb265f1c","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/637c20d9bb265f1c","status":"passed","time":{"start":1727771180477,"stop":1727771210321,"duration":29844}},{"uid":"c81cded12f79453f","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/c81cded12f79453f","status":"passed","time":{"start":1727766208004,"stop":1727766238041,"duration":30037}},{"uid":"8ad692028b16858d","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/8ad692028b16858d","status":"passed","time":{"start":1727766346128,"stop":1727766376679,"duration":30551}},{"uid":"c2b13c80a1e20d64","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/c2b13c80a1e20d64","status":"passed","time":{"start":1727761452686,"stop":1727761483190,"duration":30504}},{"uid":"8691de6a8b79e817","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/8691de6a8b79e817","status":"passed","time":{"start":1727744718178,"stop":1727744747295,"duration":29117}},{"uid":"cc84d8e8e0d2d0e2","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/cc84d8e8e0d2d0e2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727732468402,"stop":1727732491334,"duration":22932}},{"uid":"5f652ad6d4d0b353","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/5f652ad6d4d0b353","status":"passed","time":{"start":1727658680827,"stop":1727658707972,"duration":27145}},{"uid":"dffb8d9473a845ef","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/dffb8d9473a845ef","status":"passed","time":{"start":1727572829149,"stop":1727572856213,"duration":27064}},{"uid":"369a6f0bb5196882","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/369a6f0bb5196882","status":"passed","time":{"start":1727548378700,"stop":1727548408754,"duration":30054}},{"uid":"dd3b51c11ac89845","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/dd3b51c11ac89845","status":"passed","time":{"start":1727547457270,"stop":1727547486641,"duration":29371}},{"uid":"cd6dd6e396bdd9d","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/cd6dd6e396bdd9d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727546142025,"stop":1727546235102,"duration":93077}},{"uid":"747ba2ed89e253de","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/747ba2ed89e253de","status":"passed","time":{"start":1727485735515,"stop":1727485763784,"duration":28269}},{"uid":"aff4e0221ac577d1","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/aff4e0221ac577d1","status":"passed","time":{"start":1727477748797,"stop":1727477775792,"duration":26995}},{"uid":"47dbeca79860fc3","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/47dbeca79860fc3","status":"passed","time":{"start":1727464116735,"stop":1727464141814,"duration":25079}},{"uid":"ba1cc89eb404bf3e","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ba1cc89eb404bf3e","status":"passed","time":{"start":1727464116735,"stop":1727464141814,"duration":25079}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1e61a22a7a9b3422.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}