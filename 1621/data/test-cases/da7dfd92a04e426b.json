{"uid":"da7dfd92a04e426b","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a7312cf31d6314ecf7ffd5a0a0af0ddc","time":{"start":1728537536174,"stop":1728537559157,"duration":22983},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab3ce9d0>\ndevice = <golioth.golioth.Device object at 0xffffab3ed7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728537520230,"stop":1728537520230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728537520231,"stop":1728537520231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728537520231,"stop":1728537520231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728537520232,"stop":1728537520232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728537520233,"stop":1728537520235,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728537520233,"stop":1728537520233,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728537520236,"stop":1728537520237,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728537520236,"stop":1728537520236,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728537520237,"stop":1728537520646,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728537520647,"stop":1728537521496,"duration":849},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728537521497,"stop":1728537535120,"duration":13623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728537535120,"stop":1728537536171,"duration":1051},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab3ce9d0>\ndevice = <golioth.golioth.Device object at 0xffffab3ed7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b9db2e6d3e56d0c9","name":"log","source":"b9db2e6d3e56d0c9.txt","type":"text/plain","size":18637}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728537559431,"stop":1728537559479,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728537559481,"stop":1728537559849,"duration":368},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728537559852,"stop":1728537559854,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728537559859,"stop":1728537559859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5eaafeb1e22b"},{"name":"thread","value":"439-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c80c0c519750aef7","status":"passed","time":{"start":1728494248221,"stop":1728494275358,"duration":27137}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":28,"skipped":0,"passed":97,"unknown":0,"total":125},"items":[{"uid":"8543ded1b3236139","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/8543ded1b3236139","status":"passed","time":{"start":1728522150415,"stop":1728522176449,"duration":26034}},{"uid":"73d22371c400a106","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/73d22371c400a106","status":"passed","time":{"start":1728495110060,"stop":1728495136078,"duration":26018}},{"uid":"b1aee7b881dc995c","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/b1aee7b881dc995c","status":"passed","time":{"start":1728494248221,"stop":1728494275358,"duration":27137}},{"uid":"134d71fbbcea21e6","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/134d71fbbcea21e6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728485142117,"stop":1728485165189,"duration":23072}},{"uid":"c1cfbd248533bcbd","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/c1cfbd248533bcbd","status":"passed","time":{"start":1728436298051,"stop":1728436325226,"duration":27175}},{"uid":"fe231fb366a06fac","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/fe231fb366a06fac","status":"passed","time":{"start":1728426965069,"stop":1728426992156,"duration":27087}},{"uid":"1328f5e6bfa1032e","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/1328f5e6bfa1032e","status":"passed","time":{"start":1728343262982,"stop":1728343288310,"duration":25328}},{"uid":"7cf7f4c6891f9e40","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/7cf7f4c6891f9e40","status":"passed","time":{"start":1728401408109,"stop":1728401433122,"duration":25013}},{"uid":"abd6181506ec247c","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/abd6181506ec247c","status":"passed","time":{"start":1728343262982,"stop":1728343288310,"duration":25328}},{"uid":"8de742b670b9610","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/8de742b670b9610","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728349783331,"stop":1728349806407,"duration":23076}},{"uid":"92a38d3c72d62836","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/92a38d3c72d62836","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728344954712,"stop":1728344977636,"duration":22924}},{"uid":"91f433e5a3793a87","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/91f433e5a3793a87","status":"passed","time":{"start":1728343262982,"stop":1728343288310,"duration":25328}},{"uid":"e6e1e86e82b33bd9","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/e6e1e86e82b33bd9","status":"passed","time":{"start":1728338174994,"stop":1728338202012,"duration":27018}},{"uid":"65a32956f8fc0063","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/65a32956f8fc0063","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728328703509,"stop":1728328726544,"duration":23035}},{"uid":"9b5849c74b9b185a","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/9b5849c74b9b185a","status":"passed","time":{"start":1728328640497,"stop":1728328669320,"duration":28823}},{"uid":"bea29d7bdcb62f5e","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/bea29d7bdcb62f5e","status":"passed","time":{"start":1728321330059,"stop":1728321359935,"duration":29876}},{"uid":"f47c1bf4b161dcad","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/f47c1bf4b161dcad","status":"passed","time":{"start":1728318379692,"stop":1728318406676,"duration":26984}},{"uid":"5b077ee180fb9d54","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/5b077ee180fb9d54","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728315624680,"stop":1728315647708,"duration":23028}},{"uid":"641c9607a681727a","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/641c9607a681727a","status":"passed","time":{"start":1728309181359,"stop":1728309208426,"duration":27067}},{"uid":"4566c4c68ea453ee","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/4566c4c68ea453ee","status":"passed","time":{"start":1728308080786,"stop":1728308108613,"duration":27827}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"da7dfd92a04e426b.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}