{"uid":"cb7851a56e49279a","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1728537731936,"stop":1728537754555,"duration":22619},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff96e4a110>\ndevice = <golioth.golioth.Device object at 0xffff96e59410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728537715586,"stop":1728537715586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728537715586,"stop":1728537715586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728537715587,"stop":1728537715588,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728537715587,"stop":1728537715587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728537715588,"stop":1728537715591,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728537715588,"stop":1728537715588,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728537715591,"stop":1728537715592,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728537715592,"stop":1728537716097,"duration":505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728537715592,"stop":1728537715592,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728537716098,"stop":1728537716959,"duration":861},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728537716960,"stop":1728537731058,"duration":14098},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728537731059,"stop":1728537731933,"duration":874},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff96e4a110>\ndevice = <golioth.golioth.Device object at 0xffff96e59410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"114b51d0223b8061","name":"log","source":"114b51d0223b8061.txt","type":"text/plain","size":12901}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728537754935,"stop":1728537754965,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728537754967,"stop":1728537755345,"duration":378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728537755347,"stop":1728537755349,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728537755354,"stop":1728537755355,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5eaafeb1e22b"},{"name":"thread","value":"508-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7f967ff0ba102be6","status":"passed","time":{"start":1728494438510,"stop":1728494463204,"duration":24694}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":13,"skipped":0,"passed":109,"unknown":0,"total":123},"items":[{"uid":"3547b5a93e474e65","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/3547b5a93e474e65","status":"passed","time":{"start":1728522356260,"stop":1728522378355,"duration":22095}},{"uid":"f8f866dcd3e247d8","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/f8f866dcd3e247d8","status":"passed","time":{"start":1728495279909,"stop":1728495303920,"duration":24011}},{"uid":"f3f7b846f3eb88ea","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/f3f7b846f3eb88ea","status":"passed","time":{"start":1728494438510,"stop":1728494463204,"duration":24694}},{"uid":"c9afeab080210fc4","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/c9afeab080210fc4","status":"passed","time":{"start":1728485339405,"stop":1728485361239,"duration":21834}},{"uid":"f508f58fbd9a4065","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/f508f58fbd9a4065","status":"passed","time":{"start":1728436032412,"stop":1728436056147,"duration":23735}},{"uid":"e19ecb6d2f7a25af","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/e19ecb6d2f7a25af","status":"passed","time":{"start":1728426743492,"stop":1728426766305,"duration":22813}},{"uid":"a6badaf1b94bfb2d","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/a6badaf1b94bfb2d","status":"passed","time":{"start":1728343050038,"stop":1728343071939,"duration":21901}},{"uid":"bd5d8b0a99629ef1","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/bd5d8b0a99629ef1","status":"passed","time":{"start":1728401624535,"stop":1728401647303,"duration":22768}},{"uid":"7927a900352277ff","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/7927a900352277ff","status":"passed","time":{"start":1728343050038,"stop":1728343071939,"duration":21901}},{"uid":"c355bc3f5fcdd8e0","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/c355bc3f5fcdd8e0","status":"passed","time":{"start":1728349511880,"stop":1728349533556,"duration":21676}},{"uid":"14f98e99b6a20dd8","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/14f98e99b6a20dd8","status":"passed","time":{"start":1728344690629,"stop":1728344711984,"duration":21355}},{"uid":"76dcd97da86e26b8","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/76dcd97da86e26b8","status":"passed","time":{"start":1728343050038,"stop":1728343071939,"duration":21901}},{"uid":"167b7294f28090fc","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/167b7294f28090fc","status":"passed","time":{"start":1728337859340,"stop":1728337881992,"duration":22652}},{"uid":"dbb4e75ade47b5ee","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/dbb4e75ade47b5ee","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728328566100,"stop":1728328588642,"duration":22542}},{"uid":"e0ff1941fd5c6fda","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/e0ff1941fd5c6fda","status":"passed","time":{"start":1728327859933,"stop":1728327882759,"duration":22826}},{"uid":"7f47197cebb2a291","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/7f47197cebb2a291","status":"passed","time":{"start":1728321107720,"stop":1728321132204,"duration":24484}},{"uid":"445c92bb07cd34dd","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/445c92bb07cd34dd","status":"passed","time":{"start":1728318117925,"stop":1728318139442,"duration":21517}},{"uid":"35d965530f323a9","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/35d965530f323a9","status":"passed","time":{"start":1728314810986,"stop":1728314830344,"duration":19358}},{"uid":"f195f5d6682e76f","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/f195f5d6682e76f","status":"passed","time":{"start":1728308443460,"stop":1728308466896,"duration":23436}},{"uid":"b29a70712af1adc3","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/b29a70712af1adc3","status":"passed","time":{"start":1728308200643,"stop":1728308225427,"duration":24784}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"cb7851a56e49279a.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}