{"uid":"3f14f649a7ea843f","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"bb4a636b6b2082650c724d1259211759","time":{"start":1733100596854,"stop":1733100635624,"duration":38770},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84195150>\ndevice = <golioth.golioth.Device object at 0xffff8417a5d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1733100586928,"stop":1733100586929,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1733100586929,"stop":1733100586929,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1733100586930,"stop":1733100586930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1733100586930,"stop":1733100586930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1733100586931,"stop":1733100586931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1733100586931,"stop":1733100586933,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1733100586934,"stop":1733100586934,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1733100586935,"stop":1733100586935,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1733100586936,"stop":1733100587417,"duration":481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1733100587417,"stop":1733100588371,"duration":954},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1733100588372,"stop":1733100596291,"duration":7919},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1733100596291,"stop":1733100596851,"duration":560},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84195150>\ndevice = <golioth.golioth.Device object at 0xffff8417a5d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"65056a1e7b4ad00a","name":"log","source":"65056a1e7b4ad00a.txt","type":"text/plain","size":28931}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1733100635952,"stop":1733100636220,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1733100636222,"stop":1733100636739,"duration":517},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1733100636741,"stop":1733100636744,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1733100636748,"stop":1733100636749,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9a2065cba3d0"},{"name":"thread","value":"414-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":75,"unknown":0,"total":80},"items":[{"uid":"e5a0e5e8a2eb29ed","reportUrl":"https://golioth.github.io/allure-reports/main/1856//#testresult/e5a0e5e8a2eb29ed","status":"passed","time":{"start":1733015230499,"stop":1733015258453,"duration":27954}},{"uid":"422208e5203b6886","reportUrl":"https://golioth.github.io/allure-reports/main/1855//#testresult/422208e5203b6886","status":"passed","time":{"start":1732928286033,"stop":1732928313962,"duration":27929}},{"uid":"459d19b0571bd291","reportUrl":"https://golioth.github.io/allure-reports/main/1854//#testresult/459d19b0571bd291","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1732842617379,"stop":1732842617379,"duration":0}},{"uid":"d4ee6aec4a25657e","reportUrl":"https://golioth.github.io/allure-reports/main/1853//#testresult/d4ee6aec4a25657e","status":"passed","time":{"start":1732754859881,"stop":1732754887266,"duration":27385}},{"uid":"9be94a9829bf5399","reportUrl":"https://golioth.github.io/allure-reports/main/1846//#testresult/9be94a9829bf5399","status":"passed","time":{"start":1732668450963,"stop":1732668476441,"duration":25478}},{"uid":"8b7806cf0c48b2f9","reportUrl":"https://golioth.github.io/allure-reports/main/1845//#testresult/8b7806cf0c48b2f9","status":"passed","time":{"start":1732642640869,"stop":1732642672572,"duration":31703}},{"uid":"2741798d7ae6eefb","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/2741798d7ae6eefb","status":"passed","time":{"start":1732575896511,"stop":1732575925473,"duration":28962}},{"uid":"69d2e514a2fc74e5","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/69d2e514a2fc74e5","status":"passed","time":{"start":1732575896511,"stop":1732575925473,"duration":28962}},{"uid":"5ce5da6dadb7a60d","reportUrl":"https://golioth.github.io/allure-reports/main/1843//#testresult/5ce5da6dadb7a60d","status":"passed","time":{"start":1732582119612,"stop":1732582149660,"duration":30048}},{"uid":"3fb272b6d817a58a","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/3fb272b6d817a58a","status":"passed","time":{"start":1732575896511,"stop":1732575925473,"duration":28962}},{"uid":"7429a0b13972a646","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/7429a0b13972a646","status":"passed","time":{"start":1732575896511,"stop":1732575925473,"duration":28962}},{"uid":"b55f9b178ca020b9","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/b55f9b178ca020b9","status":"passed","time":{"start":1732568109458,"stop":1732568138390,"duration":28932}},{"uid":"2b37356567d6274","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/2b37356567d6274","status":"passed","time":{"start":1732496168419,"stop":1732496196393,"duration":27974}},{"uid":"9f78760b204e14fa","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/9f78760b204e14fa","status":"passed","time":{"start":1732410998832,"stop":1732411024259,"duration":25427}},{"uid":"8585ac25e8eb0c23","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/8585ac25e8eb0c23","status":"passed","time":{"start":1732324847293,"stop":1732324875215,"duration":27922}},{"uid":"23f7ebdf1c7ceffc","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/23f7ebdf1c7ceffc","status":"passed","time":{"start":1732322417990,"stop":1732322447857,"duration":29867}},{"uid":"b2f6ff4d0740db82","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/b2f6ff4d0740db82","status":"passed","time":{"start":1732309579662,"stop":1732309608658,"duration":28996}},{"uid":"dbeda57fc38cb794","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/dbeda57fc38cb794","status":"passed","time":{"start":1732306067599,"stop":1732306096572,"duration":28973}},{"uid":"a211c633c71b1a7a","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/a211c633c71b1a7a","status":"passed","time":{"start":1732298754756,"stop":1732298783747,"duration":28991}},{"uid":"3e71cdd124cf22cd","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/3e71cdd124cf22cd","status":"passed","time":{"start":1732276832933,"stop":1732276860943,"duration":28010}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"3f14f649a7ea843f.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}