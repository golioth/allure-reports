{
  "uid" : "4768cead26824a0e",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "3038e6d5fffa4527a437bf078474dadf",
  "time" : {
    "start" : 1733792922575,
    "stop" : 1733793015344,
    "duration" : 92769
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9e74ac10>\ndevice = <golioth.golioth.Device object at 0xffff9e765e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_url",
    "time" : {
      "start" : 1733792907995,
      "stop" : 1733792907995,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733792907994,
      "stop" : 1733792907995,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733792907990,
      "stop" : 1733792907991,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733792907995,
      "stop" : 1733792908453,
      "duration" : 458
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733792907991,
      "stop" : 1733792907993,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733792907988,
      "stop" : 1733792907989,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733792907990,
      "stop" : 1733792907990,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733792907989,
      "stop" : 1733792907989,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733792907991,
      "stop" : 1733792907991,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733792908453,
      "stop" : 1733792909298,
      "duration" : 845
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733792909299,
      "stop" : 1733792921934,
      "duration" : 12635
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733792921934,
      "stop" : 1733792922572,
      "duration" : 638
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9e74ac10>\ndevice = <golioth.golioth.Device object at 0xffff9e765e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "687a9bc8cdf470c8",
      "name" : "log",
      "source" : "687a9bc8cdf470c8.txt",
      "type" : "text/plain",
      "size" : 21581
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1733793016203,
      "stop" : 1733793016205,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733793016210,
      "stop" : 1733793016210,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733793015794,
      "stop" : 1733793016200,
      "duration" : 406
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733793015628,
      "stop" : 1733793015792,
      "duration" : 164
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "91d29e15444c"
  }, {
    "name" : "thread",
    "value" : "367-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 16,
        "skipped" : 0,
        "passed" : 77,
        "unknown" : 0,
        "total" : 93
      },
      "items" : [ {
        "uid" : "3bef718cebb1b269",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/36/#testresult/3bef718cebb1b269",
        "status" : "passed",
        "time" : {
          "start" : 1733782719729,
          "stop" : 1733782769740,
          "duration" : 50011
        }
      }, {
        "uid" : "2b4133c76b72f1d9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1877/#testresult/2b4133c76b72f1d9",
        "status" : "passed",
        "time" : {
          "start" : 1733760974729,
          "stop" : 1733761023020,
          "duration" : 48291
        }
      }, {
        "uid" : "598d223c0357b315",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1876/#testresult/598d223c0357b315",
        "status" : "passed",
        "time" : {
          "start" : 1733706173708,
          "stop" : 1733706223160,
          "duration" : 49452
        }
      }, {
        "uid" : "7c61c39386587b27",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1875/#testresult/7c61c39386587b27",
        "status" : "passed",
        "time" : {
          "start" : 1733619792941,
          "stop" : 1733619843089,
          "duration" : 50148
        }
      }, {
        "uid" : "484aeceffff46cf7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1874/#testresult/484aeceffff46cf7",
        "status" : "passed",
        "time" : {
          "start" : 1733533174863,
          "stop" : 1733533223359,
          "duration" : 48496
        }
      }, {
        "uid" : "c95013d827392333",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1871/#testresult/c95013d827392333",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733447017007,
          "stop" : 1733447109844,
          "duration" : 92837
        }
      }, {
        "uid" : "b8549bbc4a24ed92",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/b8549bbc4a24ed92",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733409782070,
          "stop" : 1733409874908,
          "duration" : 92838
        }
      }, {
        "uid" : "9373cefdf8be8978",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/9373cefdf8be8978",
        "status" : "passed",
        "time" : {
          "start" : 1733360463091,
          "stop" : 1733360511600,
          "duration" : 48509
        }
      }, {
        "uid" : "ac597831d894a087",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/ac597831d894a087",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733273827559,
          "stop" : 1733273920299,
          "duration" : 92740
        }
      }, {
        "uid" : "b5278427a135a7b7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/b5278427a135a7b7",
        "status" : "passed",
        "time" : {
          "start" : 1733187694475,
          "stop" : 1733187742861,
          "duration" : 48386
        }
      }, {
        "uid" : "a241333b032b3ac",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/a241333b032b3ac",
        "status" : "passed",
        "time" : {
          "start" : 1733162568704,
          "stop" : 1733162616708,
          "duration" : 48004
        }
      }, {
        "uid" : "a2edc6c2fcebc51e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/a2edc6c2fcebc51e",
        "status" : "passed",
        "time" : {
          "start" : 1733101333044,
          "stop" : 1733101381882,
          "duration" : 48838
        }
      }, {
        "uid" : "8a64a4d149f3dd19",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/8a64a4d149f3dd19",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733014936399,
          "stop" : 1733015029140,
          "duration" : 92741
        }
      }, {
        "uid" : "5384e0f7531e0814",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/5384e0f7531e0814",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732928151505,
          "stop" : 1732928244210,
          "duration" : 92705
        }
      }, {
        "uid" : "14c75ccb4ea37ec4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/14c75ccb4ea37ec4",
        "status" : "passed",
        "time" : {
          "start" : 1732841994650,
          "stop" : 1732842042938,
          "duration" : 48288
        }
      }, {
        "uid" : "f9def2736ce71da2",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/f9def2736ce71da2",
        "status" : "passed",
        "time" : {
          "start" : 1732755622796,
          "stop" : 1732755671143,
          "duration" : 48347
        }
      }, {
        "uid" : "a465cfd8e19956a5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/a465cfd8e19956a5",
        "status" : "passed",
        "time" : {
          "start" : 1732669231394,
          "stop" : 1732669280282,
          "duration" : 48888
        }
      }, {
        "uid" : "fc3f68d459382af5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/fc3f68d459382af5",
        "status" : "passed",
        "time" : {
          "start" : 1732643358831,
          "stop" : 1732643407246,
          "duration" : 48415
        }
      }, {
        "uid" : "de594202311ec7a8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/de594202311ec7a8",
        "status" : "passed",
        "time" : {
          "start" : 1732638448241,
          "stop" : 1732638496418,
          "duration" : 48177
        }
      }, {
        "uid" : "c10ad89156a9b6e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/c10ad89156a9b6e",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732633987745,
          "stop" : 1732634080550,
          "duration" : 92805
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "4768cead26824a0e.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}