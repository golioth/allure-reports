{
  "uid" : "7a03f5c1139ede4e",
  "name" : "test_rpc",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc",
  "historyId" : "b3d5b97364e6f035c71c0a09d7a1be64",
  "time" : {
    "start" : 1733792810734,
    "stop" : 1733792903378,
    "duration" : 92644
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8cede7d0>\ndevice = <golioth.golioth.Device object at 0xffff8cf39d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733792792212,
      "stop" : 1733792792212,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733792792218,
      "stop" : 1733792792984,
      "duration" : 766
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733792792217,
      "stop" : 1733792792217,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733792792213,
      "stop" : 1733792792213,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733792792211,
      "stop" : 1733792792211,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733792792213,
      "stop" : 1733792792213,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733792792212,
      "stop" : 1733792792212,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733792793842,
      "stop" : 1733792810087,
      "duration" : 16245
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733792792214,
      "stop" : 1733792792216,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733792792217,
      "stop" : 1733792792217,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733792792985,
      "stop" : 1733792793841,
      "duration" : 856
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733792810088,
      "stop" : 1733792810731,
      "duration" : 643
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8cede7d0>\ndevice = <golioth.golioth.Device object at 0xffff8cf39d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cacb93633a6e52c4",
      "name" : "log",
      "source" : "cacb93633a6e52c4.txt",
      "type" : "text/plain",
      "size" : 19442
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1733792904655,
      "stop" : 1733792904657,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733792903785,
      "stop" : 1733792904022,
      "duration" : 237
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733792904662,
      "stop" : 1733792904662,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733792904024,
      "stop" : 1733792904652,
      "duration" : 628
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "91d29e15444c"
  }, {
    "name" : "thread",
    "value" : "345-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 29,
        "skipped" : 0,
        "passed" : 64,
        "unknown" : 0,
        "total" : 93
      },
      "items" : [ {
        "uid" : "223393086a6d5d04",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/36/#testresult/223393086a6d5d04",
        "status" : "passed",
        "time" : {
          "start" : 1733782660631,
          "stop" : 1733782679169,
          "duration" : 18538
        }
      }, {
        "uid" : "3cd539a6393d570c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1877/#testresult/3cd539a6393d570c",
        "status" : "passed",
        "time" : {
          "start" : 1733760915808,
          "stop" : 1733760934177,
          "duration" : 18369
        }
      }, {
        "uid" : "81458d3855e01f68",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1876/#testresult/81458d3855e01f68",
        "status" : "passed",
        "time" : {
          "start" : 1733706111834,
          "stop" : 1733706133312,
          "duration" : 21478
        }
      }, {
        "uid" : "6b2e190718328ed",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1875/#testresult/6b2e190718328ed",
        "status" : "passed",
        "time" : {
          "start" : 1733619728743,
          "stop" : 1733619752466,
          "duration" : 23723
        }
      }, {
        "uid" : "809c2baf0423d01c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1874/#testresult/809c2baf0423d01c",
        "status" : "passed",
        "time" : {
          "start" : 1733533115489,
          "stop" : 1733533134348,
          "duration" : 18859
        }
      }, {
        "uid" : "b9eac0b608cc6b92",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1871/#testresult/b9eac0b608cc6b92",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733446905110,
          "stop" : 1733446998005,
          "duration" : 92895
        }
      }, {
        "uid" : "2597f26321644474",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/2597f26321644474",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733409670421,
          "stop" : 1733409763150,
          "duration" : 92729
        }
      }, {
        "uid" : "9ff98d59ab077fce",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/9ff98d59ab077fce",
        "status" : "passed",
        "time" : {
          "start" : 1733360399113,
          "stop" : 1733360422497,
          "duration" : 23384
        }
      }, {
        "uid" : "c9426d2df8320280",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/c9426d2df8320280",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733273715933,
          "stop" : 1733273808873,
          "duration" : 92940
        }
      }, {
        "uid" : "14e7e8bd3fa516d9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/14e7e8bd3fa516d9",
        "status" : "passed",
        "time" : {
          "start" : 1733187633801,
          "stop" : 1733187653928,
          "duration" : 20127
        }
      }, {
        "uid" : "2a09772d5605bd49",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/2a09772d5605bd49",
        "status" : "passed",
        "time" : {
          "start" : 1733162509536,
          "stop" : 1733162528185,
          "duration" : 18649
        }
      }, {
        "uid" : "da93d013fce97cee",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/da93d013fce97cee",
        "status" : "passed",
        "time" : {
          "start" : 1733101272908,
          "stop" : 1733101292421,
          "duration" : 19513
        }
      }, {
        "uid" : "e28d845491e00021",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/e28d845491e00021",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733014825067,
          "stop" : 1733014917735,
          "duration" : 92668
        }
      }, {
        "uid" : "2e26d053cca75f90",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/2e26d053cca75f90",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732928039962,
          "stop" : 1732928132623,
          "duration" : 92661
        }
      }, {
        "uid" : "60be68c50f8c794b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/60be68c50f8c794b",
        "status" : "passed",
        "time" : {
          "start" : 1732841934693,
          "stop" : 1732841954021,
          "duration" : 19328
        }
      }, {
        "uid" : "467ff064193c9cae",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/467ff064193c9cae",
        "status" : "passed",
        "time" : {
          "start" : 1732755560104,
          "stop" : 1732755581931,
          "duration" : 21827
        }
      }, {
        "uid" : "ab0842e1b067e0b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/ab0842e1b067e0b",
        "status" : "passed",
        "time" : {
          "start" : 1732669169406,
          "stop" : 1732669190712,
          "duration" : 21306
        }
      }, {
        "uid" : "109fa78d4cc192c7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/109fa78d4cc192c7",
        "status" : "broken",
        "statusDetails" : "AttributeError: 'RPCTimeout' object has no attribute 'status_code'",
        "time" : {
          "start" : 1732643292989,
          "stop" : 1732643317458,
          "duration" : 24469
        }
      }, {
        "uid" : "84dd4754054d9d2a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/84dd4754054d9d2a",
        "status" : "passed",
        "time" : {
          "start" : 1732638410604,
          "stop" : 1732638429836,
          "duration" : 19232
        }
      }, {
        "uid" : "ff806671dd49c67",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/ff806671dd49c67",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732633876110,
          "stop" : 1732633968899,
          "duration" : 92789
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "7a03f5c1139ede4e.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}