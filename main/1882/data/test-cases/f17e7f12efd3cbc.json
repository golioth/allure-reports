{
  "uid" : "f17e7f12efd3cbc",
  "name" : "test_lightdb_delete",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete",
  "historyId" : "6de3eafb2765c88fcbba2d44b75da8e7",
  "time" : {
    "start" : 1733793257357,
    "stop" : 1733793350867,
    "duration" : 93510
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7f287a10>\ndevice = <golioth.golioth.Device object at 0xffff7f2727d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device",
    "time" : {
      "start" : 1733793243416,
      "stop" : 1733793244333,
      "duration" : 917
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733793256743,
      "stop" : 1733793257354,
      "duration" : 611
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733793244333,
      "stop" : 1733793256743,
      "duration" : 12410
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733793242943,
      "stop" : 1733793242943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733793242943,
      "stop" : 1733793242943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733793242939,
      "stop" : 1733793242939,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733793242944,
      "stop" : 1733793243415,
      "duration" : 471
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733793242939,
      "stop" : 1733793242939,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733793242940,
      "stop" : 1733793242942,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733793242937,
      "stop" : 1733793242937,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733793242937,
      "stop" : 1733793242938,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733793242938,
      "stop" : 1733793242938,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7f287a10>\ndevice = <golioth.golioth.Device object at 0xffff7f2727d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2f2ee75a59f240a",
      "name" : "log",
      "source" : "2f2ee75a59f240a.txt",
      "type" : "text/plain",
      "size" : 24963
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1733793351453,
      "stop" : 1733793351857,
      "duration" : 404
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733793351168,
      "stop" : 1733793351451,
      "duration" : 283
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733793351859,
      "stop" : 1733793351861,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733793351866,
      "stop" : 1733793351866,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "91d29e15444c"
  }, {
    "name" : "thread",
    "value" : "427-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 78,
        "unknown" : 0,
        "total" : 93
      },
      "items" : [ {
        "uid" : "3b6ce987f7373c88",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/36/#testresult/3b6ce987f7373c88",
        "status" : "passed",
        "time" : {
          "start" : 1733783003965,
          "stop" : 1733783048769,
          "duration" : 44804
        }
      }, {
        "uid" : "bf283da4c274d044",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1877/#testresult/bf283da4c274d044",
        "status" : "passed",
        "time" : {
          "start" : 1733761253207,
          "stop" : 1733761304548,
          "duration" : 51341
        }
      }, {
        "uid" : "f6ab1167b492aa8b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1876/#testresult/f6ab1167b492aa8b",
        "status" : "passed",
        "time" : {
          "start" : 1733706468899,
          "stop" : 1733706514700,
          "duration" : 45801
        }
      }, {
        "uid" : "4554bc9b2c720c7a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1875/#testresult/4554bc9b2c720c7a",
        "status" : "passed",
        "time" : {
          "start" : 1733620082794,
          "stop" : 1733620129716,
          "duration" : 46922
        }
      }, {
        "uid" : "dd303c044a102380",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1874/#testresult/dd303c044a102380",
        "status" : "passed",
        "time" : {
          "start" : 1733533457786,
          "stop" : 1733533502326,
          "duration" : 44540
        }
      }, {
        "uid" : "db0af94881732ab1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1871/#testresult/db0af94881732ab1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733447372112,
          "stop" : 1733447465558,
          "duration" : 93446
        }
      }, {
        "uid" : "dd9c656f1bc28ccc",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/dd9c656f1bc28ccc",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733410117403,
          "stop" : 1733410211012,
          "duration" : 93609
        }
      }, {
        "uid" : "62f4c7b12256697c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/62f4c7b12256697c",
        "status" : "passed",
        "time" : {
          "start" : 1733360750858,
          "stop" : 1733360795811,
          "duration" : 44953
        }
      }, {
        "uid" : "5c260d1107a3cdd3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/5c260d1107a3cdd3",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733274162689,
          "stop" : 1733274256268,
          "duration" : 93579
        }
      }, {
        "uid" : "87a750768a92810e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/87a750768a92810e",
        "status" : "passed",
        "time" : {
          "start" : 1733187982003,
          "stop" : 1733188028442,
          "duration" : 46439
        }
      }, {
        "uid" : "4607c4f72244074f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/4607c4f72244074f",
        "status" : "passed",
        "time" : {
          "start" : 1733162852320,
          "stop" : 1733162897657,
          "duration" : 45337
        }
      }, {
        "uid" : "5e29a6a9abea1ee9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/5e29a6a9abea1ee9",
        "status" : "passed",
        "time" : {
          "start" : 1733101613593,
          "stop" : 1733101659830,
          "duration" : 46237
        }
      }, {
        "uid" : "cf5de4876144da65",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/cf5de4876144da65",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733015271023,
          "stop" : 1733015364606,
          "duration" : 93583
        }
      }, {
        "uid" : "a90080bc70f52e6e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/a90080bc70f52e6e",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732928486383,
          "stop" : 1732928579920,
          "duration" : 93537
        }
      }, {
        "uid" : "729f5844a390165f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/729f5844a390165f",
        "status" : "passed",
        "time" : {
          "start" : 1732842277306,
          "stop" : 1732842322579,
          "duration" : 45273
        }
      }, {
        "uid" : "7f9a6cc39dc82ed8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/7f9a6cc39dc82ed8",
        "status" : "passed",
        "time" : {
          "start" : 1732755909252,
          "stop" : 1732755955304,
          "duration" : 46052
        }
      }, {
        "uid" : "4965e33c111b8ba",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/4965e33c111b8ba",
        "status" : "passed",
        "time" : {
          "start" : 1732669516725,
          "stop" : 1732669563400,
          "duration" : 46675
        }
      }, {
        "uid" : "f6a7f261116886c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/f6a7f261116886c",
        "status" : "passed",
        "time" : {
          "start" : 1732643641396,
          "stop" : 1732643687362,
          "duration" : 45966
        }
      }, {
        "uid" : "7c928a1d41030800",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/7c928a1d41030800",
        "status" : "passed",
        "time" : {
          "start" : 1732638667342,
          "stop" : 1732638712298,
          "duration" : 44956
        }
      }, {
        "uid" : "6fbba7b83de3d1ab",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/6fbba7b83de3d1ab",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732634322549,
          "stop" : 1732634416141,
          "duration" : 93592
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "f17e7f12efd3cbc.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}