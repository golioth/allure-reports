{
  "uid" : "2bb4d337c90c268c",
  "name" : "test_lightdb_set",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set",
  "historyId" : "c3c56fd394e8a51c6a7b951f90915fb9",
  "time" : {
    "start" : 1733793145713,
    "stop" : 1733793238763,
    "duration" : 93050
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa1fab810>\ndevice = <golioth.golioth.Device object at 0xffffa1f89fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device",
    "time" : {
      "start" : 1733793131506,
      "stop" : 1733793132488,
      "duration" : 982
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733793131084,
      "stop" : 1733793131085,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733793132489,
      "stop" : 1733793145106,
      "duration" : 12617
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733793131083,
      "stop" : 1733793131083,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733793131088,
      "stop" : 1733793131088,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733793131083,
      "stop" : 1733793131083,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733793131089,
      "stop" : 1733793131505,
      "duration" : 416
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733793131088,
      "stop" : 1733793131088,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733793131085,
      "stop" : 1733793131087,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733793145107,
      "stop" : 1733793145710,
      "duration" : 603
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733793131082,
      "stop" : 1733793131082,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733793131084,
      "stop" : 1733793131084,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa1fab810>\ndevice = <golioth.golioth.Device object at 0xffffa1f89fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4eb016e0a10ece7d",
      "name" : "log",
      "source" : "4eb016e0a10ece7d.txt",
      "type" : "text/plain",
      "size" : 24935
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1733793239217,
      "stop" : 1733793239616,
      "duration" : 399
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733793238997,
      "stop" : 1733793239215,
      "duration" : 218
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733793239618,
      "stop" : 1733793239620,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733793239625,
      "stop" : 1733793239625,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "91d29e15444c"
  }, {
    "name" : "thread",
    "value" : "407-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 16,
        "skipped" : 0,
        "passed" : 77,
        "unknown" : 0,
        "total" : 93
      },
      "items" : [ {
        "uid" : "4e35060846f8e628",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/36/#testresult/4e35060846f8e628",
        "status" : "passed",
        "time" : {
          "start" : 1733782909996,
          "stop" : 1733782963697,
          "duration" : 53701
        }
      }, {
        "uid" : "6f7e04ff286bd071",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1877/#testresult/6f7e04ff286bd071",
        "status" : "passed",
        "time" : {
          "start" : 1733761159608,
          "stop" : 1733761212893,
          "duration" : 53285
        }
      }, {
        "uid" : "a3e007249fe60b55",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1876/#testresult/a3e007249fe60b55",
        "status" : "passed",
        "time" : {
          "start" : 1733706375407,
          "stop" : 1733706428615,
          "duration" : 53208
        }
      }, {
        "uid" : "5bc4ca638f8ff76a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1875/#testresult/5bc4ca638f8ff76a",
        "status" : "passed",
        "time" : {
          "start" : 1733619985982,
          "stop" : 1733620042475,
          "duration" : 56493
        }
      }, {
        "uid" : "21dd136f84a1ab85",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1874/#testresult/21dd136f84a1ab85",
        "status" : "passed",
        "time" : {
          "start" : 1733533363788,
          "stop" : 1733533417350,
          "duration" : 53562
        }
      }, {
        "uid" : "aa6a21fdc54eab7c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1871/#testresult/aa6a21fdc54eab7c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733447260191,
          "stop" : 1733447353344,
          "duration" : 93153
        }
      }, {
        "uid" : "8a8048d1bc9b9805",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/8a8048d1bc9b9805",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733410005530,
          "stop" : 1733410098744,
          "duration" : 93214
        }
      }, {
        "uid" : "13936cd6bd3a239a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/13936cd6bd3a239a",
        "status" : "passed",
        "time" : {
          "start" : 1733360656082,
          "stop" : 1733360710505,
          "duration" : 54423
        }
      }, {
        "uid" : "d6d181778a375827",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/d6d181778a375827",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733274051086,
          "stop" : 1733274144225,
          "duration" : 93139
        }
      }, {
        "uid" : "d3bac3de7a91dc3d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/d3bac3de7a91dc3d",
        "status" : "passed",
        "time" : {
          "start" : 1733187887290,
          "stop" : 1733187941765,
          "duration" : 54475
        }
      }, {
        "uid" : "42cc4c538281f1e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/42cc4c538281f1e",
        "status" : "passed",
        "time" : {
          "start" : 1733162757821,
          "stop" : 1733162812158,
          "duration" : 54337
        }
      }, {
        "uid" : "5f9e486342d9aa8c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/5f9e486342d9aa8c",
        "status" : "passed",
        "time" : {
          "start" : 1733101516764,
          "stop" : 1733101573404,
          "duration" : 56640
        }
      }, {
        "uid" : "ba585d3b877eb9fa",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/ba585d3b877eb9fa",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733015159405,
          "stop" : 1733015252490,
          "duration" : 93085
        }
      }, {
        "uid" : "a7032631925e65a8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/a7032631925e65a8",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732928374750,
          "stop" : 1732928467848,
          "duration" : 93098
        }
      }, {
        "uid" : "fb57a0f2eacca74e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/fb57a0f2eacca74e",
        "status" : "passed",
        "time" : {
          "start" : 1732842182829,
          "stop" : 1732842237006,
          "duration" : 54177
        }
      }, {
        "uid" : "b12fab489f5e13b3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/b12fab489f5e13b3",
        "status" : "passed",
        "time" : {
          "start" : 1732755815106,
          "stop" : 1732755868948,
          "duration" : 53842
        }
      }, {
        "uid" : "8ae33e549832776d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/8ae33e549832776d",
        "status" : "passed",
        "time" : {
          "start" : 1732669422842,
          "stop" : 1732669476542,
          "duration" : 53700
        }
      }, {
        "uid" : "f00ec27f01810f43",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/f00ec27f01810f43",
        "status" : "passed",
        "time" : {
          "start" : 1732643546943,
          "stop" : 1732643601198,
          "duration" : 54255
        }
      }, {
        "uid" : "4e24493ee66bc297",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/4e24493ee66bc297",
        "status" : "passed",
        "time" : {
          "start" : 1732638595109,
          "stop" : 1732638648845,
          "duration" : 53736
        }
      }, {
        "uid" : "6b401545438663fb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/6b401545438663fb",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732634210683,
          "stop" : 1732634303810,
          "duration" : 93127
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "2bb4d337c90c268c.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}