{
  "uid" : "80cda842e626890c",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "934caf5f97c3bf444d136e05890d35c9",
  "time" : {
    "start" : 1733792398604,
    "stop" : 1733792422429,
    "duration" : 23825
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff88fafe10>\ndevice = <golioth.golioth.Device object at 0xffff88fcae90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733792370888,
      "stop" : 1733792370888,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733792370887,
      "stop" : 1733792370888,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733792370890,
      "stop" : 1733792370892,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733792395438,
      "stop" : 1733792398597,
      "duration" : 3159
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733792370887,
      "stop" : 1733792370887,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733792370894,
      "stop" : 1733792371348,
      "duration" : 454
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733792370893,
      "stop" : 1733792370893,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733792370893,
      "stop" : 1733792370894,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733792370889,
      "stop" : 1733792370889,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733792372260,
      "stop" : 1733792395438,
      "duration" : 23178
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733792371348,
      "stop" : 1733792372260,
      "duration" : 912
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733792370889,
      "stop" : 1733792370890,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff88fafe10>\ndevice = <golioth.golioth.Device object at 0xffff88fcae90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a271d6c3ff8917c7",
      "name" : "log",
      "source" : "a271d6c3ff8917c7.txt",
      "type" : "text/plain",
      "size" : 21377
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733792423386,
      "stop" : 1733792423386,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733792423379,
      "stop" : 1733792423381,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733792422696,
      "stop" : 1733792422742,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733792422744,
      "stop" : 1733792423377,
      "duration" : 633
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf52840dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf52840dk"
  }, {
    "name" : "tag",
    "value" : "tims_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "f9b5873514b5"
  }, {
    "name" : "thread",
    "value" : "531-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf52840dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 88,
        "unknown" : 0,
        "total" : 93
      },
      "items" : [ {
        "uid" : "b2641331810210e2",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/36/#testresult/b2641331810210e2",
        "status" : "passed",
        "time" : {
          "start" : 1733782640613,
          "stop" : 1733782668985,
          "duration" : 28372
        }
      }, {
        "uid" : "310d2ebd75d04d1b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1877/#testresult/310d2ebd75d04d1b",
        "status" : "passed",
        "time" : {
          "start" : 1733761080903,
          "stop" : 1733761109235,
          "duration" : 28332
        }
      }, {
        "uid" : "c91c0640550c754f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1876/#testresult/c91c0640550c754f",
        "status" : "passed",
        "time" : {
          "start" : 1733706122383,
          "stop" : 1733706150671,
          "duration" : 28288
        }
      }, {
        "uid" : "330b78b9d7119743",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1875/#testresult/330b78b9d7119743",
        "status" : "passed",
        "time" : {
          "start" : 1733619863212,
          "stop" : 1733619891585,
          "duration" : 28373
        }
      }, {
        "uid" : "32fdc58b01180802",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1874/#testresult/32fdc58b01180802",
        "status" : "passed",
        "time" : {
          "start" : 1733532548605,
          "stop" : 1733532577095,
          "duration" : 28490
        }
      }, {
        "uid" : "51fef7448e068414",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1871/#testresult/51fef7448e068414",
        "status" : "passed",
        "time" : {
          "start" : 1733446337666,
          "stop" : 1733446365507,
          "duration" : 27841
        }
      }, {
        "uid" : "25856095765594a6",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/25856095765594a6",
        "status" : "passed",
        "time" : {
          "start" : 1733409535531,
          "stop" : 1733409563314,
          "duration" : 27783
        }
      }, {
        "uid" : "4d03fa04bef8a68e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/4d03fa04bef8a68e",
        "status" : "passed",
        "time" : {
          "start" : 1733359767049,
          "stop" : 1733359795294,
          "duration" : 28245
        }
      }, {
        "uid" : "97496e365f8fc7d5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/97496e365f8fc7d5",
        "status" : "passed",
        "time" : {
          "start" : 1733273581409,
          "stop" : 1733273609270,
          "duration" : 27861
        }
      }, {
        "uid" : "bcdce713d4ce286d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/bcdce713d4ce286d",
        "status" : "passed",
        "time" : {
          "start" : 1733187013249,
          "stop" : 1733187041588,
          "duration" : 28339
        }
      }, {
        "uid" : "9830a38650993675",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/9830a38650993675",
        "status" : "passed",
        "time" : {
          "start" : 1733161915428,
          "stop" : 1733161943906,
          "duration" : 28478
        }
      }, {
        "uid" : "27d339bc75b51157",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/27d339bc75b51157",
        "status" : "passed",
        "time" : {
          "start" : 1733100626073,
          "stop" : 1733100654416,
          "duration" : 28343
        }
      }, {
        "uid" : "f215910b39e88648",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/f215910b39e88648",
        "status" : "passed",
        "time" : {
          "start" : 1733014568605,
          "stop" : 1733014596454,
          "duration" : 27849
        }
      }, {
        "uid" : "5b6b380862fa4e35",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/5b6b380862fa4e35",
        "status" : "passed",
        "time" : {
          "start" : 1732927786790,
          "stop" : 1732927828626,
          "duration" : 41836
        }
      }, {
        "uid" : "e52808b0d65c6986",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/e52808b0d65c6986",
        "status" : "passed",
        "time" : {
          "start" : 1732842043083,
          "stop" : 1732842071361,
          "duration" : 28278
        }
      }, {
        "uid" : "d2f9b958b22b0a23",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/d2f9b958b22b0a23",
        "status" : "passed",
        "time" : {
          "start" : 1732754911037,
          "stop" : 1732754939277,
          "duration" : 28240
        }
      }, {
        "uid" : "f0d137e790ca7a96",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/f0d137e790ca7a96",
        "status" : "passed",
        "time" : {
          "start" : 1732668497770,
          "stop" : 1732668526167,
          "duration" : 28397
        }
      }, {
        "uid" : "11ce61dd3b382f1e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/11ce61dd3b382f1e",
        "status" : "passed",
        "time" : {
          "start" : 1732642626040,
          "stop" : 1732642656840,
          "duration" : 30800
        }
      }, {
        "uid" : "c5cbb27d50815f85",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/c5cbb27d50815f85",
        "status" : "passed",
        "time" : {
          "start" : 1732576026507,
          "stop" : 1732576054945,
          "duration" : 28438
        }
      }, {
        "uid" : "e9dcd6681189bc7c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/e9dcd6681189bc7c",
        "status" : "passed",
        "time" : {
          "start" : 1732576026507,
          "stop" : 1732576054945,
          "duration" : 28438
        }
      } ]
    },
    "tags" : [ "nrf52840dk", "anyio", "tims_orange_pi", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "80cda842e626890c.json",
  "parameterValues" : [ "'nrf52840dk'", "'zephyr'" ]
}