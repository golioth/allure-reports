{
  "uid" : "3466c3873ac54017",
  "name" : "test_lightdb_set",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set",
  "historyId" : "c3c56fd394e8a51c6a7b951f90915fb9",
  "time" : {
    "start" : 1734447097887,
    "stop" : 1734447158801,
    "duration" : 60914
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 2 == 1",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffbac40090>\ndevice = <golioth.golioth.Device object at 0xffffbabf5ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 2 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1734447060943,
      "stop" : 1734447060943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734447060939,
      "stop" : 1734447060939,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734447060944,
      "stop" : 1734447060944,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734447060940,
      "stop" : 1734447060942,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734447060939,
      "stop" : 1734447060939,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734447061407,
      "stop" : 1734447062282,
      "duration" : 875
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734447060938,
      "stop" : 1734447060938,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734447062283,
      "stop" : 1734447097245,
      "duration" : 34962
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734447060940,
      "stop" : 1734447060940,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734447060937,
      "stop" : 1734447060937,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734447060944,
      "stop" : 1734447061406,
      "duration" : 462
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734447097245,
      "stop" : 1734447097884,
      "duration" : 639
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 2 == 1",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffbac40090>\ndevice = <golioth.golioth.Device object at 0xffffbabf5ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 2 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e58c2a508f3e7d84",
      "name" : "log",
      "source" : "e58c2a508f3e7d84.txt",
      "type" : "text/plain",
      "size" : 40704
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734447159593,
      "stop" : 1734447159593,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734447159022,
      "stop" : 1734447159583,
      "duration" : 561
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734447158971,
      "stop" : 1734447159020,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734447159586,
      "stop" : 1734447159588,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "bb476355a661"
  }, {
    "name" : "thread",
    "value" : "431-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 9,
        "unknown" : 0,
        "total" : 13
      },
      "items" : [ {
        "uid" : "887dba9e366b2ef9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1944/#testresult/887dba9e366b2ef9",
        "status" : "passed",
        "time" : {
          "start" : 1734397428475,
          "stop" : 1734397483903,
          "duration" : 55428
        }
      }, {
        "uid" : "6b3705f5a5926b24",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1935/#testresult/6b3705f5a5926b24",
        "status" : "passed",
        "time" : {
          "start" : 1734311101992,
          "stop" : 1734311156001,
          "duration" : 54009
        }
      }, {
        "uid" : "36944abbf8d4ca91",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1934/#testresult/36944abbf8d4ca91",
        "status" : "passed",
        "time" : {
          "start" : 1734224844149,
          "stop" : 1734224898164,
          "duration" : 54015
        }
      }, {
        "uid" : "de880447dc1b4c7b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1933/#testresult/de880447dc1b4c7b",
        "status" : "passed",
        "time" : {
          "start" : 1734138238283,
          "stop" : 1734138291736,
          "duration" : 53453
        }
      }, {
        "uid" : "9978be78e35956be",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1930/#testresult/9978be78e35956be",
        "status" : "passed",
        "time" : {
          "start" : 1734118855890,
          "stop" : 1734118910380,
          "duration" : 54490
        }
      }, {
        "uid" : "48ab648424702f3e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1929/#testresult/48ab648424702f3e",
        "status" : "passed",
        "time" : {
          "start" : 1734052555648,
          "stop" : 1734052609928,
          "duration" : 54280
        }
      }, {
        "uid" : "60b51b444fd95e0c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1924/#testresult/60b51b444fd95e0c",
        "status" : "passed",
        "time" : {
          "start" : 1734032450094,
          "stop" : 1734032503720,
          "duration" : 53626
        }
      }, {
        "uid" : "1113b2183a438310",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1910/#testresult/1113b2183a438310",
        "status" : "passed",
        "time" : {
          "start" : 1733997054744,
          "stop" : 1733997108815,
          "duration" : 54071
        }
      }, {
        "uid" : "10248fcad3e9b758",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1909/#testresult/10248fcad3e9b758",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733965739033,
          "stop" : 1733965832125,
          "duration" : 93092
        }
      }, {
        "uid" : "3175514a7d591b8e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1906/#testresult/3175514a7d591b8e",
        "status" : "passed",
        "time" : {
          "start" : 1733953901640,
          "stop" : 1733953955491,
          "duration" : 53851
        }
      }, {
        "uid" : "ecaf3be042445cbf",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1894/#testresult/ecaf3be042445cbf",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733881251805,
          "stop" : 1733881344902,
          "duration" : 93097
        }
      }, {
        "uid" : "5c413ee53e3a7a54",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1885/#testresult/5c413ee53e3a7a54",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733857771331,
          "stop" : 1733857864442,
          "duration" : 93111
        }
      } ]
    },
    "tags" : [ "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "3466c3873ac54017.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}