{"uid":"15d2c36a5a35f012","name":"test_hello","fullName":"examples.esp_idf.cpp.pytest.test_sample#test_hello","historyId":"34a63110b03fdfdd0be1a7f29b2c4fb8","time":{"start":1737074216852,"stop":1737074230489,"duration":13637},"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf270410>\ndevice = <golioth.golioth.Device object at 0xffffaf2a0590>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1737074164802,"stop":1737074164803,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1737074164803,"stop":1737074164804,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1737074164804,"stop":1737074164804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1737074164805,"stop":1737074164805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1737074164806,"stop":1737074164806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1737074164806,"stop":1737074164807,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1737074164807,"stop":1737074164807,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1737074164807,"stop":1737074164808,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1737074164808,"stop":1737074164808,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1737074164809,"stop":1737074164810,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1737074164809,"stop":1737074164809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1737074164809,"stop":1737074164809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1737074164810,"stop":1737074215422,"duration":50612},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1737074215423,"stop":1737074215957,"duration":534},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1737074215957,"stop":1737074216849,"duration":892},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf270410>\ndevice = <golioth.golioth.Device object at 0xffffaf2a0590>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","steps":[],"attachments":[{"uid":"bd445d9a6b97123a","name":"stdout","source":"bd445d9a6b97123a.txt","type":"text/plain","size":7162}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1737074230641,"stop":1737074231066,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1737074231068,"stop":1737074231068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1737074231070,"stop":1737074231079,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9291100f74e7"},{"name":"thread","value":"266-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.cpp.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":14,"unknown":0,"total":15},"items":[{"uid":"99c6335a198a942b","reportUrl":"https://golioth.github.io/allure-reports/main/76//#testresult/99c6335a198a942b","status":"passed","time":{"start":1737055984256,"stop":1737055996915,"duration":12659}},{"uid":"9969095934c50e5b","reportUrl":"https://golioth.github.io/allure-reports/main/68//#testresult/9969095934c50e5b","status":"passed","time":{"start":1736995323504,"stop":1736995337043,"duration":13539}},{"uid":"7e8339aca79d119c","reportUrl":"https://golioth.github.io/allure-reports/main/67//#testresult/7e8339aca79d119c","status":"passed","time":{"start":1736987121094,"stop":1736987134650,"duration":13556}},{"uid":"b8cd5df2139b4791","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/b8cd5df2139b4791","status":"passed","time":{"start":1736901442199,"stop":1736901455865,"duration":13666}},{"uid":"782098f2b2db3307","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/782098f2b2db3307","status":"passed","time":{"start":1736901442199,"stop":1736901455865,"duration":13666}},{"uid":"ac6bcdfaae9da2c4","reportUrl":"https://golioth.github.io/allure-reports/main/54//#testresult/ac6bcdfaae9da2c4","status":"passed","time":{"start":1736728667671,"stop":1736728681070,"duration":13399}},{"uid":"882eb139b77414fc","reportUrl":"https://golioth.github.io/allure-reports/main/53//#testresult/882eb139b77414fc","status":"passed","time":{"start":1736642258145,"stop":1736642271832,"duration":13687}},{"uid":"d3989fbd627b839","reportUrl":"https://golioth.github.io/allure-reports/main/49//#testresult/d3989fbd627b839","status":"passed","time":{"start":1736581036291,"stop":1736581050017,"duration":13726}},{"uid":"eeaa1cbb9bc43eb6","reportUrl":"https://golioth.github.io/allure-reports/main/48//#testresult/eeaa1cbb9bc43eb6","status":"passed","time":{"start":1736555823636,"stop":1736555836754,"duration":13118}},{"uid":"304fcd026f5091b3","reportUrl":"https://golioth.github.io/allure-reports/main/45//#testresult/304fcd026f5091b3","status":"passed","time":{"start":1736469403388,"stop":1736469416823,"duration":13435}},{"uid":"aee1c8572921928a","reportUrl":"https://golioth.github.io/allure-reports/main/44//#testresult/aee1c8572921928a","status":"passed","time":{"start":1736456783326,"stop":1736456796857,"duration":13531}},{"uid":"fcf62f00ec4ea0e6","reportUrl":"https://golioth.github.io/allure-reports/main/34//#testresult/fcf62f00ec4ea0e6","status":"passed","time":{"start":1736383055534,"stop":1736383068201,"duration":12667}},{"uid":"53c1cbd5580bf0b9","reportUrl":"https://golioth.github.io/allure-reports/main/28/#testresult/53c1cbd5580bf0b9","status":"passed","time":{"start":1736297625469,"stop":1736297639390,"duration":13921}},{"uid":"4464aaf4b0e356f5","reportUrl":"https://golioth.github.io/allure-reports/main/23/#testresult/4464aaf4b0e356f5","status":"passed","time":{"start":1736266724368,"stop":1736266737908,"duration":13540}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"15d2c36a5a35f012.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}