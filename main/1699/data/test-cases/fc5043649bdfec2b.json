{"uid":"fc5043649bdfec2b","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1729991119984,"stop":1729991213859,"duration":93875},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb667a550>\ndevice = <golioth.golioth.Device object at 0xffffb66913d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729991101513,"stop":1729991101513,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729991101514,"stop":1729991101514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729991101515,"stop":1729991101515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729991101515,"stop":1729991101515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729991101516,"stop":1729991101518,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729991101516,"stop":1729991101516,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729991101519,"stop":1729991101519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729991101520,"stop":1729991102043,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729991101520,"stop":1729991101520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729991102044,"stop":1729991103102,"duration":1058},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729991103103,"stop":1729991119098,"duration":15995},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729991119098,"stop":1729991119981,"duration":883},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb667a550>\ndevice = <golioth.golioth.Device object at 0xffffb66913d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c0e1ddec74ac2565","name":"log","source":"c0e1ddec74ac2565.txt","type":"text/plain","size":20396}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729991214198,"stop":1729991214247,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729991214249,"stop":1729991214730,"duration":481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729991214732,"stop":1729991214734,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729991214739,"stop":1729991214739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"c29e18345218"},{"name":"thread","value":"431-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":23,"unknown":0,"total":24},"items":[{"uid":"c9123bca82194b76","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/c9123bca82194b76","status":"passed","time":{"start":1729904628695,"stop":1729904642321,"duration":13626}},{"uid":"c06f0e332fa5a584","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/c06f0e332fa5a584","status":"passed","time":{"start":1729818339777,"stop":1729818356687,"duration":16910}},{"uid":"a3ba9968e2d37ee1","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/a3ba9968e2d37ee1","status":"passed","time":{"start":1729732229323,"stop":1729732246070,"duration":16747}},{"uid":"76e68abbdbd71ea3","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/76e68abbdbd71ea3","status":"passed","time":{"start":1729645912760,"stop":1729645927465,"duration":14705}},{"uid":"7c4f9f41729c0dbc","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/7c4f9f41729c0dbc","status":"passed","time":{"start":1729559172493,"stop":1729559186818,"duration":14325}},{"uid":"271ef628852c7ba9","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/271ef628852c7ba9","status":"passed","time":{"start":1729472721748,"stop":1729472739370,"duration":17622}},{"uid":"b80fb4cd3f3657f1","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/b80fb4cd3f3657f1","status":"passed","time":{"start":1729386321987,"stop":1729386335605,"duration":13618}},{"uid":"1838f0957f6b34a3","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/1838f0957f6b34a3","status":"passed","time":{"start":1729370346021,"stop":1729370361105,"duration":15084}},{"uid":"d154ba34d0cdb8d5","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/d154ba34d0cdb8d5","status":"passed","time":{"start":1729363264110,"stop":1729363280481,"duration":16371}},{"uid":"5e3c2434a36e62be","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/5e3c2434a36e62be","status":"passed","time":{"start":1729300446852,"stop":1729300462728,"duration":15876}},{"uid":"f70cd36f0265a0f4","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/f70cd36f0265a0f4","status":"passed","time":{"start":1729213348388,"stop":1729213364140,"duration":15752}},{"uid":"e215234fc5f7d875","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/e215234fc5f7d875","status":"passed","time":{"start":1729204353484,"stop":1729204366694,"duration":13210}},{"uid":"79ad48345bbb379d","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/79ad48345bbb379d","status":"passed","time":{"start":1729130907202,"stop":1729130923863,"duration":16661}},{"uid":"2056c575fcc680f5","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/2056c575fcc680f5","status":"passed","time":{"start":1729111424799,"stop":1729111437261,"duration":12462}},{"uid":"25dab6ece83e2491","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/25dab6ece83e2491","status":"passed","time":{"start":1729040870244,"stop":1729040884862,"duration":14618}},{"uid":"3dc0781204ad22ef","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/3dc0781204ad22ef","status":"passed","time":{"start":1729028319219,"stop":1729028336605,"duration":17386}},{"uid":"17234d29798ab873","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/17234d29798ab873","status":"passed","time":{"start":1729009311281,"stop":1729009326742,"duration":15461}},{"uid":"446e3e78e602b14d","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/446e3e78e602b14d","status":"passed","time":{"start":1728954683244,"stop":1728954698789,"duration":15545}},{"uid":"5074867ba29f51dc","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/5074867ba29f51dc","status":"passed","time":{"start":1728868334571,"stop":1728868349120,"duration":14549}},{"uid":"77785877a2273b39","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/77785877a2273b39","status":"passed","time":{"start":1728781635614,"stop":1728781651093,"duration":15479}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"fc5043649bdfec2b.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}