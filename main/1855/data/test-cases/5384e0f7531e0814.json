{"uid":"5384e0f7531e0814","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1732928151505,"stop":1732928244210,"duration":92705},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb306b0d0>\ndevice = <golioth.golioth.Device object at 0xffffb30461d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732928137053,"stop":1732928137053,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732928137053,"stop":1732928137054,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732928137054,"stop":1732928137054,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732928137055,"stop":1732928137055,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732928137056,"stop":1732928137058,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732928137056,"stop":1732928137056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732928137059,"stop":1732928137060,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732928137059,"stop":1732928137059,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732928137060,"stop":1732928137471,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732928137471,"stop":1732928138329,"duration":858},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732928138330,"stop":1732928150849,"duration":12519},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732928150850,"stop":1732928151502,"duration":652},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb306b0d0>\ndevice = <golioth.golioth.Device object at 0xffffb30461d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ce403421351061e1","name":"log","source":"ce403421351061e1.txt","type":"text/plain","size":20997}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732928244505,"stop":1732928244708,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732928244710,"stop":1732928245090,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732928245092,"stop":1732928245094,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732928245099,"stop":1732928245100,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"7da50f071191"},{"name":"thread","value":"365-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":68,"unknown":0,"total":79},"items":[{"uid":"14c75ccb4ea37ec4","reportUrl":"https://golioth.github.io/allure-reports/main/1854//#testresult/14c75ccb4ea37ec4","status":"passed","time":{"start":1732841994650,"stop":1732842042938,"duration":48288}},{"uid":"f9def2736ce71da2","reportUrl":"https://golioth.github.io/allure-reports/main/1853//#testresult/f9def2736ce71da2","status":"passed","time":{"start":1732755622796,"stop":1732755671143,"duration":48347}},{"uid":"a465cfd8e19956a5","reportUrl":"https://golioth.github.io/allure-reports/main/1846//#testresult/a465cfd8e19956a5","status":"passed","time":{"start":1732669231394,"stop":1732669280282,"duration":48888}},{"uid":"fc3f68d459382af5","reportUrl":"https://golioth.github.io/allure-reports/main/1845//#testresult/fc3f68d459382af5","status":"passed","time":{"start":1732643358831,"stop":1732643407246,"duration":48415}},{"uid":"de594202311ec7a8","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/de594202311ec7a8","status":"passed","time":{"start":1732638448241,"stop":1732638496418,"duration":48177}},{"uid":"c10ad89156a9b6e","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/c10ad89156a9b6e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732633987745,"stop":1732634080550,"duration":92805}},{"uid":"53a223d12f35280d","reportUrl":"https://golioth.github.io/allure-reports/main/1843//#testresult/53a223d12f35280d","status":"passed","time":{"start":1732582778907,"stop":1732582827764,"duration":48857}},{"uid":"d117f03e8ddddddc","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/d117f03e8ddddddc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732579048392,"stop":1732579141187,"duration":92795}},{"uid":"12e84d6d1eba605b","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/12e84d6d1eba605b","status":"passed","time":{"start":1732575827960,"stop":1732575875846,"duration":47886}},{"uid":"529882f064496ee7","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/529882f064496ee7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732567974560,"stop":1732568067314,"duration":92754}},{"uid":"c8343e4be58f8452","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/c8343e4be58f8452","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732496600407,"stop":1732496693162,"duration":92755}},{"uid":"c4f5dfc2dd6ba588","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/c4f5dfc2dd6ba588","status":"passed","time":{"start":1732410344707,"stop":1732410393627,"duration":48920}},{"uid":"4fdeddefe7bd373f","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/4fdeddefe7bd373f","status":"passed","time":{"start":1732325084131,"stop":1732325132979,"duration":48848}},{"uid":"9ca3bb0dd25d0e0c","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/9ca3bb0dd25d0e0c","status":"passed","time":{"start":1732322165507,"stop":1732322213900,"duration":48393}},{"uid":"ded7f0a83c8cab2d","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/ded7f0a83c8cab2d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732309741207,"stop":1732309833953,"duration":92746}},{"uid":"c78ac15283e71514","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/c78ac15283e71514","status":"passed","time":{"start":1732306604959,"stop":1732306653980,"duration":49021}},{"uid":"43058d27bff2d08a","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/43058d27bff2d08a","status":"passed","time":{"start":1732298523002,"stop":1732298571701,"duration":48699}},{"uid":"5072a360fa776112","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/5072a360fa776112","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732277642619,"stop":1732277735263,"duration":92644}},{"uid":"ae29ff82a820a829","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/ae29ff82a820a829","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732237380698,"stop":1732237473448,"duration":92750}},{"uid":"fae2c42bfcf9e6d2","reportUrl":"https://golioth.github.io/allure-reports/main/1809//#testresult/fae2c42bfcf9e6d2","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'","time":{"start":1732214225585,"stop":1732214225585,"duration":0}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"5384e0f7531e0814.json","parameterValues":["'rak5010'","'zephyr'"]}