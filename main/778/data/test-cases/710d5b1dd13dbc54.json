{"uid":"710d5b1dd13dbc54","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"6d1f08dc1ecf1c9cd2ea05e90cb8bc0d","time":{"start":1760746416365,"stop":1760746446900,"duration":30535},"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffb2a63a10>\ndevice = <golioth.golioth.Device object at 0xffffb27f1160>\nproject = <golioth.golioth.Project object at 0xffffb29a1be0>\nreleases = {'test_blocks': Release <68f2db6281db3c0394bba48e, release_tags=[], device_tags=['68f2db6081db3c0394bba48b'], artifact...ease_tags=[], device_tags=['68f2db6081db3c0394bba48b'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760746274094,"stop":1760746274095,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760746274096,"stop":1760746274097,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1760746274096,"stop":1760746274096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760746274097,"stop":1760746274097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760746274098,"stop":1760746274098,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760746274098,"stop":1760746274098,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1760746274099,"stop":1760746328018,"duration":53919},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760746274099,"stop":1760746274099,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760746328020,"stop":1760746328627,"duration":607},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760746328628,"stop":1760746329413,"duration":785},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1760746329414,"stop":1760746335625,"duration":6211},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1760746335626,"stop":1760746336279,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1760746336280,"stop":1760746337092,"duration":812},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1760746337093,"stop":1760746339122,"duration":2029},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1760746416362,"stop":1760746416362,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffb2a63a10>\ndevice = <golioth.golioth.Device object at 0xffffb27f1160>\nproject = <golioth.golioth.Project object at 0xffffb29a1be0>\nreleases = {'test_blocks': Release <68f2db6281db3c0394bba48e, release_tags=[], device_tags=['68f2db6081db3c0394bba48b'], artifact...ease_tags=[], device_tags=['68f2db6081db3c0394bba48b'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"78554e29fe372809","name":"stdout","source":"78554e29fe372809.txt","type":"text/plain","size":111}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1760746447072,"stop":1760746448072,"duration":1000},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1760746448074,"stop":1760746450067,"duration":1993},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1760746450069,"stop":1760746450890,"duration":821},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1760746450892,"stop":1760746450892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1760746450894,"stop":1760746450894,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760746450896,"stop":1760746451313,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760746451315,"stop":1760746451315,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1760746451317,"stop":1760746451327,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"b9e4768db8c3"},{"name":"thread","value":"233-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":24,"unknown":0,"total":30},"items":[{"uid":"771c1efbcc07bef7","reportUrl":"https://golioth.github.io/allure-reports/main/773//#testresult/771c1efbcc07bef7","status":"passed","time":{"start":1760715478240,"stop":1760715529856,"duration":51616}},{"uid":"6fe4e44711870a82","reportUrl":"https://golioth.github.io/allure-reports/main/772//#testresult/6fe4e44711870a82","status":"passed","time":{"start":1760660371623,"stop":1760660419699,"duration":48076}},{"uid":"7facd1d9b31807fb","reportUrl":"https://golioth.github.io/allure-reports/main/770//#testresult/7facd1d9b31807fb","status":"passed","time":{"start":1760573799618,"stop":1760573846496,"duration":46878}},{"uid":"99e4952b46d2422c","reportUrl":"https://golioth.github.io/allure-reports/main/769//#testresult/99e4952b46d2422c","status":"failed","statusDetails":"AssertionError: assert 8 == 4\n +  where 8 = int('8')","time":{"start":1760487305630,"stop":1760487349239,"duration":43609}},{"uid":"cd8cb68f3133c129","reportUrl":"https://golioth.github.io/allure-reports/main/768//#testresult/cd8cb68f3133c129","status":"passed","time":{"start":1760475959540,"stop":1760476010527,"duration":50987}},{"uid":"bc5619442d814552","reportUrl":"https://golioth.github.io/allure-reports/main/767//#testresult/bc5619442d814552","status":"passed","time":{"start":1760400770696,"stop":1760400821089,"duration":50393}},{"uid":"da6074c8f2471f7e","reportUrl":"https://golioth.github.io/allure-reports/main/766//#testresult/da6074c8f2471f7e","status":"passed","time":{"start":1760315161289,"stop":1760315210779,"duration":49490}},{"uid":"ee1cda4408bc697b","reportUrl":"https://golioth.github.io/allure-reports/main/765//#testresult/ee1cda4408bc697b","status":"passed","time":{"start":1760227980767,"stop":1760228031702,"duration":50935}},{"uid":"79e928fca3d3bfeb","reportUrl":"https://golioth.github.io/allure-reports/main/763//#testresult/79e928fca3d3bfeb","status":"passed","time":{"start":1760141573807,"stop":1760141623550,"duration":49743}},{"uid":"12fda5c2f2f393e4","reportUrl":"https://golioth.github.io/allure-reports/main/762//#testresult/12fda5c2f2f393e4","status":"passed","time":{"start":1760055166453,"stop":1760055216504,"duration":50051}},{"uid":"e39e5c7656954199","reportUrl":"https://golioth.github.io/allure-reports/main/761//#testresult/e39e5c7656954199","status":"passed","time":{"start":1760039618301,"stop":1760039668629,"duration":50328}},{"uid":"312f845a988fca71","reportUrl":"https://golioth.github.io/allure-reports/main/758//#testresult/312f845a988fca71","status":"passed","time":{"start":1759991792338,"stop":1759991842677,"duration":50339}},{"uid":"b57e0582c4842e9d","reportUrl":"https://golioth.github.io/allure-reports/main/757//#testresult/b57e0582c4842e9d","status":"failed","statusDetails":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","time":{"start":1759968775085,"stop":1759968804624,"duration":29539}},{"uid":"523610f94dce963","reportUrl":"https://golioth.github.io/allure-reports/main/753//#testresult/523610f94dce963","status":"passed","time":{"start":1759882444727,"stop":1759882495381,"duration":50654}},{"uid":"8013425b02c1a76d","reportUrl":"https://golioth.github.io/allure-reports/main/752//#testresult/8013425b02c1a76d","status":"failed","statusDetails":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","time":{"start":1759860911261,"stop":1759860940579,"duration":29318}},{"uid":"bd2bd4ae5244b99d","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/bd2bd4ae5244b99d","status":"passed","time":{"start":1759848721121,"stop":1759848773108,"duration":51987}},{"uid":"200e9ba903d102c1","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/200e9ba903d102c1","status":"passed","time":{"start":1759795967703,"stop":1759796019066,"duration":51363}},{"uid":"6179ca0b9b082d7b","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/6179ca0b9b082d7b","status":"passed","time":{"start":1759775810250,"stop":1759775860092,"duration":49842}},{"uid":"69294c028dda32b3","reportUrl":"https://golioth.github.io/allure-reports/main/742//#testresult/69294c028dda32b3","status":"passed","time":{"start":1759710328312,"stop":1759710378247,"duration":49935}},{"uid":"7131dd9b40d2713b","reportUrl":"https://golioth.github.io/allure-reports/main/741//#testresult/7131dd9b40d2713b","status":"passed","time":{"start":1759623178058,"stop":1759623227831,"duration":49773}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf"]},"source":"710d5b1dd13dbc54.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}