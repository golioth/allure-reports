{"uid":"2f96d0a476af7bab","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"7b5bd2e87b0538b1f5ac1141f1902779","time":{"start":1760747195790,"stop":1760747261462,"duration":65672},"status":"failed","statusMessage":"AssertionError: assert 9 == 8\n +  where 9 = int('9')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff89ef3a10>\ndevice = <golioth.golioth.Device object at 0xffff89c91160>\nproject = <golioth.golioth.Project object at 0xffff89e09be0>\nreleases = {'test_blocks': Release <68f2dea781db3c0394bba5d1, release_tags=[], device_tags=['68f2dea681db3c0394bba5ce'], artifact...ease_tags=[], device_tags=['68f2dea681db3c0394bba5ce'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 9 == 8\nE                    +  where 9 = int('9')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760747141643,"stop":1760747141643,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1760747141644,"stop":1760747141644,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760747141645,"stop":1760747141646,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760747141645,"stop":1760747141645,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760747141646,"stop":1760747141646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760747141647,"stop":1760747141647,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760747141647,"stop":1760747141647,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1760747141648,"stop":1760747168683,"duration":27035},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760747168685,"stop":1760747169090,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760747169091,"stop":1760747169718,"duration":627},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1760747169719,"stop":1760747173353,"duration":3634},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1760747173354,"stop":1760747173725,"duration":371},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1760747173726,"stop":1760747174351,"duration":625},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1760747174352,"stop":1760747175963,"duration":1611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1760747195787,"stop":1760747195788,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 9 == 8\n +  where 9 = int('9')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff89ef3a10>\ndevice = <golioth.golioth.Device object at 0xffff89c91160>\nproject = <golioth.golioth.Project object at 0xffff89e09be0>\nreleases = {'test_blocks': Release <68f2dea781db3c0394bba5d1, release_tags=[], device_tags=['68f2dea681db3c0394bba5ce'], artifact...ease_tags=[], device_tags=['68f2dea681db3c0394bba5ce'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 9 == 8\nE                    +  where 9 = int('9')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"ecd93a7d5ca1b0a7","name":"stdout","source":"ecd93a7d5ca1b0a7.txt","type":"text/plain","size":942}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1760747261800,"stop":1760747262430,"duration":630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1760747262432,"stop":1760747263919,"duration":1487},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1760747263921,"stop":1760747264546,"duration":625},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1760747264548,"stop":1760747264548,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1760747264550,"stop":1760747264550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760747264552,"stop":1760747264859,"duration":307},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760747264862,"stop":1760747264862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1760747264864,"stop":1760747264874,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"61b6de834f41"},{"name":"thread","value":"246-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":3,"skipped":0,"passed":24,"unknown":0,"total":30},"items":[{"uid":"66fe09b5e8a4a2b3","reportUrl":"https://golioth.github.io/allure-reports/main/773//#testresult/66fe09b5e8a4a2b3","status":"broken","statusDetails":"NameError: name 'false' is not defined","time":{"start":1760724749002,"stop":1760724776449,"duration":27447}},{"uid":"867ecf5bae60a0a7","reportUrl":"https://golioth.github.io/allure-reports/main/772//#testresult/867ecf5bae60a0a7","status":"passed","time":{"start":1760660261492,"stop":1760660308890,"duration":47398}},{"uid":"904cd7a7cc2e32ee","reportUrl":"https://golioth.github.io/allure-reports/main/770//#testresult/904cd7a7cc2e32ee","status":"passed","time":{"start":1760573872687,"stop":1760573921180,"duration":48493}},{"uid":"d1c7aeae59714244","reportUrl":"https://golioth.github.io/allure-reports/main/769//#testresult/d1c7aeae59714244","status":"passed","time":{"start":1760487138022,"stop":1760487188789,"duration":50767}},{"uid":"33d47a7fb9b2af9d","reportUrl":"https://golioth.github.io/allure-reports/main/768//#testresult/33d47a7fb9b2af9d","status":"passed","time":{"start":1760476314093,"stop":1760476363325,"duration":49232}},{"uid":"5c52a3b0d6ee11d6","reportUrl":"https://golioth.github.io/allure-reports/main/767//#testresult/5c52a3b0d6ee11d6","status":"passed","time":{"start":1760401082662,"stop":1760401130256,"duration":47594}},{"uid":"36c442fb4059ce0e","reportUrl":"https://golioth.github.io/allure-reports/main/766//#testresult/36c442fb4059ce0e","status":"passed","time":{"start":1760315295007,"stop":1760315341917,"duration":46910}},{"uid":"b0cc3c2ed2ab4063","reportUrl":"https://golioth.github.io/allure-reports/main/765//#testresult/b0cc3c2ed2ab4063","status":"passed","time":{"start":1760227968361,"stop":1760228017730,"duration":49369}},{"uid":"66375edb3b8be335","reportUrl":"https://golioth.github.io/allure-reports/main/763//#testresult/66375edb3b8be335","status":"passed","time":{"start":1760141583924,"stop":1760141632532,"duration":48608}},{"uid":"5feddbce44ea8914","reportUrl":"https://golioth.github.io/allure-reports/main/762//#testresult/5feddbce44ea8914","status":"passed","time":{"start":1760055492776,"stop":1760055539755,"duration":46979}},{"uid":"59cfe6a8504be40a","reportUrl":"https://golioth.github.io/allure-reports/main/761//#testresult/59cfe6a8504be40a","status":"passed","time":{"start":1760039886795,"stop":1760039934099,"duration":47304}},{"uid":"9de3b483b2c8e364","reportUrl":"https://golioth.github.io/allure-reports/main/758//#testresult/9de3b483b2c8e364","status":"passed","time":{"start":1759992118799,"stop":1759992167706,"duration":48907}},{"uid":"1c2404f4f1eaea1b","reportUrl":"https://golioth.github.io/allure-reports/main/757//#testresult/1c2404f4f1eaea1b","status":"passed","time":{"start":1759969097822,"stop":1759969150059,"duration":52237}},{"uid":"2bd7b135ac07090b","reportUrl":"https://golioth.github.io/allure-reports/main/753//#testresult/2bd7b135ac07090b","status":"passed","time":{"start":1759882733896,"stop":1759882783589,"duration":49693}},{"uid":"5ec388edc8419bae","reportUrl":"https://golioth.github.io/allure-reports/main/752//#testresult/5ec388edc8419bae","status":"failed","statusDetails":"AssertionError: assert 7 == 2\n +  where 7 = int('7')","time":{"start":1759860971112,"stop":1759861004985,"duration":33873}},{"uid":"ff6c60010b1b58fb","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/ff6c60010b1b58fb","status":"passed","time":{"start":1759848348376,"stop":1759848397569,"duration":49193}},{"uid":"9613185fed6c4b54","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/9613185fed6c4b54","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759799366368,"stop":1759799366368,"duration":0}},{"uid":"bdbf7cb5a7a2108d","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/bdbf7cb5a7a2108d","status":"passed","time":{"start":1759781790399,"stop":1759781839875,"duration":49476}},{"uid":"6160f8f300bf9b48","reportUrl":"https://golioth.github.io/allure-reports/main/742//#testresult/6160f8f300bf9b48","status":"passed","time":{"start":1759712327076,"stop":1759712373777,"duration":46701}},{"uid":"5bdc3993d3974953","reportUrl":"https://golioth.github.io/allure-reports/main/741//#testresult/5bdc3993d3974953","status":"passed","time":{"start":1759623744009,"stop":1759623791614,"duration":47605}}]},"tags":["esp-idf","anyio","sams_orange_pi","esp32_devkitc_wrover_espidf"]},"source":"2f96d0a476af7bab.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}