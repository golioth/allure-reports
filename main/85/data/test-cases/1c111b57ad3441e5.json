{"uid":"1c111b57ad3441e5","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"d863d307dfacb440b83f8a44acfa67f4","time":{"start":1737496939634,"stop":1737496999716,"duration":60082},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb72544d0>\ndevice = <golioth.golioth.Device object at 0xffffb7202790>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(CBOR async\\\\): 99'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1737496902741,"stop":1737496902741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1737496902742,"stop":1737496902743,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1737496902742,"stop":1737496902742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1737496902743,"stop":1737496902743,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1737496902744,"stop":1737496902746,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1737496902744,"stop":1737496902744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1737496902747,"stop":1737496902747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1737496902748,"stop":1737496902748,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1737496902748,"stop":1737496903203,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1737496903203,"stop":1737496904078,"duration":875},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1737496904078,"stop":1737496939015,"duration":34937},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1737496939015,"stop":1737496939631,"duration":616},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb72544d0>\ndevice = <golioth.golioth.Device object at 0xffffb7202790>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(CBOR async\\\\): 99'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d5dccc105415013c","name":"log","source":"d5dccc105415013c.txt","type":"text/plain","size":35857}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1737497000017,"stop":1737497000054,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1737497000056,"stop":1737497000430,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1737497000432,"stop":1737497000434,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1737497000439,"stop":1737497000439,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3c392134823a"},{"name":"thread","value":"385-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":55,"unknown":0,"total":59},"items":[{"uid":"d3baeacbe97ba1eb","reportUrl":"https://golioth.github.io/allure-reports/main/82//#testresult/d3baeacbe97ba1eb","status":"passed","time":{"start":1737420336996,"stop":1737420395715,"duration":58719}},{"uid":"d3f64788fdf7969d","reportUrl":"https://golioth.github.io/allure-reports/main/81//#testresult/d3f64788fdf7969d","status":"passed","time":{"start":1737332746340,"stop":1737332806235,"duration":59895}},{"uid":"81821f21ea0baae2","reportUrl":"https://golioth.github.io/allure-reports/main/80//#testresult/81821f21ea0baae2","status":"passed","time":{"start":1737247503817,"stop":1737247562494,"duration":58677}},{"uid":"b19e01856cdbbc81","reportUrl":"https://golioth.github.io/allure-reports/main/79//#testresult/b19e01856cdbbc81","status":"passed","time":{"start":1737161568436,"stop":1737161627875,"duration":59439}},{"uid":"2390a2db994688f1","reportUrl":"https://golioth.github.io/allure-reports/main/78//#testresult/2390a2db994688f1","status":"passed","time":{"start":1737075147869,"stop":1737075206646,"duration":58777}},{"uid":"702d380d7315240c","reportUrl":"https://golioth.github.io/allure-reports/main/76//#testresult/702d380d7315240c","status":"passed","time":{"start":1737058337186,"stop":1737058395619,"duration":58433}},{"uid":"3b04d5be5644fea","reportUrl":"https://golioth.github.io/allure-reports/main/68//#testresult/3b04d5be5644fea","status":"passed","time":{"start":1736995651137,"stop":1736995709815,"duration":58678}},{"uid":"1639983467e6ba40","reportUrl":"https://golioth.github.io/allure-reports/main/67//#testresult/1639983467e6ba40","status":"passed","time":{"start":1736988498047,"stop":1736988557036,"duration":58989}},{"uid":"4fa35eaa309578dc","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/4fa35eaa309578dc","status":"passed","time":{"start":1736947760674,"stop":1736947819473,"duration":58799}},{"uid":"a604a0d6847a56e3","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/a604a0d6847a56e3","status":"passed","time":{"start":1736902059970,"stop":1736902118984,"duration":59014}},{"uid":"b8340d481ef7d178","reportUrl":"https://golioth.github.io/allure-reports/main/54//#testresult/b8340d481ef7d178","status":"passed","time":{"start":1736728564547,"stop":1736728623723,"duration":59176}},{"uid":"d240d84ee2bd4342","reportUrl":"https://golioth.github.io/allure-reports/main/53//#testresult/d240d84ee2bd4342","status":"passed","time":{"start":1736643546025,"stop":1736643605031,"duration":59006}},{"uid":"a33f09cc86a200ef","reportUrl":"https://golioth.github.io/allure-reports/main/49//#testresult/a33f09cc86a200ef","status":"passed","time":{"start":1736581357198,"stop":1736581415931,"duration":58733}},{"uid":"8808522f34a348ae","reportUrl":"https://golioth.github.io/allure-reports/main/48//#testresult/8808522f34a348ae","status":"passed","time":{"start":1736556271860,"stop":1736556330975,"duration":59115}},{"uid":"77dec2090d08198e","reportUrl":"https://golioth.github.io/allure-reports/main/45//#testresult/77dec2090d08198e","status":"passed","time":{"start":1736470416693,"stop":1736470476774,"duration":60081}},{"uid":"2d086ab0d5477d76","reportUrl":"https://golioth.github.io/allure-reports/main/44//#testresult/2d086ab0d5477d76","status":"passed","time":{"start":1736457163658,"stop":1736457224261,"duration":60603}},{"uid":"17d438175af50329","reportUrl":"https://golioth.github.io/allure-reports/main/34//#testresult/17d438175af50329","status":"passed","time":{"start":1736383683605,"stop":1736383742895,"duration":59290}},{"uid":"da665952a899bf28","reportUrl":"https://golioth.github.io/allure-reports/main/28/#testresult/da665952a899bf28","status":"passed","time":{"start":1736298151135,"stop":1736298210113,"duration":58978}},{"uid":"30f70acc3c8e451e","reportUrl":"https://golioth.github.io/allure-reports/main/23/#testresult/30f70acc3c8e451e","status":"passed","time":{"start":1736269492030,"stop":1736269550746,"duration":58716}},{"uid":"a802500478379557","reportUrl":"https://golioth.github.io/allure-reports/main/21/#testresult/a802500478379557","status":"passed","time":{"start":1736211300287,"stop":1736211359226,"duration":58939}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"1c111b57ad3441e5.json","parameterValues":["'rak5010'","'zephyr'"]}