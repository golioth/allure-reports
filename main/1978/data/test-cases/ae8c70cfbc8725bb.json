{
  "uid" : "ae8c70cfbc8725bb",
  "name" : "test_lightdb_set",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set",
  "historyId" : "795cf1865df9980166e83af7545b18f1",
  "time" : {
    "start" : 1735350181025,
    "stop" : 1735350232823,
    "duration" : 51798
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 3 == 2",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff948ef790>\ndevice = <golioth.golioth.Device object at 0xffff94906950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "dut",
    "time" : {
      "start" : 1735350152882,
      "stop" : 1735350179952,
      "duration" : 27070
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1735350151588,
      "stop" : 1735350151589,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1735350151585,
      "stop" : 1735350151587,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1735350151583,
      "stop" : 1735350151584,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1735350151589,
      "stop" : 1735350152012,
      "duration" : 423
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1735350151585,
      "stop" : 1735350151585,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1735350152013,
      "stop" : 1735350152882,
      "duration" : 869
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1735350151583,
      "stop" : 1735350151583,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1735350151584,
      "stop" : 1735350151584,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1735350151582,
      "stop" : 1735350151582,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1735350151588,
      "stop" : 1735350151588,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1735350179952,
      "stop" : 1735350181023,
      "duration" : 1071
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 3 == 2",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff948ef790>\ndevice = <golioth.golioth.Device object at 0xffff94906950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "50482487938ad1eb",
      "name" : "log",
      "source" : "50482487938ad1eb.txt",
      "type" : "text/plain",
      "size" : 31777
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1735350233024,
      "stop" : 1735350233071,
      "duration" : 47
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1735350233466,
      "stop" : 1735350233466,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1735350233459,
      "stop" : 1735350233461,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1735350233073,
      "stop" : 1735350233457,
      "duration" : 384
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "fd349565ffc3"
  }, {
    "name" : "thread",
    "value" : "701-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 22,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "c392ef9091856600",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/c392ef9091856600",
        "status" : "passed",
        "time" : {
          "start" : 1735263500311,
          "stop" : 1735263526093,
          "duration" : 25782
        }
      }, {
        "uid" : "ec2d3e707dc33ba5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/ec2d3e707dc33ba5",
        "status" : "passed",
        "time" : {
          "start" : 1735176970459,
          "stop" : 1735176995507,
          "duration" : 25048
        }
      }, {
        "uid" : "d152f45d4d3efba4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/d152f45d4d3efba4",
        "status" : "passed",
        "time" : {
          "start" : 1735091203051,
          "stop" : 1735091249130,
          "duration" : 46079
        }
      }, {
        "uid" : "b250c779ae80eae",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/b250c779ae80eae",
        "status" : "passed",
        "time" : {
          "start" : 1735004094750,
          "stop" : 1735004119882,
          "duration" : 25132
        }
      }, {
        "uid" : "a218b539afe27af1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/a218b539afe27af1",
        "status" : "passed",
        "time" : {
          "start" : 1734918272081,
          "stop" : 1734918299408,
          "duration" : 27327
        }
      }, {
        "uid" : "106615cac3173b3f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1972/#testresult/106615cac3173b3f",
        "status" : "passed",
        "time" : {
          "start" : 1734832130122,
          "stop" : 1734832199314,
          "duration" : 69192
        }
      }, {
        "uid" : "5b1642b806827194",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1969/#testresult/5b1642b806827194",
        "status" : "passed",
        "time" : {
          "start" : 1734745510393,
          "stop" : 1734745588973,
          "duration" : 78580
        }
      }, {
        "uid" : "fbf7dc9a6270ba92",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1965/#testresult/fbf7dc9a6270ba92",
        "status" : "passed",
        "time" : {
          "start" : 1734658690006,
          "stop" : 1734658714647,
          "duration" : 24641
        }
      }, {
        "uid" : "c4eeb34b8e1d60ed",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1957/#testresult/c4eeb34b8e1d60ed",
        "status" : "passed",
        "time" : {
          "start" : 1734572476989,
          "stop" : 1734572502914,
          "duration" : 25925
        }
      }, {
        "uid" : "95f29374a5ad3d5d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1950/#testresult/95f29374a5ad3d5d",
        "status" : "passed",
        "time" : {
          "start" : 1734486341000,
          "stop" : 1734486379508,
          "duration" : 38508
        }
      }, {
        "uid" : "a9a7a874e93f3585",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1949/#testresult/a9a7a874e93f3585",
        "status" : "passed",
        "time" : {
          "start" : 1734471931343,
          "stop" : 1734471957590,
          "duration" : 26247
        }
      }, {
        "uid" : "4916113df2eb12b6",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1946/#testresult/4916113df2eb12b6",
        "status" : "passed",
        "time" : {
          "start" : 1734449549174,
          "stop" : 1734449573832,
          "duration" : 24658
        }
      }, {
        "uid" : "30e17d3be552b778",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1944/#testresult/30e17d3be552b778",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734399061498,
          "stop" : 1734399154866,
          "duration" : 93368
        }
      }, {
        "uid" : "2cf1515b13d6c8aa",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1935/#testresult/2cf1515b13d6c8aa",
        "status" : "passed",
        "time" : {
          "start" : 1734312747631,
          "stop" : 1734312774288,
          "duration" : 26657
        }
      }, {
        "uid" : "f783d075cff27126",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1934/#testresult/f783d075cff27126",
        "status" : "passed",
        "time" : {
          "start" : 1734226398880,
          "stop" : 1734226426181,
          "duration" : 27301
        }
      }, {
        "uid" : "19bea73bc5843c1f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1933/#testresult/19bea73bc5843c1f",
        "status" : "passed",
        "time" : {
          "start" : 1734139531762,
          "stop" : 1734139559496,
          "duration" : 27734
        }
      }, {
        "uid" : "98d260b1c59bd5ff",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1930/#testresult/98d260b1c59bd5ff",
        "status" : "passed",
        "time" : {
          "start" : 1734120610147,
          "stop" : 1734120652727,
          "duration" : 42580
        }
      }, {
        "uid" : "4bbfa5ba39b185a0",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1929/#testresult/4bbfa5ba39b185a0",
        "status" : "passed",
        "time" : {
          "start" : 1734054306335,
          "stop" : 1734054332124,
          "duration" : 25789
        }
      }, {
        "uid" : "dc9802ce0e8ab2ba",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1924/#testresult/dc9802ce0e8ab2ba",
        "status" : "passed",
        "time" : {
          "start" : 1734035264165,
          "stop" : 1734035308776,
          "duration" : 44611
        }
      }, {
        "uid" : "5f1e302e4d88cd86",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1910/#testresult/5f1e302e4d88cd86",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 2 == 1",
        "time" : {
          "start" : 1733998774929,
          "stop" : 1733998872920,
          "duration" : 97991
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "ae8c70cfbc8725bb.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}