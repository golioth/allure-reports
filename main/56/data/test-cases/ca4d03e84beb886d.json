{"uid":"ca4d03e84beb886d","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1736947384571,"stop":1736947408745,"duration":24174},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff88fcbb90>\ndevice = <golioth.golioth.Device object at 0xffff88fe6e10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1736947355389,"stop":1736947355389,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1736947355390,"stop":1736947355390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1736947355391,"stop":1736947355391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1736947355391,"stop":1736947355391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1736947355392,"stop":1736947355394,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1736947355392,"stop":1736947355392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1736947355395,"stop":1736947355395,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1736947355396,"stop":1736947355396,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1736947355396,"stop":1736947355895,"duration":499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1736947355896,"stop":1736947356728,"duration":832},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1736947356729,"stop":1736947383489,"duration":26760},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1736947383489,"stop":1736947384566,"duration":1077},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff88fcbb90>\ndevice = <golioth.golioth.Device object at 0xffff88fe6e10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"dca8f3ffe6dbb8fa","name":"log","source":"dca8f3ffe6dbb8fa.txt","type":"text/plain","size":21506}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1736947409092,"stop":1736947409101,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1736947409103,"stop":1736947409506,"duration":403},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1736947409509,"stop":1736947409511,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1736947409516,"stop":1736947409516,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"301f88777ec8"},{"name":"thread","value":"614-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"580215eef49bd19a","status":"passed","time":{"start":1736903620724,"stop":1736903655455,"duration":34731}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":5,"skipped":0,"passed":41,"unknown":0,"total":48},"items":[{"uid":"779fd6b2349bb5c9","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/779fd6b2349bb5c9","status":"passed","time":{"start":1736903620724,"stop":1736903655455,"duration":34731}},{"uid":"acf9065fc7987831","reportUrl":"https://golioth.github.io/allure-reports/main/54//#testresult/acf9065fc7987831","status":"passed","time":{"start":1736730426329,"stop":1736730455973,"duration":29644}},{"uid":"d83becd5b10aac54","reportUrl":"https://golioth.github.io/allure-reports/main/48//#testresult/d83becd5b10aac54","status":"passed","time":{"start":1736557799310,"stop":1736557828779,"duration":29469}},{"uid":"7cffe49f3641e6d7","reportUrl":"https://golioth.github.io/allure-reports/main/45//#testresult/7cffe49f3641e6d7","status":"passed","time":{"start":1736471422254,"stop":1736471465009,"duration":42755}},{"uid":"5f8b0f620868c8e0","reportUrl":"https://golioth.github.io/allure-reports/main/44//#testresult/5f8b0f620868c8e0","status":"passed","time":{"start":1736458868161,"stop":1736458897602,"duration":29441}},{"uid":"64e9f43d6e931e42","reportUrl":"https://golioth.github.io/allure-reports/main/34//#testresult/64e9f43d6e931e42","status":"passed","time":{"start":1736385149887,"stop":1736385223464,"duration":73577}},{"uid":"59529be15902908a","reportUrl":"https://golioth.github.io/allure-reports/main/28/#testresult/59529be15902908a","status":"passed","time":{"start":1736299635879,"stop":1736299679397,"duration":43518}},{"uid":"965f948b54a52cf9","reportUrl":"https://golioth.github.io/allure-reports/main/23/#testresult/965f948b54a52cf9","status":"passed","time":{"start":1736272108456,"stop":1736272138992,"duration":30536}},{"uid":"da7feb836d23be2a","reportUrl":"https://golioth.github.io/allure-reports/main/21/#testresult/da7feb836d23be2a","status":"passed","time":{"start":1736212948987,"stop":1736212979050,"duration":30063}},{"uid":"3912bf810cfd893a","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/3912bf810cfd893a","status":"passed","time":{"start":1736192288356,"stop":1736192327637,"duration":39281}},{"uid":"2e17d0bb117ba4a0","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/2e17d0bb117ba4a0","status":"passed","time":{"start":1736190361647,"stop":1736190393104,"duration":31457}},{"uid":"f89c8ebf9053058e","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/f89c8ebf9053058e","status":"passed","time":{"start":1736185819469,"stop":1736185860470,"duration":41001}},{"uid":"be585cd2e711acd3","reportUrl":"https://golioth.github.io/allure-reports/main/17/#testresult/be585cd2e711acd3","status":"passed","time":{"start":1736126106392,"stop":1736126155645,"duration":49253}},{"uid":"dd40bb95a253e01e","reportUrl":"https://golioth.github.io/allure-reports/main/16/#testresult/dd40bb95a253e01e","status":"passed","time":{"start":1736039699975,"stop":1736039730668,"duration":30693}},{"uid":"f23cd492657a5983","reportUrl":"https://golioth.github.io/allure-reports/main/15/#testresult/f23cd492657a5983","status":"passed","time":{"start":1735954592800,"stop":1735954646812,"duration":54012}},{"uid":"f17af58486a0176d","reportUrl":"https://golioth.github.io/allure-reports/main/8/#testresult/f17af58486a0176d","status":"passed","time":{"start":1735868669289,"stop":1735868708993,"duration":39704}},{"uid":"28d3af73ba2aa2ae","reportUrl":"https://golioth.github.io/allure-reports/main/1991/#testresult/28d3af73ba2aa2ae","status":"passed","time":{"start":1735781946409,"stop":1735781976167,"duration":29758}},{"uid":"a7c73f0103425acd","reportUrl":"https://golioth.github.io/allure-reports/main/1990/#testresult/a7c73f0103425acd","status":"passed","time":{"start":1735695821788,"stop":1735695852326,"duration":30538}},{"uid":"645ef51861ace1e","reportUrl":"https://golioth.github.io/allure-reports/main/1984/#testresult/645ef51861ace1e","status":"passed","time":{"start":1735660259055,"stop":1735660298514,"duration":39459}},{"uid":"524dc928c674a620","reportUrl":"https://golioth.github.io/allure-reports/main/1983/#testresult/524dc928c674a620","status":"passed","time":{"start":1735608897363,"stop":1735608927844,"duration":30481}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"ca4d03e84beb886d.json","parameterValues":["'nrf9160dk'","'zephyr'"]}