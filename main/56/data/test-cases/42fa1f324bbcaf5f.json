{"uid":"42fa1f324bbcaf5f","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"edf5f1012f71cfc9f14f014f109d19a8","time":{"start":1736946854269,"stop":1736946996568,"duration":142299},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8a00a210>\nproject = <golioth.golioth.Project object at 0xffff89d12d10>\ndevice = <golioth.golioth.Device object at 0xffff8a00b750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <6787b499090292be968e2d3a, release_tags=[], device_tags=['6787b498090292be968e2d39'], artifact_ids=['674e19c7509873c6f7445234'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n        shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n        LOGGER.info(\"Block download has begun!\")\n    \n        shell._device.readlines_until(regex=\".*Rebooting into new image.\", timeout=600.0)\n        LOGGER.info(\"Download complete, restarting to perform update.\")\n    \n        # Test for board to run new firmware and report to Golioth\n    \n>       shell._device.readlines_until(regex=f\".*Current firmware version: {fw_info['package']} - {fw_info['version']}.\",\n                                      timeout=120.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Current firmware version: main - 255.8.9.'\nnum_of_lines = None, timeout = 120.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1736946838093,"stop":1736946838093,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1736946838094,"stop":1736946838094,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1736946838094,"stop":1736946838094,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1736946838095,"stop":1736946838226,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1736946838227,"stop":1736946838228,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1736946838227,"stop":1736946838227,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1736946838228,"stop":1736946838228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1736946838229,"stop":1736946838232,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1736946838229,"stop":1736946838229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1736946838233,"stop":1736946838630,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1736946838631,"stop":1736946839476,"duration":845},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1736946839477,"stop":1736946839854,"duration":377},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1736946839854,"stop":1736946840250,"duration":396},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1736946840251,"stop":1736946841420,"duration":1169},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1736946841421,"stop":1736946841820,"duration":399},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1736946841820,"stop":1736946853613,"duration":11793},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1736946853614,"stop":1736946854261,"duration":647},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8a00a210>\nproject = <golioth.golioth.Project object at 0xffff89d12d10>\ndevice = <golioth.golioth.Device object at 0xffff8a00b750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <6787b499090292be968e2d3a, release_tags=[], device_tags=['6787b498090292be968e2d39'], artifact_ids=['674e19c7509873c6f7445234'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n        shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n        LOGGER.info(\"Block download has begun!\")\n    \n        shell._device.readlines_until(regex=\".*Rebooting into new image.\", timeout=600.0)\n        LOGGER.info(\"Download complete, restarting to perform update.\")\n    \n        # Test for board to run new firmware and report to Golioth\n    \n>       shell._device.readlines_until(regex=f\".*Current firmware version: {fw_info['package']} - {fw_info['version']}.\",\n                                      timeout=120.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Current firmware version: main - 255.8.9.'\nnum_of_lines = None, timeout = 120.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7e1fcaafb6e50fa","name":"log","source":"7e1fcaafb6e50fa.txt","type":"text/plain","size":86005}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1736946996942,"stop":1736946996980,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1736946996982,"stop":1736946997383,"duration":401},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1736946997385,"stop":1736946998150,"duration":765},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1736946998152,"stop":1736946998152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1736946998154,"stop":1736946998155,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1736946998157,"stop":1736946998537,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1736946998540,"stop":1736946998540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1736946998542,"stop":1736946998542,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1736946998576,"stop":1736946998578,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"58ac63652c99"},{"name":"thread","value":"376-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"94c9654c044ed1c0","status":"passed","time":{"start":1736901568557,"stop":1736901612942,"duration":44385}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":48,"unknown":0,"total":49},"items":[{"uid":"1151327b556732f8","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/1151327b556732f8","status":"passed","time":{"start":1736901568557,"stop":1736901612942,"duration":44385}},{"uid":"3b35b0cb1e68feb7","reportUrl":"https://golioth.github.io/allure-reports/main/54//#testresult/3b35b0cb1e68feb7","status":"passed","time":{"start":1736729060608,"stop":1736729108522,"duration":47914}},{"uid":"b194a8f633d8e290","reportUrl":"https://golioth.github.io/allure-reports/main/49//#testresult/b194a8f633d8e290","status":"passed","time":{"start":1736580806272,"stop":1736580853198,"duration":46926}},{"uid":"aa7c29b9fcccdfb0","reportUrl":"https://golioth.github.io/allure-reports/main/48//#testresult/aa7c29b9fcccdfb0","status":"passed","time":{"start":1736555198785,"stop":1736555245743,"duration":46958}},{"uid":"ad34304221c29369","reportUrl":"https://golioth.github.io/allure-reports/main/45//#testresult/ad34304221c29369","status":"passed","time":{"start":1736469776716,"stop":1736469832791,"duration":56075}},{"uid":"80ae005cc0968157","reportUrl":"https://golioth.github.io/allure-reports/main/44//#testresult/80ae005cc0968157","status":"passed","time":{"start":1736457564494,"stop":1736457608997,"duration":44503}},{"uid":"36e94f138493e4bd","reportUrl":"https://golioth.github.io/allure-reports/main/34//#testresult/36e94f138493e4bd","status":"passed","time":{"start":1736383778750,"stop":1736383825714,"duration":46964}},{"uid":"db0fd89564744204","reportUrl":"https://golioth.github.io/allure-reports/main/28/#testresult/db0fd89564744204","status":"passed","time":{"start":1736297857791,"stop":1736297910772,"duration":52981}},{"uid":"cc674f52aaecaa08","reportUrl":"https://golioth.github.io/allure-reports/main/23/#testresult/cc674f52aaecaa08","status":"passed","time":{"start":1736269626444,"stop":1736269672292,"duration":45848}},{"uid":"41ca6896465668f9","reportUrl":"https://golioth.github.io/allure-reports/main/21/#testresult/41ca6896465668f9","status":"passed","time":{"start":1736212062020,"stop":1736212109823,"duration":47803}},{"uid":"2eff1594d6e604a6","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/2eff1594d6e604a6","status":"passed","time":{"start":1736184426951,"stop":1736184471217,"duration":44266}},{"uid":"15aaac2797f72aa4","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/15aaac2797f72aa4","status":"passed","time":{"start":1736184426951,"stop":1736184471217,"duration":44266}},{"uid":"424590995ade0c45","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/424590995ade0c45","status":"passed","time":{"start":1736184426951,"stop":1736184471217,"duration":44266}},{"uid":"1858d97779cd8cbd","reportUrl":"https://golioth.github.io/allure-reports/main/17/#testresult/1858d97779cd8cbd","status":"passed","time":{"start":1736125059475,"stop":1736125105464,"duration":45989}},{"uid":"c339fbebd14c70ae","reportUrl":"https://golioth.github.io/allure-reports/main/16/#testresult/c339fbebd14c70ae","status":"passed","time":{"start":1736037937464,"stop":1736037982558,"duration":45094}},{"uid":"ae0fe89505cfb9e4","reportUrl":"https://golioth.github.io/allure-reports/main/15/#testresult/ae0fe89505cfb9e4","status":"passed","time":{"start":1735951775784,"stop":1735951831530,"duration":55746}},{"uid":"11c162360b778f01","reportUrl":"https://golioth.github.io/allure-reports/main/8/#testresult/11c162360b778f01","status":"passed","time":{"start":1735867756284,"stop":1735867805094,"duration":48810}},{"uid":"16a1d686371511cd","reportUrl":"https://golioth.github.io/allure-reports/main/1991/#testresult/16a1d686371511cd","status":"passed","time":{"start":1735781005777,"stop":1735781054196,"duration":48419}},{"uid":"20324c1e43700bd6","reportUrl":"https://golioth.github.io/allure-reports/main/1990/#testresult/20324c1e43700bd6","status":"passed","time":{"start":1735694712705,"stop":1735694759941,"duration":47236}},{"uid":"66051a931770a573","reportUrl":"https://golioth.github.io/allure-reports/main/1984/#testresult/66051a931770a573","status":"passed","time":{"start":1735658896370,"stop":1735658943417,"duration":47047}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"42fa1f324bbcaf5f.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}