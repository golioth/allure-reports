{"uid":"1c140ebb6d022478","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1731967283197,"stop":1731967396000,"duration":112803},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9b943010>\ndevice = <golioth.golioth.Device object at 0xffff9b931950>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1731967273462,"stop":1731967273463,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731967273463,"stop":1731967273463,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731967273464,"stop":1731967273464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731967273464,"stop":1731967273464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731967273465,"stop":1731967273467,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731967273465,"stop":1731967273465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731967273468,"stop":1731967273468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731967273469,"stop":1731967273970,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731967273469,"stop":1731967273469,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731967273970,"stop":1731967274917,"duration":947},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731967274918,"stop":1731967282672,"duration":7754},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731967282672,"stop":1731967283194,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9b943010>\ndevice = <golioth.golioth.Device object at 0xffff9b931950>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e0add2b7a6d958d5","name":"log","source":"e0add2b7a6d958d5.txt","type":"text/plain","size":16462}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731967396276,"stop":1731967396319,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731967396321,"stop":1731967396789,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731967396791,"stop":1731967396793,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731967396798,"stop":1731967396798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1980a7b80a32"},{"name":"thread","value":"588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"55a9f3c03b50a428","status":"passed","time":{"start":1731967245408,"stop":1731967268801,"duration":23393}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":46,"unknown":0,"total":51},"items":[{"uid":"64c5fafca4431d25","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/64c5fafca4431d25","status":"passed","time":{"start":1731891688108,"stop":1731891711688,"duration":23580}},{"uid":"c7606ba22dad7cae","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/c7606ba22dad7cae","status":"passed","time":{"start":1731805722642,"stop":1731805746222,"duration":23580}},{"uid":"85cf22917097efe4","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/85cf22917097efe4","status":"passed","time":{"start":1731718824675,"stop":1731718849008,"duration":24333}},{"uid":"98da5cd36a53d8e8","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/98da5cd36a53d8e8","status":"passed","time":{"start":1731632374698,"stop":1731632399217,"duration":24519}},{"uid":"d3828e21e569afed","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/d3828e21e569afed","status":"passed","time":{"start":1731608128641,"stop":1731608148061,"duration":19420}},{"uid":"84d49695753a1075","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/84d49695753a1075","status":"passed","time":{"start":1731566472708,"stop":1731566497332,"duration":24624}},{"uid":"2a9b248d082841aa","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/2a9b248d082841aa","status":"passed","time":{"start":1731546011979,"stop":1731546035699,"duration":23720}},{"uid":"7d195a7f62f78489","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/7d195a7f62f78489","status":"passed","time":{"start":1731459361378,"stop":1731459385901,"duration":24523}},{"uid":"5b06704fb7835f3f","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/5b06704fb7835f3f","status":"passed","time":{"start":1731373149494,"stop":1731373172908,"duration":23414}},{"uid":"2bad129bf0396e14","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/2bad129bf0396e14","status":"passed","time":{"start":1731286943496,"stop":1731286966760,"duration":23264}},{"uid":"e6dd314e6af7831","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/e6dd314e6af7831","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731200554909,"stop":1731200667656,"duration":112747}},{"uid":"73b2b609b6c86ec9","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/73b2b609b6c86ec9","status":"passed","time":{"start":1731114035646,"stop":1731114060068,"duration":24422}},{"uid":"777c13008d0b332","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/777c13008d0b332","status":"passed","time":{"start":1731027940779,"stop":1731027965438,"duration":24659}},{"uid":"2766e5c51a6ab04b","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/2766e5c51a6ab04b","status":"passed","time":{"start":1730941198415,"stop":1730941223029,"duration":24614}},{"uid":"47cd664100a8c585","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/47cd664100a8c585","status":"passed","time":{"start":1730854944324,"stop":1730854968853,"duration":24529}},{"uid":"283f85b69cf1599b","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/283f85b69cf1599b","status":"passed","time":{"start":1730854944324,"stop":1730854968853,"duration":24529}},{"uid":"8878d33abc83b0a1","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/8878d33abc83b0a1","status":"passed","time":{"start":1730768540050,"stop":1730768563511,"duration":23461}},{"uid":"4b055750edf66243","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/4b055750edf66243","status":"passed","time":{"start":1730681627421,"stop":1730681652271,"duration":24850}},{"uid":"2eb0a04b7bf38a65","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/2eb0a04b7bf38a65","status":"passed","time":{"start":1730595978360,"stop":1730596003398,"duration":25038}},{"uid":"49423063a48a9ac7","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/49423063a48a9ac7","status":"passed","time":{"start":1730509191395,"stop":1730509215869,"duration":24474}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"1c140ebb6d022478.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}