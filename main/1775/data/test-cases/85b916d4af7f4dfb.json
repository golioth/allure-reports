{"uid":"85b916d4af7f4dfb","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1731967873284,"stop":1731967896906,"duration":23622},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff90a3a3d0>\ndevice = <golioth.golioth.Device object at 0xffff90a51590>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731967855262,"stop":1731967855262,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731967855262,"stop":1731967855262,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731967855263,"stop":1731967855264,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731967855263,"stop":1731967855263,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731967855264,"stop":1731967855266,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731967855264,"stop":1731967855264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731967855267,"stop":1731967855267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731967855268,"stop":1731967855685,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731967855268,"stop":1731967855268,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731967855686,"stop":1731967856755,"duration":1069},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731967856756,"stop":1731967872378,"duration":15622},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731967872378,"stop":1731967873281,"duration":903},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff90a3a3d0>\ndevice = <golioth.golioth.Device object at 0xffff90a51590>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"88813a16105fabb1","name":"log","source":"88813a16105fabb1.txt","type":"text/plain","size":17264}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731967897247,"stop":1731967897272,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731967897274,"stop":1731967897759,"duration":485},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731967897761,"stop":1731967897763,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731967897768,"stop":1731967897768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"6774d87eab8a"},{"name":"thread","value":"463-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":47,"unknown":0,"total":51},"items":[{"uid":"9cca8d0ed660b4c5","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/9cca8d0ed660b4c5","status":"passed","time":{"start":1731892258677,"stop":1731892275038,"duration":16361}},{"uid":"9ea5df6400ae8937","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/9ea5df6400ae8937","status":"passed","time":{"start":1731806103632,"stop":1731806119111,"duration":15479}},{"uid":"4418f70eecd1f81a","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/4418f70eecd1f81a","status":"passed","time":{"start":1731719321277,"stop":1731719334717,"duration":13440}},{"uid":"8f88827776147175","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/8f88827776147175","status":"passed","time":{"start":1731632884880,"stop":1731632901250,"duration":16370}},{"uid":"f5c8ea99aaaeb784","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/f5c8ea99aaaeb784","status":"passed","time":{"start":1731608625290,"stop":1731608637699,"duration":12409}},{"uid":"f656cf51bdb1f75b","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/f656cf51bdb1f75b","status":"passed","time":{"start":1731566981559,"stop":1731566998895,"duration":17336}},{"uid":"9dfdfdd1a675bc3d","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/9dfdfdd1a675bc3d","status":"passed","time":{"start":1731546397711,"stop":1731546411304,"duration":13593}},{"uid":"1d9f4df76ea77d4","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/1d9f4df76ea77d4","status":"passed","time":{"start":1731460081495,"stop":1731460097130,"duration":15635}},{"uid":"5e4140e4a934083a","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/5e4140e4a934083a","status":"passed","time":{"start":1731373663238,"stop":1731373679751,"duration":16513}},{"uid":"194cea6660bb5672","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/194cea6660bb5672","status":"passed","time":{"start":1731286950315,"stop":1731286965909,"duration":15594}},{"uid":"2411b5fd01e69ccc","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/2411b5fd01e69ccc","status":"passed","time":{"start":1731201669052,"stop":1731201683754,"duration":14702}},{"uid":"edcdadfa3ecceb00","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/edcdadfa3ecceb00","status":"passed","time":{"start":1731114543494,"stop":1731114560941,"duration":17447}},{"uid":"af84675d3e80c671","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/af84675d3e80c671","status":"passed","time":{"start":1731027880706,"stop":1731027895183,"duration":14477}},{"uid":"1ff769e591e260bf","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/1ff769e591e260bf","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730941707523,"stop":1730941730952,"duration":23429}},{"uid":"9805e587e378a8f5","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/9805e587e378a8f5","status":"passed","time":{"start":1730894758868,"stop":1730894775435,"duration":16567}},{"uid":"54364e4b3125e119","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/54364e4b3125e119","status":"passed","time":{"start":1730855141371,"stop":1730855156933,"duration":15562}},{"uid":"d7c8ec618c39123d","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/d7c8ec618c39123d","status":"passed","time":{"start":1730769050196,"stop":1730769065035,"duration":14839}},{"uid":"128c64436bf10294","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/128c64436bf10294","status":"passed","time":{"start":1730682335058,"stop":1730682351822,"duration":16764}},{"uid":"27ba0e70ca361fa2","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/27ba0e70ca361fa2","status":"passed","time":{"start":1730596020626,"stop":1730596037405,"duration":16779}},{"uid":"92bdd9c4a0cec77c","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/92bdd9c4a0cec77c","status":"passed","time":{"start":1730509385572,"stop":1730509400915,"duration":15343}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"85b916d4af7f4dfb.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}