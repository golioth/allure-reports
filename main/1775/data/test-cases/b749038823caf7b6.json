{"uid":"b749038823caf7b6","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6fabbbcd9afd469e2e0bf8673f87e50e","time":{"start":1731967016040,"stop":1731967109490,"duration":93450},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff83e0bb10>\ndevice = <golioth.golioth.Device object at 0xffff83dfd810>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731967006400,"stop":1731967006400,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731967006400,"stop":1731967006400,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731967006401,"stop":1731967006401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731967006401,"stop":1731967006402,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731967006402,"stop":1731967006402,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731967006402,"stop":1731967006404,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731967006405,"stop":1731967006405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731967006406,"stop":1731967006406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731967006406,"stop":1731967006849,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731967006849,"stop":1731967007759,"duration":910},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731967007759,"stop":1731967015510,"duration":7751},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731967015510,"stop":1731967016037,"duration":527},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff83e0bb10>\ndevice = <golioth.golioth.Device object at 0xffff83dfd810>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2f00a652e890ac38","name":"log","source":"2f00a652e890ac38.txt","type":"text/plain","size":18326}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731967109759,"stop":1731967109804,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731967109806,"stop":1731967110373,"duration":567},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731967110375,"stop":1731967110377,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731967110382,"stop":1731967110382,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1980a7b80a32"},{"name":"thread","value":"441-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":47,"unknown":0,"total":51},"items":[{"uid":"8089d0175261496d","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/8089d0175261496d","status":"passed","time":{"start":1731891524663,"stop":1731891539941,"duration":15278}},{"uid":"29937e1e85ae3af8","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/29937e1e85ae3af8","status":"passed","time":{"start":1731805309923,"stop":1731805325183,"duration":15260}},{"uid":"18f238a433e754c9","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/18f238a433e754c9","status":"passed","time":{"start":1731718637345,"stop":1731718652732,"duration":15387}},{"uid":"a091580abdb0a8c9","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/a091580abdb0a8c9","status":"passed","time":{"start":1731632186391,"stop":1731632202748,"duration":16357}},{"uid":"13e7d0c3bc4c0aef","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/13e7d0c3bc4c0aef","status":"passed","time":{"start":1731607942908,"stop":1731607958239,"duration":15331}},{"uid":"2c144f9e241ffa20","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/2c144f9e241ffa20","status":"passed","time":{"start":1731566198915,"stop":1731566215167,"duration":16252}},{"uid":"a338f422f70be34","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/a338f422f70be34","status":"passed","time":{"start":1731545664265,"stop":1731545679796,"duration":15531}},{"uid":"5b89695cecf62cac","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/5b89695cecf62cac","status":"passed","time":{"start":1731459214424,"stop":1731459230678,"duration":16254}},{"uid":"4d1b750eae367ff0","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/4d1b750eae367ff0","status":"passed","time":{"start":1731372962025,"stop":1731372977364,"duration":15339}},{"uid":"78ae22c4783fb938","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/78ae22c4783fb938","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731286677036,"stop":1731286770571,"duration":93535}},{"uid":"2431d094744bd925","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/2431d094744bd925","status":"passed","time":{"start":1731200370749,"stop":1731200385993,"duration":15244}},{"uid":"84c01027d7e523c7","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/84c01027d7e523c7","status":"passed","time":{"start":1731113709588,"stop":1731113724927,"duration":15339}},{"uid":"922b917b9046fa8","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/922b917b9046fa8","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731027723676,"stop":1731027723676,"duration":0}},{"uid":"4bab89d777372868","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/4bab89d777372868","status":"passed","time":{"start":1730941014750,"stop":1730941030074,"duration":15324}},{"uid":"5dfb5a1d9835ee86","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/5dfb5a1d9835ee86","status":"passed","time":{"start":1730854722855,"stop":1730854739182,"duration":16327}},{"uid":"2bffd0aeba23c606","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/2bffd0aeba23c606","status":"passed","time":{"start":1730854722855,"stop":1730854739182,"duration":16327}},{"uid":"bbbaea6dc35b901e","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/bbbaea6dc35b901e","status":"passed","time":{"start":1730768351786,"stop":1730768367125,"duration":15339}},{"uid":"5a38187add2bdf54","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/5a38187add2bdf54","status":"passed","time":{"start":1730681429095,"stop":1730681445849,"duration":16754}},{"uid":"a71c239e3081c96","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/a71c239e3081c96","status":"passed","time":{"start":1730595790845,"stop":1730595806956,"duration":16111}},{"uid":"84653bb2e8a92272","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/84653bb2e8a92272","status":"passed","time":{"start":1730509044050,"stop":1730509060377,"duration":16327}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"b749038823caf7b6.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}