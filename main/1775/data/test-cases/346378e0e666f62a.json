{"uid":"346378e0e666f62a","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1731968680615,"stop":1731968794002,"duration":113387},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95da8650>\ndevice = <golioth.golioth.Device object at 0xffff95dab250>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff95f18450>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731968651422,"stop":1731968651422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1731968651423,"stop":1731968651438,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731968651439,"stop":1731968651439,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731968651440,"stop":1731968651440,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731968651440,"stop":1731968651443,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731968651444,"stop":1731968651444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731968651444,"stop":1731968651444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731968651445,"stop":1731968651894,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731968651895,"stop":1731968653122,"duration":1227},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731968653123,"stop":1731968679485,"duration":26362},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731968679486,"stop":1731968680607,"duration":1121},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95da8650>\ndevice = <golioth.golioth.Device object at 0xffff95dab250>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff95f18450>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"bc99c50048e6b468","name":"log","source":"bc99c50048e6b468.txt","type":"text/plain","size":16361}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731968794398,"stop":1731968794411,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731968794413,"stop":1731968794800,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731968794802,"stop":1731968794804,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731968794809,"stop":1731968794809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"0035875647df"},{"name":"thread","value":"393-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":6,"skipped":0,"passed":43,"unknown":0,"total":51},"items":[{"uid":"7cbb003166a4587","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/7cbb003166a4587","status":"passed","time":{"start":1731892728053,"stop":1731892777583,"duration":49530}},{"uid":"bd9db853ed423848","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/bd9db853ed423848","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731806304274,"stop":1731806418839,"duration":114565}},{"uid":"f91b70733ec0483f","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/f91b70733ec0483f","status":"passed","time":{"start":1731720151123,"stop":1731720180105,"duration":28982}},{"uid":"d243a04b78c74173","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/d243a04b78c74173","status":"passed","time":{"start":1731633646080,"stop":1731633698835,"duration":52755}},{"uid":"b99c699bb50f0936","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/b99c699bb50f0936","status":"passed","time":{"start":1731609326433,"stop":1731609357010,"duration":30577}},{"uid":"c43a866c0e58fe76","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/c43a866c0e58fe76","status":"passed","time":{"start":1731567598057,"stop":1731567634103,"duration":36046}},{"uid":"84cd2de0c4689b23","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/84cd2de0c4689b23","status":"passed","time":{"start":1731546769983,"stop":1731546800405,"duration":30422}},{"uid":"ab6c92492c6768aa","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/ab6c92492c6768aa","status":"passed","time":{"start":1731461192819,"stop":1731461232815,"duration":39996}},{"uid":"3c31a6097ab47e1e","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/3c31a6097ab47e1e","status":"passed","time":{"start":1731374179535,"stop":1731374208821,"duration":29286}},{"uid":"ccfacd7c20e65569","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/ccfacd7c20e65569","status":"passed","time":{"start":1731287514870,"stop":1731287618139,"duration":103269}},{"uid":"694b8634440f69d8","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/694b8634440f69d8","status":"passed","time":{"start":1731201650815,"stop":1731201680271,"duration":29456}},{"uid":"d89c218ab4bca251","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/d89c218ab4bca251","status":"passed","time":{"start":1731115119678,"stop":1731115167261,"duration":47583}},{"uid":"a76b2618cc1bf934","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/a76b2618cc1bf934","status":"passed","time":{"start":1731028415425,"stop":1731028458422,"duration":42997}},{"uid":"b9f385e055dfe187","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/b9f385e055dfe187","status":"passed","time":{"start":1730942285382,"stop":1730942390644,"duration":105262}},{"uid":"17c7e3c0e6ca6c33","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/17c7e3c0e6ca6c33","status":"passed","time":{"start":1730893167111,"stop":1730893196370,"duration":29259}},{"uid":"76553f0e250203d3","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/76553f0e250203d3","status":"passed","time":{"start":1730855653959,"stop":1730855709560,"duration":55601}},{"uid":"1bc11e848066081b","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/1bc11e848066081b","status":"passed","time":{"start":1730769570992,"stop":1730769625642,"duration":54650}},{"uid":"b340f39fbe6406dc","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/b340f39fbe6406dc","status":"passed","time":{"start":1730683071281,"stop":1730683124845,"duration":53564}},{"uid":"d389adf70ccefb84","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/d389adf70ccefb84","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730596597095,"stop":1730596711640,"duration":114545}},{"uid":"504c80b587bf1e86","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/504c80b587bf1e86","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730509762617,"stop":1730509875721,"duration":113104}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"346378e0e666f62a.json","parameterValues":["'nrf9160dk'","'zephyr'"]}