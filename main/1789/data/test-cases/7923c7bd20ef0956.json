{"uid":"7923c7bd20ef0956","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1732066423929,"stop":1732066536798,"duration":112869},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa250af50>\ndevice = <golioth.golioth.Device object at 0xffffa25210d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732066394744,"stop":1732066394744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732066394744,"stop":1732066394745,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732066394745,"stop":1732066394745,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732066394745,"stop":1732066394746,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732066394746,"stop":1732066394746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732066394746,"stop":1732066394749,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732066394749,"stop":1732066394749,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732066394750,"stop":1732066394750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732066394750,"stop":1732066395190,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732066395191,"stop":1732066396135,"duration":944},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732066396136,"stop":1732066422829,"duration":26693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732066422830,"stop":1732066423922,"duration":1092},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa250af50>\ndevice = <golioth.golioth.Device object at 0xffffa25210d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"20d2d18ad62d338b","name":"log","source":"20d2d18ad62d338b.txt","type":"text/plain","size":14171}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732066537082,"stop":1732066537127,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732066537129,"stop":1732066537514,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732066537516,"stop":1732066537518,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732066537523,"stop":1732066537524,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5c002db39826"},{"name":"thread","value":"965-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fdb35758a03a6499","status":"passed","time":{"start":1732066346844,"stop":1732066390160,"duration":43316}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":7,"skipped":0,"passed":46,"unknown":0,"total":54},"items":[{"uid":"102d7a6536c94009","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/102d7a6536c94009","status":"passed","time":{"start":1732061419438,"stop":1732061468271,"duration":48833}},{"uid":"fa6d385ec098f69b","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/fa6d385ec098f69b","status":"passed","time":{"start":1732038660530,"stop":1732038684878,"duration":24348}},{"uid":"e78100dc6ac9e7fb","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/e78100dc6ac9e7fb","status":"passed","time":{"start":1731980191658,"stop":1731980241036,"duration":49378}},{"uid":"993ac6c9cd0a380a","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/993ac6c9cd0a380a","status":"passed","time":{"start":1731969803459,"stop":1731969848738,"duration":45279}},{"uid":"78677d31035fc41","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/78677d31035fc41","status":"passed","time":{"start":1731893849955,"stop":1731893893319,"duration":43364}},{"uid":"f2ec452edade8534","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/f2ec452edade8534","status":"passed","time":{"start":1731807470373,"stop":1731807527286,"duration":56913}},{"uid":"271932748d363592","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/271932748d363592","status":"passed","time":{"start":1731721032490,"stop":1731721056924,"duration":24434}},{"uid":"c6c2fde5550bddb1","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/c6c2fde5550bddb1","status":"passed","time":{"start":1731634855293,"stop":1731634910529,"duration":55236}},{"uid":"9ae2a7f1d5c3b9c4","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/9ae2a7f1d5c3b9c4","status":"passed","time":{"start":1731610297899,"stop":1731610323066,"duration":25167}},{"uid":"a7d612a7d6679749","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/a7d612a7d6679749","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731568925625,"stop":1731569038322,"duration":112697}},{"uid":"3bb8fe5a41a45e80","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/3bb8fe5a41a45e80","status":"passed","time":{"start":1731547752799,"stop":1731547777045,"duration":24246}},{"uid":"70e9446002e0be56","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/70e9446002e0be56","status":"passed","time":{"start":1731375087830,"stop":1731375114028,"duration":26198}},{"uid":"2a2b60f1d808af73","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/2a2b60f1d808af73","status":"passed","time":{"start":1731288643810,"stop":1731288667744,"duration":23934}},{"uid":"f4010b4d4444733b","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/f4010b4d4444733b","status":"passed","time":{"start":1731202490288,"stop":1731202514907,"duration":24619}},{"uid":"ea289ee06bea176c","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/ea289ee06bea176c","status":"passed","time":{"start":1731116174313,"stop":1731116220170,"duration":45857}},{"uid":"f45a6294c7dc6427","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/f45a6294c7dc6427","status":"passed","time":{"start":1731029542702,"stop":1731029586307,"duration":43605}},{"uid":"6700701ade49b9f2","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/6700701ade49b9f2","status":"passed","time":{"start":1730943236651,"stop":1730943262413,"duration":25762}},{"uid":"aa028f30dfef9ba3","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/aa028f30dfef9ba3","status":"passed","time":{"start":1730894279418,"stop":1730894304734,"duration":25316}},{"uid":"aca205c1e20b83f4","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/aca205c1e20b83f4","status":"passed","time":{"start":1730856719562,"stop":1730856762599,"duration":43037}},{"uid":"3b61933d798662e9","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/3b61933d798662e9","status":"passed","time":{"start":1730770645805,"stop":1730770682017,"duration":36212}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7923c7bd20ef0956.json","parameterValues":["'nrf9160dk'","'zephyr'"]}