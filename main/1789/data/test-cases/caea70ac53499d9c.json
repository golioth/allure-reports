{"uid":"caea70ac53499d9c","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1732065248595,"stop":1732065361625,"duration":113030},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaec98b10>\ndevice = <golioth.golioth.Device object at 0xffffaec9be10>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffaee08d10>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732065219834,"stop":1732065219835,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1732065219835,"stop":1732065219851,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732065219851,"stop":1732065219852,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732065219852,"stop":1732065219852,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732065219853,"stop":1732065219855,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732065219856,"stop":1732065219856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732065219856,"stop":1732065219856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732065219857,"stop":1732065220267,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732065220268,"stop":1732065221153,"duration":885},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732065221153,"stop":1732065247504,"duration":26351},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732065247505,"stop":1732065248588,"duration":1083},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaec98b10>\ndevice = <golioth.golioth.Device object at 0xffffaec9be10>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffaee08d10>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"6df8d600ad28213a","name":"log","source":"6df8d600ad28213a.txt","type":"text/plain","size":16361}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732065361918,"stop":1732065361949,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732065361950,"stop":1732065362361,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732065362363,"stop":1732065362365,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732065362370,"stop":1732065362370,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5c002db39826"},{"name":"thread","value":"422-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":7,"skipped":0,"passed":46,"unknown":0,"total":55},"items":[{"uid":"9f94ae47b49de4e","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/9f94ae47b49de4e","status":"passed","time":{"start":1732060286953,"stop":1732060338429,"duration":51476}},{"uid":"4cf4a3ee72a63e78","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/4cf4a3ee72a63e78","status":"passed","time":{"start":1732037796530,"stop":1732037824915,"duration":28385}},{"uid":"9b12892ace2a2950","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/9b12892ace2a2950","status":"passed","time":{"start":1731978900745,"stop":1731978946970,"duration":46225}},{"uid":"346378e0e666f62a","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/346378e0e666f62a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731968680615,"stop":1731968794002,"duration":113387}},{"uid":"7cbb003166a4587","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/7cbb003166a4587","status":"passed","time":{"start":1731892728053,"stop":1731892777583,"duration":49530}},{"uid":"bd9db853ed423848","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/bd9db853ed423848","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731806304274,"stop":1731806418839,"duration":114565}},{"uid":"f91b70733ec0483f","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/f91b70733ec0483f","status":"passed","time":{"start":1731720151123,"stop":1731720180105,"duration":28982}},{"uid":"d243a04b78c74173","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/d243a04b78c74173","status":"passed","time":{"start":1731633646080,"stop":1731633698835,"duration":52755}},{"uid":"b99c699bb50f0936","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/b99c699bb50f0936","status":"passed","time":{"start":1731609326433,"stop":1731609357010,"duration":30577}},{"uid":"c43a866c0e58fe76","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/c43a866c0e58fe76","status":"passed","time":{"start":1731567598057,"stop":1731567634103,"duration":36046}},{"uid":"84cd2de0c4689b23","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/84cd2de0c4689b23","status":"passed","time":{"start":1731546769983,"stop":1731546800405,"duration":30422}},{"uid":"ab6c92492c6768aa","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/ab6c92492c6768aa","status":"passed","time":{"start":1731461192819,"stop":1731461232815,"duration":39996}},{"uid":"3c31a6097ab47e1e","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/3c31a6097ab47e1e","status":"passed","time":{"start":1731374179535,"stop":1731374208821,"duration":29286}},{"uid":"ccfacd7c20e65569","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/ccfacd7c20e65569","status":"passed","time":{"start":1731287514870,"stop":1731287618139,"duration":103269}},{"uid":"694b8634440f69d8","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/694b8634440f69d8","status":"passed","time":{"start":1731201650815,"stop":1731201680271,"duration":29456}},{"uid":"d89c218ab4bca251","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/d89c218ab4bca251","status":"passed","time":{"start":1731115119678,"stop":1731115167261,"duration":47583}},{"uid":"a76b2618cc1bf934","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/a76b2618cc1bf934","status":"passed","time":{"start":1731028415425,"stop":1731028458422,"duration":42997}},{"uid":"b9f385e055dfe187","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/b9f385e055dfe187","status":"passed","time":{"start":1730942285382,"stop":1730942390644,"duration":105262}},{"uid":"17c7e3c0e6ca6c33","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/17c7e3c0e6ca6c33","status":"passed","time":{"start":1730893167111,"stop":1730893196370,"duration":29259}},{"uid":"76553f0e250203d3","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/76553f0e250203d3","status":"passed","time":{"start":1730855653959,"stop":1730855709560,"duration":55601}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"caea70ac53499d9c.json","parameterValues":["'nrf9160dk'","'zephyr'"]}