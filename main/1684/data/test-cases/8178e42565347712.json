{"uid":"8178e42565347712","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"b3d5b97364e6f035c71c0a09d7a1be64","time":{"start":1729471495855,"stop":1729471541989,"duration":46134},"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8887b450>\ndevice = <golioth.golioth.Device object at 0xffff88a62350>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1729471477668,"stop":1729471477669,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1729471477668,"stop":1729471477668,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729471477669,"stop":1729471477669,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729471477670,"stop":1729471477670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729471477670,"stop":1729471477670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729471477671,"stop":1729471477673,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729471477674,"stop":1729471477674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729471477674,"stop":1729471477674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729471477675,"stop":1729471478268,"duration":593},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729471478268,"stop":1729471479225,"duration":957},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729471479226,"stop":1729471495220,"duration":15994},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729471495221,"stop":1729471495852,"duration":631},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8887b450>\ndevice = <golioth.golioth.Device object at 0xffff88a62350>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","steps":[],"attachments":[{"uid":"cab042036b70c507","name":"log","source":"cab042036b70c507.txt","type":"text/plain","size":28378}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729471542245,"stop":1729471542468,"duration":223},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729471542470,"stop":1729471542977,"duration":507},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729471542979,"stop":1729471542982,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729471542986,"stop":1729471542987,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"bcbc10663740"},{"name":"thread","value":"345-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":13,"unknown":0,"total":18},"items":[{"uid":"2f58367cfaaeb013","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/2f58367cfaaeb013","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1729385921621,"stop":1729385944460,"duration":22839}},{"uid":"6ec71b2177154b4c","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/6ec71b2177154b4c","status":"passed","time":{"start":1729369845224,"stop":1729369885740,"duration":40516}},{"uid":"f93dc1e8cafde38d","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/f93dc1e8cafde38d","status":"passed","time":{"start":1729362699937,"stop":1729362719164,"duration":19227}},{"uid":"4868ada79a0a00d1","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/4868ada79a0a00d1","status":"passed","time":{"start":1729299521863,"stop":1729299541541,"duration":19678}},{"uid":"4d83be8c0ee4187e","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/4d83be8c0ee4187e","status":"passed","time":{"start":1729212928938,"stop":1729212969166,"duration":40228}},{"uid":"2a3a27f3046241ec","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/2a3a27f3046241ec","status":"passed","time":{"start":1729204064939,"stop":1729204083770,"duration":18831}},{"uid":"de6ad352409ba6bc","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/de6ad352409ba6bc","status":"passed","time":{"start":1729130375988,"stop":1729130416452,"duration":40464}},{"uid":"6e3bd240a40d67c4","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/6e3bd240a40d67c4","status":"passed","time":{"start":1729110811554,"stop":1729110852077,"duration":40523}},{"uid":"f847dc007b917fa1","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/f847dc007b917fa1","status":"passed","time":{"start":1729040046454,"stop":1729040087300,"duration":40846}},{"uid":"2d0356fb932c8cde","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/2d0356fb932c8cde","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1729026957621,"stop":1729027001273,"duration":43652}},{"uid":"585a2ae3957e1d9a","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/585a2ae3957e1d9a","status":"passed","time":{"start":1729009014583,"stop":1729009054561,"duration":39978}},{"uid":"4d748d6ed98b2899","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/4d748d6ed98b2899","status":"passed","time":{"start":1728953865070,"stop":1728953906129,"duration":41059}},{"uid":"8a8af045a6de0451","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/8a8af045a6de0451","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1728867561605,"stop":1728867605849,"duration":44244}},{"uid":"65f146aafd3ca727","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/65f146aafd3ca727","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1728781171808,"stop":1728781193251,"duration":21443}},{"uid":"68e4f65eac6ea08","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/68e4f65eac6ea08","status":"passed","time":{"start":1728694372949,"stop":1728694414331,"duration":41382}},{"uid":"3a3643cff16ce97d","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/3a3643cff16ce97d","status":"passed","time":{"start":1728669246956,"stop":1728669265812,"duration":18856}},{"uid":"44223fefd37a8f0","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/44223fefd37a8f0","status":"passed","time":{"start":1728663351772,"stop":1728663391979,"duration":40207}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"8178e42565347712.json","parameterValues":["'rak5010'","'zephyr'"]}