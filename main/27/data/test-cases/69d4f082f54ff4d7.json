{"uid":"69d4f082f54ff4d7","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"934caf5f97c3bf444d136e05890d35c9","time":{"start":1732306089681,"stop":1732306126806,"duration":37125},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9277fed0>\ndevice = <golioth.golioth.Device object at 0xffff9279ae50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732306060146,"stop":1732306060146,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732306060147,"stop":1732306060147,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732306060147,"stop":1732306060147,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732306060148,"stop":1732306060149,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732306060148,"stop":1732306060148,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732306060149,"stop":1732306060151,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732306060152,"stop":1732306060152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732306060152,"stop":1732306060152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732306060153,"stop":1732306061030,"duration":877},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732306061031,"stop":1732306062534,"duration":1503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732306062534,"stop":1732306086559,"duration":24025},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732306086560,"stop":1732306089674,"duration":3114},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9277fed0>\ndevice = <golioth.golioth.Device object at 0xffff9279ae50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"3e5c512c00e4c81","name":"log","source":"3e5c512c00e4c81.txt","type":"text/plain","size":28887}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732306127165,"stop":1732306127214,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732306127216,"stop":1732306127685,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732306127687,"stop":1732306127689,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732306127694,"stop":1732306127694,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"28bb727bcb0e"},{"name":"thread","value":"539-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":59,"unknown":0,"total":63},"items":[{"uid":"64af733a338a2732","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/64af733a338a2732","status":"passed","time":{"start":1732298939993,"stop":1732298967832,"duration":27839}},{"uid":"59ef74b6e7f213f2","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/59ef74b6e7f213f2","status":"passed","time":{"start":1732277016481,"stop":1732277044227,"duration":27746}},{"uid":"59295a908e75cdf6","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/59295a908e75cdf6","status":"passed","time":{"start":1732236616886,"stop":1732236644731,"duration":27845}},{"uid":"395401c13883abe1","reportUrl":"https://golioth.github.io/allure-reports/main/1809//#testresult/395401c13883abe1","status":"passed","time":{"start":1732212738105,"stop":1732212765889,"duration":27784}},{"uid":"446b2a5a2396693f","reportUrl":"https://golioth.github.io/allure-reports/main/1804//#testresult/446b2a5a2396693f","status":"passed","time":{"start":1732161350370,"stop":1732161378704,"duration":28334}},{"uid":"6899ea515336f1be","reportUrl":"https://golioth.github.io/allure-reports/main/1803//#testresult/6899ea515336f1be","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732151692484,"stop":1732151733440,"duration":40956}},{"uid":"627d0ad20d725fd","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/627d0ad20d725fd","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1732138011455,"stop":1732138011455,"duration":0}},{"uid":"e67f29208d6af104","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/e67f29208d6af104","status":"passed","time":{"start":1732063718454,"stop":1732063751667,"duration":33213}},{"uid":"b9f4a38f216cbbce","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/b9f4a38f216cbbce","status":"passed","time":{"start":1732058227029,"stop":1732058254708,"duration":27679}},{"uid":"83f9ebd5d45f13f0","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/83f9ebd5d45f13f0","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1732036803650,"stop":1732036803650,"duration":0}},{"uid":"753a736aaecff3b8","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/753a736aaecff3b8","status":"passed","time":{"start":1731977481315,"stop":1731977509262,"duration":27947}},{"uid":"4bb6a7f6f64e2c21","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/4bb6a7f6f64e2c21","status":"passed","time":{"start":1731967083823,"stop":1731967111612,"duration":27789}},{"uid":"3f81caca5f53262f","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/3f81caca5f53262f","status":"passed","time":{"start":1731891105572,"stop":1731891133362,"duration":27790}},{"uid":"bb4ac7e3ed8a647f","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/bb4ac7e3ed8a647f","status":"passed","time":{"start":1731804961523,"stop":1731804989272,"duration":27749}},{"uid":"85a28fefade7aece","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/85a28fefade7aece","status":"passed","time":{"start":1731718277440,"stop":1731718305347,"duration":27907}},{"uid":"38511026b4156761","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/38511026b4156761","status":"passed","time":{"start":1731631764178,"stop":1731631791913,"duration":27735}},{"uid":"86483ce208098a97","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/86483ce208098a97","status":"passed","time":{"start":1731607467990,"stop":1731607496472,"duration":28482}},{"uid":"55fc4352df94bc6e","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/55fc4352df94bc6e","status":"passed","time":{"start":1731565883274,"stop":1731565911053,"duration":27779}},{"uid":"af78762fe75dc3ee","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/af78762fe75dc3ee","status":"passed","time":{"start":1731545314938,"stop":1731545344032,"duration":29094}},{"uid":"5248ea8276899dbb","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/5248ea8276899dbb","status":"passed","time":{"start":1731459015782,"stop":1731459043621,"duration":27839}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"69d4f082f54ff4d7.json","parameterValues":["'nrf52840dk'","'zephyr'"]}