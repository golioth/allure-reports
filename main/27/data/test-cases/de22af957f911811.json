{"uid":"de22af957f911811","name":"test_fw_update","fullName":"examples.esp_idf.fw_update.pytest.test_sample#test_fw_update","historyId":"48d0816a206ae6718f292d04b6749e18","time":{"start":1732307038294,"stop":1732307608668,"duration":570374},"status":"failed","statusMessage":"Failed: Timeout >600.0s","statusTrace":"pyfuncitem = <Function test_fw_update>\n\n    @pytest.hookimpl(tryfirst=True)\n    def pytest_pyfunc_call(pyfuncitem: Any) -> bool | None:\n        def run_with_hypothesis(**kwargs: Any) -> None:\n            with get_runner(backend_name, backend_options) as runner:\n                runner.run_test(original_func, kwargs)\n    \n        backend = pyfuncitem.funcargs.get(\"anyio_backend\")\n        if backend:\n            backend_name, backend_options = extract_backend_and_options(backend)\n    \n            if hasattr(pyfuncitem.obj, \"hypothesis\"):\n                # Wrap the inner test function unless it's already wrapped\n                original_func = pyfuncitem.obj.hypothesis.inner_test\n                if original_func.__qualname__ != run_with_hypothesis.__qualname__:\n                    if iscoroutinefunction(original_func):\n                        pyfuncitem.obj.hypothesis.inner_test = run_with_hypothesis\n    \n                return None\n    \n            if iscoroutinefunction(pyfuncitem.obj):\n                funcargs = pyfuncitem.funcargs\n                testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n                with get_runner(backend_name, backend_options) as runner:\n                    try:\n>                       runner.run_test(pyfuncitem.obj, testargs)\n\n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:951: in run_test\n    self._call_in_runner_task(test_func, **kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:919: in _call_in_runner_task\n    self._call_queue.get()()\n/usr/lib/python3.11/queue.py:171: in get\n    self.not_empty.wait()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Condition(<unlocked _thread.lock object at 0xffffa6952a80>, 0)>\ntimeout = None\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n    \n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n    \n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n    \n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n    \n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n    \n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n>               waiter.acquire()\nE               Failed: Timeout >600.0s\n\n/usr/lib/python3.11/threading.py:320: Failed","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732307008641,"stop":1732307008641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1732307008642,"stop":1732307008671,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1732307008672,"stop":1732307008672,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1732307008672,"stop":1732307008672,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1732307008673,"stop":1732307008673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732307008673,"stop":1732307008673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1732307008674,"stop":1732307008675,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732307008674,"stop":1732307008674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1732307008675,"stop":1732307008675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1732307008675,"stop":1732307008684,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732307008684,"stop":1732307008685,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732307008685,"stop":1732307008685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732307008686,"stop":1732307008686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_name","time":{"start":1732307008686,"stop":1732307008686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1732307008687,"stop":1732307034227,"duration":25540},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732307034229,"stop":1732307034793,"duration":564},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732307034794,"stop":1732307035734,"duration":940},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1732307035735,"stop":1732307036154,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1732307036155,"stop":1732307036576,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1732307036576,"stop":1732307037858,"duration":1282},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1732307037859,"stop":1732307038290,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Timeout >600.0s","statusTrace":"pyfuncitem = <Function test_fw_update>\n\n    @pytest.hookimpl(tryfirst=True)\n    def pytest_pyfunc_call(pyfuncitem: Any) -> bool | None:\n        def run_with_hypothesis(**kwargs: Any) -> None:\n            with get_runner(backend_name, backend_options) as runner:\n                runner.run_test(original_func, kwargs)\n    \n        backend = pyfuncitem.funcargs.get(\"anyio_backend\")\n        if backend:\n            backend_name, backend_options = extract_backend_and_options(backend)\n    \n            if hasattr(pyfuncitem.obj, \"hypothesis\"):\n                # Wrap the inner test function unless it's already wrapped\n                original_func = pyfuncitem.obj.hypothesis.inner_test\n                if original_func.__qualname__ != run_with_hypothesis.__qualname__:\n                    if iscoroutinefunction(original_func):\n                        pyfuncitem.obj.hypothesis.inner_test = run_with_hypothesis\n    \n                return None\n    \n            if iscoroutinefunction(pyfuncitem.obj):\n                funcargs = pyfuncitem.funcargs\n                testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n                with get_runner(backend_name, backend_options) as runner:\n                    try:\n>                       runner.run_test(pyfuncitem.obj, testargs)\n\n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:951: in run_test\n    self._call_in_runner_task(test_func, **kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:919: in _call_in_runner_task\n    self._call_queue.get()()\n/usr/lib/python3.11/queue.py:171: in get\n    self.not_empty.wait()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Condition(<unlocked _thread.lock object at 0xffffa6952a80>, 0)>\ntimeout = None\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n    \n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n    \n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n    \n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n    \n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n    \n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n>               waiter.acquire()\nE               Failed: Timeout >600.0s\n\n/usr/lib/python3.11/threading.py:320: Failed","steps":[],"attachments":[{"uid":"25e92587f8c70aba","name":"stdout","source":"25e92587f8c70aba.txt","type":"text/plain","size":9560}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"release::0","time":{"start":1732307609224,"stop":1732307656571,"duration":47347},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1732307656573,"stop":1732307657390,"duration":817},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1732307657392,"stop":1732307657393,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1732307657395,"stop":1732307657395,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732307657397,"stop":1732307657802,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732307657804,"stop":1732307657804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1732307657806,"stop":1732307657811,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1732307657829,"stop":1732307657832,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"05f1dafec7bd"},{"name":"thread","value":"282-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":59,"unknown":0,"total":61},"items":[{"uid":"95f281ad88e631cf","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/95f281ad88e631cf","status":"passed","time":{"start":1732298966561,"stop":1732299313797,"duration":347236}},{"uid":"e982218cf2dd8e9e","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/e982218cf2dd8e9e","status":"passed","time":{"start":1732276696898,"stop":1732277010591,"duration":313693}},{"uid":"9ae481227d434c1c","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/9ae481227d434c1c","status":"passed","time":{"start":1732237346428,"stop":1732237645200,"duration":298772}},{"uid":"83be986b3f674f8a","reportUrl":"https://golioth.github.io/allure-reports/main/1809//#testresult/83be986b3f674f8a","status":"passed","time":{"start":1732212244927,"stop":1732212368104,"duration":123177}},{"uid":"27dddcacf661c511","reportUrl":"https://golioth.github.io/allure-reports/main/1804//#testresult/27dddcacf661c511","status":"passed","time":{"start":1732162250464,"stop":1732162362673,"duration":112209}},{"uid":"f57d76b5923f60bd","reportUrl":"https://golioth.github.io/allure-reports/main/1803//#testresult/f57d76b5923f60bd","status":"passed","time":{"start":1732152235231,"stop":1732152645460,"duration":410229}},{"uid":"190bbbdd78ae3fa9","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/190bbbdd78ae3fa9","status":"passed","time":{"start":1732138687967,"stop":1732139091360,"duration":403393}},{"uid":"f41b3db55e7605a0","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/f41b3db55e7605a0","status":"passed","time":{"start":1732064446226,"stop":1732064723763,"duration":277537}},{"uid":"371f7c51a0c0a296","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/371f7c51a0c0a296","status":"passed","time":{"start":1732058992497,"stop":1732059334369,"duration":341872}},{"uid":"3b3d6560f461c9ea","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/3b3d6560f461c9ea","status":"passed","time":{"start":1732037507812,"stop":1732037868485,"duration":360673}},{"uid":"6f24d3e287c40c67","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/6f24d3e287c40c67","status":"passed","time":{"start":1731978115186,"stop":1731978403404,"duration":288218}},{"uid":"f53d22ad1522595d","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/f53d22ad1522595d","status":"passed","time":{"start":1731966550091,"stop":1731966883108,"duration":333017}},{"uid":"9675ba1a4c10c41","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/9675ba1a4c10c41","status":"passed","time":{"start":1731891765909,"stop":1731892030984,"duration":265075}},{"uid":"15fdc0199a0d08c4","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/15fdc0199a0d08c4","status":"passed","time":{"start":1731805371812,"stop":1731805679362,"duration":307550}},{"uid":"eb4e07c0c22b5402","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/eb4e07c0c22b5402","status":"passed","time":{"start":1731718857055,"stop":1731719122609,"duration":265554}},{"uid":"1d23cfc84bf72ab2","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/1d23cfc84bf72ab2","status":"passed","time":{"start":1731632537707,"stop":1731632856805,"duration":319098}},{"uid":"e1a49a3ec8a5b921","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/e1a49a3ec8a5b921","status":"passed","time":{"start":1731608186239,"stop":1731608521327,"duration":335088}},{"uid":"cc895cea479d38ce","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/cc895cea479d38ce","status":"passed","time":{"start":1731566100073,"stop":1731566520513,"duration":420440}},{"uid":"8e13e0602c6c3b3","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/8e13e0602c6c3b3","status":"passed","time":{"start":1731373234628,"stop":1731373547700,"duration":313072}},{"uid":"9a777485b46a3fdf","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/9a777485b46a3fdf","status":"passed","time":{"start":1731286890917,"stop":1731287202042,"duration":311125}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","jons_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')"]},"source":"de22af957f911811.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}