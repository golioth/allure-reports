{"uid":"2a51f94e36d58ab0","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1732306477832,"stop":1732306501293,"duration":23461},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff943b0390>\ndevice = <golioth.golioth.Device object at 0xffff943b3090>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1732306449095,"stop":1732306449096,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1732306449095,"stop":1732306449095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732306449096,"stop":1732306449096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732306449096,"stop":1732306449097,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732306449097,"stop":1732306449097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732306449098,"stop":1732306449100,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732306449100,"stop":1732306449101,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732306449101,"stop":1732306449101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732306449102,"stop":1732306449677,"duration":575},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732306449677,"stop":1732306450783,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732306450784,"stop":1732306474717,"duration":23933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732306474717,"stop":1732306477824,"duration":3107},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff943b0390>\ndevice = <golioth.golioth.Device object at 0xffff943b3090>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","steps":[],"attachments":[{"uid":"a74c1610036a8ab2","name":"log","source":"a74c1610036a8ab2.txt","type":"text/plain","size":18255}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732306501473,"stop":1732306501586,"duration":113},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732306501588,"stop":1732306502577,"duration":989},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732306502580,"stop":1732306502582,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732306502587,"stop":1732306502587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"28bb727bcb0e"},{"name":"thread","value":"947-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b22d622356bcf18f","status":"passed","time":{"start":1732306420901,"stop":1732306444340,"duration":23439}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":3,"skipped":0,"passed":57,"unknown":0,"total":63},"items":[{"uid":"93c98f050391ad7c","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/93c98f050391ad7c","status":"passed","time":{"start":1732299385202,"stop":1732299408848,"duration":23646}},{"uid":"37bf259d501845d7","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/37bf259d501845d7","status":"passed","time":{"start":1732277389074,"stop":1732277413101,"duration":24027}},{"uid":"87566548eeb6752a","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/87566548eeb6752a","status":"passed","time":{"start":1732236987985,"stop":1732237012757,"duration":24772}},{"uid":"d26aeec20109c12e","reportUrl":"https://golioth.github.io/allure-reports/main/1809//#testresult/d26aeec20109c12e","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1732213241866,"stop":1732213265425,"duration":23559}},{"uid":"b89911611d64766d","reportUrl":"https://golioth.github.io/allure-reports/main/1804//#testresult/b89911611d64766d","status":"passed","time":{"start":1732161792045,"stop":1732161819074,"duration":27029}},{"uid":"9e4300591f509de3","reportUrl":"https://golioth.github.io/allure-reports/main/1803//#testresult/9e4300591f509de3","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1732152099576,"stop":1732152132838,"duration":33262}},{"uid":"f2a0865b4e80751e","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/f2a0865b4e80751e","status":"passed","time":{"start":1732138375729,"stop":1732138399731,"duration":24002}},{"uid":"89ad47d300844579","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/89ad47d300844579","status":"passed","time":{"start":1732064038363,"stop":1732064062425,"duration":24062}},{"uid":"b23a5135093e77b5","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/b23a5135093e77b5","status":"passed","time":{"start":1732058721071,"stop":1732058748686,"duration":27615}},{"uid":"ddbaf74147ba0ed8","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/ddbaf74147ba0ed8","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1732037189077,"stop":1732037189077,"duration":0}},{"uid":"563e951b5de839e6","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/563e951b5de839e6","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1731977825782,"stop":1731977825782,"duration":0}},{"uid":"a1167e9134904fd6","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/a1167e9134904fd6","status":"passed","time":{"start":1731967448400,"stop":1731967471833,"duration":23433}},{"uid":"56206576a4b5b831","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/56206576a4b5b831","status":"passed","time":{"start":1731891466283,"stop":1731891489614,"duration":23331}},{"uid":"fb98c5be2ffc4c0a","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/fb98c5be2ffc4c0a","status":"passed","time":{"start":1731805484274,"stop":1731805507732,"duration":23458}},{"uid":"50bd28dd6520b4fd","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/50bd28dd6520b4fd","status":"passed","time":{"start":1731718788169,"stop":1731718811707,"duration":23538}},{"uid":"2a7e84495882f51f","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/2a7e84495882f51f","status":"passed","time":{"start":1731632134420,"stop":1731632157961,"duration":23541}},{"uid":"12fc68121c0a1e58","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/12fc68121c0a1e58","status":"passed","time":{"start":1731607955909,"stop":1731607983416,"duration":27507}},{"uid":"85edeab4469143ea","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/85edeab4469143ea","status":"passed","time":{"start":1731566255507,"stop":1731566278852,"duration":23345}},{"uid":"c5ed5798207b6bbe","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/c5ed5798207b6bbe","status":"passed","time":{"start":1731545699660,"stop":1731545723110,"duration":23450}},{"uid":"4ba992fe2b4c5373","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/4ba992fe2b4c5373","status":"passed","time":{"start":1731459515285,"stop":1731459544090,"duration":28805}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"2a51f94e36d58ab0.json","parameterValues":["'nrf52840dk'","'zephyr'"]}