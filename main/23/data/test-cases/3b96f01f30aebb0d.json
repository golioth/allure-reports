{
  "uid" : "3b96f01f30aebb0d",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "a3454c74416fe64989185d5a90a344cf",
  "time" : {
    "start" : 1736272557553,
    "stop" : 1736272577983,
    "duration" : 20430
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa4ddc710>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b3d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b350>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350ad50>])",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa34ab250>\ndevice = <golioth.golioth.Device object at 0xffffa34c6250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa4ddc710>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b3d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b350>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350ad50>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1736272528424,
      "stop" : 1736272528424,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736272528420,
      "stop" : 1736272528420,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736272528424,
      "stop" : 1736272528424,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736272528419,
      "stop" : 1736272528419,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736272528425,
      "stop" : 1736272528841,
      "duration" : 416
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736272528421,
      "stop" : 1736272528423,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736272528418,
      "stop" : 1736272528418,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736272528419,
      "stop" : 1736272528419,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736272529713,
      "stop" : 1736272556458,
      "duration" : 26745
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736272556459,
      "stop" : 1736272557550,
      "duration" : 1091
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736272528842,
      "stop" : 1736272529712,
      "duration" : 870
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736272528420,
      "stop" : 1736272528420,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa4ddc710>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b3d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b350>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350ad50>])",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa34ab250>\ndevice = <golioth.golioth.Device object at 0xffffa34c6250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa4ddc710>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b3d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350b350>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa350ad50>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3b5de3a86f12c74f",
      "name" : "log",
      "source" : "3b5de3a86f12c74f.txt",
      "type" : "text/plain",
      "size" : 20553
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1736272578555,
      "stop" : 1736272578557,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736272578562,
      "stop" : 1736272578562,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736272578165,
      "stop" : 1736272578169,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736272578171,
      "stop" : 1736272578552,
      "duration" : 381
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "edf7827ff81e"
  }, {
    "name" : "thread",
    "value" : "1061-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 37,
        "unknown" : 0,
        "total" : 40
      },
      "items" : [ {
        "uid" : "8d0b1ebaad7c77af",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/21/#testresult/8d0b1ebaad7c77af",
        "status" : "passed",
        "time" : {
          "start" : 1736213434911,
          "stop" : 1736213455136,
          "duration" : 20225
        }
      }, {
        "uid" : "cf7c4a73598e2abf",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/cf7c4a73598e2abf",
        "status" : "passed",
        "time" : {
          "start" : 1736192830805,
          "stop" : 1736192874886,
          "duration" : 44081
        }
      }, {
        "uid" : "725507c3973a9290",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/725507c3973a9290",
        "status" : "passed",
        "time" : {
          "start" : 1736190890771,
          "stop" : 1736190911369,
          "duration" : 20598
        }
      }, {
        "uid" : "608a82297011d700",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/608a82297011d700",
        "status" : "passed",
        "time" : {
          "start" : 1736186405454,
          "stop" : 1736186439900,
          "duration" : 34446
        }
      }, {
        "uid" : "170c03e80e4cad53",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/17/#testresult/170c03e80e4cad53",
        "status" : "passed",
        "time" : {
          "start" : 1736126694766,
          "stop" : 1736126735788,
          "duration" : 41022
        }
      }, {
        "uid" : "1548280b0cd75215",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/16/#testresult/1548280b0cd75215",
        "status" : "passed",
        "time" : {
          "start" : 1736040080080,
          "stop" : 1736040100918,
          "duration" : 20838
        }
      }, {
        "uid" : "843ff7d7dc4feea1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/15/#testresult/843ff7d7dc4feea1",
        "status" : "passed",
        "time" : {
          "start" : 1735954019955,
          "stop" : 1735954050215,
          "duration" : 30260
        }
      }, {
        "uid" : "23c4e97f17be5e52",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/8/#testresult/23c4e97f17be5e52",
        "status" : "passed",
        "time" : {
          "start" : 1735868592989,
          "stop" : 1735868635903,
          "duration" : 42914
        }
      }, {
        "uid" : "a9a7d8c26aa28ca5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1991/#testresult/a9a7d8c26aa28ca5",
        "status" : "passed",
        "time" : {
          "start" : 1735781893666,
          "stop" : 1735781913519,
          "duration" : 19853
        }
      }, {
        "uid" : "a9ac3510ea942d0a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1990/#testresult/a9ac3510ea942d0a",
        "status" : "passed",
        "time" : {
          "start" : 1735695336170,
          "stop" : 1735695355560,
          "duration" : 19390
        }
      }, {
        "uid" : "fdf6f085a84952b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1984/#testresult/fdf6f085a84952b",
        "status" : "passed",
        "time" : {
          "start" : 1735660191374,
          "stop" : 1735660226062,
          "duration" : 34688
        }
      }, {
        "uid" : "e9b9455aebef33af",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1983/#testresult/e9b9455aebef33af",
        "status" : "passed",
        "time" : {
          "start" : 1735608844962,
          "stop" : 1735608864785,
          "duration" : 19823
        }
      }, {
        "uid" : "cad0de44823631ea",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1980/#testresult/cad0de44823631ea",
        "status" : "passed",
        "time" : {
          "start" : 1735523189758,
          "stop" : 1735523229943,
          "duration" : 40185
        }
      }, {
        "uid" : "524506009de4d379",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1979/#testresult/524506009de4d379",
        "status" : "passed",
        "time" : {
          "start" : 1735436274067,
          "stop" : 1735436293968,
          "duration" : 19901
        }
      }, {
        "uid" : "daa1433fb5956c6d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1978/#testresult/daa1433fb5956c6d",
        "status" : "passed",
        "time" : {
          "start" : 1735349983004,
          "stop" : 1735350020930,
          "duration" : 37926
        }
      }, {
        "uid" : "8599f5bc8f70b9e7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/8599f5bc8f70b9e7",
        "status" : "passed",
        "time" : {
          "start" : 1735263384755,
          "stop" : 1735263404335,
          "duration" : 19580
        }
      }, {
        "uid" : "9b64f14aece80b86",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/9b64f14aece80b86",
        "status" : "passed",
        "time" : {
          "start" : 1735176853339,
          "stop" : 1735176872632,
          "duration" : 19293
        }
      }, {
        "uid" : "6771e853f2e09528",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/6771e853f2e09528",
        "status" : "passed",
        "time" : {
          "start" : 1735091042138,
          "stop" : 1735091084306,
          "duration" : 42168
        }
      }, {
        "uid" : "55aabe3f37b51a02",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/55aabe3f37b51a02",
        "status" : "passed",
        "time" : {
          "start" : 1735003978751,
          "stop" : 1735003998376,
          "duration" : 19625
        }
      }, {
        "uid" : "85c37a8060de74a2",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/85c37a8060de74a2",
        "status" : "passed",
        "time" : {
          "start" : 1734918153949,
          "stop" : 1734918176033,
          "duration" : 22084
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "3b96f01f30aebb0d.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}