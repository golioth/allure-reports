{
  "uid" : "9bcf970ce3dd62df",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "3038e6d5fffa4527a437bf078474dadf",
  "time" : {
    "start" : 1736269352970,
    "stop" : 1736269401737,
    "duration" : 48767
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaed90250>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaedc1d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaeb9bd10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9de9d0>])",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffaec53950>\ndevice = <golioth.golioth.Device object at 0xffffaedbcb10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaed90250>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaedc1d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaeb9bd10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9de9d0>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "project",
    "time" : {
      "start" : 1736269336243,
      "stop" : 1736269336787,
      "duration" : 544
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736269336238,
      "stop" : 1736269336238,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736269336243,
      "stop" : 1736269336243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736269336788,
      "stop" : 1736269337592,
      "duration" : 804
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736269336236,
      "stop" : 1736269336236,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736269352317,
      "stop" : 1736269352968,
      "duration" : 651
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736269336237,
      "stop" : 1736269336237,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736269337593,
      "stop" : 1736269352317,
      "duration" : 14724
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736269336242,
      "stop" : 1736269336242,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736269336239,
      "stop" : 1736269336239,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736269336237,
      "stop" : 1736269336238,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736269336239,
      "stop" : 1736269336241,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaed90250>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaedc1d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaeb9bd10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9de9d0>])",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffaec53950>\ndevice = <golioth.golioth.Device object at 0xffffaedbcb10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaed90250>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaedc1d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffaeb9bd10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9dea10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffae9de9d0>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f94b352201c9343e",
      "name" : "log",
      "source" : "f94b352201c9343e.txt",
      "type" : "text/plain",
      "size" : 26146
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1736269402498,
      "stop" : 1736269402501,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736269402118,
      "stop" : 1736269402496,
      "duration" : 378
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736269401931,
      "stop" : 1736269402116,
      "duration" : 185
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736269402506,
      "stop" : 1736269402506,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "cbc9763cfd62"
  }, {
    "name" : "thread",
    "value" : "342-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 40
      },
      "items" : [ {
        "uid" : "7b68739d46fe88c3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/21/#testresult/7b68739d46fe88c3",
        "status" : "passed",
        "time" : {
          "start" : 1736211162343,
          "stop" : 1736211210491,
          "duration" : 48148
        }
      }, {
        "uid" : "27c31bbf281d6c28",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/27c31bbf281d6c28",
        "status" : "passed",
        "time" : {
          "start" : 1736188824899,
          "stop" : 1736188873159,
          "duration" : 48260
        }
      }, {
        "uid" : "2c053c719b1c305c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/2c053c719b1c305c",
        "status" : "passed",
        "time" : {
          "start" : 1736188824899,
          "stop" : 1736188873159,
          "duration" : 48260
        }
      }, {
        "uid" : "8e988ada2c102b7c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/8e988ada2c102b7c",
        "status" : "passed",
        "time" : {
          "start" : 1736184225573,
          "stop" : 1736184274055,
          "duration" : 48482
        }
      }, {
        "uid" : "b3f334b404dcad27",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/17/#testresult/b3f334b404dcad27",
        "status" : "passed",
        "time" : {
          "start" : 1736123099358,
          "stop" : 1736123147687,
          "duration" : 48329
        }
      }, {
        "uid" : "bc4155d182ddccd6",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/16/#testresult/bc4155d182ddccd6",
        "status" : "passed",
        "time" : {
          "start" : 1736037978156,
          "stop" : 1736038004672,
          "duration" : 26516
        }
      }, {
        "uid" : "ca470b84ea175621",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/15/#testresult/ca470b84ea175621",
        "status" : "passed",
        "time" : {
          "start" : 1735952559140,
          "stop" : 1735952586359,
          "duration" : 27219
        }
      }, {
        "uid" : "8211fa389e400aba",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/8/#testresult/8211fa389e400aba",
        "status" : "passed",
        "time" : {
          "start" : 1735867029194,
          "stop" : 1735867077794,
          "duration" : 48600
        }
      }, {
        "uid" : "89d97e67430f7ad4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1991/#testresult/89d97e67430f7ad4",
        "status" : "passed",
        "time" : {
          "start" : 1735780195579,
          "stop" : 1735780243421,
          "duration" : 47842
        }
      }, {
        "uid" : "52b6f90c11bb1c67",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1990/#testresult/52b6f90c11bb1c67",
        "status" : "passed",
        "time" : {
          "start" : 1735693755844,
          "stop" : 1735693805348,
          "duration" : 49504
        }
      }, {
        "uid" : "9fdbec00f03c10b1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1984/#testresult/9fdbec00f03c10b1",
        "status" : "passed",
        "time" : {
          "start" : 1735658853580,
          "stop" : 1735658903109,
          "duration" : 49529
        }
      }, {
        "uid" : "bb7af6c73f431fb9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1983/#testresult/bb7af6c73f431fb9",
        "status" : "passed",
        "time" : {
          "start" : 1735607196157,
          "stop" : 1735607246362,
          "duration" : 50205
        }
      }, {
        "uid" : "859c7f923134e14e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1980/#testresult/859c7f923134e14e",
        "status" : "passed",
        "time" : {
          "start" : 1735520771622,
          "stop" : 1735520819994,
          "duration" : 48372
        }
      }, {
        "uid" : "4475c55dc11691f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1979/#testresult/4475c55dc11691f",
        "status" : "passed",
        "time" : {
          "start" : 1735434683543,
          "stop" : 1735434731585,
          "duration" : 48042
        }
      }, {
        "uid" : "b374d3b4af500bbe",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1978/#testresult/b374d3b4af500bbe",
        "status" : "passed",
        "time" : {
          "start" : 1735348407221,
          "stop" : 1735348456321,
          "duration" : 49100
        }
      }, {
        "uid" : "39678c7cd9507ce4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/39678c7cd9507ce4",
        "status" : "passed",
        "time" : {
          "start" : 1735261925400,
          "stop" : 1735261974048,
          "duration" : 48648
        }
      }, {
        "uid" : "a5173d416e6fc656",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/a5173d416e6fc656",
        "status" : "passed",
        "time" : {
          "start" : 1735175203640,
          "stop" : 1735175251464,
          "duration" : 47824
        }
      }, {
        "uid" : "7d51d6e34f280d32",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/7d51d6e34f280d32",
        "status" : "passed",
        "time" : {
          "start" : 1735088501889,
          "stop" : 1735088550552,
          "duration" : 48663
        }
      }, {
        "uid" : "52644b6c9c99b9bc",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/52644b6c9c99b9bc",
        "status" : "passed",
        "time" : {
          "start" : 1735002515524,
          "stop" : 1735002563894,
          "duration" : 48370
        }
      }, {
        "uid" : "b52f1a951d0553f2",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/b52f1a951d0553f2",
        "status" : "passed",
        "time" : {
          "start" : 1734915616618,
          "stop" : 1734915666121,
          "duration" : 49503
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "9bcf970ce3dd62df.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}