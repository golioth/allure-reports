{"uid":"735a87fa6e9b7646","name":"test_hello","fullName":"examples.esp_idf.cpp.pytest.test_sample#test_hello","historyId":"34a63110b03fdfdd0be1a7f29b2c4fb8","time":{"start":1759192034609,"stop":1759192047190,"duration":12581},"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffae3cf620>\ndevice = <golioth.golioth.Device object at 0xffffae3057f0>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759191979701,"stop":1759191979702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759191979703,"stop":1759191979703,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759191979703,"stop":1759191979704,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759191979704,"stop":1759191979704,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759191979705,"stop":1759191979705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759191979705,"stop":1759191979705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759191979706,"stop":1759192033266,"duration":53560},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759191979706,"stop":1759191979706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1759191979744,"stop":1759191979744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1759191979745,"stop":1759191979745,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1759191979745,"stop":1759191979745,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1759191979746,"stop":1759191979746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1759191979746,"stop":1759191979746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759192033268,"stop":1759192033819,"duration":551},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759192033819,"stop":1759192034606,"duration":787},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffae3cf620>\ndevice = <golioth.golioth.Device object at 0xffffae3057f0>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","steps":[],"attachments":[{"uid":"797f8069d986e153","name":"stdout","source":"797f8069d986e153.txt","type":"text/plain","size":7206}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1759192047307,"stop":1759192047694,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759192047696,"stop":1759192047697,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759192047698,"stop":1759192047708,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f90dd03cfe90"},{"name":"thread","value":"255-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.cpp.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":5},"items":[{"uid":"e155a2e0556ff851","reportUrl":"https://golioth.github.io/allure-reports/main/727//#testresult/e155a2e0556ff851","status":"passed","time":{"start":1759106380713,"stop":1759106394547,"duration":13834}},{"uid":"9e0625c3ffb69edd","reportUrl":"https://golioth.github.io/allure-reports/main/725//#testresult/9e0625c3ffb69edd","status":"failed","statusDetails":"AssertionError: assert 0 == 1\n +  where 0 = len([])","time":{"start":1759019259202,"stop":1759019271996,"duration":12794}},{"uid":"ff08a299d58dc5ee","reportUrl":"https://golioth.github.io/allure-reports/main/724//#testresult/ff08a299d58dc5ee","status":"passed","time":{"start":1758933569690,"stop":1758933582388,"duration":12698}},{"uid":"787350756574e7b4","reportUrl":"https://golioth.github.io/allure-reports/main/719//#testresult/787350756574e7b4","status":"passed","time":{"start":1758846297508,"stop":1758846310768,"duration":13260}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf"]},"source":"735a87fa6e9b7646.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}