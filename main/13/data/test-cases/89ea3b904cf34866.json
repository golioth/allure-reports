{"uid":"89ea3b904cf34866","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1731607529518,"stop":1731607546034,"duration":16516},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb9546290>\ndevice = <golioth.golioth.Device object at 0xffffb9555210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731607500806,"stop":1731607500806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731607500807,"stop":1731607500807,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731607500808,"stop":1731607500808,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731607500808,"stop":1731607500808,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731607500809,"stop":1731607500811,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731607500809,"stop":1731607500809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731607500812,"stop":1731607500813,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731607500812,"stop":1731607500812,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731607500813,"stop":1731607501288,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731607501289,"stop":1731607502770,"duration":1481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731607502771,"stop":1731607526338,"duration":23567},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731607526338,"stop":1731607529511,"duration":3173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb9546290>\ndevice = <golioth.golioth.Device object at 0xffffb9555210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"24218c73fc095c81","name":"log","source":"24218c73fc095c81.txt","type":"text/plain","size":23932}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731607546221,"stop":1731607546407,"duration":186},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731607546410,"stop":1731607547046,"duration":636},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731607547048,"stop":1731607547050,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731607547055,"stop":1731607547055,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"80b7040812d6"},{"name":"thread","value":"592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":3,"skipped":0,"passed":41,"unknown":0,"total":46},"items":[{"uid":"89599ddf1715e21d","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/89599ddf1715e21d","status":"passed","time":{"start":1731565943857,"stop":1731565967220,"duration":23363}},{"uid":"84bdae4b9a8ad5b6","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/84bdae4b9a8ad5b6","status":"passed","time":{"start":1731545376844,"stop":1731545400731,"duration":23887}},{"uid":"7fde75d6de30a6fc","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/7fde75d6de30a6fc","status":"passed","time":{"start":1731459077026,"stop":1731459100374,"duration":23348}},{"uid":"aa39994af41fcdfd","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/aa39994af41fcdfd","status":"passed","time":{"start":1731373206221,"stop":1731373230207,"duration":23986}},{"uid":"8b5c77ca965d89e6","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/8b5c77ca965d89e6","status":"passed","time":{"start":1731286317860,"stop":1731286341553,"duration":23693}},{"uid":"1ed7b613641ab0e1","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/1ed7b613641ab0e1","status":"passed","time":{"start":1731199937925,"stop":1731199961851,"duration":23926}},{"uid":"a0a7c91717f47925","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/a0a7c91717f47925","status":"passed","time":{"start":1731113282872,"stop":1731113306049,"duration":23177}},{"uid":"887fd75a3fea6000","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/887fd75a3fea6000","status":"passed","time":{"start":1731026945506,"stop":1731026969248,"duration":23742}},{"uid":"8e73b38ef35b5fbd","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/8e73b38ef35b5fbd","status":"passed","time":{"start":1730940542424,"stop":1730940565880,"duration":23456}},{"uid":"93ab0aa739fce95f","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/93ab0aa739fce95f","status":"passed","time":{"start":1730893447055,"stop":1730893470795,"duration":23740}},{"uid":"11ca416af7faf3b5","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/11ca416af7faf3b5","status":"passed","time":{"start":1730854745236,"stop":1730854768445,"duration":23209}},{"uid":"e6493e4ce55aa17","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/e6493e4ce55aa17","status":"passed","time":{"start":1730767799159,"stop":1730767822249,"duration":23090}},{"uid":"c229bf430d8086b1","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/c229bf430d8086b1","status":"passed","time":{"start":1730681400042,"stop":1730681423890,"duration":23848}},{"uid":"610fcf0903623b36","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/610fcf0903623b36","status":"passed","time":{"start":1730595092444,"stop":1730595116238,"duration":23794}},{"uid":"51f1b66980015f01","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/51f1b66980015f01","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730508609230,"stop":1730508641891,"duration":32661}},{"uid":"69b9efd85938a652","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/69b9efd85938a652","status":"passed","time":{"start":1730422321333,"stop":1730422344670,"duration":23337}},{"uid":"5d7c81e7478beda5","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/5d7c81e7478beda5","status":"passed","time":{"start":1730336341675,"stop":1730336365618,"duration":23943}},{"uid":"9cedd9d0c735eb40","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/9cedd9d0c735eb40","status":"passed","time":{"start":1730304227617,"stop":1730304251464,"duration":23847}},{"uid":"d31f2d49a82ecba9","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/d31f2d49a82ecba9","status":"passed","time":{"start":1730249297300,"stop":1730249321042,"duration":23742}},{"uid":"59d58e55c6941bb7","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/59d58e55c6941bb7","status":"passed","time":{"start":1730163067952,"stop":1730163091458,"duration":23506}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"89ea3b904cf34866.json","parameterValues":["'nrf52840dk'","'zephyr'"]}