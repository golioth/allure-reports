{"uid":"29b4e390512af380","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1731201857985,"stop":1731201880506,"duration":22521},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fee2f90>\ndevice = <golioth.golioth.Device object at 0xffff9fef5cd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731201842061,"stop":1731201842061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731201842062,"stop":1731201842062,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731201842062,"stop":1731201842063,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731201842063,"stop":1731201842063,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731201842064,"stop":1731201842064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731201842064,"stop":1731201842066,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731201842067,"stop":1731201842067,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731201842068,"stop":1731201842483,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731201842068,"stop":1731201842068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731201842484,"stop":1731201843407,"duration":923},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731201843408,"stop":1731201857031,"duration":13623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731201857032,"stop":1731201857982,"duration":950},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fee2f90>\ndevice = <golioth.golioth.Device object at 0xffff9fef5cd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"dd811fefb19dae6","name":"log","source":"dd811fefb19dae6.txt","type":"text/plain","size":12529}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731201880853,"stop":1731201880861,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731201880863,"stop":1731201881234,"duration":371},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731201881236,"stop":1731201881238,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731201881243,"stop":1731201881243,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"c645bdb83e79"},{"name":"thread","value":"521-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3880dc428241636c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731201806795,"stop":1731201829418,"duration":22623}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":35,"unknown":0,"total":40},"items":[{"uid":"3d92cdc77effb82a","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/3d92cdc77effb82a","status":"passed","time":{"start":1731114743432,"stop":1731114764157,"duration":20725}},{"uid":"3390cf6c9ff09c8f","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/3390cf6c9ff09c8f","status":"passed","time":{"start":1731028078891,"stop":1731028100669,"duration":21778}},{"uid":"b586fc6e61089572","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/b586fc6e61089572","status":"passed","time":{"start":1730941882908,"stop":1730941905649,"duration":22741}},{"uid":"15500b6131bc7e05","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/15500b6131bc7e05","status":"passed","time":{"start":1730894959990,"stop":1730894985732,"duration":25742}},{"uid":"c726d4f0298f68f0","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/c726d4f0298f68f0","status":"passed","time":{"start":1730855340662,"stop":1730855363530,"duration":22868}},{"uid":"ed9cc3b867ef1d52","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/ed9cc3b867ef1d52","status":"passed","time":{"start":1730769252332,"stop":1730769277423,"duration":25091}},{"uid":"76ef636b6c33c5c4","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/76ef636b6c33c5c4","status":"passed","time":{"start":1730682534071,"stop":1730682557865,"duration":23794}},{"uid":"97b78815c2e223ec","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/97b78815c2e223ec","status":"passed","time":{"start":1730596221187,"stop":1730596247172,"duration":25985}},{"uid":"af9cbb0af01aea1c","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/af9cbb0af01aea1c","status":"passed","time":{"start":1730509589375,"stop":1730509612978,"duration":23603}},{"uid":"460a93ffc023770c","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/460a93ffc023770c","status":"passed","time":{"start":1730423471620,"stop":1730423497128,"duration":25508}},{"uid":"bdb156523cfc4a78","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/bdb156523cfc4a78","status":"passed","time":{"start":1730337583978,"stop":1730337606698,"duration":22720}},{"uid":"194e01b63aee4a82","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/194e01b63aee4a82","status":"passed","time":{"start":1730305310648,"stop":1730305330306,"duration":19658}},{"uid":"f4461e0e75da9d72","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/f4461e0e75da9d72","status":"passed","time":{"start":1730250387514,"stop":1730250411154,"duration":23640}},{"uid":"20d011b5412b9046","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/20d011b5412b9046","status":"passed","time":{"start":1730164602640,"stop":1730164625934,"duration":23294}},{"uid":"6f03f0700fa01e87","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/6f03f0700fa01e87","status":"passed","time":{"start":1730077789750,"stop":1730077813477,"duration":23727}},{"uid":"5cdde531c786144","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/5cdde531c786144","status":"passed","time":{"start":1729991400068,"stop":1729991423165,"duration":23097}},{"uid":"1461771cb3911a3a","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/1461771cb3911a3a","status":"passed","time":{"start":1729904831906,"stop":1729904855313,"duration":23407}},{"uid":"3d3aecf0c18f96c1","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/3d3aecf0c18f96c1","status":"passed","time":{"start":1729818674068,"stop":1729818694965,"duration":20897}},{"uid":"b0e035d399a5e3bc","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/b0e035d399a5e3bc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729732433491,"stop":1729732455977,"duration":22486}},{"uid":"aeda78833006535","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/aeda78833006535","status":"passed","time":{"start":1729646105122,"stop":1729646128780,"duration":23658}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"29b4e390512af380.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}