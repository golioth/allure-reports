{"uid":"e6dd314e6af7831","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1731200554909,"stop":1731200667656,"duration":112747},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff970632d0>\ndevice = <golioth.golioth.Device object at 0xffff97051a50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731200545333,"stop":1731200545334,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731200545333,"stop":1731200545333,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731200545334,"stop":1731200545334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731200545335,"stop":1731200545335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731200545335,"stop":1731200545335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731200545336,"stop":1731200545338,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731200545338,"stop":1731200545339,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731200545339,"stop":1731200545339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731200545340,"stop":1731200545757,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731200545757,"stop":1731200546627,"duration":870},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731200546628,"stop":1731200554370,"duration":7742},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731200554370,"stop":1731200554906,"duration":536},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff970632d0>\ndevice = <golioth.golioth.Device object at 0xffff97051a50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"89351c6ebd7f367","name":"log","source":"89351c6ebd7f367.txt","type":"text/plain","size":14543}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731200667933,"stop":1731200667975,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731200667977,"stop":1731200668361,"duration":384},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731200668364,"stop":1731200668366,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731200668371,"stop":1731200668371,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"0705680be3bd"},{"name":"thread","value":"586-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9c075644da1fc947","status":"passed","time":{"start":1731200517857,"stop":1731200541327,"duration":23470}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":36,"unknown":0,"total":40},"items":[{"uid":"73b2b609b6c86ec9","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/73b2b609b6c86ec9","status":"passed","time":{"start":1731114035646,"stop":1731114060068,"duration":24422}},{"uid":"777c13008d0b332","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/777c13008d0b332","status":"passed","time":{"start":1731027940779,"stop":1731027965438,"duration":24659}},{"uid":"2766e5c51a6ab04b","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/2766e5c51a6ab04b","status":"passed","time":{"start":1730941198415,"stop":1730941223029,"duration":24614}},{"uid":"47cd664100a8c585","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/47cd664100a8c585","status":"passed","time":{"start":1730854944324,"stop":1730854968853,"duration":24529}},{"uid":"283f85b69cf1599b","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/283f85b69cf1599b","status":"passed","time":{"start":1730854944324,"stop":1730854968853,"duration":24529}},{"uid":"8878d33abc83b0a1","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/8878d33abc83b0a1","status":"passed","time":{"start":1730768540050,"stop":1730768563511,"duration":23461}},{"uid":"4b055750edf66243","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/4b055750edf66243","status":"passed","time":{"start":1730681627421,"stop":1730681652271,"duration":24850}},{"uid":"2eb0a04b7bf38a65","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/2eb0a04b7bf38a65","status":"passed","time":{"start":1730595978360,"stop":1730596003398,"duration":25038}},{"uid":"49423063a48a9ac7","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/49423063a48a9ac7","status":"passed","time":{"start":1730509191395,"stop":1730509215869,"duration":24474}},{"uid":"586f051d8a31af48","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/586f051d8a31af48","status":"passed","time":{"start":1730422917611,"stop":1730422941265,"duration":23654}},{"uid":"f3fc11a0382df316","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/f3fc11a0382df316","status":"passed","time":{"start":1730336609680,"stop":1730336634228,"duration":24548}},{"uid":"e006e90d669b7478","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/e006e90d669b7478","status":"passed","time":{"start":1730305228405,"stop":1730305252747,"duration":24342}},{"uid":"36d42bb636934914","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/36d42bb636934914","status":"passed","time":{"start":1730250185826,"stop":1730250210969,"duration":25143}},{"uid":"1b21adac1cc7dc99","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/1b21adac1cc7dc99","status":"passed","time":{"start":1730163834953,"stop":1730163859229,"duration":24276}},{"uid":"fc144146e8599964","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/fc144146e8599964","status":"passed","time":{"start":1730077463400,"stop":1730077488137,"duration":24737}},{"uid":"a4160057c4a94c90","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/a4160057c4a94c90","status":"passed","time":{"start":1729990986341,"stop":1729991010787,"duration":24446}},{"uid":"af3442a73259eb60","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/af3442a73259eb60","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729904446390,"stop":1729904559184,"duration":112794}},{"uid":"bd3f9f9c83aad249","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/bd3f9f9c83aad249","status":"passed","time":{"start":1729818322936,"stop":1729818345869,"duration":22933}},{"uid":"394cfb2d36c432f9","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/394cfb2d36c432f9","status":"passed","time":{"start":1729731723273,"stop":1729731746790,"duration":23517}},{"uid":"9720ee4b3d9ecd0f","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/9720ee4b3d9ecd0f","status":"passed","time":{"start":1729645280430,"stop":1729645303854,"duration":23424}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"e6dd314e6af7831.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}