{"uid":"41a175defd7a53d2","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1736385812493,"stop":1736385926869,"duration":114376},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb3e5e490>\ndevice = <golioth.golioth.Device object at 0xffffb3e71350>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffb3fd3250>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"build_conf","time":{"start":1736385783387,"stop":1736385783404,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1736385783387,"stop":1736385783387,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1736385783404,"stop":1736385783405,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1736385783405,"stop":1736385783405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1736385783406,"stop":1736385783408,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1736385783409,"stop":1736385783409,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1736385783409,"stop":1736385783409,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1736385783410,"stop":1736385783841,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1736385783841,"stop":1736385784645,"duration":804},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1736385784646,"stop":1736385811435,"duration":26789},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1736385811436,"stop":1736385812486,"duration":1050},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb3e5e490>\ndevice = <golioth.golioth.Device object at 0xffffb3e71350>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffb3fd3250>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"174727046388f3df","name":"log","source":"174727046388f3df.txt","type":"text/plain","size":18148}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1736385927191,"stop":1736385927240,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1736385927242,"stop":1736385927630,"duration":388},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1736385927632,"stop":1736385927634,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1736385927639,"stop":1736385927639,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d2cd8eb9626c"},{"name":"thread","value":"1085-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":38,"unknown":0,"total":42},"items":[{"uid":"5aeee477633309a8","reportUrl":"https://golioth.github.io/allure-reports/main/28/#testresult/5aeee477633309a8","status":"passed","time":{"start":1736300125540,"stop":1736300174571,"duration":49031}},{"uid":"9d37f11f11cc34b9","reportUrl":"https://golioth.github.io/allure-reports/main/23/#testresult/9d37f11f11cc34b9","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1736272436476,"stop":1736272466298,"duration":29822}},{"uid":"3160b2ed91f84ae","reportUrl":"https://golioth.github.io/allure-reports/main/21/#testresult/3160b2ed91f84ae","status":"passed","time":{"start":1736213365911,"stop":1736213401172,"duration":35261}},{"uid":"b2c1fa885cbfd11c","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/b2c1fa885cbfd11c","status":"passed","time":{"start":1736192908054,"stop":1736192956540,"duration":48486}},{"uid":"8a8601dacc8865a4","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/8a8601dacc8865a4","status":"passed","time":{"start":1736190825793,"stop":1736190857709,"duration":31916}},{"uid":"5063857aa94230bd","reportUrl":"https://golioth.github.io/allure-reports/main/18/#testresult/5063857aa94230bd","status":"passed","time":{"start":1736186473965,"stop":1736186527221,"duration":53256}},{"uid":"bbc0c8117a6c2342","reportUrl":"https://golioth.github.io/allure-reports/main/17/#testresult/bbc0c8117a6c2342","status":"passed","time":{"start":1736126535457,"stop":1736126580585,"duration":45128}},{"uid":"e1801bdd546c8e7f","reportUrl":"https://golioth.github.io/allure-reports/main/16/#testresult/e1801bdd546c8e7f","status":"passed","time":{"start":1736040134472,"stop":1736040170276,"duration":35804}},{"uid":"7d30446d69e6b1b0","reportUrl":"https://golioth.github.io/allure-reports/main/15/#testresult/7d30446d69e6b1b0","status":"passed","time":{"start":1735954438049,"stop":1735954482446,"duration":44397}},{"uid":"36d01eb65da13846","reportUrl":"https://golioth.github.io/allure-reports/main/8/#testresult/36d01eb65da13846","status":"passed","time":{"start":1735868108003,"stop":1735868161592,"duration":53589}},{"uid":"f085dfd3a98de2e4","reportUrl":"https://golioth.github.io/allure-reports/main/1991/#testresult/f085dfd3a98de2e4","status":"passed","time":{"start":1735781535447,"stop":1735781566137,"duration":30690}},{"uid":"ae53a16597955d57","reportUrl":"https://golioth.github.io/allure-reports/main/1990/#testresult/ae53a16597955d57","status":"passed","time":{"start":1735694999011,"stop":1735695032701,"duration":33690}},{"uid":"3f17ed0c1d6610e7","reportUrl":"https://golioth.github.io/allure-reports/main/1984/#testresult/3f17ed0c1d6610e7","status":"passed","time":{"start":1735659769771,"stop":1735659815953,"duration":46182}},{"uid":"324ad0105010542c","reportUrl":"https://golioth.github.io/allure-reports/main/1983/#testresult/324ad0105010542c","status":"passed","time":{"start":1735608510892,"stop":1735608541644,"duration":30752}},{"uid":"e3241bdc776aef70","reportUrl":"https://golioth.github.io/allure-reports/main/1980/#testresult/e3241bdc776aef70","status":"passed","time":{"start":1735522759987,"stop":1735522810179,"duration":50192}},{"uid":"5c12eb11521af29f","reportUrl":"https://golioth.github.io/allure-reports/main/1979/#testresult/5c12eb11521af29f","status":"passed","time":{"start":1735435948815,"stop":1735435980050,"duration":31235}},{"uid":"861dcacab6905c06","reportUrl":"https://golioth.github.io/allure-reports/main/1978/#testresult/861dcacab6905c06","status":"passed","time":{"start":1735349516691,"stop":1735349587069,"duration":70378}},{"uid":"21b3ec37d4178071","reportUrl":"https://golioth.github.io/allure-reports/main/1977/#testresult/21b3ec37d4178071","status":"passed","time":{"start":1735262989114,"stop":1735263020077,"duration":30963}},{"uid":"6691e56814850e2b","reportUrl":"https://golioth.github.io/allure-reports/main/1976/#testresult/6691e56814850e2b","status":"passed","time":{"start":1735176452959,"stop":1735176481959,"duration":29000}},{"uid":"f681f392b29bdba6","reportUrl":"https://golioth.github.io/allure-reports/main/1975/#testresult/f681f392b29bdba6","status":"passed","time":{"start":1735090582552,"stop":1735090631310,"duration":48758}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"41a175defd7a53d2.json","parameterValues":["'nrf9160dk'","'zephyr'"]}