{"uid":"16765f2ef72bae5a","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"c3f20de95bc462962cfc10df8a3049f4","time":{"start":1759970701535,"stop":1759970794125,"duration":92590},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5bab230>\ndevice = <golioth.golioth.Device object at 0xffffb5ab0ad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759970685899,"stop":1759970685899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759970685900,"stop":1759970685900,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759970685900,"stop":1759970685900,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759970685901,"stop":1759970685901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759970685901,"stop":1759970685901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759970685902,"stop":1759970685903,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759970685904,"stop":1759970685904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759970685905,"stop":1759970685905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759970685905,"stop":1759970686399,"duration":494},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759970686400,"stop":1759970687077,"duration":677},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759970687078,"stop":1759970697579,"duration":10501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759970697580,"stop":1759970701527,"duration":3947},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5bab230>\ndevice = <golioth.golioth.Device object at 0xffffb5ab0ad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f8dd47d9af4c8614","name":"log","source":"f8dd47d9af4c8614.txt","type":"text/plain","size":28197}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759970794400,"stop":1759970794446,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759970794448,"stop":1759970794786,"duration":338},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759970794788,"stop":1759970794790,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759970794795,"stop":1759970794795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"frdm_rw612"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.frdm_rw612"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3cece3ec9367"},{"name":"thread","value":"693-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'frdm_rw612'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":13,"unknown":0,"total":17},"items":[{"uid":"c0f79ec4406a17cb","reportUrl":"https://golioth.github.io/allure-reports/main/753//#testresult/c0f79ec4406a17cb","status":"passed","time":{"start":1759885093450,"stop":1759885115488,"duration":22038}},{"uid":"d1b9e66bd9a6e01c","reportUrl":"https://golioth.github.io/allure-reports/main/752//#testresult/d1b9e66bd9a6e01c","status":"passed","time":{"start":1759864615173,"stop":1759864633027,"duration":17854}},{"uid":"7b4e6eb13935f367","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/7b4e6eb13935f367","status":"passed","time":{"start":1759852500864,"stop":1759852519652,"duration":18788}},{"uid":"1bc32048296e54eb","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/1bc32048296e54eb","status":"passed","time":{"start":1759801229348,"stop":1759801252850,"duration":23502}},{"uid":"49c925320219171f","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/49c925320219171f","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759781138716,"stop":1759781138716,"duration":0}},{"uid":"e78da73de4e9ec8e","reportUrl":"https://golioth.github.io/allure-reports/main/742//#testresult/e78da73de4e9ec8e","status":"passed","time":{"start":1759711897870,"stop":1759711917067,"duration":19197}},{"uid":"1b053bf22f59b234","reportUrl":"https://golioth.github.io/allure-reports/main/741//#testresult/1b053bf22f59b234","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 2 == 0\n +  where 2 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa89766c0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa89d5a90>])","time":{"start":1759624831845,"stop":1759624849480,"duration":17635}},{"uid":"82ee6876153c3b98","reportUrl":"https://golioth.github.io/allure-reports/main/740//#testresult/82ee6876153c3b98","status":"passed","time":{"start":1759537936826,"stop":1759537956227,"duration":19401}},{"uid":"9c292a976616c03f","reportUrl":"https://golioth.github.io/allure-reports/main/738//#testresult/9c292a976616c03f","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1759452162864,"stop":1759452162864,"duration":0}},{"uid":"67e50938df354717","reportUrl":"https://golioth.github.io/allure-reports/main/734//#testresult/67e50938df354717","status":"passed","time":{"start":1759367230634,"stop":1759367248940,"duration":18306}},{"uid":"97d3e0a68f49aaf","reportUrl":"https://golioth.github.io/allure-reports/main/733//#testresult/97d3e0a68f49aaf","status":"passed","time":{"start":1759278916686,"stop":1759278936368,"duration":19682}},{"uid":"f1ceafaee352027e","reportUrl":"https://golioth.github.io/allure-reports/main/730//#testresult/f1ceafaee352027e","status":"passed","time":{"start":1759195257266,"stop":1759195273856,"duration":16590}},{"uid":"e0a2a1d467d93a71","reportUrl":"https://golioth.github.io/allure-reports/main/727//#testresult/e0a2a1d467d93a71","status":"passed","time":{"start":1759107589873,"stop":1759107606241,"duration":16368}},{"uid":"b74d0ff47857e35a","reportUrl":"https://golioth.github.io/allure-reports/main/725//#testresult/b74d0ff47857e35a","status":"passed","time":{"start":1759021682353,"stop":1759021700405,"duration":18052}},{"uid":"85b77cea935b1995","reportUrl":"https://golioth.github.io/allure-reports/main/724//#testresult/85b77cea935b1995","status":"passed","time":{"start":1758933309461,"stop":1758933330373,"duration":20912}},{"uid":"46fe40948e8541b4","reportUrl":"https://golioth.github.io/allure-reports/main/719//#testresult/46fe40948e8541b4","status":"passed","time":{"start":1758848773604,"stop":1758848791379,"duration":17775}}]},"tags":["mikes_orange_pi","anyio","frdm_rw612","zephyr"]},"source":"16765f2ef72bae5a.json","parameterValues":["'frdm_rw612'","'zephyr'"]}