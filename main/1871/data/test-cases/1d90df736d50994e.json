{
  "uid" : "1d90df736d50994e",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "d863d307dfacb440b83f8a44acfa67f4",
  "time" : {
    "start" : 1733448071961,
    "stop" : 1733448165235,
    "duration" : 93274
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8435bfd0>\ndevice = <golioth.golioth.Device object at 0xffff84336ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733448057490,
      "stop" : 1733448057491,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733448057920,
      "stop" : 1733448058786,
      "duration" : 866
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733448057488,
      "stop" : 1733448057488,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733448057491,
      "stop" : 1733448057493,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733448057489,
      "stop" : 1733448057489,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733448071315,
      "stop" : 1733448071959,
      "duration" : 644
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733448057494,
      "stop" : 1733448057494,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733448057490,
      "stop" : 1733448057490,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733448057495,
      "stop" : 1733448057920,
      "duration" : 425
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733448057488,
      "stop" : 1733448057489,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733448058787,
      "stop" : 1733448071314,
      "duration" : 12527
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733448057494,
      "stop" : 1733448057495,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8435bfd0>\ndevice = <golioth.golioth.Device object at 0xffff84336ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3f2fb991218eb58c",
      "name" : "log",
      "source" : "3f2fb991218eb58c.txt",
      "type" : "text/plain",
      "size" : 21804
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1733448165519,
      "stop" : 1733448166246,
      "duration" : 727
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733448166255,
      "stop" : 1733448166255,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733448166248,
      "stop" : 1733448166250,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733448165475,
      "stop" : 1733448165517,
      "duration" : 42
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "93ee1831bc78"
  }, {
    "name" : "thread",
    "value" : "541-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 72,
        "unknown" : 0,
        "total" : 87
      },
      "items" : [ {
        "uid" : "573ac70f6af40002",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/573ac70f6af40002",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733409893854,
          "stop" : 1733409986993,
          "duration" : 93139
        }
      }, {
        "uid" : "dc224c8dd62ebf2d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/dc224c8dd62ebf2d",
        "status" : "passed",
        "time" : {
          "start" : 1733360552432,
          "stop" : 1733360615014,
          "duration" : 62582
        }
      }, {
        "uid" : "2b4070bf94d9c980",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/2b4070bf94d9c980",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733273938959,
          "stop" : 1733274032138,
          "duration" : 93179
        }
      }, {
        "uid" : "166d7b43361b050c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/166d7b43361b050c",
        "status" : "passed",
        "time" : {
          "start" : 1733187783543,
          "stop" : 1733187846514,
          "duration" : 62971
        }
      }, {
        "uid" : "e53208bc31e28b01",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/e53208bc31e28b01",
        "status" : "passed",
        "time" : {
          "start" : 1733162657542,
          "stop" : 1733162717361,
          "duration" : 59819
        }
      }, {
        "uid" : "a644be76be2f17e1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/a644be76be2f17e1",
        "status" : "passed",
        "time" : {
          "start" : 1733101957894,
          "stop" : 1733102018362,
          "duration" : 60468
        }
      }, {
        "uid" : "98e29b12fdb972f5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/98e29b12fdb972f5",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733015047755,
          "stop" : 1733015140856,
          "duration" : 93101
        }
      }, {
        "uid" : "ab89e834f7a81efb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/ab89e834f7a81efb",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732928262941,
          "stop" : 1732928356092,
          "duration" : 93151
        }
      }, {
        "uid" : "97c132b004b90df2",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/97c132b004b90df2",
        "status" : "passed",
        "time" : {
          "start" : 1732842083679,
          "stop" : 1732842142123,
          "duration" : 58444
        }
      }, {
        "uid" : "3a63b85f84c59b4c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/3a63b85f84c59b4c",
        "status" : "passed",
        "time" : {
          "start" : 1732755712180,
          "stop" : 1732755774267,
          "duration" : 62087
        }
      }, {
        "uid" : "14406613b2f76791",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/14406613b2f76791",
        "status" : "passed",
        "time" : {
          "start" : 1732669320935,
          "stop" : 1732669382014,
          "duration" : 61079
        }
      }, {
        "uid" : "53190bf46ea2fdc8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/53190bf46ea2fdc8",
        "status" : "passed",
        "time" : {
          "start" : 1732643448171,
          "stop" : 1732643506313,
          "duration" : 58142
        }
      }, {
        "uid" : "b8242643e803c418",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/b8242643e803c418",
        "status" : "passed",
        "time" : {
          "start" : 1732638514733,
          "stop" : 1732638576732,
          "duration" : 61999
        }
      }, {
        "uid" : "b752e5175505bef6",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/b752e5175505bef6",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732634099122,
          "stop" : 1732634192165,
          "duration" : 93043
        }
      }, {
        "uid" : "bdc63939ee5f80fb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1843//#testresult/bdc63939ee5f80fb",
        "status" : "passed",
        "time" : {
          "start" : 1732582868441,
          "stop" : 1732582932479,
          "duration" : 64038
        }
      }, {
        "uid" : "6b60548ce52e2e1a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/6b60548ce52e2e1a",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732579160058,
          "stop" : 1732579253172,
          "duration" : 93114
        }
      }, {
        "uid" : "34df2b654afc0078",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/34df2b654afc0078",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732575916489,
          "stop" : 1732575975041,
          "duration" : 58552
        }
      }, {
        "uid" : "14f4a0870f88c02",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/14f4a0870f88c02",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732568086141,
          "stop" : 1732568179314,
          "duration" : 93173
        }
      }, {
        "uid" : "93badfb9d5f13ec8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1838//#testresult/93badfb9d5f13ec8",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732496711991,
          "stop" : 1732496805185,
          "duration" : 93194
        }
      }, {
        "uid" : "f083ff6e84125908",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1837//#testresult/f083ff6e84125908",
        "status" : "passed",
        "time" : {
          "start" : 1732410434329,
          "stop" : 1732410495402,
          "duration" : 61073
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "1d90df736d50994e.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}