{"uid":"3ab7231073c1bcb","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1760715749526,"stop":1760715761793,"duration":12267},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff9a2242f0>\ndevice = <golioth.golioth.Device object at 0xffff9a32b4d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9a32b4d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760715670705,"stop":1760715670706,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1760715670706,"stop":1760715670707,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760715670707,"stop":1760715670707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760715670708,"stop":1760715670708,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760715670708,"stop":1760715670709,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760715670709,"stop":1760715670709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760715670710,"stop":1760715670710,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760715670710,"stop":1760715671192,"duration":482},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1760715671193,"stop":1760715721864,"duration":50671},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760715721866,"stop":1760715723260,"duration":1394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1760715723261,"stop":1760715741753,"duration":18492},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff9a2242f0>\ndevice = <golioth.golioth.Device object at 0xffff9a32b4d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9a32b4d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"ca5c60a046bb6df","name":"stdout","source":"ca5c60a046bb6df.txt","type":"text/plain","size":2689}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1760715895909,"stop":1760715895909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760715895911,"stop":1760715896882,"duration":971},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1760715896885,"stop":1760715896889,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760715896892,"stop":1760715896894,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"dans_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"2e92b35deee7"},{"name":"thread","value":"240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":28,"unknown":0,"total":29},"items":[{"uid":"720d8edb67f0fa1","reportUrl":"https://golioth.github.io/allure-reports/main/772//#testresult/720d8edb67f0fa1","status":"passed","time":{"start":1760660113006,"stop":1760660125417,"duration":12411}},{"uid":"b6e82719ae0e8d37","reportUrl":"https://golioth.github.io/allure-reports/main/770//#testresult/b6e82719ae0e8d37","status":"passed","time":{"start":1760573744429,"stop":1760573756816,"duration":12387}},{"uid":"83cd605ff3e17d7c","reportUrl":"https://golioth.github.io/allure-reports/main/769//#testresult/83cd605ff3e17d7c","status":"passed","time":{"start":1760487310389,"stop":1760487322668,"duration":12279}},{"uid":"423d1a87dad086d4","reportUrl":"https://golioth.github.io/allure-reports/main/768//#testresult/423d1a87dad086d4","status":"passed","time":{"start":1760476312583,"stop":1760476324892,"duration":12309}},{"uid":"216cb0b795910d79","reportUrl":"https://golioth.github.io/allure-reports/main/767//#testresult/216cb0b795910d79","status":"passed","time":{"start":1760401027724,"stop":1760401039930,"duration":12206}},{"uid":"7872ca7d72b52356","reportUrl":"https://golioth.github.io/allure-reports/main/766//#testresult/7872ca7d72b52356","status":"passed","time":{"start":1760314541922,"stop":1760314554230,"duration":12308}},{"uid":"fc2300c5a452300d","reportUrl":"https://golioth.github.io/allure-reports/main/765//#testresult/fc2300c5a452300d","status":"passed","time":{"start":1760228219059,"stop":1760228231056,"duration":11997}},{"uid":"361f29464518a9d4","reportUrl":"https://golioth.github.io/allure-reports/main/763//#testresult/361f29464518a9d4","status":"passed","time":{"start":1760142079565,"stop":1760142091745,"duration":12180}},{"uid":"cc610ea075f2fb25","reportUrl":"https://golioth.github.io/allure-reports/main/762//#testresult/cc610ea075f2fb25","status":"passed","time":{"start":1760055562753,"stop":1760055574982,"duration":12229}},{"uid":"5b06f3b155556425","reportUrl":"https://golioth.github.io/allure-reports/main/761//#testresult/5b06f3b155556425","status":"passed","time":{"start":1760039926497,"stop":1760039938790,"duration":12293}},{"uid":"e430058b1ebefdc0","reportUrl":"https://golioth.github.io/allure-reports/main/758//#testresult/e430058b1ebefdc0","status":"passed","time":{"start":1759992066133,"stop":1759992078418,"duration":12285}},{"uid":"ac90ebefb68b728b","reportUrl":"https://golioth.github.io/allure-reports/main/757//#testresult/ac90ebefb68b728b","status":"passed","time":{"start":1759969317802,"stop":1759969330064,"duration":12262}},{"uid":"a606755e30f3ff92","reportUrl":"https://golioth.github.io/allure-reports/main/753//#testresult/a606755e30f3ff92","status":"passed","time":{"start":1759882552609,"stop":1759882564917,"duration":12308}},{"uid":"d1f5a05a4858a21d","reportUrl":"https://golioth.github.io/allure-reports/main/752//#testresult/d1f5a05a4858a21d","status":"passed","time":{"start":1759861168871,"stop":1759861181011,"duration":12140}},{"uid":"6bd8ea76af2af87a","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/6bd8ea76af2af87a","status":"passed","time":{"start":1759848219309,"stop":1759848231659,"duration":12350}},{"uid":"3284058ec865da3d","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/3284058ec865da3d","status":"passed","time":{"start":1759796903384,"stop":1759796915578,"duration":12194}},{"uid":"7a157e0f6f3b41f6","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/7a157e0f6f3b41f6","status":"passed","time":{"start":1759776055635,"stop":1759776067842,"duration":12207}},{"uid":"8f0f50de573001b5","reportUrl":"https://golioth.github.io/allure-reports/main/742//#testresult/8f0f50de573001b5","status":"passed","time":{"start":1759709707033,"stop":1759709719323,"duration":12290}},{"uid":"3798891639792291","reportUrl":"https://golioth.github.io/allure-reports/main/741//#testresult/3798891639792291","status":"passed","time":{"start":1759623623161,"stop":1759623635226,"duration":12065}},{"uid":"76dbee7514ceeed0","reportUrl":"https://golioth.github.io/allure-reports/main/740//#testresult/76dbee7514ceeed0","status":"passed","time":{"start":1759537097099,"stop":1759537109275,"duration":12176}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","dans_orange_pi","anyio"]},"source":"3ab7231073c1bcb.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}