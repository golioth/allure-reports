{"uid":"da43dde7154689ee","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1760716206341,"stop":1760716223181,"duration":16840},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff952db230>\ndevice = <golioth.golioth.Device object at 0xffff951e4ad0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760716179123,"stop":1760716179124,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760716179124,"stop":1760716179124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760716179125,"stop":1760716179125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760716179125,"stop":1760716179125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760716179126,"stop":1760716179128,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760716179126,"stop":1760716179126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760716179129,"stop":1760716179129,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760716179130,"stop":1760716179596,"duration":466},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760716179130,"stop":1760716179130,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760716179597,"stop":1760716180235,"duration":638},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760716180236,"stop":1760716203480,"duration":23244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760716203481,"stop":1760716206333,"duration":2852},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff952db230>\ndevice = <golioth.golioth.Device object at 0xffff951e4ad0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","steps":[],"attachments":[{"uid":"72accdcec26d4273","name":"log","source":"72accdcec26d4273.txt","type":"text/plain","size":22007}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760716223412,"stop":1760716223462,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760716223463,"stop":1760716223790,"duration":327},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760716223792,"stop":1760716223794,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760716223799,"stop":1760716223799,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"df03fb8de6da"},{"name":"thread","value":"812-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":27,"unknown":0,"total":29},"items":[{"uid":"81407900c723aa30","reportUrl":"https://golioth.github.io/allure-reports/main/772//#testresult/81407900c723aa30","status":"passed","time":{"start":1760660721055,"stop":1760660745563,"duration":24508}},{"uid":"643c79a657bc265","reportUrl":"https://golioth.github.io/allure-reports/main/770//#testresult/643c79a657bc265","status":"passed","time":{"start":1760574690214,"stop":1760574714949,"duration":24735}},{"uid":"6a8596406f4efadd","reportUrl":"https://golioth.github.io/allure-reports/main/769//#testresult/6a8596406f4efadd","status":"passed","time":{"start":1760488144089,"stop":1760488168553,"duration":24464}},{"uid":"f75a1c4608224270","reportUrl":"https://golioth.github.io/allure-reports/main/768//#testresult/f75a1c4608224270","status":"passed","time":{"start":1760478457418,"stop":1760478481193,"duration":23775}},{"uid":"f4628aeb58e537bd","reportUrl":"https://golioth.github.io/allure-reports/main/767//#testresult/f4628aeb58e537bd","status":"passed","time":{"start":1760402192507,"stop":1760402216649,"duration":24142}},{"uid":"ff6618d23061708e","reportUrl":"https://golioth.github.io/allure-reports/main/766//#testresult/ff6618d23061708e","status":"passed","time":{"start":1760315553369,"stop":1760315578030,"duration":24661}},{"uid":"160e1c75070888ae","reportUrl":"https://golioth.github.io/allure-reports/main/765//#testresult/160e1c75070888ae","status":"passed","time":{"start":1760229155087,"stop":1760229179209,"duration":24122}},{"uid":"25f6f6c376560e34","reportUrl":"https://golioth.github.io/allure-reports/main/763//#testresult/25f6f6c376560e34","status":"passed","time":{"start":1760143346641,"stop":1760143371172,"duration":24531}},{"uid":"2ee1bce29164a5a5","reportUrl":"https://golioth.github.io/allure-reports/main/762//#testresult/2ee1bce29164a5a5","status":"passed","time":{"start":1760056310882,"stop":1760056334316,"duration":23434}},{"uid":"f6564da12aff37d3","reportUrl":"https://golioth.github.io/allure-reports/main/761//#testresult/f6564da12aff37d3","status":"passed","time":{"start":1760042602667,"stop":1760042627993,"duration":25326}},{"uid":"2a80e3c78a2afa4a","reportUrl":"https://golioth.github.io/allure-reports/main/758//#testresult/2a80e3c78a2afa4a","status":"passed","time":{"start":1759992738531,"stop":1759992761933,"duration":23402}},{"uid":"7325f37fe575083d","reportUrl":"https://golioth.github.io/allure-reports/main/757//#testresult/7325f37fe575083d","status":"passed","time":{"start":1759969769323,"stop":1759969792810,"duration":23487}},{"uid":"af58ea7560c4f87f","reportUrl":"https://golioth.github.io/allure-reports/main/753//#testresult/af58ea7560c4f87f","status":"passed","time":{"start":1759883491388,"stop":1759883516265,"duration":24877}},{"uid":"f63f1fef68828108","reportUrl":"https://golioth.github.io/allure-reports/main/752//#testresult/f63f1fef68828108","status":"passed","time":{"start":1759862020641,"stop":1759862044188,"duration":23547}},{"uid":"ee16dc913d880acf","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/ee16dc913d880acf","status":"passed","time":{"start":1759851877600,"stop":1759851900863,"duration":23263}},{"uid":"403ff7778e3c819d","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/403ff7778e3c819d","status":"passed","time":{"start":1759801624631,"stop":1759801648594,"duration":23963}},{"uid":"3d57404b2c26d4a3","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/3d57404b2c26d4a3","status":"passed","time":{"start":1759783175790,"stop":1759783199101,"duration":23311}},{"uid":"6703813e81501ac0","reportUrl":"https://golioth.github.io/allure-reports/main/742//#testresult/6703813e81501ac0","status":"passed","time":{"start":1759710788969,"stop":1759710812593,"duration":23624}},{"uid":"56305a9fb283b7fd","reportUrl":"https://golioth.github.io/allure-reports/main/741//#testresult/56305a9fb283b7fd","status":"passed","time":{"start":1759626015780,"stop":1759626038827,"duration":23047}},{"uid":"7ec85cb5e43ff54","reportUrl":"https://golioth.github.io/allure-reports/main/740//#testresult/7ec85cb5e43ff54","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759539863386,"stop":1759539870034,"duration":6648}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","zephyr"]},"source":"da43dde7154689ee.json","parameterValues":["'nrf52840dk'","'zephyr'"]}