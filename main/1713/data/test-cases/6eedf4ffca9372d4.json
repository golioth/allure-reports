{"uid":"6eedf4ffca9372d4","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1730597299497,"stop":1730597392991,"duration":93494},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab24e010>\ndevice = <golioth.golioth.Device object at 0xffffab25d2d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730597270669,"stop":1730597270670,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730597270670,"stop":1730597270670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730597270671,"stop":1730597270671,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730597270671,"stop":1730597270671,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730597270672,"stop":1730597270674,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730597270672,"stop":1730597270672,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730597270675,"stop":1730597270675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730597270676,"stop":1730597271084,"duration":408},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730597270676,"stop":1730597270676,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730597271084,"stop":1730597271956,"duration":872},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730597271956,"stop":1730597298399,"duration":26443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730597298400,"stop":1730597299494,"duration":1094},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab24e010>\ndevice = <golioth.golioth.Device object at 0xffffab25d2d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"431e9156d47b2ce1","name":"log","source":"431e9156d47b2ce1.txt","type":"text/plain","size":18482}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730597393333,"stop":1730597393349,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730597393351,"stop":1730597393746,"duration":395},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730597393748,"stop":1730597393750,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730597393755,"stop":1730597393755,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"53b2a9f76811"},{"name":"thread","value":"650-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":29,"unknown":0,"total":32},"items":[{"uid":"d4dccbf4437c86d4","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/d4dccbf4437c86d4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730510426320,"stop":1730510519861,"duration":93541}},{"uid":"a5e976567e0761be","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/a5e976567e0761be","status":"passed","time":{"start":1730424146370,"stop":1730424177700,"duration":31330}},{"uid":"d07d2031029a8b01","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/d07d2031029a8b01","status":"passed","time":{"start":1730339126469,"stop":1730339160499,"duration":34030}},{"uid":"5daca350c0546b34","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/5daca350c0546b34","status":"passed","time":{"start":1730306486888,"stop":1730306502726,"duration":15838}},{"uid":"1f2cec9b7ca6f5f9","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/1f2cec9b7ca6f5f9","status":"passed","time":{"start":1730251728088,"stop":1730251760343,"duration":32255}},{"uid":"7949f11343710fdc","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/7949f11343710fdc","status":"passed","time":{"start":1730165536556,"stop":1730165555064,"duration":18508}},{"uid":"e5b31ef9387654cb","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/e5b31ef9387654cb","status":"passed","time":{"start":1730078672116,"stop":1730078700853,"duration":28737}},{"uid":"9a3ae0e1c487b667","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/9a3ae0e1c487b667","status":"passed","time":{"start":1729992603115,"stop":1729992623735,"duration":20620}},{"uid":"130b911bd09e308a","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/130b911bd09e308a","status":"passed","time":{"start":1729905847030,"stop":1729905865808,"duration":18778}},{"uid":"bca32b983ac9d10b","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/bca32b983ac9d10b","status":"passed","time":{"start":1729819769800,"stop":1729819786792,"duration":16992}},{"uid":"387a3517c48be9b3","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/387a3517c48be9b3","status":"passed","time":{"start":1729733488389,"stop":1729733507437,"duration":19048}},{"uid":"1bbf1c1eb1c484cf","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/1bbf1c1eb1c484cf","status":"passed","time":{"start":1729646876605,"stop":1729646893143,"duration":16538}},{"uid":"d51c775101cd4fb0","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/d51c775101cd4fb0","status":"passed","time":{"start":1729560553900,"stop":1729560587493,"duration":33593}},{"uid":"4b2914a4563dc6cb","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/4b2914a4563dc6cb","status":"passed","time":{"start":1729473911980,"stop":1729473930322,"duration":18342}},{"uid":"6d912c9479d0b7b6","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/6d912c9479d0b7b6","status":"passed","time":{"start":1729387701088,"stop":1729387717441,"duration":16353}},{"uid":"4354dca1cdef4cae","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/4354dca1cdef4cae","status":"passed","time":{"start":1729371405693,"stop":1729371426844,"duration":21151}},{"uid":"7497f14a7cc7c0a5","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/7497f14a7cc7c0a5","status":"passed","time":{"start":1729364220498,"stop":1729364252133,"duration":31635}},{"uid":"4e7f0f82b9ea0dad","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/4e7f0f82b9ea0dad","status":"passed","time":{"start":1729301028513,"stop":1729301046214,"duration":17701}},{"uid":"c9ec8b51036f08dc","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/c9ec8b51036f08dc","status":"passed","time":{"start":1729214450621,"stop":1729214467037,"duration":16416}},{"uid":"9fc8a4ba699eeeb8","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/9fc8a4ba699eeeb8","status":"passed","time":{"start":1729205401596,"stop":1729205433548,"duration":31952}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6eedf4ffca9372d4.json","parameterValues":["'nrf9160dk'","'zephyr'"]}