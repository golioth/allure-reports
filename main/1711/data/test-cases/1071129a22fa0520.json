{"uid":"1071129a22fa0520","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1730510299992,"stop":1730510393133,"duration":93141},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa883ea50>\ndevice = <golioth.golioth.Device object at 0xffffa8855710>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730510270446,"stop":1730510270446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730510270446,"stop":1730510270447,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730510270447,"stop":1730510270447,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730510270448,"stop":1730510270448,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730510270448,"stop":1730510270448,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730510270449,"stop":1730510270451,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730510270452,"stop":1730510270452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730510270452,"stop":1730510270452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730510270453,"stop":1730510270866,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730510270867,"stop":1730510271746,"duration":879},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730510271747,"stop":1730510298883,"duration":27136},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730510298884,"stop":1730510299987,"duration":1103},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa883ea50>\ndevice = <golioth.golioth.Device object at 0xffffa8855710>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"95f668dd4c904904","name":"log","source":"95f668dd4c904904.txt","type":"text/plain","size":16341}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730510393415,"stop":1730510393460,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730510393462,"stop":1730510393846,"duration":384},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730510393848,"stop":1730510393851,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730510393856,"stop":1730510393856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"05028f31645f"},{"name":"thread","value":"608-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":27,"unknown":0,"total":31},"items":[{"uid":"606c3f25895ea76c","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/606c3f25895ea76c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730424020364,"stop":1730424113409,"duration":93045}},{"uid":"86c3de8187b8e72a","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/86c3de8187b8e72a","status":"passed","time":{"start":1730339069270,"stop":1730339093735,"duration":24465}},{"uid":"93136732380e4af5","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/93136732380e4af5","status":"passed","time":{"start":1730306681891,"stop":1730306707023,"duration":25132}},{"uid":"e875831bf2e1b8df","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/e875831bf2e1b8df","status":"passed","time":{"start":1730251660658,"stop":1730251695273,"duration":34615}},{"uid":"4e6d86a1fd04eacb","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/4e6d86a1fd04eacb","status":"passed","time":{"start":1730165479770,"stop":1730165503882,"duration":24112}},{"uid":"6c7084b4630dadb0","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/6c7084b4630dadb0","status":"passed","time":{"start":1730078590365,"stop":1730078638811,"duration":48446}},{"uid":"3d75a6db689fd0ba","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/3d75a6db689fd0ba","status":"passed","time":{"start":1729992543718,"stop":1729992570682,"duration":26964}},{"uid":"a1f282b42ac63b78","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/a1f282b42ac63b78","status":"passed","time":{"start":1729905781254,"stop":1729905814220,"duration":32966}},{"uid":"27817b4e9320f43e","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/27817b4e9320f43e","status":"passed","time":{"start":1729819709558,"stop":1729819737026,"duration":27468}},{"uid":"1a575688946825a0","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/1a575688946825a0","status":"passed","time":{"start":1729733427272,"stop":1729733455822,"duration":28550}},{"uid":"176577164dccab","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/176577164dccab","status":"passed","time":{"start":1729646819228,"stop":1729646844133,"duration":24905}},{"uid":"113e59076250114","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/113e59076250114","status":"passed","time":{"start":1729560485913,"stop":1729560520971,"duration":35058}},{"uid":"cba0f95806d35f19","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/cba0f95806d35f19","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729473785766,"stop":1729473879060,"duration":93294}},{"uid":"f63d61a1afb8e2c9","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/f63d61a1afb8e2c9","status":"passed","time":{"start":1729387643887,"stop":1729387668424,"duration":24537}},{"uid":"6c07f316d1456d4d","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/6c07f316d1456d4d","status":"passed","time":{"start":1729371347914,"stop":1729371372766,"duration":24852}},{"uid":"41bfd64602bb05e9","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/41bfd64602bb05e9","status":"passed","time":{"start":1729364147605,"stop":1729364187639,"duration":40034}},{"uid":"5a323b0c1ad07c95","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/5a323b0c1ad07c95","status":"passed","time":{"start":1729300970894,"stop":1729300995812,"duration":24918}},{"uid":"af0e1f5dbcbef3f","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/af0e1f5dbcbef3f","status":"passed","time":{"start":1729214392445,"stop":1729214417853,"duration":25408}},{"uid":"101ae503e2c3f7b8","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/101ae503e2c3f7b8","status":"passed","time":{"start":1729205333536,"stop":1729205368615,"duration":35079}},{"uid":"b8ee3b31d7e23b7e","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/b8ee3b31d7e23b7e","status":"passed","time":{"start":1729131952084,"stop":1729131976765,"duration":24681}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1071129a22fa0520.json","parameterValues":["'nrf9160dk'","'zephyr'"]}