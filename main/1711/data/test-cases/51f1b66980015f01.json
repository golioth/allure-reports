{"uid":"51f1b66980015f01","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1730508609230,"stop":1730508641891,"duration":32661},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff85d529d0>\ndevice = <golioth.golioth.Device object at 0xffff85d6d350>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730508580580,"stop":1730508580580,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730508580581,"stop":1730508580581,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730508580581,"stop":1730508580581,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730508580582,"stop":1730508580582,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730508580582,"stop":1730508580582,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730508580583,"stop":1730508580585,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730508580586,"stop":1730508580586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730508580586,"stop":1730508580586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730508580587,"stop":1730508581085,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730508581085,"stop":1730508582532,"duration":1447},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730508582533,"stop":1730508606042,"duration":23509},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730508606043,"stop":1730508609223,"duration":3180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff85d529d0>\ndevice = <golioth.golioth.Device object at 0xffff85d6d350>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d982fd99f78d6678","name":"log","source":"d982fd99f78d6678.txt","type":"text/plain","size":26796}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730508642248,"stop":1730508642440,"duration":192},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730508642442,"stop":1730508644176,"duration":1734},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730508644180,"stop":1730508644184,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730508644192,"stop":1730508644192,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"23004d3cfdcb"},{"name":"thread","value":"591-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":27,"unknown":0,"total":31},"items":[{"uid":"69b9efd85938a652","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/69b9efd85938a652","status":"passed","time":{"start":1730422321333,"stop":1730422344670,"duration":23337}},{"uid":"5d7c81e7478beda5","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/5d7c81e7478beda5","status":"passed","time":{"start":1730336341675,"stop":1730336365618,"duration":23943}},{"uid":"9cedd9d0c735eb40","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/9cedd9d0c735eb40","status":"passed","time":{"start":1730304227617,"stop":1730304251464,"duration":23847}},{"uid":"d31f2d49a82ecba9","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/d31f2d49a82ecba9","status":"passed","time":{"start":1730249297300,"stop":1730249321042,"duration":23742}},{"uid":"59d58e55c6941bb7","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/59d58e55c6941bb7","status":"passed","time":{"start":1730163067952,"stop":1730163091458,"duration":23506}},{"uid":"81924f47aa1f82fd","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/81924f47aa1f82fd","status":"passed","time":{"start":1730077299016,"stop":1730077322817,"duration":23801}},{"uid":"5bb709c4a3d0039e","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/5bb709c4a3d0039e","status":"passed","time":{"start":1729990939332,"stop":1729990962618,"duration":23286}},{"uid":"7efe74971c4adb30","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/7efe74971c4adb30","status":"passed","time":{"start":1729904459451,"stop":1729904482862,"duration":23411}},{"uid":"5de4e474c645ad30","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/5de4e474c645ad30","status":"passed","time":{"start":1729818033697,"stop":1729818057579,"duration":23882}},{"uid":"c6a5edf3d54692d9","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/c6a5edf3d54692d9","status":"passed","time":{"start":1729730884612,"stop":1729730907939,"duration":23327}},{"uid":"f42e237c5dfe903b","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/f42e237c5dfe903b","status":"passed","time":{"start":1729644721443,"stop":1729644752316,"duration":30873}},{"uid":"b7075d737f5b2470","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/b7075d737f5b2470","status":"passed","time":{"start":1729558241738,"stop":1729558265575,"duration":23837}},{"uid":"b23f0bfebcc358d6","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/b23f0bfebcc358d6","status":"passed","time":{"start":1729472395646,"stop":1729472419973,"duration":24327}},{"uid":"dbd8fe29db44e64","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/dbd8fe29db44e64","status":"passed","time":{"start":1729386127995,"stop":1729386151594,"duration":23599}},{"uid":"d833a9fa16e81abc","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/d833a9fa16e81abc","status":"passed","time":{"start":1729369996649,"stop":1729370019837,"duration":23188}},{"uid":"5b58b40a97a906e2","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/5b58b40a97a906e2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729362162309,"stop":1729362201502,"duration":39193}},{"uid":"ee42289ec223628d","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/ee42289ec223628d","status":"passed","time":{"start":1729299674098,"stop":1729299697904,"duration":23806}},{"uid":"a503f059138d4d3a","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/a503f059138d4d3a","status":"passed","time":{"start":1729213068158,"stop":1729213091964,"duration":23806}},{"uid":"347d561f6cd65f5b","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/347d561f6cd65f5b","status":"failed","statusDetails":"AssertionError: assert 3 == 2","time":{"start":1729203614303,"stop":1729203646561,"duration":32258}},{"uid":"29da758d4893ee3a","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/29da758d4893ee3a","status":"passed","time":{"start":1729130793668,"stop":1729130817157,"duration":23489}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"51f1b66980015f01.json","parameterValues":["'nrf52840dk'","'zephyr'"]}