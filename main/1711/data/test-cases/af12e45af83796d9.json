{"uid":"af12e45af83796d9","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1730510173149,"stop":1730510266268,"duration":93119},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9e2cf090>\ndevice = <golioth.golioth.Device object at 0xffff9e2ea1d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730510143825,"stop":1730510143825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730510143826,"stop":1730510143826,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730510143826,"stop":1730510143827,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730510143827,"stop":1730510143827,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730510143828,"stop":1730510143830,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730510143828,"stop":1730510143828,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730510143831,"stop":1730510143831,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730510143832,"stop":1730510144236,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730510143832,"stop":1730510143832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730510144236,"stop":1730510145159,"duration":923},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730510145160,"stop":1730510172086,"duration":26926},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730510172086,"stop":1730510173146,"duration":1060},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9e2cf090>\ndevice = <golioth.golioth.Device object at 0xffff9e2ea1d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"509c86952a68d734","name":"log","source":"509c86952a68d734.txt","type":"text/plain","size":16343}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730510266593,"stop":1730510266638,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730510266640,"stop":1730510267154,"duration":514},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730510267157,"stop":1730510267159,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730510267164,"stop":1730510267164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"05028f31645f"},{"name":"thread","value":"562-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":6,"skipped":0,"passed":22,"unknown":0,"total":31},"items":[{"uid":"2cc30e78f7574134","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/2cc30e78f7574134","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730423893774,"stop":1730423986987,"duration":93213}},{"uid":"d699894f92285c65","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/d699894f92285c65","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1730338987506,"stop":1730338987506,"duration":0}},{"uid":"9ddd4a542bf16ceb","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/9ddd4a542bf16ceb","status":"passed","time":{"start":1730306361546,"stop":1730306390986,"duration":29440}},{"uid":"468b8caa3b93ce6d","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/468b8caa3b93ce6d","status":"passed","time":{"start":1730251574062,"stop":1730251627256,"duration":53194}},{"uid":"d2d9cab3862aac35","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/d2d9cab3862aac35","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730165353258,"stop":1730165446596,"duration":93338}},{"uid":"be5fc41a6e4064ae","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/be5fc41a6e4064ae","status":"passed","time":{"start":1730078508866,"stop":1730078557257,"duration":48391}},{"uid":"384f0cb0e258efd9","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/384f0cb0e258efd9","status":"passed","time":{"start":1729992410472,"stop":1729992510532,"duration":100060}},{"uid":"4794d262ac9e82ef","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/4794d262ac9e82ef","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729905654463,"stop":1729905747729,"duration":93266}},{"uid":"e9f990dd5ab16736","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/e9f990dd5ab16736","status":"passed","time":{"start":1729819646073,"stop":1729819676375,"duration":30302}},{"uid":"7e379630a2cb90e5","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/7e379630a2cb90e5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729733369033,"stop":1729733394732,"duration":25699}},{"uid":"12ed185a93607f19","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/12ed185a93607f19","status":"passed","time":{"start":1729646757143,"stop":1729646786330,"duration":29187}},{"uid":"c78a270584ce6a77","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/c78a270584ce6a77","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1729560404467,"stop":1729560404467,"duration":0}},{"uid":"39a7450eb230eace","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/39a7450eb230eace","status":"passed","time":{"start":1729473721952,"stop":1729473752803,"duration":30851}},{"uid":"a431e9245c78c5a4","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/a431e9245c78c5a4","status":"passed","time":{"start":1729387580175,"stop":1729387610799,"duration":30624}},{"uid":"fceae71de1466bf7","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/fceae71de1466bf7","status":"passed","time":{"start":1729371285250,"stop":1729371314878,"duration":29628}},{"uid":"2bc7dd223e5d790","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/2bc7dd223e5d790","status":"passed","time":{"start":1729364074044,"stop":1729364114363,"duration":40319}},{"uid":"6e42905d5747c0e0","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/6e42905d5747c0e0","status":"passed","time":{"start":1729300908181,"stop":1729300937922,"duration":29741}},{"uid":"c5e6e8c362337d76","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/c5e6e8c362337d76","status":"passed","time":{"start":1729214327500,"stop":1729214358805,"duration":31305}},{"uid":"1ee5f3e7fdb4516b","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/1ee5f3e7fdb4516b","status":"passed","time":{"start":1729205246736,"stop":1729205300122,"duration":53386}},{"uid":"cdd4ac2e8b7911da","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/cdd4ac2e8b7911da","status":"passed","time":{"start":1729131888900,"stop":1729131919049,"duration":30149}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"af12e45af83796d9.json","parameterValues":["'nrf9160dk'","'zephyr'"]}