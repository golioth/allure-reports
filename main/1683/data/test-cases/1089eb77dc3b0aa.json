{"uid":"1089eb77dc3b0aa","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1729385986096,"stop":1729386034192,"duration":48096},"status":"broken","statusMessage":"httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.golioth.io/v1/projects/firmware_ci/logs?start=2024-10-20T00%3A59%3A48.872567Z&end=2024-10-20T01%3A00%3A33.584906Z&deviceId=671455ded72750d65ba9d7c5'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffadd83050>\ndevice = <golioth.golioth.Device object at 0xffffadd51510>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n>       logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:410: in get_logs\n    return await self.project.get_logs(params=params)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:264: in get_logs\n    resp = await self.get('logs', params=params)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:83: in wrapper\n    resp.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500 Internal Server Error]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.golioth.io/v1/projects/firmware_ci/logs?start=2024-10-20T00%3A59%3A48.872567Z&end=2024-10-20T01%3A00%3A33.584906Z&deviceId=671455ded72750d65ba9d7c5'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/usr/local/lib/python3.11/dist-packages/httpx/_models.py:763: HTTPStatusError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729385949564,"stop":1729385949564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729385949565,"stop":1729385949565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729385949565,"stop":1729385949565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729385949566,"stop":1729385949566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729385949566,"stop":1729385949566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729385949567,"stop":1729385949569,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729385949570,"stop":1729385949570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729385949570,"stop":1729385949570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729385949571,"stop":1729385950069,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729385950070,"stop":1729385951091,"duration":1021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729385951092,"stop":1729385985450,"duration":34358},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729385985451,"stop":1729385986094,"duration":643},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.golioth.io/v1/projects/firmware_ci/logs?start=2024-10-20T00%3A59%3A48.872567Z&end=2024-10-20T01%3A00%3A33.584906Z&deviceId=671455ded72750d65ba9d7c5'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffadd83050>\ndevice = <golioth.golioth.Device object at 0xffffadd51510>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n>       logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:410: in get_logs\n    return await self.project.get_logs(params=params)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:264: in get_logs\n    resp = await self.get('logs', params=params)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:83: in wrapper\n    resp.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500 Internal Server Error]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://api.golioth.io/v1/projects/firmware_ci/logs?start=2024-10-20T00%3A59%3A48.872567Z&end=2024-10-20T01%3A00%3A33.584906Z&deviceId=671455ded72750d65ba9d7c5'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n/usr/local/lib/python3.11/dist-packages/httpx/_models.py:763: HTTPStatusError","steps":[],"attachments":[{"uid":"e56eddf84c8a85a0","name":"log","source":"e56eddf84c8a85a0.txt","type":"text/plain","size":30193}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729386034680,"stop":1729386034704,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729386034705,"stop":1729386035203,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729386035205,"stop":1729386035208,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729386035212,"stop":1729386035213,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f0878c79d611"},{"name":"thread","value":"362-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":16,"unknown":0,"total":17},"items":[{"uid":"d763d44de3c554d7","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/d763d44de3c554d7","status":"passed","time":{"start":1729369904333,"stop":1729369952452,"duration":48119}},{"uid":"e2a12c6035990b9d","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/e2a12c6035990b9d","status":"passed","time":{"start":1729362759603,"stop":1729362811062,"duration":51459}},{"uid":"cff91a666914c5c1","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/cff91a666914c5c1","status":"passed","time":{"start":1729299581922,"stop":1729299630208,"duration":48286}},{"uid":"5036fcc183bfde94","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/5036fcc183bfde94","status":"passed","time":{"start":1729212988113,"stop":1729213035921,"duration":47808}},{"uid":"6b61ea3cf38aecc","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/6b61ea3cf38aecc","status":"passed","time":{"start":1729204124077,"stop":1729204172901,"duration":48824}},{"uid":"97dbf2dd957301c","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/97dbf2dd957301c","status":"passed","time":{"start":1729130434847,"stop":1729130483293,"duration":48446}},{"uid":"1c914d3d863593ee","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/1c914d3d863593ee","status":"passed","time":{"start":1729110870381,"stop":1729110918308,"duration":47927}},{"uid":"ea8a7bf3136baa33","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/ea8a7bf3136baa33","status":"passed","time":{"start":1729040105546,"stop":1729040153921,"duration":48375}},{"uid":"bd5e4101acb3622f","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/bd5e4101acb3622f","status":"passed","time":{"start":1729027020763,"stop":1729027070737,"duration":49974}},{"uid":"d62af5c64d2a41c7","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/d62af5c64d2a41c7","status":"passed","time":{"start":1729009072724,"stop":1729009121432,"duration":48708}},{"uid":"2d9b7cffd97f2cd1","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/2d9b7cffd97f2cd1","status":"passed","time":{"start":1728953924410,"stop":1728953973001,"duration":48591}},{"uid":"8cf426ecebbdcda2","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/8cf426ecebbdcda2","status":"passed","time":{"start":1728867625246,"stop":1728867673674,"duration":48428}},{"uid":"db3a91913ab925c5","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/db3a91913ab925c5","status":"passed","time":{"start":1728781235065,"stop":1728781283922,"duration":48857}},{"uid":"8ec8c1fea1eb5534","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/8ec8c1fea1eb5534","status":"passed","time":{"start":1728694432514,"stop":1728694480628,"duration":48114}},{"uid":"41f41d1c9637940a","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/41f41d1c9637940a","status":"passed","time":{"start":1728669305778,"stop":1728669354728,"duration":48950}},{"uid":"3b51dec108fadaa3","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/3b51dec108fadaa3","status":"passed","time":{"start":1728663410172,"stop":1728663458647,"duration":48475}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"1089eb77dc3b0aa.json","parameterValues":["'rak5010'","'zephyr'"]}