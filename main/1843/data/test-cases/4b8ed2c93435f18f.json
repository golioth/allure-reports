{"uid":"4b8ed2c93435f18f","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1732584535536,"stop":1732584629166,"duration":93630},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff86cd7350>\ndevice = <golioth.golioth.Device object at 0xffff86cee290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732584506137,"stop":1732584506137,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732584506138,"stop":1732584506138,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732584506139,"stop":1732584506139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732584506139,"stop":1732584506139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732584506140,"stop":1732584506142,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732584506140,"stop":1732584506140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732584506143,"stop":1732584506143,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732584506144,"stop":1732584506556,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732584506144,"stop":1732584506144,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732584506556,"stop":1732584507489,"duration":933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732584507490,"stop":1732584534460,"duration":26970},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732584534461,"stop":1732584535529,"duration":1068},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff86cd7350>\ndevice = <golioth.golioth.Device object at 0xffff86cee290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b598dc5663a5e5e6","name":"log","source":"b598dc5663a5e5e6.txt","type":"text/plain","size":19104}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732584629434,"stop":1732584629479,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732584629481,"stop":1732584629853,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732584629855,"stop":1732584629858,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732584629862,"stop":1732584629863,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"02f9da00b5a6"},{"name":"thread","value":"720-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":58,"unknown":0,"total":65},"items":[{"uid":"b59556c2dcd97dfb","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/b59556c2dcd97dfb","status":"passed","time":{"start":1732569856645,"stop":1732569877301,"duration":20656}},{"uid":"d3d949785e9dcf10","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/d3d949785e9dcf10","status":"passed","time":{"start":1732569856645,"stop":1732569877301,"duration":20656}},{"uid":"13dc1d96543223e1","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/13dc1d96543223e1","status":"passed","time":{"start":1732569856645,"stop":1732569877301,"duration":20656}},{"uid":"1c59cbc8e30dba7f","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/1c59cbc8e30dba7f","status":"passed","time":{"start":1732498667240,"stop":1732498685629,"duration":18389}},{"uid":"5962a8154fce2f2e","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/5962a8154fce2f2e","status":"passed","time":{"start":1732412131544,"stop":1732412147445,"duration":15901}},{"uid":"5fb400abfd7ced84","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/5fb400abfd7ced84","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732326786266,"stop":1732326880123,"duration":93857}},{"uid":"1393b35538a55bd3","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/1393b35538a55bd3","status":"passed","time":{"start":1732323999884,"stop":1732324040836,"duration":40952}},{"uid":"d7a8f53cb03da494","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/d7a8f53cb03da494","status":"passed","time":{"start":1732310804131,"stop":1732310819935,"duration":15804}},{"uid":"128192383c7ce457","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/128192383c7ce457","status":"passed","time":{"start":1732307740554,"stop":1732307775111,"duration":34557}},{"uid":"37179949c982c0b3","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/37179949c982c0b3","status":"passed","time":{"start":1732065967801,"stop":1732065993151,"duration":25350}},{"uid":"5c4f73d7f169a637","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/5c4f73d7f169a637","status":"passed","time":{"start":1732060986486,"stop":1732061026375,"duration":39889}},{"uid":"e466d773eade13d0","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/e466d773eade13d0","status":"passed","time":{"start":1732038407789,"stop":1732038423611,"duration":15822}},{"uid":"57f05c493940634f","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/57f05c493940634f","status":"passed","time":{"start":1731979610717,"stop":1731979635004,"duration":24287}},{"uid":"a0d6dfcd10e07171","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/a0d6dfcd10e07171","status":"passed","time":{"start":1731969384597,"stop":1731969420895,"duration":36298}},{"uid":"f81eb226aeb34511","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/f81eb226aeb34511","status":"passed","time":{"start":1731893408220,"stop":1731893438745,"duration":30525}},{"uid":"4116a2302a8702f0","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/4116a2302a8702f0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731807015043,"stop":1731807108517,"duration":93474}},{"uid":"cabb2a0900cd136d","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/cabb2a0900cd136d","status":"passed","time":{"start":1731720712342,"stop":1731720728782,"duration":16440}},{"uid":"f4b94adb1d9dc07b","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/f4b94adb1d9dc07b","status":"passed","time":{"start":1731634314604,"stop":1731634350953,"duration":36349}},{"uid":"5f4dbba73bc35f24","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/5f4dbba73bc35f24","status":"passed","time":{"start":1731609898602,"stop":1731609917278,"duration":18676}},{"uid":"20e3b433166b033b","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/20e3b433166b033b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731568212233,"stop":1731568305827,"duration":93594}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4b8ed2c93435f18f.json","parameterValues":["'nrf9160dk'","'zephyr'"]}