{"uid":"9c17b787d6d4e1ab","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"c4178e273bd3962d06b411c6f8e74f6b","time":{"start":1732323299686,"stop":1732323392442,"duration":92756},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb67bc710>\ndevice = <golioth.golioth.Device object at 0xffffb65c6350>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732323268859,"stop":1732323268859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732323268860,"stop":1732323268860,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732323268860,"stop":1732323268861,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732323268861,"stop":1732323268861,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732323268862,"stop":1732323268864,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732323268862,"stop":1732323268862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732323268865,"stop":1732323268865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732323268866,"stop":1732323269397,"duration":531},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732323268866,"stop":1732323268866,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732323269398,"stop":1732323270238,"duration":840},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732323270239,"stop":1732323298592,"duration":28353},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732323298593,"stop":1732323299681,"duration":1088},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb67bc710>\ndevice = <golioth.golioth.Device object at 0xffffb65c6350>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e69af11ebf7abf2e","name":"log","source":"e69af11ebf7abf2e.txt","type":"text/plain","size":14505}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732323392846,"stop":1732323392968,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732323392970,"stop":1732323393407,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732323393409,"stop":1732323393411,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732323393416,"stop":1732323393416,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a7a914f5ba0d"},{"name":"thread","value":"424-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":54,"unknown":0,"total":58},"items":[{"uid":"ba2f7b820ba74f5b","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/ba2f7b820ba74f5b","status":"passed","time":{"start":1732310127303,"stop":1732310137814,"duration":10511}},{"uid":"569b7eb313c14af1","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/569b7eb313c14af1","status":"passed","time":{"start":1732306885171,"stop":1732306905075,"duration":19904}},{"uid":"c8a6531fc5735802","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/c8a6531fc5735802","status":"passed","time":{"start":1732065186473,"stop":1732065215409,"duration":28936}},{"uid":"b1df3ab90bc9cefc","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/b1df3ab90bc9cefc","status":"passed","time":{"start":1732060235026,"stop":1732060254025,"duration":18999}},{"uid":"9736ba71bbc0bb6e","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/9736ba71bbc0bb6e","status":"passed","time":{"start":1732037747783,"stop":1732037763813,"duration":16030}},{"uid":"14e89294d23983e3","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/14e89294d23983e3","status":"passed","time":{"start":1731978839301,"stop":1731978867095,"duration":27794}},{"uid":"6891cf943bb3369b","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/6891cf943bb3369b","status":"passed","time":{"start":1731968622561,"stop":1731968647037,"duration":24476}},{"uid":"14e804518525ca0a","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/14e804518525ca0a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731892601951,"stop":1731892694780,"duration":92829}},{"uid":"d2149d2650a384c2","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/d2149d2650a384c2","status":"passed","time":{"start":1731806245710,"stop":1731806271431,"duration":25721}},{"uid":"76294ec98304bc4","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/76294ec98304bc4","status":"passed","time":{"start":1731720106942,"stop":1731720118309,"duration":11367}},{"uid":"59332b04d056275c","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/59332b04d056275c","status":"passed","time":{"start":1731633582446,"stop":1731633613043,"duration":30597}},{"uid":"ebbbe21b87715252","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/ebbbe21b87715252","status":"passed","time":{"start":1731609281217,"stop":1731609294021,"duration":12804}},{"uid":"8e28ebff819dbd56","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/8e28ebff819dbd56","status":"passed","time":{"start":1731567533914,"stop":1731567565291,"duration":31377}},{"uid":"27ed0101f87e3eb1","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/27ed0101f87e3eb1","status":"passed","time":{"start":1731546722649,"stop":1731546736826,"duration":14177}},{"uid":"351fafb8d5f0e63b","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/351fafb8d5f0e63b","status":"passed","time":{"start":1731461132549,"stop":1731461159423,"duration":26874}},{"uid":"b8f9793a54f3e18","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/b8f9793a54f3e18","status":"passed","time":{"start":1731374131022,"stop":1731374146978,"duration":15956}},{"uid":"8a793f2197214ac2","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/8a793f2197214ac2","status":"passed","time":{"start":1731287468883,"stop":1731287482293,"duration":13410}},{"uid":"a9a46f92f601d8dd","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/a9a46f92f601d8dd","status":"passed","time":{"start":1731201607481,"stop":1731201618416,"duration":10935}},{"uid":"522ed1f541aeba63","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/522ed1f541aeba63","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731114993555,"stop":1731115086252,"duration":92697}},{"uid":"40ff9fae9dce915c","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/40ff9fae9dce915c","status":"passed","time":{"start":1731028362053,"stop":1731028382371,"duration":20318}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"9c17b787d6d4e1ab.json","parameterValues":["'nrf9160dk'","'zephyr'"]}