{"uid":"f126058dea3df883","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1732323806031,"stop":1732323899254,"duration":93223},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3fabbd0>\ndevice = <golioth.golioth.Device object at 0xffffa3fc6990>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732323775983,"stop":1732323775984,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732323775984,"stop":1732323775984,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732323775985,"stop":1732323775985,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732323775985,"stop":1732323775985,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732323775986,"stop":1732323775986,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732323775986,"stop":1732323775988,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732323775989,"stop":1732323775989,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732323775990,"stop":1732323775990,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732323775990,"stop":1732323776822,"duration":832},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732323776822,"stop":1732323777679,"duration":857},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732323777680,"stop":1732323804967,"duration":27287},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732323804967,"stop":1732323806028,"duration":1061},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3fabbd0>\ndevice = <golioth.golioth.Device object at 0xffffa3fc6990>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b51fc04bfc94d846","name":"log","source":"b51fc04bfc94d846.txt","type":"text/plain","size":17966}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732323899535,"stop":1732323899581,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732323899583,"stop":1732323900018,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732323900020,"stop":1732323900022,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732323900027,"stop":1732323900027,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a7a914f5ba0d"},{"name":"thread","value":"622-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":11,"skipped":0,"passed":40,"unknown":0,"total":58},"items":[{"uid":"8b5204abe2b06f0a","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/8b5204abe2b06f0a","status":"passed","time":{"start":1732310683267,"stop":1732310713410,"duration":30143}},{"uid":"4bb11c7402680f6c","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/4bb11c7402680f6c","status":"passed","time":{"start":1732307585695,"stop":1732307641220,"duration":55525}},{"uid":"90209a2a4f95fbfd","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/90209a2a4f95fbfd","status":"passed","time":{"start":1732065800270,"stop":1732065852993,"duration":52723}},{"uid":"cb1a08a993451f4a","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/cb1a08a993451f4a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732060780751,"stop":1732060873903,"duration":93152}},{"uid":"401fc316b7809e61","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/401fc316b7809e61","status":"passed","time":{"start":1732038286202,"stop":1732038316663,"duration":30461}},{"uid":"c63a99a85c05bc84","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/c63a99a85c05bc84","status":"passed","time":{"start":1731979456185,"stop":1731979505742,"duration":49557}},{"uid":"88ae6998a6ea436b","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/88ae6998a6ea436b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731969235623,"stop":1731969268571,"duration":32948}},{"uid":"8f8d928d8492d377","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/8f8d928d8492d377","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731893208364,"stop":1731893301559,"duration":93195}},{"uid":"b7d95f0017668153","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/b7d95f0017668153","status":"passed","time":{"start":1731806849954,"stop":1731806903778,"duration":53824}},{"uid":"eaa710cb56734f5","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/eaa710cb56734f5","status":"passed","time":{"start":1731720592102,"stop":1731720621902,"duration":29800}},{"uid":"caca71aa7ebc5bad","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/caca71aa7ebc5bad","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731634158198,"stop":1731634158198,"duration":0}},{"uid":"59426ef754f33f09","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/59426ef754f33f09","status":"passed","time":{"start":1731609762330,"stop":1731609805367,"duration":43037}},{"uid":"ef58b10e0230045","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/ef58b10e0230045","status":"passed","time":{"start":1731568064746,"stop":1731568107373,"duration":42627}},{"uid":"41dea43aea9ceba","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/41dea43aea9ceba","status":"passed","time":{"start":1731547258149,"stop":1731547292669,"duration":34520}},{"uid":"7a559bba64479e92","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/7a559bba64479e92","status":"passed","time":{"start":1731461656464,"stop":1731461698198,"duration":41734}},{"uid":"b5c27e9ce2a87236","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/b5c27e9ce2a87236","status":"passed","time":{"start":1731374499896,"stop":1731374530142,"duration":30246}},{"uid":"ee5f3322529dbb2","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/ee5f3322529dbb2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731288069536,"stop":1731288162771,"duration":93235}},{"uid":"e55b59b50dd9def6","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/e55b59b50dd9def6","status":"passed","time":{"start":1731202045940,"stop":1731202075981,"duration":30041}},{"uid":"8e6c267a5cc9ff9","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/8e6c267a5cc9ff9","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731115599212,"stop":1731115599212,"duration":0}},{"uid":"f957bc2b760900d0","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/f957bc2b760900d0","status":"passed","time":{"start":1731028883905,"stop":1731028930576,"duration":46671}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f126058dea3df883.json","parameterValues":["'nrf9160dk'","'zephyr'"]}