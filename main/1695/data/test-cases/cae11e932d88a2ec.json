{"uid":"cae11e932d88a2ec","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"fa8c1766fb90779ba45428eac4722ac6","time":{"start":1729730145609,"stop":1729730157798,"duration":12189},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9497b050>\ndevice = <golioth.golioth.Device object at 0xffff9493e350>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9493e350>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729730088975,"stop":1729730088976,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1729730088976,"stop":1729730088977,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1729730088977,"stop":1729730088978,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1729730088978,"stop":1729730088978,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729730088979,"stop":1729730088979,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729730088980,"stop":1729730088980,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1729730088981,"stop":1729730088981,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1729730088981,"stop":1729730088981,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729730088982,"stop":1729730088982,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1729730088982,"stop":1729730088982,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729730088983,"stop":1729730088983,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729730088983,"stop":1729730088983,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729730088984,"stop":1729730089445,"duration":461},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1729730089446,"stop":1729730131260,"duration":41814},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729730131262,"stop":1729730132221,"duration":959},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1729730132221,"stop":1729730142330,"duration":10109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff9497b050>\ndevice = <golioth.golioth.Device object at 0xffff9493e350>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff9493e350>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"f8343028e5a14d7d","name":"stdout","source":"f8343028e5a14d7d.txt","type":"text/plain","size":3645}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1729730277305,"stop":1729730277305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729730277308,"stop":1729730277695,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1729730277698,"stop":1729730277699,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729730277701,"stop":1729730277703,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"c4c1dff20e3c"},{"name":"thread","value":"252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":18,"unknown":0,"total":21},"items":[{"uid":"84565f9bbe556ae2","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/84565f9bbe556ae2","status":"passed","time":{"start":1729643804522,"stop":1729643817042,"duration":12520}},{"uid":"2650d9c7e97b4cfd","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/2650d9c7e97b4cfd","status":"passed","time":{"start":1729557348785,"stop":1729557361309,"duration":12524}},{"uid":"f1f5b65ac4bc609a","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/f1f5b65ac4bc609a","status":"passed","time":{"start":1729470994824,"stop":1729471007069,"duration":12245}},{"uid":"a09dbaf83b39ca56","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/a09dbaf83b39ca56","status":"passed","time":{"start":1729384742483,"stop":1729384755013,"duration":12530}},{"uid":"a271caa2f71bc2d4","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/a271caa2f71bc2d4","status":"passed","time":{"start":1729368595232,"stop":1729368607396,"duration":12164}},{"uid":"7f797855dc1aa873","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/7f797855dc1aa873","status":"passed","time":{"start":1729361466174,"stop":1729361478431,"duration":12257}},{"uid":"5bc67334eb2c51ee","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/5bc67334eb2c51ee","status":"passed","time":{"start":1729298118259,"stop":1729298130483,"duration":12224}},{"uid":"62fc8f1595206030","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/62fc8f1595206030","status":"passed","time":{"start":1729211722309,"stop":1729211734545,"duration":12236}},{"uid":"fa0b74538f7c8481","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/fa0b74538f7c8481","status":"passed","time":{"start":1729202829276,"stop":1729202841884,"duration":12608}},{"uid":"61112df450cef580","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/61112df450cef580","status":"passed","time":{"start":1729129322964,"stop":1729129335229,"duration":12265}},{"uid":"5deaa15fae09ba68","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/5deaa15fae09ba68","status":"passed","time":{"start":1729109515462,"stop":1729109527613,"duration":12151}},{"uid":"161e19a7bb0311ba","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/161e19a7bb0311ba","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729038924265,"stop":1729038937558,"duration":13293}},{"uid":"af1b858ad94387f3","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/af1b858ad94387f3","status":"passed","time":{"start":1729025237769,"stop":1729025250623,"duration":12854}},{"uid":"1b54e398f2a3c129","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/1b54e398f2a3c129","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729007682727,"stop":1729007695693,"duration":12966}},{"uid":"93002134650ab009","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/93002134650ab009","status":"passed","time":{"start":1728952570271,"stop":1728952583250,"duration":12979}},{"uid":"26fa9ac410f471c4","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/26fa9ac410f471c4","status":"passed","time":{"start":1728866216948,"stop":1728866230076,"duration":13128}},{"uid":"f2d1ab5c7fcc32ca","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/f2d1ab5c7fcc32ca","status":"passed","time":{"start":1728779788655,"stop":1728779803021,"duration":14366}},{"uid":"4abe1417007425db","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/4abe1417007425db","status":"passed","time":{"start":1728693283883,"stop":1728693297091,"duration":13208}},{"uid":"bc1f8e5662b4c32d","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/bc1f8e5662b4c32d","status":"passed","time":{"start":1728667927729,"stop":1728667941473,"duration":13744}},{"uid":"b1377c50e3c460ea","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/b1377c50e3c460ea","status":"passed","time":{"start":1728662282030,"stop":1728662295020,"duration":12990}}]},"tags":["esp-idf","anyio","tims_orange_pi","esp32_devkitc_wrover_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"cae11e932d88a2ec.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}