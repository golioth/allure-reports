{"uid":"859a39a3845b9c4e","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"1c3f2c0d9c38a2f03a05e8ca5e7158fa","time":{"start":1729816357676,"stop":1729816371245,"duration":13569},"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa9d59490>\ndevice = <golioth.golioth.Device object at 0xffffa9cc0b10>\nproject = <golioth.golioth.Project object at 0xffffa9c67c90>\nreleases = {'test_blocks': Release <671ae71b990e7ed8707dfd0d, release_tags=[], device_tags=['671ae71a990e7ed8707dfd0a'], artifact..., release_tags=[], device_tags=['671ae71a990e7ed8707dfd0a'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729816286248,"stop":1729816286248,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1729816286249,"stop":1729816286249,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1729816286250,"stop":1729816286250,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1729816286250,"stop":1729816286250,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729816286251,"stop":1729816286251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729816286251,"stop":1729816286251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1729816286252,"stop":1729816286252,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1729816286252,"stop":1729816286252,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1729816286253,"stop":1729816286253,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729816286253,"stop":1729816286253,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729816286254,"stop":1729816286255,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729816286256,"stop":1729816286256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1729816286257,"stop":1729816338119,"duration":51862},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729816338121,"stop":1729816338599,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729816338600,"stop":1729816339535,"duration":935},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1729816339536,"stop":1729816345166,"duration":5630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1729816345168,"stop":1729816345634,"duration":466},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1729816345635,"stop":1729816346435,"duration":800},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1729816346436,"stop":1729816348105,"duration":1669},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1729816357673,"stop":1729816357674,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa9d59490>\ndevice = <golioth.golioth.Device object at 0xffffa9cc0b10>\nproject = <golioth.golioth.Project object at 0xffffa9c67c90>\nreleases = {'test_blocks': Release <671ae71b990e7ed8707dfd0d, release_tags=[], device_tags=['671ae71a990e7ed8707dfd0a'], artifact..., release_tags=[], device_tags=['671ae71a990e7ed8707dfd0a'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 1 == 0\nE            +  where 1 = int('1')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","steps":[],"attachments":[{"uid":"9e1be09a669f2109","name":"stdout","source":"9e1be09a669f2109.txt","type":"text/plain","size":1429}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1729816371300,"stop":1729816372257,"duration":957},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1729816372259,"stop":1729816373844,"duration":1585},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1729816373846,"stop":1729816374602,"duration":756},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1729816374604,"stop":1729816374605,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1729816374606,"stop":1729816374606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729816374608,"stop":1729816375086,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729816375089,"stop":1729816375089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1729816375091,"stop":1729816375094,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"d305fa8d4cfb"},{"name":"thread","value":"243-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":3,"skipped":0,"passed":12,"unknown":0,"total":21},"items":[{"uid":"a656a115b5e851fb","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/a656a115b5e851fb","status":"passed","time":{"start":1729729818594,"stop":1729729895729,"duration":77135}},{"uid":"34cf91f7e01aa4cf","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/34cf91f7e01aa4cf","status":"passed","time":{"start":1729645210329,"stop":1729645292432,"duration":82103}},{"uid":"21c8065bb8b08cbc","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/21c8065bb8b08cbc","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1729557161253,"stop":1729557181625,"duration":20372}},{"uid":"507945a507861ce","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/507945a507861ce","status":"passed","time":{"start":1729470732144,"stop":1729470812803,"duration":80659}},{"uid":"1ef8ad9f23ec0d73","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/1ef8ad9f23ec0d73","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1729384491985,"stop":1729384512353,"duration":20368}},{"uid":"6df4da3afecdaa24","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/6df4da3afecdaa24","status":"passed","time":{"start":1729368328296,"stop":1729368409617,"duration":81321}},{"uid":"42ad59587cf3abe8","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/42ad59587cf3abe8","status":"failed","statusDetails":"AssertionError: assert 1 == 5\n +  where 1 = len({'multi_artifact': Artifact <65f896d09b3bc69827b4cb21, package=walrus, version=0.4.2, blueprint=None>})","time":{"start":1729361261336,"stop":1729361261336,"duration":0}},{"uid":"bac8e50a0fba6bc1","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/bac8e50a0fba6bc1","status":"passed","time":{"start":1729297863146,"stop":1729297944263,"duration":81117}},{"uid":"dbab8830d3eaca11","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/dbab8830d3eaca11","status":"passed","time":{"start":1729211449487,"stop":1729211530585,"duration":81098}},{"uid":"1d4a61f036e28391","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/1d4a61f036e28391","status":"failed","statusDetails":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","time":{"start":1729202556247,"stop":1729202578333,"duration":22086}},{"uid":"7ceed66f4e47806","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/7ceed66f4e47806","status":"passed","time":{"start":1729109119142,"stop":1729109196069,"duration":76927}},{"uid":"809da104c17a996f","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/809da104c17a996f","status":"passed","time":{"start":1729038755090,"stop":1729038832340,"duration":77250}},{"uid":"b64687c359c5d58a","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/b64687c359c5d58a","status":"passed","time":{"start":1729024778003,"stop":1729024862811,"duration":84808}},{"uid":"b58eaa6c1ae99a15","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/b58eaa6c1ae99a15","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1729006847450,"stop":1729006919835,"duration":72385}},{"uid":"3eb1e6f511ced1fa","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/3eb1e6f511ced1fa","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1728952380612,"stop":1728952393318,"duration":12706}},{"uid":"9ce5c66b710e61f6","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/9ce5c66b710e61f6","status":"passed","time":{"start":1728866090132,"stop":1728866167013,"duration":76881}},{"uid":"180b64e5eee1ac14","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/180b64e5eee1ac14","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1728779654423,"stop":1728779667096,"duration":12673}},{"uid":"42960959fc39cb7a","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/42960959fc39cb7a","status":"passed","time":{"start":1728693121235,"stop":1728693198295,"duration":77060}},{"uid":"f9574f24ae21f669","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/f9574f24ae21f669","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1728667704119,"stop":1728667717238,"duration":13119}},{"uid":"ce483033489db18f","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/ce483033489db18f","status":"passed","time":{"start":1728662146664,"stop":1728662224249,"duration":77585}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"859a39a3845b9c4e.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}