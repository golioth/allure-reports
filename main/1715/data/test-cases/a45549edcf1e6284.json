{"uid":"a45549edcf1e6284","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"bb4a636b6b2082650c724d1259211759","time":{"start":1730768138024,"stop":1730768231188,"duration":93164},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff924e7ad0>\ndevice = <golioth.golioth.Device object at 0xffff924d9e90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730768128349,"stop":1730768128350,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730768128350,"stop":1730768128350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730768128351,"stop":1730768128352,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730768128351,"stop":1730768128351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730768128352,"stop":1730768128352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730768128353,"stop":1730768128355,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730768128355,"stop":1730768128356,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730768128356,"stop":1730768128356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730768128357,"stop":1730768128836,"duration":479},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730768128836,"stop":1730768129743,"duration":907},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730768129744,"stop":1730768137481,"duration":7737},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730768137481,"stop":1730768138021,"duration":540},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff924e7ad0>\ndevice = <golioth.golioth.Device object at 0xffff924d9e90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c49a08e5fe6f8aa0","name":"log","source":"c49a08e5fe6f8aa0.txt","type":"text/plain","size":17571}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730768231515,"stop":1730768231561,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730768231563,"stop":1730768231960,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730768231962,"stop":1730768231964,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730768231969,"stop":1730768231969,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"99ddaaaa443f"},{"name":"thread","value":"410-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":31,"unknown":0,"total":34},"items":[{"uid":"1f23892bd194d23b","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/1f23892bd194d23b","status":"passed","time":{"start":1730681338537,"stop":1730681368252,"duration":29715}},{"uid":"6a7bedbdc647a3ac","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/6a7bedbdc647a3ac","status":"passed","time":{"start":1730595707112,"stop":1730595735956,"duration":28844}},{"uid":"35f39c32690b5b7f","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/35f39c32690b5b7f","status":"passed","time":{"start":1730508965747,"stop":1730508993733,"duration":27986}},{"uid":"c3e4cacfbc6fbe73","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/c3e4cacfbc6fbe73","status":"passed","time":{"start":1730422650529,"stop":1730422679550,"duration":29021}},{"uid":"9434abcb92085ff2","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/9434abcb92085ff2","status":"passed","time":{"start":1730336332224,"stop":1730336365738,"duration":33514}},{"uid":"3962619b80b4ee8a","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/3962619b80b4ee8a","status":"passed","time":{"start":1730304846564,"stop":1730304876622,"duration":30058}},{"uid":"9bfb7f7c0d195483","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/9bfb7f7c0d195483","status":"passed","time":{"start":1730249908481,"stop":1730249938624,"duration":30143}},{"uid":"723a803cd02e6945","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/723a803cd02e6945","status":"passed","time":{"start":1730163427408,"stop":1730163456401,"duration":28993}},{"uid":"388e338991bc2b82","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/388e338991bc2b82","status":"passed","time":{"start":1730077185163,"stop":1730077214221,"duration":29058}},{"uid":"24dae3fc3c77d36","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/24dae3fc3c77d36","status":"passed","time":{"start":1729990720039,"stop":1729990749059,"duration":29020}},{"uid":"fc65836021545e7e","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/fc65836021545e7e","status":"passed","time":{"start":1729904178517,"stop":1729904206475,"duration":27958}},{"uid":"a6b201f793b94136","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/a6b201f793b94136","status":"passed","time":{"start":1729818032612,"stop":1729818062773,"duration":30161}},{"uid":"acb2465cd87cff87","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/acb2465cd87cff87","status":"passed","time":{"start":1729731456309,"stop":1729731485311,"duration":29002}},{"uid":"99b1cc8e03f90988","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/99b1cc8e03f90988","status":"passed","time":{"start":1729644928548,"stop":1729644957517,"duration":28969}},{"uid":"a486892650d8a876","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/a486892650d8a876","status":"passed","time":{"start":1729558727491,"stop":1729558757396,"duration":29905}},{"uid":"b1e4e8ddd806cc0b","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/b1e4e8ddd806cc0b","status":"passed","time":{"start":1729472236342,"stop":1729472265088,"duration":28746}},{"uid":"d0116f93d88bad89","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/d0116f93d88bad89","status":"passed","time":{"start":1729386094465,"stop":1729386122922,"duration":28457}},{"uid":"19805bf1766e84de","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/19805bf1766e84de","status":"passed","time":{"start":1729369762216,"stop":1729369791120,"duration":28904}},{"uid":"d6e14773f887b6d9","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/d6e14773f887b6d9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729362484494,"stop":1729362577680,"duration":93186}},{"uid":"6f5a5bd24ebb1fd6","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/6f5a5bd24ebb1fd6","status":"passed","time":{"start":1729299539643,"stop":1729299569393,"duration":29750}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"a45549edcf1e6284.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}