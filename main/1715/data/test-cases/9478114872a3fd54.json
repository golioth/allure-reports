{"uid":"9478114872a3fd54","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"bfe488b0ced6617e28e9fae7ab667d7b","time":{"start":1730768244933,"stop":1730768338081,"duration":93148},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8d637090>\ndevice = <golioth.golioth.Device object at 0xffff8d625110>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730768235255,"stop":1730768235255,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730768235256,"stop":1730768235256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730768235256,"stop":1730768235256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730768235257,"stop":1730768235257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730768235257,"stop":1730768235257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730768235258,"stop":1730768235260,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730768235261,"stop":1730768235261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730768235261,"stop":1730768235261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730768235262,"stop":1730768235695,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730768235695,"stop":1730768236602,"duration":907},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730768236603,"stop":1730768244409,"duration":7806},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730768244409,"stop":1730768244930,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8d637090>\ndevice = <golioth.golioth.Device object at 0xffff8d625110>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e0c05f236549fbdd","name":"log","source":"e0c05f236549fbdd.txt","type":"text/plain","size":18139}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730768338435,"stop":1730768338444,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730768338446,"stop":1730768338867,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730768338869,"stop":1730768338871,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730768338876,"stop":1730768338876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"99ddaaaa443f"},{"name":"thread","value":"429-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":32,"unknown":0,"total":34},"items":[{"uid":"1af2d0ba554cf7a6","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/1af2d0ba554cf7a6","status":"passed","time":{"start":1730681383374,"stop":1730681415152,"duration":31778}},{"uid":"8bf1547815260217","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/8bf1547815260217","status":"passed","time":{"start":1730595750686,"stop":1730595776163,"duration":25477}},{"uid":"c0a8be89769439d9","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/c0a8be89769439d9","status":"passed","time":{"start":1730509007255,"stop":1730509030701,"duration":23446}},{"uid":"bc1b8d1532b9e4cd","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/bc1b8d1532b9e4cd","status":"passed","time":{"start":1730422693137,"stop":1730422716633,"duration":23496}},{"uid":"df958d80aa9c8f80","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/df958d80aa9c8f80","status":"passed","time":{"start":1730336380199,"stop":1730336404425,"duration":24226}},{"uid":"11c3ef5ab195d4f1","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/11c3ef5ab195d4f1","status":"passed","time":{"start":1730304891580,"stop":1730304915494,"duration":23914}},{"uid":"efae078887289e75","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/efae078887289e75","status":"passed","time":{"start":1730249952756,"stop":1730249976516,"duration":23760}},{"uid":"6f706da3ba1880f5","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/6f706da3ba1880f5","status":"passed","time":{"start":1730163469892,"stop":1730163494223,"duration":24331}},{"uid":"fc038c88827ffe30","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/fc038c88827ffe30","status":"passed","time":{"start":1730077229590,"stop":1730077254014,"duration":24424}},{"uid":"f013536e36475425","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/f013536e36475425","status":"passed","time":{"start":1729990762491,"stop":1729990785930,"duration":23439}},{"uid":"9e0f18c1e25e093e","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/9e0f18c1e25e093e","status":"passed","time":{"start":1729904220036,"stop":1729904244442,"duration":24406}},{"uid":"d5e3b8f34d58fa34","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/d5e3b8f34d58fa34","status":"passed","time":{"start":1729818077914,"stop":1729818103205,"duration":25291}},{"uid":"c942411439fc4c42","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/c942411439fc4c42","status":"passed","time":{"start":1729731498714,"stop":1729731522102,"duration":23388}},{"uid":"de9a49dd71e19d23","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/de9a49dd71e19d23","status":"passed","time":{"start":1729644970723,"stop":1729644994986,"duration":24263}},{"uid":"5d45e6daccff5340","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/5d45e6daccff5340","status":"passed","time":{"start":1729558772372,"stop":1729558797736,"duration":25364}},{"uid":"eb969265d476ef59","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/eb969265d476ef59","status":"passed","time":{"start":1729472279058,"stop":1729472304160,"duration":25102}},{"uid":"b1876a647d711fb4","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/b1876a647d711fb4","status":"passed","time":{"start":1729386137313,"stop":1729386161560,"duration":24247}},{"uid":"6fda37fbb450f144","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/6fda37fbb450f144","status":"passed","time":{"start":1729369804555,"stop":1729369827915,"duration":23360}},{"uid":"d6af6593b2973f81","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/d6af6593b2973f81","status":"passed","time":{"start":1729362591324,"stop":1729362615613,"duration":24289}},{"uid":"97bb03c3119a2ffd","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/97bb03c3119a2ffd","status":"passed","time":{"start":1729299583531,"stop":1729299607862,"duration":24331}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"9478114872a3fd54.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}