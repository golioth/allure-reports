{"uid":"1a06e83c3ca327e1","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1732671403838,"stop":1732671516555,"duration":112717},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffba160310>\ndevice = <golioth.golioth.Device object at 0xffffba163290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732671374764,"stop":1732671374764,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732671374765,"stop":1732671374765,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732671374765,"stop":1732671374765,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732671374766,"stop":1732671374766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732671374766,"stop":1732671374766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732671374767,"stop":1732671374769,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732671374770,"stop":1732671374771,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732671374770,"stop":1732671374770,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732671374771,"stop":1732671375178,"duration":407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732671375179,"stop":1732671376096,"duration":917},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732671376097,"stop":1732671402769,"duration":26672},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732671402769,"stop":1732671403831,"duration":1062},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffba160310>\ndevice = <golioth.golioth.Device object at 0xffffba163290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"de187fa359a153fe","name":"log","source":"de187fa359a153fe.txt","type":"text/plain","size":15797}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732671516831,"stop":1732671516874,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732671516876,"stop":1732671517268,"duration":392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732671517270,"stop":1732671517272,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732671517277,"stop":1732671517277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"0b6f20b184e7"},{"name":"thread","value":"973-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"597fe46ba9cd126d","status":"passed","time":{"start":1732671324181,"stop":1732671370850,"duration":46669}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":11,"skipped":0,"passed":56,"unknown":0,"total":68},"items":[{"uid":"9297c362ce33452d","reportUrl":"https://golioth.github.io/allure-reports/main/1845//#testresult/9297c362ce33452d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732645554048,"stop":1732645666787,"duration":112739}},{"uid":"591ada11a75bf48e","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/591ada11a75bf48e","status":"passed","time":{"start":1732570192269,"stop":1732570216606,"duration":24337}},{"uid":"cefb11017a26dcb1","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/cefb11017a26dcb1","status":"passed","time":{"start":1732570192269,"stop":1732570216606,"duration":24337}},{"uid":"a6961a2ed15273f3","reportUrl":"https://golioth.github.io/allure-reports/main/1843//#testresult/a6961a2ed15273f3","status":"passed","time":{"start":1732585015834,"stop":1732585061435,"duration":45601}},{"uid":"7c5c3bb0253f3fc","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/7c5c3bb0253f3fc","status":"passed","time":{"start":1732570192269,"stop":1732570216606,"duration":24337}},{"uid":"7ad791ebac6790ac","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/7ad791ebac6790ac","status":"passed","time":{"start":1732570192269,"stop":1732570216606,"duration":24337}},{"uid":"b8b585ccef1c342a","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/b8b585ccef1c342a","status":"passed","time":{"start":1732570192269,"stop":1732570216606,"duration":24337}},{"uid":"92215d2488e6b9d3","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/92215d2488e6b9d3","status":"passed","time":{"start":1732499009170,"stop":1732499034071,"duration":24901}},{"uid":"754aeb31f4d01db","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/754aeb31f4d01db","status":"passed","time":{"start":1732412390780,"stop":1732412415342,"duration":24562}},{"uid":"6354eb22df6c035c","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/6354eb22df6c035c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732327403278,"stop":1732327516057,"duration":112779}},{"uid":"476a3f82dc36aa03","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/476a3f82dc36aa03","status":"passed","time":{"start":1732324405707,"stop":1732324461832,"duration":56125}},{"uid":"cf9499786def63d2","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/cf9499786def63d2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732311215832,"stop":1732311328622,"duration":112790}},{"uid":"c09edfd255d8ea0d","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/c09edfd255d8ea0d","status":"passed","time":{"start":1732308248341,"stop":1732308302858,"duration":54517}},{"uid":"7923c7bd20ef0956","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/7923c7bd20ef0956","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732066423929,"stop":1732066536798,"duration":112869}},{"uid":"102d7a6536c94009","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/102d7a6536c94009","status":"passed","time":{"start":1732061419438,"stop":1732061468271,"duration":48833}},{"uid":"fa6d385ec098f69b","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/fa6d385ec098f69b","status":"passed","time":{"start":1732038660530,"stop":1732038684878,"duration":24348}},{"uid":"e78100dc6ac9e7fb","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/e78100dc6ac9e7fb","status":"passed","time":{"start":1731980191658,"stop":1731980241036,"duration":49378}},{"uid":"993ac6c9cd0a380a","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/993ac6c9cd0a380a","status":"passed","time":{"start":1731969803459,"stop":1731969848738,"duration":45279}},{"uid":"78677d31035fc41","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/78677d31035fc41","status":"passed","time":{"start":1731893849955,"stop":1731893893319,"duration":43364}},{"uid":"f2ec452edade8534","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/f2ec452edade8534","status":"passed","time":{"start":1731807470373,"stop":1731807527286,"duration":56913}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1a06e83c3ca327e1.json","parameterValues":["'nrf9160dk'","'zephyr'"]}