{
  "uid" : "7fa693b45dd7a1cc",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "b2900ea6ee9c25336d02db93f859b162",
  "time" : {
    "start" : 1734395434618,
    "stop" : 1734395451382,
    "duration" : 16764
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0ad7bb10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0790>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb06d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0ad0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb1650>])",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0x7fcb0ac96950>\ndevice = <golioth.golioth.Device object at 0x7fcb0ac83d90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0ad7bb10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0790>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb06d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0ad0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb1650>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734395433786,
      "stop" : 1734395433786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734395434601,
      "stop" : 1734395434617,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734395433786,
      "stop" : 1734395433786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734395433786,
      "stop" : 1734395433786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734395433786,
      "stop" : 1734395433786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734395433786,
      "stop" : 1734395433786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734395433786,
      "stop" : 1734395433787,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734395433787,
      "stop" : 1734395433787,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734395434048,
      "stop" : 1734395434598,
      "duration" : 550
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734395434598,
      "stop" : 1734395434601,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734395433787,
      "stop" : 1734395434047,
      "duration" : 260
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734395433787,
      "stop" : 1734395433787,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0ad7bb10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0790>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb06d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0ad0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb1650>])",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0x7fcb0ac96950>\ndevice = <golioth.golioth.Device object at 0x7fcb0ac83d90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0ad7bb10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0790>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb06d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0ad0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb0210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fcb0acb1650>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f3cfbce82ce8f94d",
      "name" : "log",
      "source" : "f3cfbce82ce8f94d.txt",
      "type" : "text/plain",
      "size" : 17241
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734395452529,
      "stop" : 1734395452529,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734395452176,
      "stop" : 1734395452527,
      "duration" : 351
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734395451646,
      "stop" : 1734395452175,
      "duration" : 529
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734395452528,
      "stop" : 1734395452528,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "native_sim_32"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.native_sim_32"
  }, {
    "name" : "tag",
    "value" : "GitHub Actions 45"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "df83c67f6b4c"
  }, {
    "name" : "thread",
    "value" : "51426-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'native_sim_32'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 11,
        "unknown" : 0,
        "total" : 12
      },
      "items" : [ {
        "uid" : "263d091661387588",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1935/#testresult/263d091661387588",
        "status" : "passed",
        "time" : {
          "start" : 1734309099791,
          "stop" : 1734309116490,
          "duration" : 16699
        }
      }, {
        "uid" : "3237ca55b12d7912",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1934/#testresult/3237ca55b12d7912",
        "status" : "passed",
        "time" : {
          "start" : 1734222796761,
          "stop" : 1734222813512,
          "duration" : 16751
        }
      }, {
        "uid" : "9291e90169fc5703",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1933/#testresult/9291e90169fc5703",
        "status" : "passed",
        "time" : {
          "start" : 1734136250984,
          "stop" : 1734136267763,
          "duration" : 16779
        }
      }, {
        "uid" : "d7e3015269bd1610",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1930/#testresult/d7e3015269bd1610",
        "status" : "passed",
        "time" : {
          "start" : 1734116845972,
          "stop" : 1734116862557,
          "duration" : 16585
        }
      }, {
        "uid" : "b73f174e101a7ffa",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1929/#testresult/b73f174e101a7ffa",
        "status" : "passed",
        "time" : {
          "start" : 1734049847748,
          "stop" : 1734049863995,
          "duration" : 16247
        }
      }, {
        "uid" : "e7acab8714f8f52d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1924/#testresult/e7acab8714f8f52d",
        "status" : "passed",
        "time" : {
          "start" : 1734024052651,
          "stop" : 1734024069156,
          "duration" : 16505
        }
      }, {
        "uid" : "c58165276ba49f3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1910/#testresult/c58165276ba49f3",
        "status" : "passed",
        "time" : {
          "start" : 1733995054605,
          "stop" : 1733995071115,
          "duration" : 16510
        }
      }, {
        "uid" : "acd031e427dfc2d4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1909/#testresult/acd031e427dfc2d4",
        "status" : "passed",
        "time" : {
          "start" : 1733963440595,
          "stop" : 1733963457296,
          "duration" : 16701
        }
      }, {
        "uid" : "dac44f6981fc4459",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1906/#testresult/dac44f6981fc4459",
        "status" : "passed",
        "time" : {
          "start" : 1733944899385,
          "stop" : 1733944915801,
          "duration" : 16416
        }
      }, {
        "uid" : "c1b72d2bd45d949c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1894/#testresult/c1b72d2bd45d949c",
        "status" : "passed",
        "time" : {
          "start" : 1733877042485,
          "stop" : 1733877059225,
          "duration" : 16740
        }
      }, {
        "uid" : "c433904531e45bfb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1885/#testresult/c433904531e45bfb",
        "status" : "passed",
        "time" : {
          "start" : 1733853177594,
          "stop" : 1733853194423,
          "duration" : 16829
        }
      } ]
    },
    "tags" : [ "GitHub Actions 45", "anyio", "native_sim_32", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "7fa693b45dd7a1cc.json",
  "parameterValues" : [ "'native_sim_32'", "'zephyr'" ]
}