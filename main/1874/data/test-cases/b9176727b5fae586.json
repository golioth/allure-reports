{
  "uid" : "b9176727b5fae586",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "a8632ecd3cd3b3c347c26a5269c4b5ab",
  "time" : {
    "start" : 1733534898896,
    "stop" : 1733534992030,
    "duration" : 93134
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8adff850>\ndevice = <golioth.golioth.Device object at 0xffff8ae1a7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_url",
    "time" : {
      "start" : 1733534869456,
      "stop" : 1733534869456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733534869883,
      "stop" : 1733534870805,
      "duration" : 922
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733534869450,
      "stop" : 1733534869450,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733534869456,
      "stop" : 1733534869456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733534869451,
      "stop" : 1733534869451,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733534869452,
      "stop" : 1733534869452,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733534869450,
      "stop" : 1733534869451,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733534869452,
      "stop" : 1733534869452,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733534897778,
      "stop" : 1733534898893,
      "duration" : 1115
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733534869453,
      "stop" : 1733534869455,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733534869457,
      "stop" : 1733534869883,
      "duration" : 426
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733534870806,
      "stop" : 1733534897777,
      "duration" : 26971
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8adff850>\ndevice = <golioth.golioth.Device object at 0xffff8ae1a7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f12957603a296c15",
      "name" : "log",
      "source" : "f12957603a296c15.txt",
      "type" : "text/plain",
      "size" : 16449
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1733534992358,
      "stop" : 1733534992750,
      "duration" : 392
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733534992759,
      "stop" : 1733534992759,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733534992752,
      "stop" : 1733534992754,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733534992311,
      "stop" : 1733534992356,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "782c2fa36207"
  }, {
    "name" : "thread",
    "value" : "648-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 7,
        "broken" : 17,
        "skipped" : 0,
        "passed" : 56,
        "unknown" : 0,
        "total" : 80
      },
      "items" : [ {
        "uid" : "8c2b854922b25754",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/8c2b854922b25754",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733411695870,
          "stop" : 1733411789099,
          "duration" : 93229
        }
      }, {
        "uid" : "faba7ec1bc4ea6a3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/faba7ec1bc4ea6a3",
        "status" : "passed",
        "time" : {
          "start" : 1733362155989,
          "stop" : 1733362186139,
          "duration" : 30150
        }
      }, {
        "uid" : "8b3872be2f77c412",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/8b3872be2f77c412",
        "status" : "passed",
        "time" : {
          "start" : 1733275576916,
          "stop" : 1733275607024,
          "duration" : 30108
        }
      }, {
        "uid" : "bd8ca0d83af1136b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/bd8ca0d83af1136b",
        "status" : "passed",
        "time" : {
          "start" : 1733189388583,
          "stop" : 1733189442322,
          "duration" : 53739
        }
      }, {
        "uid" : "dab73f77852dc2a0",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/dab73f77852dc2a0",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733164264361,
          "stop" : 1733164357593,
          "duration" : 93232
        }
      }, {
        "uid" : "5dba617e6de6ab5d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/5dba617e6de6ab5d",
        "status" : "passed",
        "time" : {
          "start" : 1733103068735,
          "stop" : 1733103099447,
          "duration" : 30712
        }
      }, {
        "uid" : "5a1396ddb443d52f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/5a1396ddb443d52f",
        "status" : "passed",
        "time" : {
          "start" : 1733016716139,
          "stop" : 1733016745845,
          "duration" : 29706
        }
      }, {
        "uid" : "93e26f1c4ac05f1e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/93e26f1c4ac05f1e",
        "status" : "passed",
        "time" : {
          "start" : 1732929881695,
          "stop" : 1732929912086,
          "duration" : 30391
        }
      }, {
        "uid" : "c37ab30cab404839",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/c37ab30cab404839",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732843492515,
          "stop" : 1732843585638,
          "duration" : 93123
        }
      }, {
        "uid" : "e1c307a822f2ddf4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/e1c307a822f2ddf4",
        "status" : "passed",
        "time" : {
          "start" : 1732757860589,
          "stop" : 1732757925745,
          "duration" : 65156
        }
      }, {
        "uid" : "a768df1268bf6546",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/a768df1268bf6546",
        "status" : "passed",
        "time" : {
          "start" : 1732670870479,
          "stop" : 1732670916436,
          "duration" : 45957
        }
      }, {
        "uid" : "d2541d524f4d8640",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/d2541d524f4d8640",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732644744465,
          "stop" : 1732644837553,
          "duration" : 93088
        }
      }, {
        "uid" : "d5d60f35e842c9ea",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/d5d60f35e842c9ea",
        "status" : "passed",
        "time" : {
          "start" : 1732569734170,
          "stop" : 1732569765244,
          "duration" : 31074
        }
      }, {
        "uid" : "be33ec2aa860525",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/be33ec2aa860525",
        "status" : "passed",
        "time" : {
          "start" : 1732569734170,
          "stop" : 1732569765244,
          "duration" : 31074
        }
      }, {
        "uid" : "6abdbea013d9f5ea",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1843//#testresult/6abdbea013d9f5ea",
        "status" : "passed",
        "time" : {
          "start" : 1732584370064,
          "stop" : 1732584417475,
          "duration" : 47411
        }
      }, {
        "uid" : "9a0b71588fba614a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/9a0b71588fba614a",
        "status" : "passed",
        "time" : {
          "start" : 1732569734170,
          "stop" : 1732569765244,
          "duration" : 31074
        }
      }, {
        "uid" : "b3c9a79f699876d8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/b3c9a79f699876d8",
        "status" : "passed",
        "time" : {
          "start" : 1732569734170,
          "stop" : 1732569765244,
          "duration" : 31074
        }
      }, {
        "uid" : "4fed8411a23c0126",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/4fed8411a23c0126",
        "status" : "passed",
        "time" : {
          "start" : 1732569734170,
          "stop" : 1732569765244,
          "duration" : 31074
        }
      }, {
        "uid" : "2a35173c0c1ff16d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1838//#testresult/2a35173c0c1ff16d",
        "status" : "passed",
        "time" : {
          "start" : 1732498541762,
          "stop" : 1732498571500,
          "duration" : 29738
        }
      }, {
        "uid" : "95427814a5123f06",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1837//#testresult/95427814a5123f06",
        "status" : "passed",
        "time" : {
          "start" : 1732412010633,
          "stop" : 1732412040726,
          "duration" : 30093
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "b9176727b5fae586.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}