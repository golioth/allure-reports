{
  "uid" : "e4bfe4f26c7558e1",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "1ec1936b7990a0542c6cd1098cc4bb62",
  "time" : {
    "start" : 1733535278186,
    "stop" : 1733535371513,
    "duration" : 93327
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff905c3d50>\ndevice = <golioth.golioth.Device object at 0xffff905d9f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733535249143,
      "stop" : 1733535249143,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733535277065,
      "stop" : 1733535278179,
      "duration" : 1114
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733535249148,
      "stop" : 1733535249148,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733535249143,
      "stop" : 1733535249143,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733535249142,
      "stop" : 1733535249142,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733535249145,
      "stop" : 1733535249147,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733535249144,
      "stop" : 1733535249144,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733535249573,
      "stop" : 1733535250393,
      "duration" : 820
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733535250394,
      "stop" : 1733535277065,
      "duration" : 26671
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733535249149,
      "stop" : 1733535249572,
      "duration" : 423
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733535249144,
      "stop" : 1733535249144,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733535249148,
      "stop" : 1733535249148,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff905c3d50>\ndevice = <golioth.golioth.Device object at 0xffff905d9f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ed7f2daaf0ee376e",
      "name" : "log",
      "source" : "ed7f2daaf0ee376e.txt",
      "type" : "text/plain",
      "size" : 16456
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733535372284,
      "stop" : 1733535372284,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733535371877,
      "stop" : 1733535372275,
      "duration" : 398
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733535371867,
      "stop" : 1733535371875,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733535372277,
      "stop" : 1733535372279,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "782c2fa36207"
  }, {
    "name" : "thread",
    "value" : "795-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 16,
        "skipped" : 0,
        "passed" : 64,
        "unknown" : 0,
        "total" : 80
      },
      "items" : [ {
        "uid" : "5db783488e6e98bc",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/5db783488e6e98bc",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733412075753,
          "stop" : 1733412169068,
          "duration" : 93315
        }
      }, {
        "uid" : "9c83b0c96e532ac9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/9c83b0c96e532ac9",
        "status" : "passed",
        "time" : {
          "start" : 1733362327611,
          "stop" : 1733362339708,
          "duration" : 12097
        }
      }, {
        "uid" : "957546edb5036e95",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/957546edb5036e95",
        "status" : "passed",
        "time" : {
          "start" : 1733275748950,
          "stop" : 1733275759170,
          "duration" : 10220
        }
      }, {
        "uid" : "369a8f4499343391",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/369a8f4499343391",
        "status" : "passed",
        "time" : {
          "start" : 1733189610007,
          "stop" : 1733189634594,
          "duration" : 24587
        }
      }, {
        "uid" : "55e2a6a0d76e512c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/55e2a6a0d76e512c",
        "status" : "passed",
        "time" : {
          "start" : 1733164578090,
          "stop" : 1733164607399,
          "duration" : 29309
        }
      }, {
        "uid" : "3b9d23150ab742d4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/3b9d23150ab742d4",
        "status" : "passed",
        "time" : {
          "start" : 1733103239274,
          "stop" : 1733103250722,
          "duration" : 11448
        }
      }, {
        "uid" : "a2dd3df8c02113c4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/a2dd3df8c02113c4",
        "status" : "passed",
        "time" : {
          "start" : 1733016886930,
          "stop" : 1733016898711,
          "duration" : 11781
        }
      }, {
        "uid" : "575e53fd234a5fe",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/575e53fd234a5fe",
        "status" : "passed",
        "time" : {
          "start" : 1732930051479,
          "stop" : 1732930061960,
          "duration" : 10481
        }
      }, {
        "uid" : "e0e817f061bff9e0",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/e0e817f061bff9e0",
        "status" : "passed",
        "time" : {
          "start" : 1732843769385,
          "stop" : 1732843802643,
          "duration" : 33258
        }
      }, {
        "uid" : "a9b0a315fabfb613",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/a9b0a315fabfb613",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732757433471,
          "stop" : 1732757526611,
          "duration" : 93140
        }
      }, {
        "uid" : "49dbca97daf42ad0",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/49dbca97daf42ad0",
        "status" : "passed",
        "time" : {
          "start" : 1732671143252,
          "stop" : 1732671162320,
          "duration" : 19068
        }
      }, {
        "uid" : "c30b9ab40d7c9999",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/c30b9ab40d7c9999",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732645014922,
          "stop" : 1732645108149,
          "duration" : 93227
        }
      }, {
        "uid" : "a1db0aab9d098d45",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/a1db0aab9d098d45",
        "status" : "passed",
        "time" : {
          "start" : 1732569909678,
          "stop" : 1732569920697,
          "duration" : 11019
        }
      }, {
        "uid" : "cc39b61c12d96d5e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/cc39b61c12d96d5e",
        "status" : "passed",
        "time" : {
          "start" : 1732569909678,
          "stop" : 1732569920697,
          "duration" : 11019
        }
      }, {
        "uid" : "24b6eab510d9e733",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1843//#testresult/24b6eab510d9e733",
        "status" : "passed",
        "time" : {
          "start" : 1732584662585,
          "stop" : 1732584689807,
          "duration" : 27222
        }
      }, {
        "uid" : "9e7a265029301080",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/9e7a265029301080",
        "status" : "passed",
        "time" : {
          "start" : 1732569909678,
          "stop" : 1732569920697,
          "duration" : 11019
        }
      }, {
        "uid" : "30911b9184f0e25d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/30911b9184f0e25d",
        "status" : "passed",
        "time" : {
          "start" : 1732569909678,
          "stop" : 1732569920697,
          "duration" : 11019
        }
      }, {
        "uid" : "72ebf8cdfa6e13d3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/72ebf8cdfa6e13d3",
        "status" : "passed",
        "time" : {
          "start" : 1732569909678,
          "stop" : 1732569920697,
          "duration" : 11019
        }
      }, {
        "uid" : "ee820a67713992d9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1838//#testresult/ee820a67713992d9",
        "status" : "passed",
        "time" : {
          "start" : 1732498718610,
          "stop" : 1732498730885,
          "duration" : 12275
        }
      }, {
        "uid" : "67b5871051626a69",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1837//#testresult/67b5871051626a69",
        "status" : "passed",
        "time" : {
          "start" : 1732412180331,
          "stop" : 1732412191862,
          "duration" : 11531
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "e4bfe4f26c7558e1.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}