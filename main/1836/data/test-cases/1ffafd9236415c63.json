{"uid":"1ffafd9236415c63","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1732326659811,"stop":1732326753056,"duration":93245},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa1fecd90>\ndevice = <golioth.golioth.Device object at 0xffffa2006110>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732326630111,"stop":1732326630111,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_psk","time":{"start":1732326630112,"stop":1732326630113,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_ssid","time":{"start":1732326630112,"stop":1732326630112,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_name","time":{"start":1732326630113,"stop":1732326630113,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"twister_harness_config","time":{"start":1732326630114,"stop":1732326630114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object","time":{"start":1732326630114,"stop":1732326630116,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_key","time":{"start":1732326630117,"stop":1732326630117,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_url","time":{"start":1732326630117,"stop":1732326630118,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project","time":{"start":1732326630118,"stop":1732326630586,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device","time":{"start":1732326630587,"stop":1732326631469,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"dut","time":{"start":1732326631470,"stop":1732326658754,"duration":27284},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"shell","time":{"start":1732326658754,"stop":1732326659808,"duration":1054},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa1fecd90>\ndevice = <golioth.golioth.Device object at 0xffffa2006110>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"803fefbad0b8550b","name":"log","source":"803fefbad0b8550b.txt","type":"text/plain","size":16448}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"dut::0","time":{"start":1732326753338,"stop":1732326753382,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device::0","time":{"start":1732326753384,"stop":1732326753791,"duration":407},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project::0","time":{"start":1732326753793,"stop":1732326753796,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object::0","time":{"start":1732326753800,"stop":1732326753801,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"dd5ed99db3de"},{"name":"thread","value":"671-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":53,"unknown":0,"total":59},"items":[{"uid":"4e9fd7cc615fd4cd","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/4e9fd7cc615fd4cd","status":"passed","time":{"start":1732323932834,"stop":1732323966486,"duration":33652}},{"uid":"38dd5813c51a47e1","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/38dd5813c51a47e1","status":"passed","time":{"start":1732310746399,"stop":1732310771051,"duration":24652}},{"uid":"8d3ad8968e019c79","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/8d3ad8968e019c79","status":"passed","time":{"start":1732307674647,"stop":1732307707602,"duration":32955}},{"uid":"c0ef7ca98dd1cf59","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/c0ef7ca98dd1cf59","status":"passed","time":{"start":1732065886398,"stop":1732065935073,"duration":48675}},{"uid":"a37a5e5e9df02dbf","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/a37a5e5e9df02dbf","status":"passed","time":{"start":1732060906922,"stop":1732060953499,"duration":46577}},{"uid":"290634222f7c9ebf","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/290634222f7c9ebf","status":"passed","time":{"start":1732038349147,"stop":1732038375102,"duration":25955}},{"uid":"bcc3d0739161635e","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/bcc3d0739161635e","status":"passed","time":{"start":1731979539092,"stop":1731979577463,"duration":38371}},{"uid":"97ee0f388683583","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/97ee0f388683583","status":"passed","time":{"start":1731969302100,"stop":1731969351759,"duration":49659}},{"uid":"c2fcbb8f6121c0d0","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/c2fcbb8f6121c0d0","status":"passed","time":{"start":1731893334981,"stop":1731893375282,"duration":40301}},{"uid":"77f3f92378c38422","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/77f3f92378c38422","status":"passed","time":{"start":1731806937222,"stop":1731806982368,"duration":45146}},{"uid":"c4af489311b58191","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/c4af489311b58191","status":"passed","time":{"start":1731720654490,"stop":1731720679379,"duration":24889}},{"uid":"75b4b8a4003945da","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/75b4b8a4003945da","status":"passed","time":{"start":1731634239827,"stop":1731634281450,"duration":41623}},{"uid":"9036f2fe30010861","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/9036f2fe30010861","status":"passed","time":{"start":1731609838376,"stop":1731609865647,"duration":27271}},{"uid":"b42009099bf185f0","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/b42009099bf185f0","status":"passed","time":{"start":1731568140844,"stop":1731568179150,"duration":38306}},{"uid":"119a55eb2a143f68","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/119a55eb2a143f68","status":"passed","time":{"start":1731547326460,"stop":1731547356790,"duration":30330}},{"uid":"80e85a9ce31c45a4","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/80e85a9ce31c45a4","status":"passed","time":{"start":1731461732057,"stop":1731461770282,"duration":38225}},{"uid":"d6bfa32785341ea6","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/d6bfa32785341ea6","status":"passed","time":{"start":1731374562940,"stop":1731374655758,"duration":92818}},{"uid":"f69e31be4260b463","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/f69e31be4260b463","status":"passed","time":{"start":1731288196154,"stop":1731288221196,"duration":25042}},{"uid":"e507056c0408f82b","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/e507056c0408f82b","status":"passed","time":{"start":1731202109035,"stop":1731202133687,"duration":24652}},{"uid":"f065d055250808f8","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/f065d055250808f8","status":"passed","time":{"start":1731115680468,"stop":1731115719441,"duration":38973}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1ffafd9236415c63.json","parameterValues":["'nrf9160dk'","'zephyr'"]}