{
  "uid" : "bc3d758513479f62",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello",
  "historyId" : "e124f10389952e3c52fb82b67fe5598b",
  "time" : {
    "start" : 1733411283730,
    "stop" : 1733411398392,
    "duration" : 114662
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff976de950>\ndevice = <golioth.golioth.Device object at 0xffff976f56d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff978577d0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "project",
    "time" : {
      "start" : 1733411254912,
      "stop" : 1733411255332,
      "duration" : 420
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733411255333,
      "stop" : 1733411256338,
      "duration" : 1005
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733411282624,
      "stop" : 1733411283723,
      "duration" : 1099
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733411254907,
      "stop" : 1733411254907,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733411254908,
      "stop" : 1733411254908,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733411256339,
      "stop" : 1733411282623,
      "duration" : 26284
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733411254908,
      "stop" : 1733411254910,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "build_conf",
    "time" : {
      "start" : 1733411254890,
      "stop" : 1733411254906,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733411254889,
      "stop" : 1733411254890,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733411254912,
      "stop" : 1733411254912,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733411254911,
      "stop" : 1733411254912,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff976de950>\ndevice = <golioth.golioth.Device object at 0xffff976f56d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff978577d0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "499e4c3e7c47e6e1",
      "name" : "log",
      "source" : "499e4c3e7c47e6e1.txt",
      "type" : "text/plain",
      "size" : 16467
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1733411399225,
      "stop" : 1733411399227,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733411398804,
      "stop" : 1733411399223,
      "duration" : 419
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733411398789,
      "stop" : 1733411398802,
      "duration" : 13
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733411399232,
      "stop" : 1733411399232,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "a80a9e23de49"
  }, {
    "name" : "thread",
    "value" : "498-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 13,
        "skipped" : 0,
        "passed" : 64,
        "unknown" : 0,
        "total" : 79
      },
      "items" : [ {
        "uid" : "c3069e73cb063d16",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/c3069e73cb063d16",
        "status" : "passed",
        "time" : {
          "start" : 1733361694081,
          "stop" : 1733361724724,
          "duration" : 30643
        }
      }, {
        "uid" : "ba92ede15be812f3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/ba92ede15be812f3",
        "status" : "passed",
        "time" : {
          "start" : 1733275145930,
          "stop" : 1733275175377,
          "duration" : 29447
        }
      }, {
        "uid" : "9cc505cb3add60ca",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/9cc505cb3add60ca",
        "status" : "passed",
        "time" : {
          "start" : 1733188910019,
          "stop" : 1733188950275,
          "duration" : 40256
        }
      }, {
        "uid" : "f224722734549be0",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/f224722734549be0",
        "status" : "passed",
        "time" : {
          "start" : 1733163754846,
          "stop" : 1733163802216,
          "duration" : 47370
        }
      }, {
        "uid" : "a9667efad0d8360e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/a9667efad0d8360e",
        "status" : "passed",
        "time" : {
          "start" : 1733102618800,
          "stop" : 1733102647800,
          "duration" : 29000
        }
      }, {
        "uid" : "40409bf2d85e9e87",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/40409bf2d85e9e87",
        "status" : "passed",
        "time" : {
          "start" : 1733016276805,
          "stop" : 1733016306500,
          "duration" : 29695
        }
      }, {
        "uid" : "7b41bf0dba2842c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/7b41bf0dba2842c",
        "status" : "passed",
        "time" : {
          "start" : 1732929430185,
          "stop" : 1732929460974,
          "duration" : 30789
        }
      }, {
        "uid" : "9600faa6faeba53b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/9600faa6faeba53b",
        "status" : "passed",
        "time" : {
          "start" : 1732843268382,
          "stop" : 1732843315986,
          "duration" : 47604
        }
      }, {
        "uid" : "5ae270c9ac54c7c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/5ae270c9ac54c7c",
        "status" : "passed",
        "time" : {
          "start" : 1732756753339,
          "stop" : 1732756791649,
          "duration" : 38310
        }
      }, {
        "uid" : "b72fd6bc9c2b9fe9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/b72fd6bc9c2b9fe9",
        "status" : "passed",
        "time" : {
          "start" : 1732670371494,
          "stop" : 1732670427005,
          "duration" : 55511
        }
      }, {
        "uid" : "3b43321f335b75a8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/3b43321f335b75a8",
        "status" : "passed",
        "time" : {
          "start" : 1732644460413,
          "stop" : 1732644504698,
          "duration" : 44285
        }
      }, {
        "uid" : "514b826045b33e34",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/514b826045b33e34",
        "status" : "passed",
        "time" : {
          "start" : 1732569280745,
          "stop" : 1732569310274,
          "duration" : 29529
        }
      }, {
        "uid" : "4a12e2ee4f5abdf9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/4a12e2ee4f5abdf9",
        "status" : "passed",
        "time" : {
          "start" : 1732569280745,
          "stop" : 1732569310274,
          "duration" : 29529
        }
      }, {
        "uid" : "9594eb6acb7e5036",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1843//#testresult/9594eb6acb7e5036",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732584024030,
          "stop" : 1732584137349,
          "duration" : 113319
        }
      }, {
        "uid" : "2a48bf33075fd600",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/2a48bf33075fd600",
        "status" : "passed",
        "time" : {
          "start" : 1732569280745,
          "stop" : 1732569310274,
          "duration" : 29529
        }
      }, {
        "uid" : "85005c4878bcaa86",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/85005c4878bcaa86",
        "status" : "passed",
        "time" : {
          "start" : 1732569280745,
          "stop" : 1732569310274,
          "duration" : 29529
        }
      }, {
        "uid" : "ca3ce9420fd3ca7b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/ca3ce9420fd3ca7b",
        "status" : "passed",
        "time" : {
          "start" : 1732569280745,
          "stop" : 1732569310274,
          "duration" : 29529
        }
      }, {
        "uid" : "ce2e99208b16a431",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1838//#testresult/ce2e99208b16a431",
        "status" : "passed",
        "time" : {
          "start" : 1732498012616,
          "stop" : 1732498065455,
          "duration" : 52839
        }
      }, {
        "uid" : "f4481fb9c7339257",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1837//#testresult/f4481fb9c7339257",
        "status" : "passed",
        "time" : {
          "start" : 1732411603034,
          "stop" : 1732411633211,
          "duration" : 30177
        }
      }, {
        "uid" : "6e27d901fafbee3e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1836//#testresult/6e27d901fafbee3e",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732326179466,
          "stop" : 1732326292718,
          "duration" : 113252
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "bc3d758513479f62.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}