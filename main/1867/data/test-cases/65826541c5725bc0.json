{
  "uid" : "65826541c5725bc0",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "c9ae6dc826a01d1d44d52fc2bf414310",
  "time" : {
    "start" : 1733410229520,
    "stop" : 1733410322710,
    "duration" : 93190
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8d217b10>\ndevice = <golioth.golioth.Device object at 0xffff8d1fac10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "shell",
    "time" : {
      "start" : 1733410228883,
      "stop" : 1733410229517,
      "duration" : 634
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733410215205,
      "stop" : 1733410215205,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733410215204,
      "stop" : 1733410215204,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733410215206,
      "stop" : 1733410215207,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733410215206,
      "stop" : 1733410215206,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733410216547,
      "stop" : 1733410228883,
      "duration" : 12336
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733410215205,
      "stop" : 1733410215205,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733410215207,
      "stop" : 1733410215209,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733410215210,
      "stop" : 1733410215210,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733410215633,
      "stop" : 1733410216546,
      "duration" : 913
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733410215211,
      "stop" : 1733410215632,
      "duration" : 421
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733410215210,
      "stop" : 1733410215210,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8d217b10>\ndevice = <golioth.golioth.Device object at 0xffff8d1fac10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "af56d62049b7b036",
      "name" : "log",
      "source" : "af56d62049b7b036.txt",
      "type" : "text/plain",
      "size" : 22164
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1733410323048,
      "stop" : 1733410323220,
      "duration" : 172
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733410323641,
      "stop" : 1733410323641,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733410323222,
      "stop" : 1733410323632,
      "duration" : 410
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733410323634,
      "stop" : 1733410323636,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "9dd98261d4b3"
  }, {
    "name" : "thread",
    "value" : "448-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 13,
        "skipped" : 0,
        "passed" : 73,
        "unknown" : 0,
        "total" : 86
      },
      "items" : [ {
        "uid" : "799bba8e760055a4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/799bba8e760055a4",
        "status" : "passed",
        "time" : {
          "start" : 1733360836083,
          "stop" : 1733360876047,
          "duration" : 39964
        }
      }, {
        "uid" : "64b937d286c67ec8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/64b937d286c67ec8",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733274274817,
          "stop" : 1733274368027,
          "duration" : 93210
        }
      }, {
        "uid" : "417971858ec6d06b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/417971858ec6d06b",
        "status" : "passed",
        "time" : {
          "start" : 1733188068790,
          "stop" : 1733188109879,
          "duration" : 41089
        }
      }, {
        "uid" : "41ffabf4b4086cc8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/41ffabf4b4086cc8",
        "status" : "passed",
        "time" : {
          "start" : 1733162938142,
          "stop" : 1733162978341,
          "duration" : 40199
        }
      }, {
        "uid" : "407fb024b6d151c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/407fb024b6d151c",
        "status" : "passed",
        "time" : {
          "start" : 1733101700104,
          "stop" : 1733101740121,
          "duration" : 40017
        }
      }, {
        "uid" : "6e234bf1ee73ad56",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/6e234bf1ee73ad56",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733015383113,
          "stop" : 1733015476204,
          "duration" : 93091
        }
      }, {
        "uid" : "9e8484900993ff30",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/9e8484900993ff30",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732928598286,
          "stop" : 1732928691467,
          "duration" : 93181
        }
      }, {
        "uid" : "57a4008ca20526a3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/57a4008ca20526a3",
        "status" : "passed",
        "time" : {
          "start" : 1732842363020,
          "stop" : 1732842403717,
          "duration" : 40697
        }
      }, {
        "uid" : "6d593c55e077ebde",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/6d593c55e077ebde",
        "status" : "passed",
        "time" : {
          "start" : 1732755995595,
          "stop" : 1732756035337,
          "duration" : 39742
        }
      }, {
        "uid" : "40a38f619824f2b3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/40a38f619824f2b3",
        "status" : "passed",
        "time" : {
          "start" : 1732669603857,
          "stop" : 1732669642741,
          "duration" : 38884
        }
      }, {
        "uid" : "b042a034490aa3d3",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/b042a034490aa3d3",
        "status" : "passed",
        "time" : {
          "start" : 1732643727925,
          "stop" : 1732643767677,
          "duration" : 39752
        }
      }, {
        "uid" : "4e8a8d9be64397d6",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/4e8a8d9be64397d6",
        "status" : "passed",
        "time" : {
          "start" : 1732638730589,
          "stop" : 1732638770555,
          "duration" : 39966
        }
      }, {
        "uid" : "ebd3b552e6d629cb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/ebd3b552e6d629cb",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732634434709,
          "stop" : 1732634527838,
          "duration" : 93129
        }
      }, {
        "uid" : "e0e45ba9b05debe7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1843//#testresult/e0e45ba9b05debe7",
        "status" : "passed",
        "time" : {
          "start" : 1732583153864,
          "stop" : 1732583194177,
          "duration" : 40313
        }
      }, {
        "uid" : "73c0c9dd2c844da",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/73c0c9dd2c844da",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732579495915,
          "stop" : 1732579589019,
          "duration" : 93104
        }
      }, {
        "uid" : "cedc96dde27b8bec",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/cedc96dde27b8bec",
        "status" : "passed",
        "time" : {
          "start" : 1732576195091,
          "stop" : 1732576234371,
          "duration" : 39280
        }
      }, {
        "uid" : "f3f18ea70c54e432",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/f3f18ea70c54e432",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732568421800,
          "stop" : 1732568514909,
          "duration" : 93109
        }
      }, {
        "uid" : "200ffc3ce27509d5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1838//#testresult/200ffc3ce27509d5",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732497047610,
          "stop" : 1732497140825,
          "duration" : 93215
        }
      }, {
        "uid" : "d742fd252de07047",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1837//#testresult/d742fd252de07047",
        "status" : "passed",
        "time" : {
          "start" : 1732410719014,
          "stop" : 1732410759154,
          "duration" : 40140
        }
      }, {
        "uid" : "8bca4ffd0c314ee6",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1836//#testresult/8bca4ffd0c314ee6",
        "status" : "passed",
        "time" : {
          "start" : 1732325458652,
          "stop" : 1732325498691,
          "duration" : 40039
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "65826541c5725bc0.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}