{"uid":"c30b9ab40d7c9999","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1732645014922,"stop":1732645108149,"duration":93227},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb966bad0>\ndevice = <golioth.golioth.Device object at 0xffffb96869d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732644985655,"stop":1732644985655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732644985656,"stop":1732644985656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732644985656,"stop":1732644985656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732644985657,"stop":1732644985657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732644985657,"stop":1732644985658,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732644985658,"stop":1732644985660,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732644985661,"stop":1732644985661,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732644985661,"stop":1732644985661,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732644985662,"stop":1732644986135,"duration":473},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732644986136,"stop":1732644987022,"duration":886},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732644987022,"stop":1732645013853,"duration":26831},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732645013853,"stop":1732645014914,"duration":1061},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb966bad0>\ndevice = <golioth.golioth.Device object at 0xffffb96869d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2018dad454fa9487","name":"log","source":"2018dad454fa9487.txt","type":"text/plain","size":16714}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732645108405,"stop":1732645108413,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732645108415,"stop":1732645108802,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732645108804,"stop":1732645108806,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732645108811,"stop":1732645108811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"97a77e091075"},{"name":"thread","value":"770-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":13,"skipped":0,"passed":55,"unknown":0,"total":68},"items":[{"uid":"a1db0aab9d098d45","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/a1db0aab9d098d45","status":"passed","time":{"start":1732569909678,"stop":1732569920697,"duration":11019}},{"uid":"cc39b61c12d96d5e","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/cc39b61c12d96d5e","status":"passed","time":{"start":1732569909678,"stop":1732569920697,"duration":11019}},{"uid":"24b6eab510d9e733","reportUrl":"https://golioth.github.io/allure-reports/main/1843//#testresult/24b6eab510d9e733","status":"passed","time":{"start":1732584662585,"stop":1732584689807,"duration":27222}},{"uid":"9e7a265029301080","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/9e7a265029301080","status":"passed","time":{"start":1732569909678,"stop":1732569920697,"duration":11019}},{"uid":"30911b9184f0e25d","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/30911b9184f0e25d","status":"passed","time":{"start":1732569909678,"stop":1732569920697,"duration":11019}},{"uid":"72ebf8cdfa6e13d3","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/72ebf8cdfa6e13d3","status":"passed","time":{"start":1732569909678,"stop":1732569920697,"duration":11019}},{"uid":"ee820a67713992d9","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/ee820a67713992d9","status":"passed","time":{"start":1732498718610,"stop":1732498730885,"duration":12275}},{"uid":"67b5871051626a69","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/67b5871051626a69","status":"passed","time":{"start":1732412180331,"stop":1732412191862,"duration":11531}},{"uid":"7ab29284e8288e19","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/7ab29284e8288e19","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732326913337,"stop":1732327006703,"duration":93366}},{"uid":"43de8bfa60c6586f","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/43de8bfa60c6586f","status":"passed","time":{"start":1732324073830,"stop":1732324093209,"duration":19379}},{"uid":"29842eb8527331da","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/29842eb8527331da","status":"passed","time":{"start":1732310853133,"stop":1732310865689,"duration":12556}},{"uid":"7c83d40c7ec85e91","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/7c83d40c7ec85e91","status":"passed","time":{"start":1732307808235,"stop":1732307831878,"duration":23643}},{"uid":"bfb0b72671187fa1","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/bfb0b72671187fa1","status":"passed","time":{"start":1732066026085,"stop":1732066058980,"duration":32895}},{"uid":"403de16e6fdbdc81","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/403de16e6fdbdc81","status":"passed","time":{"start":1732061059136,"stop":1732061092692,"duration":33556}},{"uid":"2f29f3e3e99c5c8f","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/2f29f3e3e99c5c8f","status":"passed","time":{"start":1732038456351,"stop":1732038466494,"duration":10143}},{"uid":"5ee6d570e4d9b74c","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/5ee6d570e4d9b74c","status":"passed","time":{"start":1731979668092,"stop":1731979688055,"duration":19963}},{"uid":"7cc6506288d5b4d","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/7cc6506288d5b4d","status":"passed","time":{"start":1731969453669,"stop":1731969482810,"duration":29141}},{"uid":"b2ce382a1ae0f317","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/b2ce382a1ae0f317","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731893471830,"stop":1731893564954,"duration":93124}},{"uid":"20a72052ebbf7d0","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/20a72052ebbf7d0","status":"passed","time":{"start":1731807141183,"stop":1731807161599,"duration":20416}},{"uid":"9de0838cc61c824","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/9de0838cc61c824","status":"passed","time":{"start":1731720761551,"stop":1731720773382,"duration":11831}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c30b9ab40d7c9999.json","parameterValues":["'nrf9160dk'","'zephyr'"]}