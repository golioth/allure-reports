{
  "uid" : "ff2509a381f4a79d",
  "name" : "test_lightdb_set",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set",
  "historyId" : "795cf1865df9980166e83af7545b18f1",
  "time" : {
    "start" : 1736192435275,
    "stop" : 1736192528290,
    "duration" : 93015
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff97c3f910>\ndevice = <golioth.golioth.Device object at 0xffff97c563d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_object",
    "time" : {
      "start" : 1736192405701,
      "stop" : 1736192405703,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736192405699,
      "stop" : 1736192405699,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736192406145,
      "stop" : 1736192407083,
      "duration" : 938
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736192405700,
      "stop" : 1736192405700,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736192405704,
      "stop" : 1736192405705,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736192405704,
      "stop" : 1736192405704,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736192405705,
      "stop" : 1736192406144,
      "duration" : 439
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736192407083,
      "stop" : 1736192434184,
      "duration" : 27101
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736192405698,
      "stop" : 1736192405698,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736192434185,
      "stop" : 1736192435272,
      "duration" : 1087
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736192405701,
      "stop" : 1736192405701,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736192405699,
      "stop" : 1736192405700,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff97c3f910>\ndevice = <golioth.golioth.Device object at 0xffff97c563d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8b2fda7a1f7542c5",
      "name" : "log",
      "source" : "8b2fda7a1f7542c5.txt",
      "type" : "text/plain",
      "size" : 17966
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736192529002,
      "stop" : 1736192529002,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736192528619,
      "stop" : 1736192528993,
      "duration" : 374
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736192528995,
      "stop" : 1736192528997,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736192528573,
      "stop" : 1736192528617,
      "duration" : 44
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "58eaf994badc"
  }, {
    "name" : "thread",
    "value" : "721-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "a8d71ce07a0e2d1",
      "status" : "passed",
      "time" : {
        "start" : 1736190553399,
        "stop" : 1736190579040,
        "duration" : 25641
      }
    }, {
      "uid" : "50dca1ad8c1bfbf6",
      "status" : "passed",
      "time" : {
        "start" : 1736185963407,
        "stop" : 1736186000449,
        "duration" : 37042
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 34,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "b0d592f1a1e3ed39",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/b0d592f1a1e3ed39",
        "status" : "passed",
        "time" : {
          "start" : 1736190553399,
          "stop" : 1736190579040,
          "duration" : 25641
        }
      }, {
        "uid" : "ad8a0325c0a9b7f7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/ad8a0325c0a9b7f7",
        "status" : "passed",
        "time" : {
          "start" : 1736185963407,
          "stop" : 1736186000449,
          "duration" : 37042
        }
      }, {
        "uid" : "ca9ef3820a058892",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/17/#testresult/ca9ef3820a058892",
        "status" : "passed",
        "time" : {
          "start" : 1736126257971,
          "stop" : 1736126299954,
          "duration" : 41983
        }
      }, {
        "uid" : "c21cde94dd886b6a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/16/#testresult/c21cde94dd886b6a",
        "status" : "passed",
        "time" : {
          "start" : 1736039814853,
          "stop" : 1736039843325,
          "duration" : 28472
        }
      }, {
        "uid" : "9ecba1ebe54324c9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/15/#testresult/9ecba1ebe54324c9",
        "status" : "passed",
        "time" : {
          "start" : 1735954154306,
          "stop" : 1735954196262,
          "duration" : 41956
        }
      }, {
        "uid" : "8b18738ccad50f0f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/8/#testresult/8b18738ccad50f0f",
        "status" : "passed",
        "time" : {
          "start" : 1735868742185,
          "stop" : 1735868779248,
          "duration" : 37063
        }
      }, {
        "uid" : "be4e61d62c7dc5d5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1991/#testresult/be4e61d62c7dc5d5",
        "status" : "passed",
        "time" : {
          "start" : 1735782009203,
          "stop" : 1735782033489,
          "duration" : 24286
        }
      }, {
        "uid" : "88bc59c41f92a455",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1990/#testresult/88bc59c41f92a455",
        "status" : "passed",
        "time" : {
          "start" : 1735695446208,
          "stop" : 1735695470881,
          "duration" : 24673
        }
      }, {
        "uid" : "af6b8dff7763f17e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1984/#testresult/af6b8dff7763f17e",
        "status" : "passed",
        "time" : {
          "start" : 1735660331578,
          "stop" : 1735660382715,
          "duration" : 51137
        }
      }, {
        "uid" : "3a7ebb8d7e3a084a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1983/#testresult/3a7ebb8d7e3a084a",
        "status" : "passed",
        "time" : {
          "start" : 1735608960856,
          "stop" : 1735608985161,
          "duration" : 24305
        }
      }, {
        "uid" : "4f69b791688d385",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1980/#testresult/4f69b791688d385",
        "status" : "passed",
        "time" : {
          "start" : 1735523335781,
          "stop" : 1735523378796,
          "duration" : 43015
        }
      }, {
        "uid" : "7827f347d924d358",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1979/#testresult/7827f347d924d358",
        "status" : "passed",
        "time" : {
          "start" : 1735436390201,
          "stop" : 1735436414501,
          "duration" : 24300
        }
      }, {
        "uid" : "ae8c70cfbc8725bb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1978/#testresult/ae8c70cfbc8725bb",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 3 == 2",
        "time" : {
          "start" : 1735350181025,
          "stop" : 1735350232823,
          "duration" : 51798
        }
      }, {
        "uid" : "c392ef9091856600",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/c392ef9091856600",
        "status" : "passed",
        "time" : {
          "start" : 1735263500311,
          "stop" : 1735263526093,
          "duration" : 25782
        }
      }, {
        "uid" : "ec2d3e707dc33ba5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/ec2d3e707dc33ba5",
        "status" : "passed",
        "time" : {
          "start" : 1735176970459,
          "stop" : 1735176995507,
          "duration" : 25048
        }
      }, {
        "uid" : "d152f45d4d3efba4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/d152f45d4d3efba4",
        "status" : "passed",
        "time" : {
          "start" : 1735091203051,
          "stop" : 1735091249130,
          "duration" : 46079
        }
      }, {
        "uid" : "b250c779ae80eae",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/b250c779ae80eae",
        "status" : "passed",
        "time" : {
          "start" : 1735004094750,
          "stop" : 1735004119882,
          "duration" : 25132
        }
      }, {
        "uid" : "a218b539afe27af1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/a218b539afe27af1",
        "status" : "passed",
        "time" : {
          "start" : 1734918272081,
          "stop" : 1734918299408,
          "duration" : 27327
        }
      }, {
        "uid" : "106615cac3173b3f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1972/#testresult/106615cac3173b3f",
        "status" : "passed",
        "time" : {
          "start" : 1734832130122,
          "stop" : 1734832199314,
          "duration" : 69192
        }
      }, {
        "uid" : "5b1642b806827194",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1969/#testresult/5b1642b806827194",
        "status" : "passed",
        "time" : {
          "start" : 1734745510393,
          "stop" : 1734745588973,
          "duration" : 78580
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "ff2509a381f4a79d.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}