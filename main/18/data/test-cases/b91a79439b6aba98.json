{
  "uid" : "b91a79439b6aba98",
  "name" : "test_lightdb_delete",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete",
  "historyId" : "f1e2c2234d7dcc518bcd25346bf33416",
  "time" : {
    "start" : 1736190426337,
    "stop" : 1736190519925,
    "duration" : 93588
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff82617210>\ndevice = <golioth.golioth.Device object at 0xffff8262dfd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736190397273,
      "stop" : 1736190397273,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736190397280,
      "stop" : 1736190397280,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736190425273,
      "stop" : 1736190426334,
      "duration" : 1061
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736190397726,
      "stop" : 1736190398647,
      "duration" : 921
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736190397279,
      "stop" : 1736190397279,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736190397274,
      "stop" : 1736190397274,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736190397275,
      "stop" : 1736190397275,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736190397280,
      "stop" : 1736190397725,
      "duration" : 445
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736190397271,
      "stop" : 1736190397271,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736190397272,
      "stop" : 1736190397272,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736190398648,
      "stop" : 1736190425273,
      "duration" : 26625
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736190397275,
      "stop" : 1736190397278,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff82617210>\ndevice = <golioth.golioth.Device object at 0xffff8262dfd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a854a86a6d664825",
      "name" : "log",
      "source" : "a854a86a6d664825.txt",
      "type" : "text/plain",
      "size" : 19567
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1736190520304,
      "stop" : 1736190520705,
      "duration" : 401
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736190520707,
      "stop" : 1736190520710,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736190520252,
      "stop" : 1736190520302,
      "duration" : 50
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736190520715,
      "stop" : 1736190520715,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "dd54bc74583e"
  }, {
    "name" : "thread",
    "value" : "693-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "cba7fe1b0bd9aa81",
      "status" : "passed",
      "time" : {
        "start" : 1736185893402,
        "stop" : 1736185930047,
        "duration" : 36645
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 30,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "de272901541ef4e8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/de272901541ef4e8",
        "status" : "passed",
        "time" : {
          "start" : 1736185893402,
          "stop" : 1736185930047,
          "duration" : 36645
        }
      }, {
        "uid" : "e5973651c02caf14",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/17/#testresult/e5973651c02caf14",
        "status" : "passed",
        "time" : {
          "start" : 1736126188686,
          "stop" : 1736126224657,
          "duration" : 35971
        }
      }, {
        "uid" : "d6dafad6dd9be5bb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/16/#testresult/d6dafad6dd9be5bb",
        "status" : "passed",
        "time" : {
          "start" : 1736039763452,
          "stop" : 1736039781911,
          "duration" : 18459
        }
      }, {
        "uid" : "41c99205520be8a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/15/#testresult/41c99205520be8a",
        "status" : "passed",
        "time" : {
          "start" : 1735954083412,
          "stop" : 1735954120911,
          "duration" : 37499
        }
      }, {
        "uid" : "c71c6301bd98ad28",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/8/#testresult/c71c6301bd98ad28",
        "status" : "passed",
        "time" : {
          "start" : 1735868812843,
          "stop" : 1735868845163,
          "duration" : 32320
        }
      }, {
        "uid" : "70373ff16edf5c19",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1991/#testresult/70373ff16edf5c19",
        "status" : "passed",
        "time" : {
          "start" : 1735782066602,
          "stop" : 1735782082656,
          "duration" : 16054
        }
      }, {
        "uid" : "b025f1b84a30ec87",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1990/#testresult/b025f1b84a30ec87",
        "status" : "passed",
        "time" : {
          "start" : 1735695503679,
          "stop" : 1735695519957,
          "duration" : 16278
        }
      }, {
        "uid" : "eb8005835ef74e12",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1984/#testresult/eb8005835ef74e12",
        "status" : "passed",
        "time" : {
          "start" : 1735660416045,
          "stop" : 1735660452942,
          "duration" : 36897
        }
      }, {
        "uid" : "cc2e402bc6449f61",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1983/#testresult/cc2e402bc6449f61",
        "status" : "passed",
        "time" : {
          "start" : 1735609017647,
          "stop" : 1735609034317,
          "duration" : 16670
        }
      }, {
        "uid" : "2936da528f43185c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1980/#testresult/2936da528f43185c",
        "status" : "passed",
        "time" : {
          "start" : 1735523411724,
          "stop" : 1735523441848,
          "duration" : 30124
        }
      }, {
        "uid" : "47081593dc7124c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1979/#testresult/47081593dc7124c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735436447297,
          "stop" : 1735436540919,
          "duration" : 93622
        }
      }, {
        "uid" : "be1050b096ca328b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1978/#testresult/be1050b096ca328b",
        "status" : "passed",
        "time" : {
          "start" : 1735350265656,
          "stop" : 1735350296283,
          "duration" : 30627
        }
      }, {
        "uid" : "ca937091f2de0a16",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/ca937091f2de0a16",
        "status" : "passed",
        "time" : {
          "start" : 1735263558953,
          "stop" : 1735263576944,
          "duration" : 17991
        }
      }, {
        "uid" : "a5f1d43a14962130",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/a5f1d43a14962130",
        "status" : "passed",
        "time" : {
          "start" : 1735177028263,
          "stop" : 1735177044520,
          "duration" : 16257
        }
      }, {
        "uid" : "e9be577898c39822",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/e9be577898c39822",
        "status" : "passed",
        "time" : {
          "start" : 1735091282121,
          "stop" : 1735091338866,
          "duration" : 56745
        }
      }, {
        "uid" : "6a4afbbc97f1d597",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/6a4afbbc97f1d597",
        "status" : "passed",
        "time" : {
          "start" : 1735004152853,
          "stop" : 1735004169254,
          "duration" : 16401
        }
      }, {
        "uid" : "1a338a05438b023d",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/1a338a05438b023d",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734918332339,
          "stop" : 1734918425973,
          "duration" : 93634
        }
      }, {
        "uid" : "110167d667c85eab",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1972/#testresult/110167d667c85eab",
        "status" : "passed",
        "time" : {
          "start" : 1734832232236,
          "stop" : 1734832276392,
          "duration" : 44156
        }
      }, {
        "uid" : "205b812894c4043b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1969/#testresult/205b812894c4043b",
        "status" : "passed",
        "time" : {
          "start" : 1734745621950,
          "stop" : 1734745649863,
          "duration" : 27913
        }
      }, {
        "uid" : "e8669a2a1eef3337",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1965/#testresult/e8669a2a1eef3337",
        "status" : "passed",
        "time" : {
          "start" : 1734658747612,
          "stop" : 1734658764960,
          "duration" : 17348
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "b91a79439b6aba98.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}