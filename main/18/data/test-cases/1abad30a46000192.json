{
  "uid" : "1abad30a46000192",
  "name" : "test_rpc",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc",
  "historyId" : "c4178e273bd3962d06b411c6f8e74f6b",
  "time" : {
    "start" : 1736190177037,
    "stop" : 1736190269843,
    "duration" : 92806
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7cd67950>\ndevice = <golioth.golioth.Device object at 0xffff7cd827d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736190147430,
      "stop" : 1736190147430,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736190147432,
      "stop" : 1736190147434,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736190147435,
      "stop" : 1736190147435,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736190147430,
      "stop" : 1736190147431,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736190175972,
      "stop" : 1736190177032,
      "duration" : 1060
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736190147429,
      "stop" : 1736190147429,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736190147436,
      "stop" : 1736190147861,
      "duration" : 425
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736190147862,
      "stop" : 1736190148741,
      "duration" : 879
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736190148742,
      "stop" : 1736190175971,
      "duration" : 27229
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736190147431,
      "stop" : 1736190147431,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736190147432,
      "stop" : 1736190147432,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736190147435,
      "stop" : 1736190147435,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7cd67950>\ndevice = <golioth.golioth.Device object at 0xffff7cd827d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7a0d3a0253112a2a",
      "name" : "log",
      "source" : "7a0d3a0253112a2a.txt",
      "type" : "text/plain",
      "size" : 14111
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736190270565,
      "stop" : 1736190270566,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736190270558,
      "stop" : 1736190270561,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736190270164,
      "stop" : 1736190270556,
      "duration" : 392
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736190270128,
      "stop" : 1736190270163,
      "duration" : 35
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "dd54bc74583e"
  }, {
    "name" : "thread",
    "value" : "549-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "753e7c74789d1b94",
      "status" : "passed",
      "time" : {
        "start" : 1736185668893,
        "stop" : 1736185698889,
        "duration" : 29996
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 32,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "f4747a28eac476b1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/f4747a28eac476b1",
        "status" : "passed",
        "time" : {
          "start" : 1736185668893,
          "stop" : 1736185698889,
          "duration" : 29996
        }
      }, {
        "uid" : "d5552ef792877d20",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/17/#testresult/d5552ef792877d20",
        "status" : "passed",
        "time" : {
          "start" : 1736125958740,
          "stop" : 1736125991435,
          "duration" : 32695
        }
      }, {
        "uid" : "f2467ef51f7c53d1",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/16/#testresult/f2467ef51f7c53d1",
        "status" : "passed",
        "time" : {
          "start" : 1736039596192,
          "stop" : 1736039607469,
          "duration" : 11277
        }
      }, {
        "uid" : "6666f48c32d82974",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/15/#testresult/6666f48c32d82974",
        "status" : "passed",
        "time" : {
          "start" : 1735953862145,
          "stop" : 1735953914887,
          "duration" : 52742
        }
      }, {
        "uid" : "5f4801312aa554ad",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/8/#testresult/5f4801312aa554ad",
        "status" : "passed",
        "time" : {
          "start" : 1735868051045,
          "stop" : 1735868074625,
          "duration" : 23580
        }
      }, {
        "uid" : "babe755788ef974b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1991/#testresult/babe755788ef974b",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735781409249,
          "stop" : 1735781502078,
          "duration" : 92829
        }
      }, {
        "uid" : "e049784856ffc3a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1990/#testresult/e049784856ffc3a",
        "status" : "passed",
        "time" : {
          "start" : 1735694955058,
          "stop" : 1735694966046,
          "duration" : 10988
        }
      }, {
        "uid" : "9f16b2845773c57f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1984/#testresult/9f16b2845773c57f",
        "status" : "passed",
        "time" : {
          "start" : 1735659701724,
          "stop" : 1735659736923,
          "duration" : 35199
        }
      }, {
        "uid" : "146bac3ae6d82120",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1983/#testresult/146bac3ae6d82120",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735608384983,
          "stop" : 1735608477709,
          "duration" : 92726
        }
      }, {
        "uid" : "6d54b1bcb9202857",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1980/#testresult/6d54b1bcb9202857",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735522633230,
          "stop" : 1735522726047,
          "duration" : 92817
        }
      }, {
        "uid" : "1a5413b0ee27835b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1979/#testresult/1a5413b0ee27835b",
        "status" : "passed",
        "time" : {
          "start" : 1735435904003,
          "stop" : 1735435915778,
          "duration" : 11775
        }
      }, {
        "uid" : "972d63c91852e336",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1978/#testresult/972d63c91852e336",
        "status" : "passed",
        "time" : {
          "start" : 1735349455335,
          "stop" : 1735349483464,
          "duration" : 28129
        }
      }, {
        "uid" : "95e7cf4960cdc4ee",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/95e7cf4960cdc4ee",
        "status" : "passed",
        "time" : {
          "start" : 1735262944219,
          "stop" : 1735262956207,
          "duration" : 11988
        }
      }, {
        "uid" : "dea155e2f65d0708",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/dea155e2f65d0708",
        "status" : "passed",
        "time" : {
          "start" : 1735176408547,
          "stop" : 1735176420228,
          "duration" : 11681
        }
      }, {
        "uid" : "2ea2f54d5bbdcb89",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/2ea2f54d5bbdcb89",
        "status" : "passed",
        "time" : {
          "start" : 1735090483162,
          "stop" : 1735090549215,
          "duration" : 66053
        }
      }, {
        "uid" : "269bfa3316bdfaa",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/269bfa3316bdfaa",
        "status" : "passed",
        "time" : {
          "start" : 1735003548736,
          "stop" : 1735003561670,
          "duration" : 12934
        }
      }, {
        "uid" : "9e06036de2901ed",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/9e06036de2901ed",
        "status" : "passed",
        "time" : {
          "start" : 1734917740581,
          "stop" : 1734917751856,
          "duration" : 11275
        }
      }, {
        "uid" : "3b3e157db8c27c0a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1972/#testresult/3b3e157db8c27c0a",
        "status" : "passed",
        "time" : {
          "start" : 1734831416639,
          "stop" : 1734831444126,
          "duration" : 27487
        }
      }, {
        "uid" : "d2666b6f4e675c60",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1969/#testresult/d2666b6f4e675c60",
        "status" : "passed",
        "time" : {
          "start" : 1734744822730,
          "stop" : 1734744865158,
          "duration" : 42428
        }
      }, {
        "uid" : "e9f9d11ec703a19b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1965/#testresult/e9f9d11ec703a19b",
        "status" : "passed",
        "time" : {
          "start" : 1734658358169,
          "stop" : 1734658370180,
          "duration" : 12011
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "1abad30a46000192.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}