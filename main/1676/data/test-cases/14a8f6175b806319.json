{"uid":"14a8f6175b806319","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"b97b1b0ab58c7d7afa3114dbec351998","time":{"start":1729301341613,"stop":1729301343591,"duration":1978},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99f7f010>\nproject = <golioth.golioth.Project object at 0xffff9a0e98d0>\ndevice_name = 'certificate-xjSKNwWXXgIzNTpF'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960093367-if00,baud=115200']\ncertificate_cred = '67130b3f0a7c0e5d289e43a3', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729301310474,"stop":1729301310474,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729301310475,"stop":1729301310475,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729301310475,"stop":1729301310476,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729301310476,"stop":1729301310477,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729301310476,"stop":1729301310476,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729301310477,"stop":1729301310477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729301310478,"stop":1729301310479,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729301310480,"stop":1729301310964,"duration":484},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729301310964,"stop":1729301310965,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1729301310965,"stop":1729301311516,"duration":551},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729301311517,"stop":1729301340503,"duration":28986},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729301340504,"stop":1729301341609,"duration":1105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1729301341610,"stop":1729301341610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99f7f010>\nproject = <golioth.golioth.Project object at 0xffff9a0e98d0>\ndevice_name = 'certificate-xjSKNwWXXgIzNTpF'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960093367-if00,baud=115200']\ncertificate_cred = '67130b3f0a7c0e5d289e43a3', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9481c0abc0c6cf0","name":"log","source":"9481c0abc0c6cf0.txt","type":"text/plain","size":14627}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729301343969,"stop":1729301343999,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1729301344001,"stop":1729301344445,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1729301344447,"stop":1729301344899,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729301344902,"stop":1729301344904,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729301344906,"stop":1729301344906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d3eb91d236ef"},{"name":"thread","value":"877-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":12,"unknown":0,"total":14},"items":[{"uid":"30c2afcd4731c8d0","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/30c2afcd4731c8d0","status":"passed","time":{"start":1729214767559,"stop":1729214795437,"duration":27878}},{"uid":"853ccaa8041601fa","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/853ccaa8041601fa","status":"passed","time":{"start":1729205820117,"stop":1729205867680,"duration":47563}},{"uid":"1eeb59d3a826d337","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/1eeb59d3a826d337","status":"passed","time":{"start":1729132265450,"stop":1729132292112,"duration":26662}},{"uid":"df845f04ce62d3cd","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/df845f04ce62d3cd","status":"passed","time":{"start":1729112866734,"stop":1729112916799,"duration":50065}},{"uid":"be6f1d76b3677e68","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/be6f1d76b3677e68","status":"passed","time":{"start":1729042292444,"stop":1729042334608,"duration":42164}},{"uid":"8d4fbf61388e09ec","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/8d4fbf61388e09ec","status":"passed","time":{"start":1729030069514,"stop":1729030112907,"duration":43393}},{"uid":"821a0eefda621687","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/821a0eefda621687","status":"passed","time":{"start":1729010701147,"stop":1729010728716,"duration":27569}},{"uid":"45c4a4d585187dc4","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/45c4a4d585187dc4","status":"passed","time":{"start":1728955377920,"stop":1728955417741,"duration":39821}},{"uid":"a1308389f7c38c8e","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/a1308389f7c38c8e","status":"passed","time":{"start":1728869769480,"stop":1728869811418,"duration":41938}},{"uid":"fb9a68f974be5e","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/fb9a68f974be5e","status":"passed","time":{"start":1728783288583,"stop":1728783315182,"duration":26599}},{"uid":"6f51fbff2ab5f4c0","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/6f51fbff2ab5f4c0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728696372793,"stop":1728696374680,"duration":1887}},{"uid":"77268c7708e6907f","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/77268c7708e6907f","status":"passed","time":{"start":1728671390483,"stop":1728671420385,"duration":29902}},{"uid":"bfd0955b23f0c36b","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/bfd0955b23f0c36b","status":"passed","time":{"start":1728665549429,"stop":1728665576547,"duration":27118}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"14a8f6175b806319.json","parameterValues":["'nrf9160dk'","'zephyr'"]}