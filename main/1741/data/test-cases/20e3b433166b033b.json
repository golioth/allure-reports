{"uid":"20e3b433166b033b","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1731568212233,"stop":1731568305827,"duration":93594},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8d50a710>\ndevice = <golioth.golioth.Device object at 0xffff8d51d850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731568182963,"stop":1731568182963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731568182964,"stop":1731568182964,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731568182964,"stop":1731568182965,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731568182965,"stop":1731568182965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731568182966,"stop":1731568182966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731568182966,"stop":1731568182968,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731568182969,"stop":1731568182969,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731568182970,"stop":1731568183458,"duration":488},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731568182970,"stop":1731568182970,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731568183459,"stop":1731568184544,"duration":1085},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731568184544,"stop":1731568211142,"duration":26598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731568211143,"stop":1731568212230,"duration":1087},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8d50a710>\ndevice = <golioth.golioth.Device object at 0xffff8d51d850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"89698f34fc63842d","name":"log","source":"89698f34fc63842d.txt","type":"text/plain","size":18484}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731568306170,"stop":1731568306182,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731568306184,"stop":1731568306577,"duration":393},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731568306579,"stop":1731568306581,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731568306586,"stop":1731568306586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3964f424e598"},{"name":"thread","value":"655-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":41,"unknown":0,"total":45},"items":[{"uid":"8a79f895272a9e03","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/8a79f895272a9e03","status":"passed","time":{"start":1731547389454,"stop":1731547410134,"duration":20680}},{"uid":"7c0f95268c3e3ed6","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/7c0f95268c3e3ed6","status":"passed","time":{"start":1731461803175,"stop":1731461842726,"duration":39551}},{"uid":"23a520c5eb25d2ed","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/23a520c5eb25d2ed","status":"passed","time":{"start":1731374688402,"stop":1731374705068,"duration":16666}},{"uid":"7912c2d1b765314e","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/7912c2d1b765314e","status":"passed","time":{"start":1731288253775,"stop":1731288270426,"duration":16651}},{"uid":"44e9981d15a93b59","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/44e9981d15a93b59","status":"passed","time":{"start":1731202165991,"stop":1731202182522,"duration":16531}},{"uid":"a29407ee5c6fd5a0","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/a29407ee5c6fd5a0","status":"passed","time":{"start":1731115752065,"stop":1731115788012,"duration":35947}},{"uid":"12581b43a07553a6","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/12581b43a07553a6","status":"passed","time":{"start":1731029039697,"stop":1731029074792,"duration":35095}},{"uid":"ea9a80597bc8fac2","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/ea9a80597bc8fac2","status":"passed","time":{"start":1730942915905,"stop":1730942932894,"duration":16989}},{"uid":"c28941ab5b05d51e","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/c28941ab5b05d51e","status":"passed","time":{"start":1730893881175,"stop":1730893898438,"duration":17263}},{"uid":"7a77e68a975ec14b","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/7a77e68a975ec14b","status":"passed","time":{"start":1730856301502,"stop":1730856341744,"duration":40242}},{"uid":"a01eb42674bd9d96","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/a01eb42674bd9d96","status":"passed","time":{"start":1730770229294,"stop":1730770264232,"duration":34938}},{"uid":"4dff042b2f099706","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/4dff042b2f099706","status":"passed","time":{"start":1730683739525,"stop":1730683787414,"duration":47889}},{"uid":"6eedf4ffca9372d4","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/6eedf4ffca9372d4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730597299497,"stop":1730597392991,"duration":93494}},{"uid":"d4dccbf4437c86d4","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/d4dccbf4437c86d4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730510426320,"stop":1730510519861,"duration":93541}},{"uid":"a5e976567e0761be","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/a5e976567e0761be","status":"passed","time":{"start":1730424146370,"stop":1730424177700,"duration":31330}},{"uid":"d07d2031029a8b01","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/d07d2031029a8b01","status":"passed","time":{"start":1730339126469,"stop":1730339160499,"duration":34030}},{"uid":"5daca350c0546b34","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/5daca350c0546b34","status":"passed","time":{"start":1730306486888,"stop":1730306502726,"duration":15838}},{"uid":"1f2cec9b7ca6f5f9","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/1f2cec9b7ca6f5f9","status":"passed","time":{"start":1730251728088,"stop":1730251760343,"duration":32255}},{"uid":"7949f11343710fdc","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/7949f11343710fdc","status":"passed","time":{"start":1730165536556,"stop":1730165555064,"duration":18508}},{"uid":"e5b31ef9387654cb","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/e5b31ef9387654cb","status":"passed","time":{"start":1730078672116,"stop":1730078700853,"duration":28737}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"20e3b433166b033b.json","parameterValues":["'nrf9160dk'","'zephyr'"]}