{"uid":"a7d612a7d6679749","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1731568925625,"stop":1731569038322,"duration":112697},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff91907250>\ndevice = <golioth.golioth.Device object at 0xffff91921210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731568895979,"stop":1731568895980,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731568895980,"stop":1731568895980,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731568895981,"stop":1731568895981,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731568895981,"stop":1731568895981,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731568895982,"stop":1731568895982,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731568895982,"stop":1731568895984,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731568895985,"stop":1731568895985,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731568895986,"stop":1731568896465,"duration":479},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731568895986,"stop":1731568895986,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731568896465,"stop":1731568897635,"duration":1170},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731568897636,"stop":1731568924522,"duration":26886},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731568924523,"stop":1731568925622,"duration":1099},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff91907250>\ndevice = <golioth.golioth.Device object at 0xffff91921210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"680b3a4c1f7b89fd","name":"log","source":"680b3a4c1f7b89fd.txt","type":"text/plain","size":14176}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731569038598,"stop":1731569038643,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731569038645,"stop":1731569039047,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731569039049,"stop":1731569039051,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731569039056,"stop":1731569039056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3964f424e598"},{"name":"thread","value":"965-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9c5527dea8e133a2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731568778182,"stop":1731568890975,"duration":112793}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":6,"skipped":0,"passed":37,"unknown":0,"total":44},"items":[{"uid":"3bb8fe5a41a45e80","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/3bb8fe5a41a45e80","status":"passed","time":{"start":1731547752799,"stop":1731547777045,"duration":24246}},{"uid":"70e9446002e0be56","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/70e9446002e0be56","status":"passed","time":{"start":1731375087830,"stop":1731375114028,"duration":26198}},{"uid":"2a2b60f1d808af73","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/2a2b60f1d808af73","status":"passed","time":{"start":1731288643810,"stop":1731288667744,"duration":23934}},{"uid":"f4010b4d4444733b","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/f4010b4d4444733b","status":"passed","time":{"start":1731202490288,"stop":1731202514907,"duration":24619}},{"uid":"ea289ee06bea176c","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/ea289ee06bea176c","status":"passed","time":{"start":1731116174313,"stop":1731116220170,"duration":45857}},{"uid":"f45a6294c7dc6427","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/f45a6294c7dc6427","status":"passed","time":{"start":1731029542702,"stop":1731029586307,"duration":43605}},{"uid":"6700701ade49b9f2","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/6700701ade49b9f2","status":"passed","time":{"start":1730943236651,"stop":1730943262413,"duration":25762}},{"uid":"aa028f30dfef9ba3","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/aa028f30dfef9ba3","status":"passed","time":{"start":1730894279418,"stop":1730894304734,"duration":25316}},{"uid":"aca205c1e20b83f4","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/aca205c1e20b83f4","status":"passed","time":{"start":1730856719562,"stop":1730856762599,"duration":43037}},{"uid":"3b61933d798662e9","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/3b61933d798662e9","status":"passed","time":{"start":1730770645805,"stop":1730770682017,"duration":36212}},{"uid":"8538e57581b87b84","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/8538e57581b87b84","status":"passed","time":{"start":1730684319113,"stop":1730684358746,"duration":39633}},{"uid":"b17ea22fc762da33","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/b17ea22fc762da33","status":"passed","time":{"start":1730597972561,"stop":1730598009779,"duration":37218}},{"uid":"e683693a0231f1e0","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/e683693a0231f1e0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730510962619,"stop":1730511075254,"duration":112635}},{"uid":"12bbea4d7c3d02c1","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/12bbea4d7c3d02c1","status":"passed","time":{"start":1730424643147,"stop":1730424691930,"duration":48783}},{"uid":"47f688b2d8532a36","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/47f688b2d8532a36","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1730339414598,"stop":1730339421949,"duration":7351}},{"uid":"fb302a5f78dab0ef","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/fb302a5f78dab0ef","status":"passed","time":{"start":1730306802688,"stop":1730306844926,"duration":42238}},{"uid":"2d792911c2745d35","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/2d792911c2745d35","status":"passed","time":{"start":1730252196428,"stop":1730252235675,"duration":39247}},{"uid":"6e7b197b4958e599","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/6e7b197b4958e599","status":"passed","time":{"start":1730165939022,"stop":1730165963332,"duration":24310}},{"uid":"7a7ace635a42f2f2","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/7a7ace635a42f2f2","status":"passed","time":{"start":1730079136869,"stop":1730079170830,"duration":33961}},{"uid":"b6fba7a159ecd1d4","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/b6fba7a159ecd1d4","status":"passed","time":{"start":1729992946564,"stop":1729992971189,"duration":24625}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"a7d612a7d6679749.json","parameterValues":["'nrf9160dk'","'zephyr'"]}