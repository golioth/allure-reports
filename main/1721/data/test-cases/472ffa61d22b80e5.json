{"uid":"472ffa61d22b80e5","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"ddc2f31d085089b8b5f25dfb44556fd5","time":{"start":1731113522924,"stop":1731113615699,"duration":92775},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff86b23a50>\ndevice = <golioth.golioth.Device object at 0xffff86b10dd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731113513290,"stop":1731113513291,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731113513290,"stop":1731113513290,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731113513291,"stop":1731113513291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731113513292,"stop":1731113513292,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731113513292,"stop":1731113513292,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731113513293,"stop":1731113513295,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731113513295,"stop":1731113513296,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731113513296,"stop":1731113513296,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731113513297,"stop":1731113513741,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731113513742,"stop":1731113514642,"duration":900},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731113514643,"stop":1731113522392,"duration":7749},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731113522393,"stop":1731113522921,"duration":528},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff86b23a50>\ndevice = <golioth.golioth.Device object at 0xffff86b10dd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"31bf949b3751c1db","name":"log","source":"31bf949b3751c1db.txt","type":"text/plain","size":14882}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731113615953,"stop":1731113615988,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731113615990,"stop":1731113616375,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731113616377,"stop":1731113616380,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731113616384,"stop":1731113616385,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"90be79794b9c"},{"name":"thread","value":"390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":35,"unknown":0,"total":39},"items":[{"uid":"e3b3546fcb80f18c","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/e3b3546fcb80f18c","status":"passed","time":{"start":1731027616615,"stop":1731027635215,"duration":18600}},{"uid":"6fd8bf9baec98cd","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/6fd8bf9baec98cd","status":"passed","time":{"start":1730940899510,"stop":1730940919026,"duration":19516}},{"uid":"d8827a698388e047","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/d8827a698388e047","status":"passed","time":{"start":1730854611767,"stop":1730854630128,"duration":18361}},{"uid":"26a0a34e9299fef","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/26a0a34e9299fef","status":"passed","time":{"start":1730854611767,"stop":1730854630128,"duration":18361}},{"uid":"d74768a4c2353361","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/d74768a4c2353361","status":"passed","time":{"start":1730768105952,"stop":1730768124610,"duration":18658}},{"uid":"92f72eac13524650","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/92f72eac13524650","status":"passed","time":{"start":1730681304828,"stop":1730681324072,"duration":19244}},{"uid":"be606c240a325974","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/be606c240a325974","status":"passed","time":{"start":1730595673078,"stop":1730595692843,"duration":19765}},{"uid":"b5669fb606588451","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/b5669fb606588451","status":"passed","time":{"start":1730508934351,"stop":1730508952788,"duration":18437}},{"uid":"8a7d1c09ec6455f9","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/8a7d1c09ec6455f9","status":"passed","time":{"start":1730422618431,"stop":1730422636996,"duration":18565}},{"uid":"20fdf683990f7d63","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/20fdf683990f7d63","status":"passed","time":{"start":1730336297919,"stop":1730336318162,"duration":20243}},{"uid":"17df54fdbc1e98aa","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/17df54fdbc1e98aa","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730304738922,"stop":1730304831826,"duration":92904}},{"uid":"6377df580197f4f7","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/6377df580197f4f7","status":"passed","time":{"start":1730249875142,"stop":1730249894644,"duration":19502}},{"uid":"2a31a4237a799604","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/2a31a4237a799604","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730163321000,"stop":1730163413730,"duration":92730}},{"uid":"562cb9a55130f6a5","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/562cb9a55130f6a5","status":"passed","time":{"start":1730077150545,"stop":1730077170907,"duration":20362}},{"uid":"2c9feb175ca6b3a6","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/2c9feb175ca6b3a6","status":"passed","time":{"start":1729990688067,"stop":1729990706612,"duration":18545}},{"uid":"d01cd9187488a6fe","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/d01cd9187488a6fe","status":"passed","time":{"start":1729904147158,"stop":1729904165685,"duration":18527}},{"uid":"12f9a653cfe0111e","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/12f9a653cfe0111e","status":"passed","time":{"start":1729817996475,"stop":1729818016787,"duration":20312}},{"uid":"c53012c1d291d7c7","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/c53012c1d291d7c7","status":"passed","time":{"start":1729731424344,"stop":1729731442829,"duration":18485}},{"uid":"37f7e57968a8469e","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/37f7e57968a8469e","status":"passed","time":{"start":1729644896064,"stop":1729644915591,"duration":19527}},{"uid":"a8b64271d32d4fed","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/a8b64271d32d4fed","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729558620290,"stop":1729558713089,"duration":92799}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"472ffa61d22b80e5.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}