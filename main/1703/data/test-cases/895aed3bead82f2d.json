{"uid":"895aed3bead82f2d","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"edf5f1012f71cfc9f14f014f109d19a8","time":{"start":1730249758803,"stop":1730249858252,"duration":99449},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0b60310>\nproject = <golioth.golioth.Project object at 0xffffa0b3fa10>\ndevice = <golioth.golioth.Device object at 0xffffa0b63210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <67218413990e7ed8707e2f03, release_tags=[], device_tags=['6721840d990e7ed8707e2f01'], artifact_ids=['66da355cc36587e4581f9493'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n>       shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Received block.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730249738131,"stop":1730249738131,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730249738132,"stop":1730249738132,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730249738133,"stop":1730249738133,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1730249738133,"stop":1730249738161,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730249738162,"stop":1730249738163,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730249738163,"stop":1730249738163,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730249738164,"stop":1730249738164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730249738164,"stop":1730249738164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730249738165,"stop":1730249738167,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"west_board","time":{"start":1730249738168,"stop":1730249738168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730249738169,"stop":1730249738637,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730249738638,"stop":1730249740010,"duration":1372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1730249740011,"stop":1730249740704,"duration":693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1730249740705,"stop":1730249741335,"duration":630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1730249741336,"stop":1730249742785,"duration":1449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1730249742785,"stop":1730249747349,"duration":4564},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730249747351,"stop":1730249758239,"duration":10888},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730249758239,"stop":1730249758800,"duration":561},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0b60310>\nproject = <golioth.golioth.Project object at 0xffffa0b3fa10>\ndevice = <golioth.golioth.Device object at 0xffffa0b63210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <67218413990e7ed8707e2f03, release_tags=[], device_tags=['6721840d990e7ed8707e2f01'], artifact_ids=['66da355cc36587e4581f9493'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n>       shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Received block.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"bab2827f58ecc942","name":"log","source":"bab2827f58ecc942.txt","type":"text/plain","size":37605}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730249858593,"stop":1730249858880,"duration":287},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1730249858882,"stop":1730249859486,"duration":604},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1730249859488,"stop":1730249860828,"duration":1340},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1730249860830,"stop":1730249860831,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1730249860833,"stop":1730249860834,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730249860835,"stop":1730249861426,"duration":591},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730249861428,"stop":1730249861428,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730249861431,"stop":1730249861432,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1730249861498,"stop":1730249861501,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8f5a4ab05e3a"},{"name":"thread","value":"366-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":25,"unknown":0,"total":27},"items":[{"uid":"2c64e6aa0f27dee4","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/2c64e6aa0f27dee4","status":"passed","time":{"start":1730163258677,"stop":1730163306129,"duration":47452}},{"uid":"25837ae9a14531e","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/25837ae9a14531e","status":"passed","time":{"start":1730077066230,"stop":1730077134265,"duration":68035}},{"uid":"fb3b1b77963244e2","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/fb3b1b77963244e2","status":"passed","time":{"start":1729990625053,"stop":1729990673533,"duration":48480}},{"uid":"1583407bb8ecaae8","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/1583407bb8ecaae8","status":"passed","time":{"start":1729904084413,"stop":1729904132538,"duration":48125}},{"uid":"63d9bf9db1216324","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/63d9bf9db1216324","status":"passed","time":{"start":1729817913878,"stop":1729817980858,"duration":66980}},{"uid":"7d9ad0ae9778bd95","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/7d9ad0ae9778bd95","status":"passed","time":{"start":1729731362437,"stop":1729731409550,"duration":47113}},{"uid":"c176c91c4138c4fa","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/c176c91c4138c4fa","status":"passed","time":{"start":1729644835182,"stop":1729644881510,"duration":46328}},{"uid":"4ac6027ea4d5aecf","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/4ac6027ea4d5aecf","status":"passed","time":{"start":1729558543360,"stop":1729558604844,"duration":61484}},{"uid":"b6f345ff97f108af","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/b6f345ff97f108af","status":"passed","time":{"start":1729472122000,"stop":1729472186757,"duration":64757}},{"uid":"9223b4306d318bc7","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/9223b4306d318bc7","status":"passed","time":{"start":1729385982610,"stop":1729386045291,"duration":62681}},{"uid":"48b98797a6c6f3a7","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/48b98797a6c6f3a7","status":"passed","time":{"start":1729369671495,"stop":1729369719465,"duration":47970}},{"uid":"f7290f5708055f65","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/f7290f5708055f65","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1729362440750,"stop":1729362440750,"duration":0}},{"uid":"35253773750fa9bd","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/35253773750fa9bd","status":"passed","time":{"start":1729299432057,"stop":1729299490446,"duration":58389}},{"uid":"7cd414c86bb5b450","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/7cd414c86bb5b450","status":"passed","time":{"start":1729212854916,"stop":1729212914692,"duration":59776}},{"uid":"7bda28f0c3c34e29","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/7bda28f0c3c34e29","status":"passed","time":{"start":1729204005660,"stop":1729204053001,"duration":47341}},{"uid":"64b06d854959137a","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/64b06d854959137a","status":"passed","time":{"start":1729130494775,"stop":1729130541505,"duration":46730}},{"uid":"2d2c74fa0d086aef","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/2d2c74fa0d086aef","status":"passed","time":{"start":1729110595944,"stop":1729110645757,"duration":49813}},{"uid":"6c7215d363ff5283","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/6c7215d363ff5283","status":"passed","time":{"start":1729040006245,"stop":1729040054555,"duration":48310}},{"uid":"8aac5adcc1ef9e6e","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/8aac5adcc1ef9e6e","status":"passed","time":{"start":1729027325292,"stop":1729027390999,"duration":65707}},{"uid":"ec5d55407b4980af","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/ec5d55407b4980af","status":"passed","time":{"start":1729008778654,"stop":1729008825881,"duration":47227}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"895aed3bead82f2d.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}