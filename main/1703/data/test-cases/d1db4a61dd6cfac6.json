{"uid":"d1db4a61dd6cfac6","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1730251851126,"stop":1730251945219,"duration":94093},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb4dc9b10>\nproject = <golioth.golioth.Project object at 0xffffb4f6e550>\ndevice = <golioth.golioth.Device object at 0xffffb4ddca50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730251821854,"stop":1730251821855,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730251821855,"stop":1730251821855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730251821856,"stop":1730251821856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730251821856,"stop":1730251821856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730251821857,"stop":1730251821857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730251821857,"stop":1730251821857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730251821858,"stop":1730251821860,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730251821858,"stop":1730251821858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730251821861,"stop":1730251822277,"duration":416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730251822277,"stop":1730251823188,"duration":911},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730251823188,"stop":1730251850014,"duration":26826},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730251850014,"stop":1730251851124,"duration":1110},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb4dc9b10>\nproject = <golioth.golioth.Project object at 0xffffb4f6e550>\ndevice = <golioth.golioth.Device object at 0xffffb4ddca50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"5e7787481c0fd3a1","name":"log","source":"5e7787481c0fd3a1.txt","type":"text/plain","size":20576}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730251945537,"stop":1730251945987,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730251945989,"stop":1730251946390,"duration":401},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730251946392,"stop":1730251946394,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730251946396,"stop":1730251946396,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"aa58c1749dc2"},{"name":"thread","value":"716-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":15,"unknown":0,"total":27},"items":[{"uid":"89adbbef4f65aa18","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/89adbbef4f65aa18","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730165630892,"stop":1730165725240,"duration":94348}},{"uid":"33b455dc40c78f70","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/33b455dc40c78f70","status":"passed","time":{"start":1730078860990,"stop":1730078880757,"duration":19767}},{"uid":"f6c75c42112f2674","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/f6c75c42112f2674","status":"passed","time":{"start":1729992702877,"stop":1729992714049,"duration":11172}},{"uid":"cbc328f484865ba2","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/cbc328f484865ba2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729906025264,"stop":1729906119632,"duration":94368}},{"uid":"c129034605b75043","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/c129034605b75043","status":"passed","time":{"start":1729819865873,"stop":1729819879685,"duration":13812}},{"uid":"982a76188fb50e6f","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/982a76188fb50e6f","status":"passed","time":{"start":1729733666520,"stop":1729733682893,"duration":16373}},{"uid":"90a06b409b911eeb","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/90a06b409b911eeb","status":"passed","time":{"start":1729646969794,"stop":1729646982544,"duration":12750}},{"uid":"d63811918b6f6255","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/d63811918b6f6255","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729560681847,"stop":1729560776294,"duration":94447}},{"uid":"2f352dd2b7002cde","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/2f352dd2b7002cde","status":"passed","time":{"start":1729474007721,"stop":1729474031612,"duration":23891}},{"uid":"5f5930221d726393","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/5f5930221d726393","status":"passed","time":{"start":1729387794213,"stop":1729387806423,"duration":12210}},{"uid":"6ff5381ff127a023","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/6ff5381ff127a023","status":"passed","time":{"start":1729371502883,"stop":1729371515631,"duration":12748}},{"uid":"61683b214dad25d6","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/61683b214dad25d6","status":"passed","time":{"start":1729364412075,"stop":1729364442228,"duration":30153}},{"uid":"ad77da8a5ddf0007","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/ad77da8a5ddf0007","status":"passed","time":{"start":1729301122325,"stop":1729301133778,"duration":11453}},{"uid":"d5ca6776ce65d7c5","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/d5ca6776ce65d7c5","status":"passed","time":{"start":1729214544426,"stop":1729214558412,"duration":13986}},{"uid":"365d7c63f782eaa0","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/365d7c63f782eaa0","status":"passed","time":{"start":1729205520295,"stop":1729205553830,"duration":33535}},{"uid":"1ca7fdd1dd7ca80c","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/1ca7fdd1dd7ca80c","status":"passed","time":{"start":1729132101924,"stop":1729132114418,"duration":12494}},{"uid":"d271b9ea04c95241","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/d271b9ea04c95241","status":"passed","time":{"start":1729112646453,"stop":1729112675608,"duration":29155}},{"uid":"158838270b326636","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/158838270b326636","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729041911608,"stop":1729042005944,"duration":94336}},{"uid":"ecf56eb1adb12b7","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/ecf56eb1adb12b7","status":"passed","time":{"start":1729029783394,"stop":1729029810454,"duration":27060}},{"uid":"8670a048f7e78c3c","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/8670a048f7e78c3c","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1729010530404,"stop":1729010535743,"duration":5339}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d1db4a61dd6cfac6.json","parameterValues":["'nrf9160dk'","'zephyr'"]}