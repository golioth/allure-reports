{"uid":"801ee6ed640fb2e0","name":"test_set_int_range_out_max","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_max","historyId":"91ac386f26c488866e25e8ea181a51f9","time":{"start":1729557500882,"stop":1729557513047,"duration":12165},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb242ecd0>\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729557371906,"stop":1729557371907,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1729557371907,"stop":1729557371908,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1729557371908,"stop":1729557371908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1729557371909,"stop":1729557371909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729557371910,"stop":1729557371910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729557371911,"stop":1729557371911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1729557371911,"stop":1729557371912,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1729557371912,"stop":1729557371912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1729557371913,"stop":1729557371913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729557371914,"stop":1729557371914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729557371914,"stop":1729557371914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729557371915,"stop":1729557371915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729557371915,"stop":1729557372313,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1729557372314,"stop":1729557423819,"duration":51505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729557423821,"stop":1729557424804,"duration":983},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1729557424805,"stop":1729557444024,"duration":19219},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb242ecd0>\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"7de2e69ca534c694","name":"stdout","source":"7de2e69ca534c694.txt","type":"text/plain","size":630}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1729557584790,"stop":1729557584791,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729557584793,"stop":1729557585174,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1729557585176,"stop":1729557585178,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729557585180,"stop":1729557585182,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"13f41c8cc3bf"},{"name":"thread","value":"253-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":15,"unknown":0,"total":18},"items":[{"uid":"798556f015713306","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/798556f015713306","status":"passed","time":{"start":1729471012221,"stop":1729471024606,"duration":12385}},{"uid":"5279d5a176b48d37","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/5279d5a176b48d37","status":"passed","time":{"start":1729384772357,"stop":1729384784559,"duration":12202}},{"uid":"15e225d117b33a3d","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/15e225d117b33a3d","status":"passed","time":{"start":1729368610007,"stop":1729368622471,"duration":12464}},{"uid":"c127f93364c67641","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/c127f93364c67641","status":"passed","time":{"start":1729361457999,"stop":1729361470394,"duration":12395}},{"uid":"102c37e0f5ee11a2","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/102c37e0f5ee11a2","status":"passed","time":{"start":1729298142856,"stop":1729298155212,"duration":12356}},{"uid":"d466f8018aed39e1","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/d466f8018aed39e1","status":"passed","time":{"start":1729211733139,"stop":1729211745593,"duration":12454}},{"uid":"534c53dbbf93dcdc","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/534c53dbbf93dcdc","status":"passed","time":{"start":1729202838676,"stop":1729202850811,"duration":12135}},{"uid":"f59d70f6c9f6ac4a","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/f59d70f6c9f6ac4a","status":"passed","time":{"start":1729109424053,"stop":1729109436574,"duration":12521}},{"uid":"f8a8ab7de0545764","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/f8a8ab7de0545764","status":"passed","time":{"start":1729039068781,"stop":1729039082185,"duration":13404}},{"uid":"8e9ff66fa9b6c2ee","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/8e9ff66fa9b6c2ee","status":"passed","time":{"start":1729025102336,"stop":1729025117071,"duration":14735}},{"uid":"54116fa99e420366","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/54116fa99e420366","status":"passed","time":{"start":1729007193841,"stop":1729007207137,"duration":13296}},{"uid":"b70a01de3a659a0e","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/b70a01de3a659a0e","status":"passed","time":{"start":1728952676776,"stop":1728952689915,"duration":13139}},{"uid":"947f0d28e670dee8","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/947f0d28e670dee8","status":"passed","time":{"start":1728866407404,"stop":1728866420702,"duration":13298}},{"uid":"a6bfcd234c2cda4f","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/a6bfcd234c2cda4f","status":"passed","time":{"start":1728779945991,"stop":1728779958831,"duration":12840}},{"uid":"b4a6f3ffee0598ce","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/b4a6f3ffee0598ce","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728693368268,"stop":1728693368268,"duration":0}},{"uid":"1ff6ccac00e8c180","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/1ff6ccac00e8c180","status":"passed","time":{"start":1728667994560,"stop":1728668007302,"duration":12742}},{"uid":"a2a5f0671dc5832d","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/a2a5f0671dc5832d","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728662365864,"stop":1728662365864,"duration":0}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"801ee6ed640fb2e0.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}