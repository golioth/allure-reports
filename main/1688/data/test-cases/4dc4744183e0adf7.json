{"uid":"4dc4744183e0adf7","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"c2044a44affa44a6054bb6d6ddcfd33a","time":{"start":1729557488602,"stop":1729557500812,"duration":12210},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb242ecd0>\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729557371906,"stop":1729557371907,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1729557371907,"stop":1729557371908,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1729557371908,"stop":1729557371908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1729557371909,"stop":1729557371909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729557371910,"stop":1729557371910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729557371911,"stop":1729557371911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1729557371911,"stop":1729557371912,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1729557371912,"stop":1729557371912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1729557371913,"stop":1729557371913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729557371914,"stop":1729557371914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729557371914,"stop":1729557371914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729557371915,"stop":1729557371915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729557371915,"stop":1729557372313,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1729557372314,"stop":1729557423819,"duration":51505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729557423821,"stop":1729557424804,"duration":983},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1729557424805,"stop":1729557444024,"duration":19219},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb242ecd0>\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb23ef5d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"d3298569c8e71431","name":"stdout","source":"d3298569c8e71431.txt","type":"text/plain","size":768}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1729557584790,"stop":1729557584791,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729557584793,"stop":1729557585174,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1729557585176,"stop":1729557585178,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729557585180,"stop":1729557585182,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"13f41c8cc3bf"},{"name":"thread","value":"253-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":2,"skipped":0,"passed":14,"unknown":0,"total":18},"items":[{"uid":"3a1ac0b7da86549f","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/3a1ac0b7da86549f","status":"passed","time":{"start":1729470999623,"stop":1729471012210,"duration":12587}},{"uid":"94467112885de549","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/94467112885de549","status":"passed","time":{"start":1729384759975,"stop":1729384772346,"duration":12371}},{"uid":"bfc8c213a8485e9c","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/bfc8c213a8485e9c","status":"passed","time":{"start":1729368597325,"stop":1729368609995,"duration":12670}},{"uid":"2d16d72331f88b40","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/2d16d72331f88b40","status":"passed","time":{"start":1729361445409,"stop":1729361457987,"duration":12578}},{"uid":"f7de0a553aa2d748","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/f7de0a553aa2d748","status":"passed","time":{"start":1729298130269,"stop":1729298142845,"duration":12576}},{"uid":"54170d7ba77717d2","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/54170d7ba77717d2","status":"passed","time":{"start":1729211720629,"stop":1729211733127,"duration":12498}},{"uid":"fa3aeb13adce6814","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/fa3aeb13adce6814","status":"passed","time":{"start":1729202826439,"stop":1729202838664,"duration":12225}},{"uid":"240e5d39e70ade26","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/240e5d39e70ade26","status":"passed","time":{"start":1729109411391,"stop":1729109424041,"duration":12650}},{"uid":"954843a2c00fc4e","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/954843a2c00fc4e","status":"passed","time":{"start":1729039054239,"stop":1729039068769,"duration":14530}},{"uid":"11435a201bed31a5","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/11435a201bed31a5","status":"passed","time":{"start":1729025089001,"stop":1729025102325,"duration":13324}},{"uid":"2882a372edbeb1fc","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/2882a372edbeb1fc","status":"passed","time":{"start":1729007180318,"stop":1729007193830,"duration":13512}},{"uid":"e9789f5346c66e75","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/e9789f5346c66e75","status":"passed","time":{"start":1728952663103,"stop":1728952676765,"duration":13662}},{"uid":"e1a8e6bbd9d5e452","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/e1a8e6bbd9d5e452","status":"passed","time":{"start":1728866393781,"stop":1728866407391,"duration":13610}},{"uid":"72d2078380fb3454","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/72d2078380fb3454","status":"passed","time":{"start":1728779932600,"stop":1728779945980,"duration":13380}},{"uid":"28866d9ed8228ff1","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/28866d9ed8228ff1","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728693367315,"stop":1728693367315,"duration":0}},{"uid":"ae2669f2a6ca5414","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/ae2669f2a6ca5414","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728667981707,"stop":1728667994456,"duration":12749}},{"uid":"2433d5afb8ce3b5c","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/2433d5afb8ce3b5c","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728662364829,"stop":1728662364829,"duration":0}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"4dc4744183e0adf7.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}