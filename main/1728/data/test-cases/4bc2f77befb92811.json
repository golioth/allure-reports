{"uid":"4bc2f77befb92811","name":"test_connect","fullName":"tests.hil.tests.connection.test_connection#test_connect","historyId":"7c49dc745f88fac4a6488c0ab5d556d2","time":{"start":1731458408588,"stop":1731458429094,"duration":20506},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 241429.2864107883\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <esp32_devkitc_wrover.ESP32DevKitCWROVER object at 0xffff961e09d0>\ndevice = <golioth.golioth.Device object at 0xffff9621cfd0>\n\n    async def test_connect(board, device):\n        # Set Golioth credentials\n        golioth_cred = (await device.credentials.list())[0]\n>       await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n\ntests/hil/tests/connection/test_connection.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/zephyrboard.py:20: in set_golioth_psk_credentials\n    await self.set_setting('golioth/psk', f'\"{psk}\"')\n/usr/local/lib/python3.11/dist-packages/zephyrboard.py:9: in set_setting\n    await self.send_cmd(f'settings set {key} {value}', wait_str='saved')\n/usr/local/lib/python3.11/dist-packages/board.py:87: in send_cmd\n    await self.wait_for_regex_in_line(wait_str)\n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 241429.2864107883\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731458368403,"stop":1731458368403,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1731458368404,"stop":1731458368404,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1731458368405,"stop":1731458368405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1731458368406,"stop":1731458368406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731458368406,"stop":1731458368406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731458368407,"stop":1731458368407,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1731458368408,"stop":1731458368408,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1731458368409,"stop":1731458368409,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1731458368409,"stop":1731458368410,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731458368410,"stop":1731458368410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731458368411,"stop":1731458368411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731458368411,"stop":1731458368412,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1731458368412,"stop":1731458406709,"duration":38297},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731458406709,"stop":1731458407566,"duration":857},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731458407566,"stop":1731458408585,"duration":1019},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 241429.2864107883\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <esp32_devkitc_wrover.ESP32DevKitCWROVER object at 0xffff961e09d0>\ndevice = <golioth.golioth.Device object at 0xffff9621cfd0>\n\n    async def test_connect(board, device):\n        # Set Golioth credentials\n        golioth_cred = (await device.credentials.list())[0]\n>       await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n\ntests/hil/tests/connection/test_connection.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/zephyrboard.py:20: in set_golioth_psk_credentials\n    await self.set_setting('golioth/psk', f'\"{psk}\"')\n/usr/local/lib/python3.11/dist-packages/zephyrboard.py:9: in set_setting\n    await self.send_cmd(f'settings set {key} {value}', wait_str='saved')\n/usr/local/lib/python3.11/dist-packages/board.py:87: in send_cmd\n    await self.wait_for_regex_in_line(wait_str)\n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 241429.2864107883\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"630dc3e604ca1692","name":"stdout","source":"630dc3e604ca1692.txt","type":"text/plain","size":6205}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1731458429719,"stop":1731458430093,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731458430095,"stop":1731458430095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1731458430097,"stop":1731458430100,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_connection"},{"name":"host","value":"110ed32b9274"},{"name":"thread","value":"230-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.connection.test_connection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":31,"unknown":0,"total":43},"items":[{"uid":"10e0ae1900a8daf9","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/10e0ae1900a8daf9","status":"passed","time":{"start":1731372125204,"stop":1731372155518,"duration":30314}},{"uid":"52b40812c4030d4d","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/52b40812c4030d4d","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731285775545,"stop":1731285796043,"duration":20498}},{"uid":"a2d8622471013bcb","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/a2d8622471013bcb","status":"passed","time":{"start":1731199397599,"stop":1731199430172,"duration":32573}},{"uid":"f0d6b406aba8b143","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/f0d6b406aba8b143","status":"passed","time":{"start":1731112833250,"stop":1731112861713,"duration":28463}},{"uid":"776117b8da5f0854","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/776117b8da5f0854","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731026522151,"stop":1731026542664,"duration":20513}},{"uid":"1a30374139b998ac","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/1a30374139b998ac","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1730940086103,"stop":1730940106611,"duration":20508}},{"uid":"b2e2ab23350d51f8","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/b2e2ab23350d51f8","status":"passed","time":{"start":1730893851976,"stop":1730893878509,"duration":26533}},{"uid":"ca4b3f04737ff2d1","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/ca4b3f04737ff2d1","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1730853739061,"stop":1730853759561,"duration":20500}},{"uid":"12eeb4a2233efcbe","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/12eeb4a2233efcbe","status":"passed","time":{"start":1730767298469,"stop":1730767330182,"duration":31713}},{"uid":"1711be4b2d6e970e","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/1711be4b2d6e970e","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1730680878357,"stop":1730680898860,"duration":20503}},{"uid":"ca9c45dca233f34b","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/ca9c45dca233f34b","status":"passed","time":{"start":1730594673436,"stop":1730594703933,"duration":30497}},{"uid":"4ee6803fc8824339","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/4ee6803fc8824339","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1730508147339,"stop":1730508167841,"duration":20502}},{"uid":"ca54d0b66f2e7e32","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/ca54d0b66f2e7e32","status":"passed","time":{"start":1730421901472,"stop":1730421929267,"duration":27795}},{"uid":"68bcd6ea6e931973","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/68bcd6ea6e931973","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1730335389947,"stop":1730335410453,"duration":20506}},{"uid":"816b6b295bcfb6ed","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/816b6b295bcfb6ed","status":"passed","time":{"start":1730303795610,"stop":1730303826125,"duration":30515}},{"uid":"b12c0623d07dace7","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/b12c0623d07dace7","status":"passed","time":{"start":1730248855443,"stop":1730248885668,"duration":30225}},{"uid":"f7cf74ab322bfb1","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/f7cf74ab322bfb1","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1730162566616,"stop":1730162587157,"duration":20541}},{"uid":"b7dd104ccd922e48","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/b7dd104ccd922e48","status":"passed","time":{"start":1730076224727,"stop":1730076257388,"duration":32661}},{"uid":"5c25bf4cc3be1694","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/5c25bf4cc3be1694","status":"passed","time":{"start":1729989903023,"stop":1729989940536,"duration":37513}},{"uid":"dd6a1542dc1504ea","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/dd6a1542dc1504ea","status":"passed","time":{"start":1729903339115,"stop":1729903374030,"duration":34915}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4bc2f77befb92811.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}