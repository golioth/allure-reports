{"uid":"347d561f6cd65f5b","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1729203614303,"stop":1729203646561,"duration":32258},"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84652690>\ndevice = <golioth.golioth.Device object at 0xffff846610d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729203585364,"stop":1729203585365,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729203585365,"stop":1729203585365,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729203585366,"stop":1729203585366,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729203585366,"stop":1729203585367,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729203585367,"stop":1729203585367,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729203585368,"stop":1729203585370,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729203585371,"stop":1729203585371,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729203585371,"stop":1729203585371,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729203585372,"stop":1729203586065,"duration":693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729203586065,"stop":1729203587709,"duration":1644},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729203587709,"stop":1729203611125,"duration":23416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729203611125,"stop":1729203614296,"duration":3171},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84652690>\ndevice = <golioth.golioth.Device object at 0xffff846610d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"93a9f99996a0acc5","name":"log","source":"93a9f99996a0acc5.txt","type":"text/plain","size":30285}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729203646765,"stop":1729203646798,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729203646800,"stop":1729203647429,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729203647431,"stop":1729203647433,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729203647438,"stop":1729203647438,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b6642a037bcf"},{"name":"thread","value":"593-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":10,"unknown":0,"total":12},"items":[{"uid":"29da758d4893ee3a","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/29da758d4893ee3a","status":"passed","time":{"start":1729130793668,"stop":1729130817157,"duration":23489}},{"uid":"a939bd9049d9ab6a","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/a939bd9049d9ab6a","status":"passed","time":{"start":1729110857936,"stop":1729110881307,"duration":23371}},{"uid":"52cb4c37066ab547","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/52cb4c37066ab547","status":"passed","time":{"start":1729039804216,"stop":1729039827531,"duration":23315}},{"uid":"c635bc9f73bf8f47","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/c635bc9f73bf8f47","status":"passed","time":{"start":1729026602655,"stop":1729026626983,"duration":24328}},{"uid":"3b50a3276bedd0bd","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/3b50a3276bedd0bd","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1729008788890,"stop":1729008812143,"duration":23253}},{"uid":"45da17de2976b19","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/45da17de2976b19","status":"passed","time":{"start":1728953445432,"stop":1728953469265,"duration":23833}},{"uid":"dbd09f005a3aa569","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/dbd09f005a3aa569","status":"passed","time":{"start":1728867227812,"stop":1728867251248,"duration":23436}},{"uid":"b6c1d4ed4f63f419","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/b6c1d4ed4f63f419","status":"passed","time":{"start":1728780708979,"stop":1728780732698,"duration":23719}},{"uid":"a52a817a4c71228a","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/a52a817a4c71228a","status":"passed","time":{"start":1728694644302,"stop":1728694668097,"duration":23795}},{"uid":"d7f3b847274f029a","reportUrl":"https://golioth.github.io/allure-reports/main/1633//#testresult/d7f3b847274f029a","status":"passed","time":{"start":1728669113704,"stop":1728669137581,"duration":23877}},{"uid":"ea009c9bf17571ed","reportUrl":"https://golioth.github.io/allure-reports/main/1631//#testresult/ea009c9bf17571ed","status":"passed","time":{"start":1728663810136,"stop":1728663833786,"duration":23650}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"347d561f6cd65f5b.json","parameterValues":["'nrf52840dk'","'zephyr'"]}