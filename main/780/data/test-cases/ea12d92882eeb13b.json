{"uid":"ea12d92882eeb13b","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"1c3f2c0d9c38a2f03a05e8ca5e7158fa","time":{"start":1760919607749,"stop":1760919636507,"duration":28758},"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff923c3a10>\ndevice = <golioth.golioth.Device object at 0xffff9215d160>\nproject = <golioth.golioth.Project object at 0xffff92229be0>\nreleases = {'test_blocks': Release <68f5801381db3c0394bbd89c, release_tags=[], device_tags=['68f5801281db3c0394bbd899'], artifact...ease_tags=[], device_tags=['68f5801281db3c0394bbd899'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760919512079,"stop":1760919512079,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1760919512080,"stop":1760919512081,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760919512082,"stop":1760919512082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760919512083,"stop":1760919512083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760919512084,"stop":1760919512084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760919512085,"stop":1760919512085,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760919512086,"stop":1760919512086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1760919512087,"stop":1760919562896,"duration":50809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760919562898,"stop":1760919563475,"duration":577},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760919563476,"stop":1760919564180,"duration":704},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1760919564180,"stop":1760919569552,"duration":5372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1760919569554,"stop":1760919570036,"duration":482},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1760919570037,"stop":1760919570755,"duration":718},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1760919570756,"stop":1760919572634,"duration":1878},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1760919607746,"stop":1760919607747,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff923c3a10>\ndevice = <golioth.golioth.Device object at 0xffff9215d160>\nproject = <golioth.golioth.Project object at 0xffff92229be0>\nreleases = {'test_blocks': Release <68f5801381db3c0394bbd89c, release_tags=[], device_tags=['68f5801281db3c0394bbd899'], artifact...ease_tags=[], device_tags=['68f5801281db3c0394bbd899'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"dda0f00471a406e7","name":"stdout","source":"dda0f00471a406e7.txt","type":"text/plain","size":111}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1760919636766,"stop":1760919637468,"duration":702},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1760919637470,"stop":1760919639197,"duration":1727},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1760919639199,"stop":1760919639909,"duration":710},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1760919639911,"stop":1760919639911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1760919639913,"stop":1760919639913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760919639915,"stop":1760919640273,"duration":358},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760919640276,"stop":1760919640276,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1760919640278,"stop":1760919640285,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"dans_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"3e8b2bc4e3a5"},{"name":"thread","value":"227-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":1,"skipped":0,"passed":28,"unknown":0,"total":32},"items":[{"uid":"c6a1dea8f81b266e","reportUrl":"https://golioth.github.io/allure-reports/main/779//#testresult/c6a1dea8f81b266e","status":"passed","time":{"start":1760832723334,"stop":1760832773115,"duration":49781}},{"uid":"4584e1125618bd19","reportUrl":"https://golioth.github.io/allure-reports/main/778//#testresult/4584e1125618bd19","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1760746424150,"stop":1760746457127,"duration":32977}},{"uid":"b079a38411a03b80","reportUrl":"https://golioth.github.io/allure-reports/main/773//#testresult/b079a38411a03b80","status":"passed","time":{"start":1760715479233,"stop":1760715529663,"duration":50430}},{"uid":"84f82cf8a04117b5","reportUrl":"https://golioth.github.io/allure-reports/main/772//#testresult/84f82cf8a04117b5","status":"passed","time":{"start":1760659903607,"stop":1760659952994,"duration":49387}},{"uid":"10cfc06be1114168","reportUrl":"https://golioth.github.io/allure-reports/main/770//#testresult/10cfc06be1114168","status":"passed","time":{"start":1760573540595,"stop":1760573590852,"duration":50257}},{"uid":"7f70570d2f309b78","reportUrl":"https://golioth.github.io/allure-reports/main/769//#testresult/7f70570d2f309b78","status":"passed","time":{"start":1760487116806,"stop":1760487168293,"duration":51487}},{"uid":"6065afa424e35490","reportUrl":"https://golioth.github.io/allure-reports/main/768//#testresult/6065afa424e35490","status":"passed","time":{"start":1760476051674,"stop":1760476101770,"duration":50096}},{"uid":"9bdc8d17b3a79088","reportUrl":"https://golioth.github.io/allure-reports/main/767//#testresult/9bdc8d17b3a79088","status":"passed","time":{"start":1760400775513,"stop":1760400824729,"duration":49216}},{"uid":"9269947c1e400ec6","reportUrl":"https://golioth.github.io/allure-reports/main/766//#testresult/9269947c1e400ec6","status":"passed","time":{"start":1760314327065,"stop":1760314376423,"duration":49358}},{"uid":"8a2b3fd4b69801be","reportUrl":"https://golioth.github.io/allure-reports/main/765//#testresult/8a2b3fd4b69801be","status":"passed","time":{"start":1760227986037,"stop":1760228033868,"duration":47831}},{"uid":"76d6d0ccccb99f3b","reportUrl":"https://golioth.github.io/allure-reports/main/763//#testresult/76d6d0ccccb99f3b","status":"passed","time":{"start":1760141825001,"stop":1760141875534,"duration":50533}},{"uid":"ca4f10864cb85c6d","reportUrl":"https://golioth.github.io/allure-reports/main/762//#testresult/ca4f10864cb85c6d","status":"passed","time":{"start":1760055309961,"stop":1760055358290,"duration":48329}},{"uid":"b85b8ce2f35b5900","reportUrl":"https://golioth.github.io/allure-reports/main/761//#testresult/b85b8ce2f35b5900","status":"passed","time":{"start":1760039665070,"stop":1760039713651,"duration":48581}},{"uid":"925b3562ee628a51","reportUrl":"https://golioth.github.io/allure-reports/main/758//#testresult/925b3562ee628a51","status":"failed","statusDetails":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","time":{"start":1759991833116,"stop":1759991861982,"duration":28866}},{"uid":"124455a4f17e2296","reportUrl":"https://golioth.github.io/allure-reports/main/757//#testresult/124455a4f17e2296","status":"failed","statusDetails":"AssertionError: assert 9 == 6\n +  where 9 = int('9')","time":{"start":1759969045455,"stop":1759969101689,"duration":56234}},{"uid":"fd7a823b7c74d3a7","reportUrl":"https://golioth.github.io/allure-reports/main/753//#testresult/fd7a823b7c74d3a7","status":"passed","time":{"start":1759882326098,"stop":1759882378354,"duration":52256}},{"uid":"31eba58c813dedf5","reportUrl":"https://golioth.github.io/allure-reports/main/752//#testresult/31eba58c813dedf5","status":"passed","time":{"start":1759860950346,"stop":1759861002443,"duration":52097}},{"uid":"7368e31c81648803","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/7368e31c81648803","status":"passed","time":{"start":1759848003192,"stop":1759848055946,"duration":52754}},{"uid":"2ab6336fb53a1933","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/2ab6336fb53a1933","status":"passed","time":{"start":1759796705180,"stop":1759796753424,"duration":48244}},{"uid":"ffd5c239680943d5","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/ffd5c239680943d5","status":"passed","time":{"start":1759775859399,"stop":1759775908879,"duration":49480}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","dans_orange_pi","anyio"]},"source":"ea12d92882eeb13b.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}