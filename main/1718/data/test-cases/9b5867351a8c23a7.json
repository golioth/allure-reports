{"uid":"9b5867351a8c23a7","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1731026162730,"stop":1731026175228,"duration":12498},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa0fd64d0>\ndevice = <golioth.golioth.Device object at 0xffffa103e2d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa103e2d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731026092228,"stop":1731026092228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1731026092229,"stop":1731026092229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1731026092230,"stop":1731026092230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1731026092231,"stop":1731026092231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731026092232,"stop":1731026092232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731026092233,"stop":1731026092233,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1731026092234,"stop":1731026092234,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1731026092234,"stop":1731026092234,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1731026092235,"stop":1731026092235,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731026092236,"stop":1731026092236,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731026092236,"stop":1731026092237,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731026092237,"stop":1731026092684,"duration":447},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731026092237,"stop":1731026092237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1731026092684,"stop":1731026144317,"duration":51633},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731026144319,"stop":1731026145216,"duration":897},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731026145217,"stop":1731026158770,"duration":13553},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa0fd64d0>\ndevice = <golioth.golioth.Device object at 0xffffa103e2d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa103e2d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"b4d7532298b0c930","name":"stdout","source":"b4d7532298b0c930.txt","type":"text/plain","size":4650}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1731026294629,"stop":1731026294629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731026294632,"stop":1731026295005,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1731026295007,"stop":1731026295009,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731026295011,"stop":1731026295013,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"b4394738debc"},{"name":"thread","value":"254-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":2,"skipped":0,"passed":17,"unknown":0,"total":37},"items":[{"uid":"1805f8197ddde666","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/1805f8197ddde666","status":"passed","time":{"start":1730939636834,"stop":1730939648979,"duration":12145}},{"uid":"cc51805ac94d0bc9","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/cc51805ac94d0bc9","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730893460146,"stop":1730893472469,"duration":12323}},{"uid":"740225cd51c28674","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/740225cd51c28674","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730853364492,"stop":1730853376853,"duration":12361}},{"uid":"180e192679b9c2d0","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/180e192679b9c2d0","status":"passed","time":{"start":1730766872853,"stop":1730766885105,"duration":12252}},{"uid":"465641952b8b8f09","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/465641952b8b8f09","status":"passed","time":{"start":1730680550110,"stop":1730680562368,"duration":12258}},{"uid":"ba60abdb222acfd5","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/ba60abdb222acfd5","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730594327956,"stop":1730594340146,"duration":12190}},{"uid":"b58c7d3f19b4d4d7","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/b58c7d3f19b4d4d7","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730507756004,"stop":1730507768292,"duration":12288}},{"uid":"253422e884b440e7","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/253422e884b440e7","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730421523130,"stop":1730421535437,"duration":12307}},{"uid":"a83fde1b9965179e","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/a83fde1b9965179e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730335014801,"stop":1730335026946,"duration":12145}},{"uid":"d059c11b3605cdce","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/d059c11b3605cdce","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730303438993,"stop":1730303451148,"duration":12155}},{"uid":"3ec44c969c1a56cf","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/3ec44c969c1a56cf","status":"passed","time":{"start":1730248460068,"stop":1730248472359,"duration":12291}},{"uid":"82bc12161e1db184","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/82bc12161e1db184","status":"passed","time":{"start":1730162155209,"stop":1730162167720,"duration":12511}},{"uid":"d63022797b5d3096","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/d63022797b5d3096","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730075832017,"stop":1730075844368,"duration":12351}},{"uid":"62026ace135a0551","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/62026ace135a0551","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729989527958,"stop":1729989540175,"duration":12217}},{"uid":"e71fa6d880362a69","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/e71fa6d880362a69","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729902961631,"stop":1729902973920,"duration":12289}},{"uid":"82a45f96eee4d8b","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/82a45f96eee4d8b","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729816583498,"stop":1729816595724,"duration":12226}},{"uid":"c6954a0ff9763b0c","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/c6954a0ff9763b0c","status":"passed","time":{"start":1729730035401,"stop":1729730047631,"duration":12230}},{"uid":"5c86449887e89185","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/5c86449887e89185","status":"passed","time":{"start":1729645443420,"stop":1729645455756,"duration":12336}},{"uid":"eea0843b7e6a1135","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/eea0843b7e6a1135","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729557446888,"stop":1729557459064,"duration":12176}},{"uid":"9242961cd87087c8","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/9242961cd87087c8","status":"passed","time":{"start":1729470963701,"stop":1729470976145,"duration":12444}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"9b5867351a8c23a7.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}