{"uid":"78ae22c4783fb938","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6fabbbcd9afd469e2e0bf8673f87e50e","time":{"start":1731286677036,"stop":1731286770571,"duration":93535},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa883bc90>\ndevice = <golioth.golioth.Device object at 0xffffa882db90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731286667461,"stop":1731286667461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731286667461,"stop":1731286667461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731286667462,"stop":1731286667462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731286667462,"stop":1731286667462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731286667463,"stop":1731286667463,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731286667464,"stop":1731286667466,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731286667466,"stop":1731286667467,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731286667467,"stop":1731286667467,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731286667468,"stop":1731286667904,"duration":436},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731286667905,"stop":1731286668755,"duration":850},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731286668756,"stop":1731286676497,"duration":7741},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731286676497,"stop":1731286677033,"duration":536},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa883bc90>\ndevice = <golioth.golioth.Device object at 0xffffa882db90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"4a9007276f07afa9","name":"log","source":"4a9007276f07afa9.txt","type":"text/plain","size":18445}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731286770809,"stop":1731286770849,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731286770850,"stop":1731286771262,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731286771264,"stop":1731286771266,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731286771271,"stop":1731286771271,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"56fa0ae660af"},{"name":"thread","value":"444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":38,"unknown":0,"total":41},"items":[{"uid":"2431d094744bd925","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/2431d094744bd925","status":"passed","time":{"start":1731200370749,"stop":1731200385993,"duration":15244}},{"uid":"84c01027d7e523c7","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/84c01027d7e523c7","status":"passed","time":{"start":1731113709588,"stop":1731113724927,"duration":15339}},{"uid":"922b917b9046fa8","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/922b917b9046fa8","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731027723676,"stop":1731027723676,"duration":0}},{"uid":"4bab89d777372868","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/4bab89d777372868","status":"passed","time":{"start":1730941014750,"stop":1730941030074,"duration":15324}},{"uid":"5dfb5a1d9835ee86","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/5dfb5a1d9835ee86","status":"passed","time":{"start":1730854722855,"stop":1730854739182,"duration":16327}},{"uid":"2bffd0aeba23c606","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/2bffd0aeba23c606","status":"passed","time":{"start":1730854722855,"stop":1730854739182,"duration":16327}},{"uid":"bbbaea6dc35b901e","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/bbbaea6dc35b901e","status":"passed","time":{"start":1730768351786,"stop":1730768367125,"duration":15339}},{"uid":"5a38187add2bdf54","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/5a38187add2bdf54","status":"passed","time":{"start":1730681429095,"stop":1730681445849,"duration":16754}},{"uid":"a71c239e3081c96","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/a71c239e3081c96","status":"passed","time":{"start":1730595790845,"stop":1730595806956,"duration":16111}},{"uid":"84653bb2e8a92272","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/84653bb2e8a92272","status":"passed","time":{"start":1730509044050,"stop":1730509060377,"duration":16327}},{"uid":"f5e799e84d9eb1b7","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/f5e799e84d9eb1b7","status":"passed","time":{"start":1730422730155,"stop":1730422746610,"duration":16455}},{"uid":"1251789d4ffd7be8","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/1251789d4ffd7be8","status":"passed","time":{"start":1730336418109,"stop":1730336434217,"duration":16108}},{"uid":"9dfd333c31e2eea9","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/9dfd333c31e2eea9","status":"passed","time":{"start":1730304929636,"stop":1730304947059,"duration":17423}},{"uid":"bb8d0cc1cd76673e","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/bb8d0cc1cd76673e","status":"passed","time":{"start":1730249990749,"stop":1730250007654,"duration":16905}},{"uid":"6155fad1a48b655c","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/6155fad1a48b655c","status":"passed","time":{"start":1730163507674,"stop":1730163523038,"duration":15364}},{"uid":"f6dd32881a023a09","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/f6dd32881a023a09","status":"passed","time":{"start":1730077268336,"stop":1730077284827,"duration":16491}},{"uid":"91d2ecfe6432c1ac","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/91d2ecfe6432c1ac","status":"passed","time":{"start":1729990799248,"stop":1729990815622,"duration":16374}},{"uid":"63b00d8f69cf98ff","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/63b00d8f69cf98ff","status":"passed","time":{"start":1729904258138,"stop":1729904274409,"duration":16271}},{"uid":"5d25082a4d20f4de","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/5d25082a4d20f4de","status":"passed","time":{"start":1729818118052,"stop":1729818134745,"duration":16693}},{"uid":"92116798a8d78822","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/92116798a8d78822","status":"passed","time":{"start":1729731535447,"stop":1729731550716,"duration":15269}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"78ae22c4783fb938.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}