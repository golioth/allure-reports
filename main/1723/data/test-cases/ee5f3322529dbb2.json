{"uid":"ee5f3322529dbb2","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1731288069536,"stop":1731288162771,"duration":93235},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa87ee990>\ndevice = <golioth.golioth.Device object at 0xffffa8809b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731288040690,"stop":1731288040691,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731288040691,"stop":1731288040691,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731288040692,"stop":1731288040693,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731288040692,"stop":1731288040692,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731288040693,"stop":1731288040693,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731288040694,"stop":1731288040696,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731288040697,"stop":1731288040697,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731288040697,"stop":1731288040697,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731288040698,"stop":1731288041125,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731288041126,"stop":1731288042045,"duration":919},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731288042045,"stop":1731288068450,"duration":26405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731288068450,"stop":1731288069530,"duration":1080},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa87ee990>\ndevice = <golioth.golioth.Device object at 0xffffa8809b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"6ae553dbfd1f1dca","name":"log","source":"6ae553dbfd1f1dca.txt","type":"text/plain","size":16179}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731288163055,"stop":1731288163098,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731288163099,"stop":1731288163525,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731288163527,"stop":1731288163529,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731288163534,"stop":1731288163534,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f63aa374b852"},{"name":"thread","value":"556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":7,"skipped":0,"passed":28,"unknown":0,"total":41},"items":[{"uid":"e55b59b50dd9def6","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/e55b59b50dd9def6","status":"passed","time":{"start":1731202045940,"stop":1731202075981,"duration":30041}},{"uid":"8e6c267a5cc9ff9","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/8e6c267a5cc9ff9","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731115599212,"stop":1731115599212,"duration":0}},{"uid":"f957bc2b760900d0","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/f957bc2b760900d0","status":"passed","time":{"start":1731028883905,"stop":1731028930576,"duration":46671}},{"uid":"ce3d60d26b29f2b7","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/ce3d60d26b29f2b7","status":"passed","time":{"start":1730942794768,"stop":1730942825848,"duration":31080}},{"uid":"5776aa60f16f2d9e","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/5776aa60f16f2d9e","status":"passed","time":{"start":1730893622488,"stop":1730893722804,"duration":100316}},{"uid":"4ea6c5b26b94f5a3","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/4ea6c5b26b94f5a3","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1730856146869,"stop":1730856146869,"duration":0}},{"uid":"a0dc9fb70d758a43","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/a0dc9fb70d758a43","status":"passed","time":{"start":1730770065063,"stop":1730770111221,"duration":46158}},{"uid":"aabb55146abe9656","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/aabb55146abe9656","status":"passed","time":{"start":1730683541913,"stop":1730683580362,"duration":38449}},{"uid":"b232a54154161b8c","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/b232a54154161b8c","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1730597151347,"stop":1730597151347,"duration":0}},{"uid":"af12e45af83796d9","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/af12e45af83796d9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730510173149,"stop":1730510266268,"duration":93119}},{"uid":"2cc30e78f7574134","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/2cc30e78f7574134","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730423893774,"stop":1730423986987,"duration":93213}},{"uid":"d699894f92285c65","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/d699894f92285c65","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1730338987506,"stop":1730338987506,"duration":0}},{"uid":"9ddd4a542bf16ceb","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/9ddd4a542bf16ceb","status":"passed","time":{"start":1730306361546,"stop":1730306390986,"duration":29440}},{"uid":"468b8caa3b93ce6d","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/468b8caa3b93ce6d","status":"passed","time":{"start":1730251574062,"stop":1730251627256,"duration":53194}},{"uid":"d2d9cab3862aac35","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/d2d9cab3862aac35","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730165353258,"stop":1730165446596,"duration":93338}},{"uid":"be5fc41a6e4064ae","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/be5fc41a6e4064ae","status":"passed","time":{"start":1730078508866,"stop":1730078557257,"duration":48391}},{"uid":"384f0cb0e258efd9","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/384f0cb0e258efd9","status":"passed","time":{"start":1729992410472,"stop":1729992510532,"duration":100060}},{"uid":"4794d262ac9e82ef","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/4794d262ac9e82ef","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729905654463,"stop":1729905747729,"duration":93266}},{"uid":"e9f990dd5ab16736","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/e9f990dd5ab16736","status":"passed","time":{"start":1729819646073,"stop":1729819676375,"duration":30302}},{"uid":"7e379630a2cb90e5","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/7e379630a2cb90e5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729733369033,"stop":1729733394732,"duration":25699}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"ee5f3322529dbb2.json","parameterValues":["'nrf9160dk'","'zephyr'"]}