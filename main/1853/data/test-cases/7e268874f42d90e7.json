{"uid":"7e268874f42d90e7","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1732756962981,"stop":1732757055747,"duration":92766},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9856aed0>\ndevice = <golioth.golioth.Device object at 0xffff98585f90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732756933665,"stop":1732756933665,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732756933665,"stop":1732756933665,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732756933666,"stop":1732756933667,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732756933666,"stop":1732756933666,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732756933667,"stop":1732756933667,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732756933668,"stop":1732756933670,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732756933670,"stop":1732756933671,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732756933671,"stop":1732756933671,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732756933672,"stop":1732756934092,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732756934092,"stop":1732756934884,"duration":792},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732756934885,"stop":1732756961874,"duration":26989},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732756961875,"stop":1732756962974,"duration":1099},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9856aed0>\ndevice = <golioth.golioth.Device object at 0xffff98585f90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"80bee7e2d4071cf6","name":"log","source":"80bee7e2d4071cf6.txt","type":"text/plain","size":15053}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732757056031,"stop":1732757056066,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732757056068,"stop":1732757056480,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732757056482,"stop":1732757056484,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732757056489,"stop":1732757056490,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e78b79d92c76"},{"name":"thread","value":"573-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":11,"skipped":0,"passed":52,"unknown":0,"total":70},"items":[{"uid":"7249485fde9f838f","reportUrl":"https://golioth.github.io/allure-reports/main/1846//#testresult/7249485fde9f838f","status":"passed","time":{"start":1732670801584,"stop":1732670837180,"duration":35596}},{"uid":"3797b138371df8a1","reportUrl":"https://golioth.github.io/allure-reports/main/1845//#testresult/3797b138371df8a1","status":"passed","time":{"start":1732644676592,"stop":1732644711332,"duration":34740}},{"uid":"29e3a70adb7a94f2","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/29e3a70adb7a94f2","status":"passed","time":{"start":1732569681552,"stop":1732569701246,"duration":19694}},{"uid":"b115be5c2337650b","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/b115be5c2337650b","status":"passed","time":{"start":1732569681552,"stop":1732569701246,"duration":19694}},{"uid":"c83e71cfc4f66e47","reportUrl":"https://golioth.github.io/allure-reports/main/1843//#testresult/c83e71cfc4f66e47","status":"passed","time":{"start":1732584309151,"stop":1732584336708,"duration":27557}},{"uid":"620f15c4ed985e2e","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/620f15c4ed985e2e","status":"passed","time":{"start":1732569681552,"stop":1732569701246,"duration":19694}},{"uid":"96418ac746999fb1","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/96418ac746999fb1","status":"passed","time":{"start":1732569681552,"stop":1732569701246,"duration":19694}},{"uid":"c8bf0dceb94dcea4","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/c8bf0dceb94dcea4","status":"passed","time":{"start":1732569681552,"stop":1732569701246,"duration":19694}},{"uid":"d1ebf55a3d199e15","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/d1ebf55a3d199e15","status":"passed","time":{"start":1732498489710,"stop":1732498508884,"duration":19174}},{"uid":"18a631c60f7d4ad7","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/18a631c60f7d4ad7","status":"passed","time":{"start":1732411957158,"stop":1732411977626,"duration":20468}},{"uid":"8bb8cbbc17e27df7","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/8bb8cbbc17e27df7","status":"passed","time":{"start":1732326464943,"stop":1732326499746,"duration":34803}},{"uid":"d70401ad5c457d9d","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/d70401ad5c457d9d","status":"passed","time":{"start":1732323713460,"stop":1732323772186,"duration":58726}},{"uid":"df5cc79589591ae2","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/df5cc79589591ae2","status":"passed","time":{"start":1732310631274,"stop":1732310650313,"duration":19039}},{"uid":"53a7e208ce2162e0","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/53a7e208ce2162e0","status":"passed","time":{"start":1732307511294,"stop":1732307552457,"duration":41163}},{"uid":"c2cd5f22f2dc517","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/c2cd5f22f2dc517","status":"passed","time":{"start":1732065734373,"stop":1732065767481,"duration":33108}},{"uid":"81bba2d5509f86ea","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/81bba2d5509f86ea","status":"passed","time":{"start":1732060712762,"stop":1732060748011,"duration":35249}},{"uid":"66cd863027a169d9","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/66cd863027a169d9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732038160611,"stop":1732038253355,"duration":92744}},{"uid":"8b79976d1bb28404","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/8b79976d1bb28404","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731979330219,"stop":1731979422965,"duration":92746}},{"uid":"49cb2e451114c8fa","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/49cb2e451114c8fa","status":"passed","time":{"start":1731969167726,"stop":1731969202657,"duration":34931}},{"uid":"53735a2b749eea8a","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/53735a2b749eea8a","status":"passed","time":{"start":1731893135056,"stop":1731893175378,"duration":40322}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7e268874f42d90e7.json","parameterValues":["'nrf9160dk'","'zephyr'"]}