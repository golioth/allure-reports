{"uid":"eadcdb69097b09a8","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1732757560644,"stop":1732757654541,"duration":93897},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99c1ab50>\nproject = <golioth.golioth.Project object at 0xffff99d8ead0>\ndevice = <golioth.golioth.Device object at 0xffff99c35d50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732757530626,"stop":1732757530626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732757530626,"stop":1732757530627,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732757530627,"stop":1732757530627,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732757530628,"stop":1732757530628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732757530628,"stop":1732757530628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732757530629,"stop":1732757530629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732757530629,"stop":1732757530629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732757530630,"stop":1732757530632,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732757530632,"stop":1732757531041,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732757531042,"stop":1732757531900,"duration":858},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732757531901,"stop":1732757559574,"duration":27673},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732757559575,"stop":1732757560641,"duration":1066},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99c1ab50>\nproject = <golioth.golioth.Project object at 0xffff99d8ead0>\ndevice = <golioth.golioth.Device object at 0xffff99c35d50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"bbf7e7949e71d312","name":"log","source":"bbf7e7949e71d312.txt","type":"text/plain","size":20683}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732757654857,"stop":1732757655276,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732757655278,"stop":1732757655686,"duration":408},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732757655688,"stop":1732757655690,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732757655692,"stop":1732757655692,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e78b79d92c76"},{"name":"thread","value":"818-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":16,"skipped":0,"passed":54,"unknown":0,"total":70},"items":[{"uid":"754b59bf724fad0d","reportUrl":"https://golioth.github.io/allure-reports/main/1846//#testresult/754b59bf724fad0d","status":"passed","time":{"start":1732671195752,"stop":1732671223557,"duration":27805}},{"uid":"68f3ba2eb9bcab","reportUrl":"https://golioth.github.io/allure-reports/main/1845//#testresult/68f3ba2eb9bcab","status":"passed","time":{"start":1732645141658,"stop":1732645167813,"duration":26155}},{"uid":"2dafe719ddb2d26e","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/2dafe719ddb2d26e","status":"passed","time":{"start":1732569953563,"stop":1732569966728,"duration":13165}},{"uid":"5b9dba1504fd2588","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/5b9dba1504fd2588","status":"passed","time":{"start":1732569953563,"stop":1732569966728,"duration":13165}},{"uid":"ad07033d7ffe1f5","reportUrl":"https://golioth.github.io/allure-reports/main/1843//#testresult/ad07033d7ffe1f5","status":"passed","time":{"start":1732584723134,"stop":1732584752378,"duration":29244}},{"uid":"7f4ae1c8db989655","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/7f4ae1c8db989655","status":"passed","time":{"start":1732569953563,"stop":1732569966728,"duration":13165}},{"uid":"2145831c41f7d1bb","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/2145831c41f7d1bb","status":"passed","time":{"start":1732569953563,"stop":1732569966728,"duration":13165}},{"uid":"4445b38da27a9ddf","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/4445b38da27a9ddf","status":"passed","time":{"start":1732569953563,"stop":1732569966728,"duration":13165}},{"uid":"de72e963a139bfc8","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/de72e963a139bfc8","status":"passed","time":{"start":1732498764401,"stop":1732498777219,"duration":12818}},{"uid":"be95404365e203cf","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/be95404365e203cf","status":"passed","time":{"start":1732412225360,"stop":1732412239916,"duration":14556}},{"uid":"3eefb1349712074c","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/3eefb1349712074c","status":"passed","time":{"start":1732327041290,"stop":1732327072367,"duration":31077}},{"uid":"c6aabfecfa1a6d9d","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/c6aabfecfa1a6d9d","status":"passed","time":{"start":1732324126855,"stop":1732324154373,"duration":27518}},{"uid":"cb93099c8d86c526","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/cb93099c8d86c526","status":"passed","time":{"start":1732310898721,"stop":1732310910275,"duration":11554}},{"uid":"a76666be88deecfb","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/a76666be88deecfb","status":"passed","time":{"start":1732307865348,"stop":1732307892629,"duration":27281}},{"uid":"e690e2389cbd71a9","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/e690e2389cbd71a9","status":"passed","time":{"start":1732066092393,"stop":1732066167885,"duration":75492}},{"uid":"8b1dd09009ea7913","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/8b1dd09009ea7913","status":"passed","time":{"start":1732061125779,"stop":1732061147352,"duration":21573}},{"uid":"47bee2b80d2875d2","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/47bee2b80d2875d2","status":"passed","time":{"start":1732038499256,"stop":1732038511841,"duration":12585}},{"uid":"80c037040e88ba51","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/80c037040e88ba51","status":"passed","time":{"start":1731979721694,"stop":1731979759976,"duration":38282}},{"uid":"a374e34005ab58f2","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/a374e34005ab58f2","status":"passed","time":{"start":1731969516437,"stop":1731969548625,"duration":32188}},{"uid":"b6aefd2783f63f22","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/b6aefd2783f63f22","status":"passed","time":{"start":1731893598357,"stop":1731893629792,"duration":31435}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"eadcdb69097b09a8.json","parameterValues":["'nrf9160dk'","'zephyr'"]}