{"uid":"a39ace7222d59a25","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6de3eafb2765c88fcbba2d44b75da8e7","time":{"start":1732277977252,"stop":1732278070774,"duration":93522},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a77be90>\ndevice = <golioth.golioth.Device object at 0xffff9a762550>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732277962745,"stop":1732277962745,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732277962746,"stop":1732277962746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732277962746,"stop":1732277962746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732277962747,"stop":1732277962748,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732277962747,"stop":1732277962747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732277962748,"stop":1732277962750,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732277962751,"stop":1732277962752,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732277962751,"stop":1732277962751,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732277962752,"stop":1732277963161,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732277963162,"stop":1732277964027,"duration":865},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732277964028,"stop":1732277976633,"duration":12605},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732277976634,"stop":1732277977249,"duration":615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a77be90>\ndevice = <golioth.golioth.Device object at 0xffff9a762550>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b96793c30cbc2189","name":"log","source":"b96793c30cbc2189.txt","type":"text/plain","size":26575}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732278071148,"stop":1732278071197,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732278071199,"stop":1732278071588,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732278071590,"stop":1732278071592,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732278071597,"stop":1732278071597,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9337facf6ff6"},{"name":"thread","value":"428-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":57,"unknown":0,"total":61},"items":[{"uid":"c1bea2cdd9745f17","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/c1bea2cdd9745f17","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732237716060,"stop":1732237809673,"duration":93613}},{"uid":"81ea009bb4c44e3d","reportUrl":"https://golioth.github.io/allure-reports/main/1809//#testresult/81ea009bb4c44e3d","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'","time":{"start":1732214311621,"stop":1732214311621,"duration":0}},{"uid":"9bbc89b3e0dd566d","reportUrl":"https://golioth.github.io/allure-reports/main/1804//#testresult/9bbc89b3e0dd566d","status":"passed","time":{"start":1732162357217,"stop":1732162402257,"duration":45040}},{"uid":"f866fa2269b192","reportUrl":"https://golioth.github.io/allure-reports/main/1803//#testresult/f866fa2269b192","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732152255409,"stop":1732152349093,"duration":93684}},{"uid":"9fd39205205f5fe6","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/9fd39205205f5fe6","status":"passed","time":{"start":1732139210315,"stop":1732139257126,"duration":46811}},{"uid":"5589e9628a058f34","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/5589e9628a058f34","status":"passed","time":{"start":1732064430662,"stop":1732064475728,"duration":45066}},{"uid":"fa71331125861f23","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/fa71331125861f23","status":"passed","time":{"start":1732059498057,"stop":1732059542811,"duration":44754}},{"uid":"8b66c8b87fbc2670","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/8b66c8b87fbc2670","status":"passed","time":{"start":1732037430638,"stop":1732037475748,"duration":45110}},{"uid":"bc23484ab45c5a6","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/bc23484ab45c5a6","status":"passed","time":{"start":1731978084858,"stop":1731978129543,"duration":44685}},{"uid":"21b0b31794eadb4b","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/21b0b31794eadb4b","status":"passed","time":{"start":1731967808500,"stop":1731967857968,"duration":49468}},{"uid":"b28619579d110701","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/b28619579d110701","status":"passed","time":{"start":1731891802642,"stop":1731891848819,"duration":46177}},{"uid":"b67b5b5869436a84","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/b67b5b5869436a84","status":"passed","time":{"start":1731805447253,"stop":1731805492134,"duration":44881}},{"uid":"7c0113f67bc7928f","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/7c0113f67bc7928f","status":"passed","time":{"start":1731719157111,"stop":1731719202556,"duration":45445}},{"uid":"41ce135f6dd5cf39","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/41ce135f6dd5cf39","status":"passed","time":{"start":1731632720355,"stop":1731632764720,"duration":44365}},{"uid":"23611c944582fb6c","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/23611c944582fb6c","status":"passed","time":{"start":1731608343536,"stop":1731608389107,"duration":45571}},{"uid":"c9574ad0054845d0","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/c9574ad0054845d0","status":"passed","time":{"start":1731566429354,"stop":1731566474846,"duration":45492}},{"uid":"156badfcbf569c92","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/156badfcbf569c92","status":"passed","time":{"start":1731545835820,"stop":1731545881209,"duration":45389}},{"uid":"15fa8823d89ed691","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/15fa8823d89ed691","status":"passed","time":{"start":1731460237461,"stop":1731460282215,"duration":44754}},{"uid":"c90f7a3c660ba016","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/c90f7a3c660ba016","status":"passed","time":{"start":1731373257387,"stop":1731373302467,"duration":45080}},{"uid":"5534c7a022740a7b","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/5534c7a022740a7b","status":"passed","time":{"start":1731286929912,"stop":1731287020667,"duration":90755}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"a39ace7222d59a25.json","parameterValues":["'rak5010'","'zephyr'"]}