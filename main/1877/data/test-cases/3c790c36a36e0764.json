{
  "uid" : "3c790c36a36e0764",
  "name" : "test_lightdb_delete",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete",
  "historyId" : "f1e2c2234d7dcc518bcd25346bf33416",
  "time" : {
    "start" : 1733762822248,
    "stop" : 1733762915979,
    "duration" : 93731
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb42f7a10>\ndevice = <golioth.golioth.Device object at 0xffffb4312490>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733762793079,
      "stop" : 1733762793079,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733762793076,
      "stop" : 1733762793076,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733762794405,
      "stop" : 1733762821168,
      "duration" : 26763
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733762793083,
      "stop" : 1733762793083,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733762821168,
      "stop" : 1733762822241,
      "duration" : 1073
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733762793077,
      "stop" : 1733762793077,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733762793080,
      "stop" : 1733762793082,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733762793078,
      "stop" : 1733762793078,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733762793514,
      "stop" : 1733762794405,
      "duration" : 891
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733762793078,
      "stop" : 1733762793078,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733762793084,
      "stop" : 1733762793514,
      "duration" : 430
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733762793082,
      "stop" : 1733762793082,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb42f7a10>\ndevice = <golioth.golioth.Device object at 0xffffb4312490>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "205e760508acf334",
      "name" : "log",
      "source" : "205e760508acf334.txt",
      "type" : "text/plain",
      "size" : 19566
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1733762916343,
      "stop" : 1733762916643,
      "duration" : 300
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733762917040,
      "stop" : 1733762917040,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733762916645,
      "stop" : 1733762917030,
      "duration" : 385
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733762917032,
      "stop" : 1733762917035,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "0717efacab5f"
  }, {
    "name" : "thread",
    "value" : "739-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 11,
        "skipped" : 0,
        "passed" : 72,
        "unknown" : 0,
        "total" : 83
      },
      "items" : [ {
        "uid" : "5068d2738b0c286a",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1876/#testresult/5068d2738b0c286a",
        "status" : "passed",
        "time" : {
          "start" : 1733708126373,
          "stop" : 1733708153273,
          "duration" : 26900
        }
      }, {
        "uid" : "afa4f02c2616ebf4",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1875/#testresult/afa4f02c2616ebf4",
        "status" : "passed",
        "time" : {
          "start" : 1733621780594,
          "stop" : 1733621870118,
          "duration" : 89524
        }
      }, {
        "uid" : "42826ab956a09b55",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1874/#testresult/42826ab956a09b55",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733535151123,
          "stop" : 1733535245094,
          "duration" : 93971
        }
      }, {
        "uid" : "2ba71aec3d61ccde",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1867/#testresult/2ba71aec3d61ccde",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733411949226,
          "stop" : 1733412042660,
          "duration" : 93434
        }
      }, {
        "uid" : "54529889a6bfd40",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1866/#testresult/54529889a6bfd40",
        "status" : "passed",
        "time" : {
          "start" : 1733362277068,
          "stop" : 1733362294898,
          "duration" : 17830
        }
      }, {
        "uid" : "e4d4413b9a9db5ca",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1863/#testresult/e4d4413b9a9db5ca",
        "status" : "passed",
        "time" : {
          "start" : 1733275697991,
          "stop" : 1733275716022,
          "duration" : 18031
        }
      }, {
        "uid" : "b68d42d9c814ef29",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1859/#testresult/b68d42d9c814ef29",
        "status" : "passed",
        "time" : {
          "start" : 1733189547268,
          "stop" : 1733189577071,
          "duration" : 29803
        }
      }, {
        "uid" : "35653903d1eede23",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1858/#testresult/35653903d1eede23",
        "status" : "passed",
        "time" : {
          "start" : 1733164517884,
          "stop" : 1733164545109,
          "duration" : 27225
        }
      }, {
        "uid" : "cb9823feeec527b8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1857//#testresult/cb9823feeec527b8",
        "status" : "passed",
        "time" : {
          "start" : 1733103190428,
          "stop" : 1733103206563,
          "duration" : 16135
        }
      }, {
        "uid" : "c166b4a3512bfed9",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1856//#testresult/c166b4a3512bfed9",
        "status" : "passed",
        "time" : {
          "start" : 1733016836917,
          "stop" : 1733016854361,
          "duration" : 17444
        }
      }, {
        "uid" : "e80711aa2f78b161",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1855//#testresult/e80711aa2f78b161",
        "status" : "passed",
        "time" : {
          "start" : 1732930002781,
          "stop" : 1732930018695,
          "duration" : 15914
        }
      }, {
        "uid" : "a4e3a91f8b6e36c7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1854//#testresult/a4e3a91f8b6e36c7",
        "status" : "passed",
        "time" : {
          "start" : 1732843704129,
          "stop" : 1732843736241,
          "duration" : 32112
        }
      }, {
        "uid" : "2d4eb89a0bfcb9c0",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1853//#testresult/2d4eb89a0bfcb9c0",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732757306248,
          "stop" : 1732757399885,
          "duration" : 93637
        }
      }, {
        "uid" : "e795ecef3d26327b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1846//#testresult/e795ecef3d26327b",
        "status" : "passed",
        "time" : {
          "start" : 1732671076145,
          "stop" : 1732671110054,
          "duration" : 33909
        }
      }, {
        "uid" : "f912d7f8798e0537",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1845//#testresult/f912d7f8798e0537",
        "status" : "passed",
        "time" : {
          "start" : 1732644941609,
          "stop" : 1732644981373,
          "duration" : 39764
        }
      }, {
        "uid" : "b7e6a774632d31d7",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/b7e6a774632d31d7",
        "status" : "passed",
        "time" : {
          "start" : 1732569856645,
          "stop" : 1732569877301,
          "duration" : 20656
        }
      }, {
        "uid" : "5cf0c87741737cce",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/5cf0c87741737cce",
        "status" : "passed",
        "time" : {
          "start" : 1732569856645,
          "stop" : 1732569877301,
          "duration" : 20656
        }
      }, {
        "uid" : "4b8ed2c93435f18f",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1843//#testresult/4b8ed2c93435f18f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732584535536,
          "stop" : 1732584629166,
          "duration" : 93630
        }
      }, {
        "uid" : "b59556c2dcd97dfb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/b59556c2dcd97dfb",
        "status" : "passed",
        "time" : {
          "start" : 1732569856645,
          "stop" : 1732569877301,
          "duration" : 20656
        }
      }, {
        "uid" : "d3d949785e9dcf10",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1842//#testresult/d3d949785e9dcf10",
        "status" : "passed",
        "time" : {
          "start" : 1732569856645,
          "stop" : 1732569877301,
          "duration" : 20656
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "3c790c36a36e0764.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}