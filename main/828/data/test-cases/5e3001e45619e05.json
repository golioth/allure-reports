{"uid":"5e3001e45619e05","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"1c3f2c0d9c38a2f03a05e8ca5e7158fa","time":{"start":1761340648589,"stop":1761340702644,"duration":54055},"status":"failed","statusMessage":"AssertionError: assert 9 == 7\n +  where 9 = int('9')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffb67f38c0>\ndevice = <golioth.golioth.Device object at 0xffffb6568440>\nproject = <golioth.golioth.Project object at 0xffffb67f3cb0>\nreleases = {'test_blocks': Release <68fbecd32f1b02da85abe424, release_tags=[], device_tags=['68fbecd22f1b02da85abe421'], artifact...ease_tags=[], device_tags=['68fbecd22f1b02da85abe421'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 9 == 7\nE                    +  where 9 = int('9')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1761340567157,"stop":1761340567157,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1761340567158,"stop":1761340567158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1761340567158,"stop":1761340567159,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1761340567159,"stop":1761340567159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1761340567160,"stop":1761340567160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1761340567160,"stop":1761340567161,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1761340567161,"stop":1761340567161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1761340567161,"stop":1761340621195,"duration":54034},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1761340621196,"stop":1761340621714,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1761340621714,"stop":1761340622200,"duration":486},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1761340622200,"stop":1761340625840,"duration":3640},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1761340625841,"stop":1761340626180,"duration":339},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1761340626180,"stop":1761340626696,"duration":516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1761340626696,"stop":1761340628041,"duration":1345},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1761340648587,"stop":1761340648587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 9 == 7\n +  where 9 = int('9')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffb67f38c0>\ndevice = <golioth.golioth.Device object at 0xffffb6568440>\nproject = <golioth.golioth.Project object at 0xffffb67f3cb0>\nreleases = {'test_blocks': Release <68fbecd32f1b02da85abe424, release_tags=[], device_tags=['68fbecd22f1b02da85abe421'], artifact...ease_tags=[], device_tags=['68fbecd22f1b02da85abe421'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 9 == 7\nE                    +  where 9 = int('9')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"a0778129ecff5b2d","name":"stdout","source":"a0778129ecff5b2d.txt","type":"text/plain","size":853}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1761340702921,"stop":1761340703403,"duration":482},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1761340703406,"stop":1761340704614,"duration":1208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1761340704616,"stop":1761340705119,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1761340705121,"stop":1761340705121,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1761340705123,"stop":1761340705123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1761340705125,"stop":1761340705379,"duration":254},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1761340705381,"stop":1761340705381,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1761340705383,"stop":1761340705393,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"dans_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"1a1202732af3"},{"name":"thread","value":"227-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":5,"unknown":0,"total":8},"items":[{"uid":"686ad2da451047c4","reportUrl":"https://golioth.github.io/allure-reports/main/816//#testresult/686ad2da451047c4","status":"passed","time":{"start":1761264809740,"stop":1761264859991,"duration":50251}},{"uid":"c627b71c913c2af4","reportUrl":"https://golioth.github.io/allure-reports/main/805//#testresult/c627b71c913c2af4","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1761178365812,"stop":1761178411099,"duration":45287}},{"uid":"711ba1eda94d1183","reportUrl":"https://golioth.github.io/allure-reports/main/792//#testresult/711ba1eda94d1183","status":"passed","time":{"start":1761091969689,"stop":1761092020879,"duration":51190}},{"uid":"461aae17c96a059e","reportUrl":"https://golioth.github.io/allure-reports/main/791//#testresult/461aae17c96a059e","status":"passed","time":{"start":1761084970042,"stop":1761085019443,"duration":49401}},{"uid":"3417de6fefbe95d","reportUrl":"https://golioth.github.io/allure-reports/main/789//#testresult/3417de6fefbe95d","status":"passed","time":{"start":1761072882919,"stop":1761072933637,"duration":50718}},{"uid":"148581c1bc541708","reportUrl":"https://golioth.github.io/allure-reports/main/786//#testresult/148581c1bc541708","status":"broken","statusDetails":"httpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://api.golioth.io/v1/projects/firmware_ci/releases/68f7900581db3c0394bc1d64'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503","time":{"start":1761054774576,"stop":1761054774782,"duration":206}},{"uid":"3430e58ffc1fbe94","reportUrl":"https://golioth.github.io/allure-reports/main/785//#testresult/3430e58ffc1fbe94","status":"passed","time":{"start":1761005742760,"stop":1761005792787,"duration":50027}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","dans_orange_pi","anyio"]},"source":"5e3001e45619e05.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}