{"uid":"e84bce7c7b231a3e","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1730423123773,"stop":1730423146603,"duration":22830},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbafc60d0>\ndevice = <golioth.golioth.Device object at 0xffffbafd9090>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730423105641,"stop":1730423105642,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730423105642,"stop":1730423105642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730423105643,"stop":1730423105643,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730423105643,"stop":1730423105643,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730423105644,"stop":1730423105644,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730423105644,"stop":1730423105646,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730423105647,"stop":1730423105647,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730423105648,"stop":1730423106072,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730423105648,"stop":1730423105648,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730423106072,"stop":1730423106992,"duration":920},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730423106992,"stop":1730423122719,"duration":15727},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730423122720,"stop":1730423123770,"duration":1050},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbafc60d0>\ndevice = <golioth.golioth.Device object at 0xffffbafd9090>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e3e8fbdc1181713","name":"log","source":"e3e8fbdc1181713.txt","type":"text/plain","size":14031}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730423146987,"stop":1730423147018,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730423147019,"stop":1730423147438,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730423147440,"stop":1730423147442,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730423147447,"stop":1730423147447,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cc4072ea469b"},{"name":"thread","value":"390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"f3dc080c17010263","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/f3dc080c17010263","status":"passed","time":{"start":1730337097324,"stop":1730337120059,"duration":22735}},{"uid":"c70d87e938e590dc","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/c70d87e938e590dc","status":"passed","time":{"start":1730305016068,"stop":1730305033993,"duration":17925}},{"uid":"86c3ef90d15830e4","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/86c3ef90d15830e4","status":"passed","time":{"start":1730250089206,"stop":1730250114027,"duration":24821}},{"uid":"fa26a138fc508f21","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/fa26a138fc508f21","status":"passed","time":{"start":1730164274768,"stop":1730164294200,"duration":19432}},{"uid":"91d77c4c89491dd","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/91d77c4c89491dd","status":"passed","time":{"start":1730077461003,"stop":1730077480909,"duration":19906}},{"uid":"c4cf17fd270b0e2a","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/c4cf17fd270b0e2a","status":"passed","time":{"start":1729990977631,"stop":1729991001534,"duration":23903}},{"uid":"e7a3e2541cf75cc5","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/e7a3e2541cf75cc5","status":"passed","time":{"start":1729904486366,"stop":1729904506203,"duration":19837}},{"uid":"d666518ad1454542","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/d666518ad1454542","status":"passed","time":{"start":1729818198417,"stop":1729818219276,"duration":20859}},{"uid":"a0ebfab01978c0ed","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/a0ebfab01978c0ed","status":"passed","time":{"start":1729732094428,"stop":1729732113406,"duration":18978}},{"uid":"f41e0cdcfdacc5a9","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/f41e0cdcfdacc5a9","status":"passed","time":{"start":1729645780104,"stop":1729645799003,"duration":18899}},{"uid":"4dc40b100ecee24","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/4dc40b100ecee24","status":"passed","time":{"start":1729559036282,"stop":1729559056769,"duration":20487}},{"uid":"7c269ea18c3d1ff8","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/7c269ea18c3d1ff8","status":"passed","time":{"start":1729472590523,"stop":1729472613135,"duration":22612}},{"uid":"f416b01f2666e34d","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/f416b01f2666e34d","status":"passed","time":{"start":1729386194033,"stop":1729386213908,"duration":19875}},{"uid":"5fb7dd876ec1370f","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/5fb7dd876ec1370f","status":"passed","time":{"start":1729370205135,"stop":1729370225004,"duration":19869}},{"uid":"5c77510cebd1e81c","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/5c77510cebd1e81c","status":"passed","time":{"start":1729363121503,"stop":1729363143868,"duration":22365}},{"uid":"b7bf732983cb06b","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/b7bf732983cb06b","status":"passed","time":{"start":1729300315399,"stop":1729300336390,"duration":20991}},{"uid":"aaddd5d2a8a68159","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/aaddd5d2a8a68159","status":"passed","time":{"start":1729213207627,"stop":1729213229237,"duration":21610}},{"uid":"d4fb415724622ac0","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/d4fb415724622ac0","status":"passed","time":{"start":1729204219728,"stop":1729204239696,"duration":19968}},{"uid":"48269c3100a52400","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/48269c3100a52400","status":"passed","time":{"start":1729130767884,"stop":1729130791303,"duration":23419}},{"uid":"e1391b2f235f4046","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/e1391b2f235f4046","status":"passed","time":{"start":1729111286868,"stop":1729111308258,"duration":21390}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e84bce7c7b231a3e.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}