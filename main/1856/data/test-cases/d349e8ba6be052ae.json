{"uid":"d349e8ba6be052ae","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"b7f28a13e79ecf798f5f87d1effddc59","time":{"start":1733014762433,"stop":1733014774736,"duration":12303},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffffa787f350>\ndevice = <golioth.golioth.Device object at 0xffffa7870f10>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa7870f10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1733014729031,"stop":1733014729032,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1733014729032,"stop":1733014729033,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1733014729033,"stop":1733014729033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1733014729034,"stop":1733014729034,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1733014729035,"stop":1733014729035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1733014729035,"stop":1733014729035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1733014729036,"stop":1733014729036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1733014729036,"stop":1733014729036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1733014729037,"stop":1733014729037,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1733014729038,"stop":1733014729038,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1733014729038,"stop":1733014729038,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1733014729038,"stop":1733014729039,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1733014729039,"stop":1733014729474,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1733014729475,"stop":1733014744105,"duration":14630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1733014744107,"stop":1733014745221,"duration":1114},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1733014745222,"stop":1733014758263,"duration":13041},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf9160dk.nRF9160DK object at 0xffffa787f350>\ndevice = <golioth.golioth.Device object at 0xffffa7870f10>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa7870f10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"20d6bb2ebf553479","name":"stdout","source":"20d6bb2ebf553479.txt","type":"text/plain","size":1968}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1733014936897,"stop":1733014936898,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1733014936903,"stop":1733014937322,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1733014937324,"stop":1733014937326,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1733014937328,"stop":1733014937330,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"d60a60513eb7"},{"name":"thread","value":"304-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":4,"skipped":0,"passed":73,"unknown":0,"total":80},"items":[{"uid":"93416d01fd27d16a","reportUrl":"https://golioth.github.io/allure-reports/main/1855//#testresult/93416d01fd27d16a","status":"passed","time":{"start":1732927952000,"stop":1732927964265,"duration":12265}},{"uid":"371f6b0b9817098b","reportUrl":"https://golioth.github.io/allure-reports/main/1854//#testresult/371f6b0b9817098b","status":"passed","time":{"start":1732842032161,"stop":1732842044428,"duration":12267}},{"uid":"17300f42b3aa94a8","reportUrl":"https://golioth.github.io/allure-reports/main/1853//#testresult/17300f42b3aa94a8","status":"passed","time":{"start":1732755535117,"stop":1732755547321,"duration":12204}},{"uid":"3ccf50c96dcf5d17","reportUrl":"https://golioth.github.io/allure-reports/main/1846//#testresult/3ccf50c96dcf5d17","status":"passed","time":{"start":1732669150975,"stop":1732669163177,"duration":12202}},{"uid":"d590445a0e43ffdf","reportUrl":"https://golioth.github.io/allure-reports/main/1845//#testresult/d590445a0e43ffdf","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732643414554,"stop":1732643414554,"duration":0}},{"uid":"b59e344b51a2f3be","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/b59e344b51a2f3be","status":"passed","time":{"start":1732577183126,"stop":1732577195312,"duration":12186}},{"uid":"429c25e8cbda002c","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/429c25e8cbda002c","status":"passed","time":{"start":1732577183126,"stop":1732577195312,"duration":12186}},{"uid":"da46b7f224467470","reportUrl":"https://golioth.github.io/allure-reports/main/1843//#testresult/da46b7f224467470","status":"passed","time":{"start":1732582804655,"stop":1732582816899,"duration":12244}},{"uid":"5ec6d10994d41a31","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/5ec6d10994d41a31","status":"passed","time":{"start":1732577183126,"stop":1732577195312,"duration":12186}},{"uid":"3689ad5ea7f1eb8","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/3689ad5ea7f1eb8","status":"passed","time":{"start":1732577183126,"stop":1732577195312,"duration":12186}},{"uid":"b0e23f6c9d4e6ec9","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/b0e23f6c9d4e6ec9","status":"passed","time":{"start":1732567847415,"stop":1732567859719,"duration":12304}},{"uid":"a42127b903da7095","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/a42127b903da7095","status":"passed","time":{"start":1732496618079,"stop":1732496630336,"duration":12257}},{"uid":"b8a20cd4a3d02177","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/b8a20cd4a3d02177","status":"passed","time":{"start":1732410611307,"stop":1732410623617,"duration":12310}},{"uid":"5fdf5f64380f5fcc","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/5fdf5f64380f5fcc","status":"passed","time":{"start":1732324548095,"stop":1732324560593,"duration":12498}},{"uid":"d1cbe31b9e428a83","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/d1cbe31b9e428a83","status":"passed","time":{"start":1732322152940,"stop":1732322165172,"duration":12232}},{"uid":"575975bcb9ae1c4c","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/575975bcb9ae1c4c","status":"passed","time":{"start":1732309663363,"stop":1732309675756,"duration":12393}},{"uid":"8627cababd6cec5d","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/8627cababd6cec5d","status":"passed","time":{"start":1732306072364,"stop":1732306084757,"duration":12393}},{"uid":"5088bcea3c2c0d81","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/5088bcea3c2c0d81","status":"passed","time":{"start":1732298776849,"stop":1732298789238,"duration":12389}},{"uid":"91cef3347fdcb1dd","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/91cef3347fdcb1dd","status":"passed","time":{"start":1732277627697,"stop":1732277639844,"duration":12147}},{"uid":"3a97dd12d6bbab95","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/3a97dd12d6bbab95","status":"passed","time":{"start":1732237728650,"stop":1732237740945,"duration":12295}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d349e8ba6be052ae.json","parameterValues":["'nrf9160dk'","'zephyr'"]}