{"uid":"2a31a4237a799604","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"ddc2f31d085089b8b5f25dfb44556fd5","time":{"start":1730163321000,"stop":1730163413730,"duration":92730},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff80452ed0>\ndevice = <golioth.golioth.Device object at 0xffff804410d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730163311380,"stop":1730163311381,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730163311381,"stop":1730163311381,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730163311382,"stop":1730163311382,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730163311382,"stop":1730163311382,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730163311383,"stop":1730163311385,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730163311383,"stop":1730163311383,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730163311386,"stop":1730163311386,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730163311387,"stop":1730163311387,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730163311387,"stop":1730163311832,"duration":445},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730163311832,"stop":1730163312769,"duration":937},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730163312770,"stop":1730163320404,"duration":7634},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730163320405,"stop":1730163320997,"duration":592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff80452ed0>\ndevice = <golioth.golioth.Device object at 0xffff804410d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"1b4155d3b2d38c22","name":"log","source":"1b4155d3b2d38c22.txt","type":"text/plain","size":14133}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730163414013,"stop":1730163414049,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730163414051,"stop":1730163414426,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730163414428,"stop":1730163414430,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730163414435,"stop":1730163414435,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"87f858eacbf1"},{"name":"thread","value":"390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":24,"unknown":0,"total":26},"items":[{"uid":"562cb9a55130f6a5","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/562cb9a55130f6a5","status":"passed","time":{"start":1730077150545,"stop":1730077170907,"duration":20362}},{"uid":"2c9feb175ca6b3a6","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/2c9feb175ca6b3a6","status":"passed","time":{"start":1729990688067,"stop":1729990706612,"duration":18545}},{"uid":"d01cd9187488a6fe","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/d01cd9187488a6fe","status":"passed","time":{"start":1729904147158,"stop":1729904165685,"duration":18527}},{"uid":"12f9a653cfe0111e","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/12f9a653cfe0111e","status":"passed","time":{"start":1729817996475,"stop":1729818016787,"duration":20312}},{"uid":"c53012c1d291d7c7","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/c53012c1d291d7c7","status":"passed","time":{"start":1729731424344,"stop":1729731442829,"duration":18485}},{"uid":"37f7e57968a8469e","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/37f7e57968a8469e","status":"passed","time":{"start":1729644896064,"stop":1729644915591,"duration":19527}},{"uid":"a8b64271d32d4fed","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/a8b64271d32d4fed","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729558620290,"stop":1729558713089,"duration":92799}},{"uid":"4d91547ea0b6faf1","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/4d91547ea0b6faf1","status":"passed","time":{"start":1729472202681,"stop":1729472221833,"duration":19152}},{"uid":"2e6152e303ad6583","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/2e6152e303ad6583","status":"passed","time":{"start":1729386060820,"stop":1729386080318,"duration":19498}},{"uid":"99b96873481973a5","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/99b96873481973a5","status":"passed","time":{"start":1729369734059,"stop":1729369749485,"duration":15426}},{"uid":"a2f17af90ea22c67","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/a2f17af90ea22c67","status":"passed","time":{"start":1729362456894,"stop":1729362471141,"duration":14247}},{"uid":"ce0e48830f0c775d","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/ce0e48830f0c775d","status":"passed","time":{"start":1729299505989,"stop":1729299525310,"duration":19321}},{"uid":"a8cbdcc2e3008f","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/a8cbdcc2e3008f","status":"passed","time":{"start":1729212930565,"stop":1729212945875,"duration":15310}},{"uid":"3e3d457f21553d1f","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/3e3d457f21553d1f","status":"passed","time":{"start":1729204067743,"stop":1729204087110,"duration":19367}},{"uid":"f6d16337e5cc91da","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/f6d16337e5cc91da","status":"passed","time":{"start":1729130556136,"stop":1729130574795,"duration":18659}},{"uid":"aff1b6a631e59c93","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/aff1b6a631e59c93","status":"passed","time":{"start":1729110660442,"stop":1729110679842,"duration":19400}},{"uid":"5598ff8af61b976d","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/5598ff8af61b976d","status":"passed","time":{"start":1729040069177,"stop":1729040087697,"duration":18520}},{"uid":"f48166939895431c","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/f48166939895431c","status":"passed","time":{"start":1729027406385,"stop":1729027426403,"duration":20018}},{"uid":"d209c96934ca36fa","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/d209c96934ca36fa","status":"passed","time":{"start":1729008840606,"stop":1729008860194,"duration":19588}},{"uid":"f340dba18b46229e","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/f340dba18b46229e","status":"passed","time":{"start":1728954192746,"stop":1728954211192,"duration":18446}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"2a31a4237a799604.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}