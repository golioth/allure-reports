{"uid":"8b79976d1bb28404","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1731979330219,"stop":1731979422965,"duration":92746},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb443e1d0>\ndevice = <golioth.golioth.Device object at 0xffffb44513d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731979301106,"stop":1731979301106,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731979301107,"stop":1731979301107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731979301107,"stop":1731979301107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731979301108,"stop":1731979301108,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731979301108,"stop":1731979301108,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731979301109,"stop":1731979301111,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731979301112,"stop":1731979301112,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731979301112,"stop":1731979301112,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731979301113,"stop":1731979301551,"duration":438},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731979301551,"stop":1731979302532,"duration":981},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731979302533,"stop":1731979329098,"duration":26565},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731979329099,"stop":1731979330216,"duration":1117},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb443e1d0>\ndevice = <golioth.golioth.Device object at 0xffffb44513d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9a1514858026b696","name":"log","source":"9a1514858026b696.txt","type":"text/plain","size":14175}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731979423248,"stop":1731979423283,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731979423285,"stop":1731979423677,"duration":392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731979423679,"stop":1731979423681,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731979423686,"stop":1731979423686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9cb160584465"},{"name":"thread","value":"519-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":9,"skipped":0,"passed":36,"unknown":0,"total":52},"items":[{"uid":"49cb2e451114c8fa","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/49cb2e451114c8fa","status":"passed","time":{"start":1731969167726,"stop":1731969202657,"duration":34931}},{"uid":"53735a2b749eea8a","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/53735a2b749eea8a","status":"passed","time":{"start":1731893135056,"stop":1731893175378,"duration":40322}},{"uid":"205ed2ebbf87260f","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/205ed2ebbf87260f","status":"passed","time":{"start":1731806782016,"stop":1731806816770,"duration":34754}},{"uid":"683060557a591ce5","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/683060557a591ce5","status":"passed","time":{"start":1731720539799,"stop":1731720559561,"duration":19762}},{"uid":"c89dfee2ab0e07ed","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/c89dfee2ab0e07ed","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731634106119,"stop":1731634106119,"duration":0}},{"uid":"b4a24d923d5cb021","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/b4a24d923d5cb021","status":"passed","time":{"start":1731609708306,"stop":1731609729305,"duration":20999}},{"uid":"203f69e0584bbf8e","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/203f69e0584bbf8e","status":"passed","time":{"start":1731568004278,"stop":1731568031415,"duration":27137}},{"uid":"755965e65dcc3f0f","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/755965e65dcc3f0f","status":"passed","time":{"start":1731547137251,"stop":1731547225323,"duration":88072}},{"uid":"b7ac8673e9f87088","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/b7ac8673e9f87088","status":"passed","time":{"start":1731461595817,"stop":1731461623346,"duration":27529}},{"uid":"21771fa442623373","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/21771fa442623373","status":"passed","time":{"start":1731374380021,"stop":1731374467524,"duration":87503}},{"uid":"3d3ab5baf0e6b75b","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/3d3ab5baf0e6b75b","status":"passed","time":{"start":1731288012186,"stop":1731288036875,"duration":24689}},{"uid":"931e428f4b8aa23f","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/931e428f4b8aa23f","status":"passed","time":{"start":1731201994197,"stop":1731202013189,"duration":18992}},{"uid":"8900f3b65a4b68dc","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/8900f3b65a4b68dc","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731115546866,"stop":1731115546866,"duration":0}},{"uid":"7c6e3604d83fcf35","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/7c6e3604d83fcf35","status":"passed","time":{"start":1731028822428,"stop":1731028850531,"duration":28103}},{"uid":"dd338febfade2790","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/dd338febfade2790","status":"passed","time":{"start":1730942742760,"stop":1730942761933,"duration":19173}},{"uid":"9eb331157a3e3f10","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/9eb331157a3e3f10","status":"passed","time":{"start":1730893569958,"stop":1730893589621,"duration":19663}},{"uid":"2e90ce691ce755f2","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/2e90ce691ce755f2","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1730856094813,"stop":1730856094813,"duration":0}},{"uid":"afedfc049e755fde","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/afedfc049e755fde","status":"passed","time":{"start":1730770001421,"stop":1730770031843,"duration":30422}},{"uid":"2006db4986777d63","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/2006db4986777d63","status":"passed","time":{"start":1730683481431,"stop":1730683508642,"duration":27211}},{"uid":"e4dafe6abe0eaf98","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/e4dafe6abe0eaf98","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1730597099117,"stop":1730597099117,"duration":0}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"8b79976d1bb28404.json","parameterValues":["'nrf9160dk'","'zephyr'"]}