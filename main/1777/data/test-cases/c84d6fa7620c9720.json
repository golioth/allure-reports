{"uid":"c84d6fa7620c9720","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1731978589993,"stop":1731978683797,"duration":93804},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff90af2c10>\ndevice = <golioth.golioth.Device object at 0xffff90b0da90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731978571830,"stop":1731978571830,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731978571831,"stop":1731978571831,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731978571831,"stop":1731978571831,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731978571832,"stop":1731978571833,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731978571832,"stop":1731978571832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731978571833,"stop":1731978571835,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731978571836,"stop":1731978571836,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731978571836,"stop":1731978571836,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731978571837,"stop":1731978572341,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731978572342,"stop":1731978573363,"duration":1021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731978573364,"stop":1731978589109,"duration":15745},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731978589110,"stop":1731978589990,"duration":880},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff90af2c10>\ndevice = <golioth.golioth.Device object at 0xffff90b0da90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8b1dd42ab9d8b4c8","name":"log","source":"8b1dd42ab9d8b4c8.txt","type":"text/plain","size":18259}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731978684078,"stop":1731978684123,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731978684125,"stop":1731978684521,"duration":396},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731978684523,"stop":1731978684525,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731978684530,"stop":1731978684531,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"c4dd81bd5b14"},{"name":"thread","value":"474-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":47,"unknown":0,"total":52},"items":[{"uid":"3732534310598876","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/3732534310598876","status":"passed","time":{"start":1731967919379,"stop":1731967929592,"duration":10213}},{"uid":"1d9347a123d7c434","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/1d9347a123d7c434","status":"passed","time":{"start":1731892296714,"stop":1731892305182,"duration":8468}},{"uid":"e7b2a4c8d023a918","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/e7b2a4c8d023a918","status":"passed","time":{"start":1731806141042,"stop":1731806148606,"duration":7564}},{"uid":"40c91ab766beba53","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/40c91ab766beba53","status":"passed","time":{"start":1731719356504,"stop":1731719363211,"duration":6707}},{"uid":"c9093e6a915ea4ee","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/c9093e6a915ea4ee","status":"passed","time":{"start":1731632923001,"stop":1731632934676,"duration":11675}},{"uid":"c843a3110ccce717","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/c843a3110ccce717","status":"passed","time":{"start":1731608660395,"stop":1731608670302,"duration":9907}},{"uid":"59824529383ca313","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/59824529383ca313","status":"passed","time":{"start":1731567021448,"stop":1731567033221,"duration":11773}},{"uid":"9e09cfd37c408e95","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/9e09cfd37c408e95","status":"passed","time":{"start":1731546431522,"stop":1731546438274,"duration":6752}},{"uid":"5c563e591be9af98","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/5c563e591be9af98","status":"passed","time":{"start":1731460117682,"stop":1731460129355,"duration":11673}},{"uid":"a17fafd0a13bb4dc","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/a17fafd0a13bb4dc","status":"passed","time":{"start":1731373702043,"stop":1731373709555,"duration":7512}},{"uid":"18dafc4ccfa17526","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/18dafc4ccfa17526","status":"passed","time":{"start":1731286988084,"stop":1731286997145,"duration":9061}},{"uid":"50c7e424aa6b7d1f","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/50c7e424aa6b7d1f","status":"passed","time":{"start":1731201703499,"stop":1731201713071,"duration":9572}},{"uid":"3a9519240ca306f7","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/3a9519240ca306f7","status":"passed","time":{"start":1731114584136,"stop":1731114590747,"duration":6611}},{"uid":"2a05a5ea47225bde","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/2a05a5ea47225bde","status":"passed","time":{"start":1731027917150,"stop":1731027923808,"duration":6658}},{"uid":"823769c3ecb59fe1","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/823769c3ecb59fe1","status":"passed","time":{"start":1730941754369,"stop":1730941764940,"duration":10571}},{"uid":"df98db0ca92a8bfe","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/df98db0ca92a8bfe","status":"passed","time":{"start":1730894797143,"stop":1730894807261,"duration":10118}},{"uid":"d16994ca2537ba5c","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/d16994ca2537ba5c","status":"passed","time":{"start":1730855180533,"stop":1730855192009,"duration":11476}},{"uid":"f0ca7560b0f000f8","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/f0ca7560b0f000f8","status":"passed","time":{"start":1730769088502,"stop":1730769098272,"duration":9770}},{"uid":"22f9957f0a78f6b1","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/22f9957f0a78f6b1","status":"passed","time":{"start":1730682373412,"stop":1730682383580,"duration":10168}},{"uid":"8ecc36da2022ebdf","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/8ecc36da2022ebdf","status":"passed","time":{"start":1730596058906,"stop":1730596069918,"duration":11012}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c84d6fa7620c9720.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}