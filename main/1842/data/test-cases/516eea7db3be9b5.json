{"uid":"516eea7db3be9b5","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"ddbd6781d4488af4f57eae6c3dca1e27","time":{"start":1732579608041,"stop":1732579701909,"duration":93868},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84a3b010>\nproject = <golioth.golioth.Project object at 0xffff8649b0d0>\ndevice = <golioth.golioth.Device object at 0xffff84a19b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732579593287,"stop":1732579593288,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732579593288,"stop":1732579593288,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732579593289,"stop":1732579593289,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732579593289,"stop":1732579593289,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732579593290,"stop":1732579593290,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732579593290,"stop":1732579593290,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732579593291,"stop":1732579593291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732579593291,"stop":1732579593293,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732579593294,"stop":1732579593707,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732579593708,"stop":1732579594665,"duration":957},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732579594666,"stop":1732579607415,"duration":12749},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732579607415,"stop":1732579608038,"duration":623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84a3b010>\nproject = <golioth.golioth.Project object at 0xffff8649b0d0>\ndevice = <golioth.golioth.Device object at 0xffff84a19b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"999be6d9ed5f233a","name":"log","source":"999be6d9ed5f233a.txt","type":"text/plain","size":28524}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732579702265,"stop":1732579702580,"duration":315},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732579702582,"stop":1732579702980,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732579702982,"stop":1732579702984,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732579702986,"stop":1732579702987,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"94232d4d13ab"},{"name":"thread","value":"465-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a57d67daab29d296","status":"passed","time":{"start":1732576275692,"stop":1732576316551,"duration":40859}},{"uid":"5bc615bff55f6b56","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732568533617,"stop":1732568627630,"duration":94013}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":63,"unknown":0,"total":71},"items":[{"uid":"777215285b481191","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/777215285b481191","status":"passed","time":{"start":1732576275692,"stop":1732576316551,"duration":40859}},{"uid":"3399bf1363d3fdb7","reportUrl":"https://golioth.github.io/allure-reports/main/1842//#testresult/3399bf1363d3fdb7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732568533617,"stop":1732568627630,"duration":94013}},{"uid":"57cea2dd960dc487","reportUrl":"https://golioth.github.io/allure-reports/main/1838//#testresult/57cea2dd960dc487","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732497159737,"stop":1732497253848,"duration":94111}},{"uid":"ec968e1eb2e15f27","reportUrl":"https://golioth.github.io/allure-reports/main/1837//#testresult/ec968e1eb2e15f27","status":"passed","time":{"start":1732410800389,"stop":1732410841756,"duration":41367}},{"uid":"b91e011f3ef93295","reportUrl":"https://golioth.github.io/allure-reports/main/1836//#testresult/b91e011f3ef93295","status":"passed","time":{"start":1732325540079,"stop":1732325605171,"duration":65092}},{"uid":"c503a449c733d05e","reportUrl":"https://golioth.github.io/allure-reports/main/28//#testresult/c503a449c733d05e","status":"passed","time":{"start":1732322617844,"stop":1732322660176,"duration":42332}},{"uid":"ee5fa1feb6668f97","reportUrl":"https://golioth.github.io/allure-reports/main/1834//#testresult/ee5fa1feb6668f97","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732310300548,"stop":1732310394607,"duration":94059}},{"uid":"bac90e5ed9a56378","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/bac90e5ed9a56378","status":"passed","time":{"start":1732307067811,"stop":1732307108218,"duration":40407}},{"uid":"586758fd31ec2363","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/586758fd31ec2363","status":"passed","time":{"start":1732298974241,"stop":1732299014659,"duration":40418}},{"uid":"eea635704e54dbad","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/eea635704e54dbad","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732278201429,"stop":1732278295507,"duration":94078}},{"uid":"d13f54c445aa0498","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/d13f54c445aa0498","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732237940798,"stop":1732238034910,"duration":94112}},{"uid":"1f44e740b83fcbbc","reportUrl":"https://golioth.github.io/allure-reports/main/1809//#testresult/1f44e740b83fcbbc","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'","time":{"start":1732214368969,"stop":1732214368969,"duration":0}},{"uid":"d71b4db20780c576","reportUrl":"https://golioth.github.io/allure-reports/main/1804//#testresult/d71b4db20780c576","status":"passed","time":{"start":1732162523862,"stop":1732162565174,"duration":41312}},{"uid":"7f88d4e6b6a1d2dc","reportUrl":"https://golioth.github.io/allure-reports/main/1803//#testresult/7f88d4e6b6a1d2dc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732152524422,"stop":1732152618674,"duration":94252}},{"uid":"1873112de7e1df17","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/1873112de7e1df17","status":"passed","time":{"start":1732139612171,"stop":1732139655938,"duration":43767}},{"uid":"1b433295601fefe4","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/1b433295601fefe4","status":"passed","time":{"start":1732064552734,"stop":1732064592402,"duration":39668}},{"uid":"51ac3dd41bfe8344","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/51ac3dd41bfe8344","status":"passed","time":{"start":1732059619847,"stop":1732059661286,"duration":41439}},{"uid":"900a9d590713dc62","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/900a9d590713dc62","status":"passed","time":{"start":1732037552189,"stop":1732037592316,"duration":40127}},{"uid":"acf5246f8d0feaf9","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/acf5246f8d0feaf9","status":"passed","time":{"start":1731978207282,"stop":1731978247633,"duration":40351}},{"uid":"88cf4d7f6ea8a311","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/88cf4d7f6ea8a311","status":"passed","time":{"start":1731967983084,"stop":1731968023540,"duration":40456}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"516eea7db3be9b5.json","parameterValues":["'rak5010'","'zephyr'"]}