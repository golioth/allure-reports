{"uid":"d63022797b5d3096","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1730075832017,"stop":1730075844368,"duration":12351},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff86322f10>\ndevice = <golioth.golioth.Device object at 0xffff862b5110>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff862b5110>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730075761848,"stop":1730075761848,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1730075761849,"stop":1730075761849,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1730075761849,"stop":1730075761850,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1730075761850,"stop":1730075761851,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730075761851,"stop":1730075761851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730075761852,"stop":1730075761852,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1730075761853,"stop":1730075761853,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1730075761853,"stop":1730075761854,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1730075761854,"stop":1730075761854,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730075761855,"stop":1730075761855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730075761856,"stop":1730075761856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730075761856,"stop":1730075761856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730075761857,"stop":1730075762257,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1730075762258,"stop":1730075813891,"duration":51633},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730075813892,"stop":1730075814975,"duration":1083},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1730075814975,"stop":1730075828208,"duration":13233},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff86322f10>\ndevice = <golioth.golioth.Device object at 0xffff862b5110>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff862b5110>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"a0e0a5a348999552","name":"stdout","source":"a0e0a5a348999552.txt","type":"text/plain","size":3256}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1730075963767,"stop":1730075963767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730075963770,"stop":1730075964163,"duration":393},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1730075964166,"stop":1730075964167,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730075964169,"stop":1730075964172,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"edb0d191993e"},{"name":"thread","value":"255-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":2,"skipped":0,"passed":12,"unknown":0,"total":24},"items":[{"uid":"62026ace135a0551","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/62026ace135a0551","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729989527958,"stop":1729989540175,"duration":12217}},{"uid":"e71fa6d880362a69","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/e71fa6d880362a69","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729902961631,"stop":1729902973920,"duration":12289}},{"uid":"82a45f96eee4d8b","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/82a45f96eee4d8b","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729816583498,"stop":1729816595724,"duration":12226}},{"uid":"c6954a0ff9763b0c","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/c6954a0ff9763b0c","status":"passed","time":{"start":1729730035401,"stop":1729730047631,"duration":12230}},{"uid":"5c86449887e89185","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/5c86449887e89185","status":"passed","time":{"start":1729645443420,"stop":1729645455756,"duration":12336}},{"uid":"eea0843b7e6a1135","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/eea0843b7e6a1135","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729557446888,"stop":1729557459064,"duration":12176}},{"uid":"9242961cd87087c8","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/9242961cd87087c8","status":"passed","time":{"start":1729470963701,"stop":1729470976145,"duration":12444}},{"uid":"ecc64d0cd7b0be9f","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/ecc64d0cd7b0be9f","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729384727281,"stop":1729384739517,"duration":12236}},{"uid":"fec2a8a77717c762","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/fec2a8a77717c762","status":"passed","time":{"start":1729368561940,"stop":1729368574383,"duration":12443}},{"uid":"233d1c7166adc9f","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/233d1c7166adc9f","status":"passed","time":{"start":1729361410010,"stop":1729361422406,"duration":12396}},{"uid":"786f1d1a46638dd6","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/786f1d1a46638dd6","status":"passed","time":{"start":1729298094788,"stop":1729298107238,"duration":12450}},{"uid":"35c0dea9f3508eee","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/35c0dea9f3508eee","status":"passed","time":{"start":1729211684348,"stop":1729211696842,"duration":12494}},{"uid":"ecd38a75d4706051","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/ecd38a75d4706051","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729202792519,"stop":1729202804727,"duration":12208}},{"uid":"fd4c5bbc3d688dcb","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/fd4c5bbc3d688dcb","status":"passed","time":{"start":1729109375710,"stop":1729109388346,"duration":12636}},{"uid":"580a75a57107e505","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/580a75a57107e505","status":"passed","time":{"start":1729039011264,"stop":1729039025351,"duration":14087}},{"uid":"e28e1179c80e9379","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/e28e1179c80e9379","status":"passed","time":{"start":1729025045946,"stop":1729025059520,"duration":13574}},{"uid":"b35c8f33ce2f5023","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/b35c8f33ce2f5023","status":"passed","time":{"start":1729007137957,"stop":1729007152179,"duration":14222}},{"uid":"ad7ad5e846109e4c","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/ad7ad5e846109e4c","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728952620504,"stop":1728952634800,"duration":14296}},{"uid":"1b9dc945b6b6c719","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/1b9dc945b6b6c719","status":"passed","time":{"start":1728866349679,"stop":1728866363052,"duration":13373}},{"uid":"58f656dd11a37b63","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/58f656dd11a37b63","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728779887524,"stop":1728779900550,"duration":13026}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"d63022797b5d3096.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}