{"uid":"422ad7470ebabf6","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1730078733773,"stop":1730078827170,"duration":93397},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8ce92710>\ndevice = <golioth.golioth.Device object at 0xffff8cea93d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730078704774,"stop":1730078704774,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730078704775,"stop":1730078704775,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730078704775,"stop":1730078704775,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730078704776,"stop":1730078704776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730078704776,"stop":1730078704777,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730078704777,"stop":1730078704779,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730078704780,"stop":1730078704780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730078704780,"stop":1730078704780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730078704781,"stop":1730078705284,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730078705285,"stop":1730078706281,"duration":996},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730078706281,"stop":1730078732703,"duration":26422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730078732703,"stop":1730078733767,"duration":1064},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8ce92710>\ndevice = <golioth.golioth.Device object at 0xffff8cea93d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"93d5d09067199da","name":"log","source":"93d5d09067199da.txt","type":"text/plain","size":16348}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730078827450,"stop":1730078827496,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730078827498,"stop":1730078827960,"duration":462},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730078827962,"stop":1730078827964,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730078827969,"stop":1730078827970,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"88ed9c7991b5"},{"name":"thread","value":"699-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":21,"unknown":0,"total":25},"items":[{"uid":"6f50826f9f640fd0","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/6f50826f9f640fd0","status":"passed","time":{"start":1729992656485,"stop":1729992669502,"duration":13017}},{"uid":"eebc2256676f675c","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/eebc2256676f675c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729905898647,"stop":1729905991982,"duration":93335}},{"uid":"2c0b19c5e76c58b","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/2c0b19c5e76c58b","status":"passed","time":{"start":1729819819672,"stop":1729819832348,"duration":12676}},{"uid":"e84e89ce07c857bb","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/e84e89ce07c857bb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729733540270,"stop":1729733633494,"duration":93224}},{"uid":"5c1bdf50a93dc88f","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/5c1bdf50a93dc88f","status":"passed","time":{"start":1729646925798,"stop":1729646936691,"duration":10893}},{"uid":"a007a497cf757edc","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/a007a497cf757edc","status":"passed","time":{"start":1729560620784,"stop":1729560648433,"duration":27649}},{"uid":"e4d68c4d1289127b","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/e4d68c4d1289127b","status":"passed","time":{"start":1729473963161,"stop":1729473974590,"duration":11429}},{"uid":"70b0ecc60e428606","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/70b0ecc60e428606","status":"passed","time":{"start":1729387750521,"stop":1729387760747,"duration":10226}},{"uid":"67f4f1933d4b32d3","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/67f4f1933d4b32d3","status":"passed","time":{"start":1729371459549,"stop":1729371469942,"duration":10393}},{"uid":"eeef6e2b81c81d47","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/eeef6e2b81c81d47","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729364285041,"stop":1729364378452,"duration":93411}},{"uid":"fc8a78617d9f9bd1","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/fc8a78617d9f9bd1","status":"passed","time":{"start":1729301078939,"stop":1729301089038,"duration":10099}},{"uid":"633c7115cfbe8787","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/633c7115cfbe8787","status":"passed","time":{"start":1729214499937,"stop":1729214511210,"duration":11273}},{"uid":"8f7a960cbf3004e4","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/8f7a960cbf3004e4","status":"passed","time":{"start":1729205466484,"stop":1729205486643,"duration":20159}},{"uid":"6538ba9e91cb8906","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/6538ba9e91cb8906","status":"passed","time":{"start":1729132058559,"stop":1729132069184,"duration":10625}},{"uid":"dfa0dcebe0687d59","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/dfa0dcebe0687d59","status":"passed","time":{"start":1729112589583,"stop":1729112613294,"duration":23711}},{"uid":"17ef77a06995ad0b","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/17ef77a06995ad0b","status":"passed","time":{"start":1729041858172,"stop":1729041878361,"duration":20189}},{"uid":"55f6d68786a88490","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/55f6d68786a88490","status":"passed","time":{"start":1729029722206,"stop":1729029750374,"duration":28168}},{"uid":"a535856bb4e5bb05","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/a535856bb4e5bb05","status":"passed","time":{"start":1729010486342,"stop":1729010497572,"duration":11230}},{"uid":"810c56824c457d9d","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/810c56824c457d9d","status":"passed","time":{"start":1728955717549,"stop":1728955742522,"duration":24973}},{"uid":"1c44ee4e933182b2","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/1c44ee4e933182b2","status":"passed","time":{"start":1728869431613,"stop":1728869458645,"duration":27032}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"422ad7470ebabf6.json","parameterValues":["'nrf9160dk'","'zephyr'"]}