{"uid":"1ff769e591e260bf","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1730941707523,"stop":1730941730952,"duration":23429},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9d2ce3d0>\ndevice = <golioth.golioth.Device object at 0xffff9d2e1390>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730941689550,"stop":1730941689551,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730941689551,"stop":1730941689551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730941689552,"stop":1730941689552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730941689552,"stop":1730941689552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730941689553,"stop":1730941689553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730941689553,"stop":1730941689555,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730941689556,"stop":1730941689556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730941689557,"stop":1730941690004,"duration":447},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730941689557,"stop":1730941689557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730941690005,"stop":1730941690894,"duration":889},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730941690894,"stop":1730941706678,"duration":15784},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730941706679,"stop":1730941707520,"duration":841},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9d2ce3d0>\ndevice = <golioth.golioth.Device object at 0xffff9d2e1390>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"97a1bebd4457fcd5","name":"log","source":"97a1bebd4457fcd5.txt","type":"text/plain","size":16837}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730941731204,"stop":1730941731217,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730941731218,"stop":1730941731644,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730941731646,"stop":1730941731648,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730941731653,"stop":1730941731653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a27bfcd77ce8"},{"name":"thread","value":"460-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":34,"unknown":0,"total":37},"items":[{"uid":"9805e587e378a8f5","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/9805e587e378a8f5","status":"passed","time":{"start":1730894758868,"stop":1730894775435,"duration":16567}},{"uid":"54364e4b3125e119","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/54364e4b3125e119","status":"passed","time":{"start":1730855141371,"stop":1730855156933,"duration":15562}},{"uid":"d7c8ec618c39123d","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/d7c8ec618c39123d","status":"passed","time":{"start":1730769050196,"stop":1730769065035,"duration":14839}},{"uid":"128c64436bf10294","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/128c64436bf10294","status":"passed","time":{"start":1730682335058,"stop":1730682351822,"duration":16764}},{"uid":"27ba0e70ca361fa2","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/27ba0e70ca361fa2","status":"passed","time":{"start":1730596020626,"stop":1730596037405,"duration":16779}},{"uid":"92bdd9c4a0cec77c","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/92bdd9c4a0cec77c","status":"passed","time":{"start":1730509385572,"stop":1730509400915,"duration":15343}},{"uid":"8efd2c068d5ba06","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/8efd2c068d5ba06","status":"passed","time":{"start":1730423271034,"stop":1730423285680,"duration":14646}},{"uid":"a942a683eb35ff79","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/a942a683eb35ff79","status":"passed","time":{"start":1730337232462,"stop":1730337248364,"duration":15902}},{"uid":"bf696d375f268d78","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/bf696d375f268d78","status":"passed","time":{"start":1730305154682,"stop":1730305170998,"duration":16316}},{"uid":"84d9fa3ed4fe71ef","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/84d9fa3ed4fe71ef","status":"passed","time":{"start":1730250441289,"stop":1730250458738,"duration":17449}},{"uid":"d1fb0fa0bd5be04c","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/d1fb0fa0bd5be04c","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1730164405077,"stop":1730164425006,"duration":19929}},{"uid":"73888dc6c32fd9b4","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/73888dc6c32fd9b4","status":"passed","time":{"start":1730077594583,"stop":1730077608470,"duration":13887}},{"uid":"fc5043649bdfec2b","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/fc5043649bdfec2b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729991119984,"stop":1729991213859,"duration":93875}},{"uid":"c9123bca82194b76","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/c9123bca82194b76","status":"passed","time":{"start":1729904628695,"stop":1729904642321,"duration":13626}},{"uid":"c06f0e332fa5a584","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/c06f0e332fa5a584","status":"passed","time":{"start":1729818339777,"stop":1729818356687,"duration":16910}},{"uid":"a3ba9968e2d37ee1","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/a3ba9968e2d37ee1","status":"passed","time":{"start":1729732229323,"stop":1729732246070,"duration":16747}},{"uid":"76e68abbdbd71ea3","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/76e68abbdbd71ea3","status":"passed","time":{"start":1729645912760,"stop":1729645927465,"duration":14705}},{"uid":"7c4f9f41729c0dbc","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/7c4f9f41729c0dbc","status":"passed","time":{"start":1729559172493,"stop":1729559186818,"duration":14325}},{"uid":"271ef628852c7ba9","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/271ef628852c7ba9","status":"passed","time":{"start":1729472721748,"stop":1729472739370,"duration":17622}},{"uid":"b80fb4cd3f3657f1","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/b80fb4cd3f3657f1","status":"passed","time":{"start":1729386321987,"stop":1729386335605,"duration":13618}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1ff769e591e260bf.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}