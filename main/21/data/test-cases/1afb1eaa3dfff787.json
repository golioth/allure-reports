{
  "uid" : "1afb1eaa3dfff787",
  "name" : "test_settings",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings",
  "historyId" : "d6d167c5ecb927d8d413dac5f1f3452a",
  "time" : {
    "start" : 1736213238091,
    "stop" : 1736213332188,
    "duration" : 94097
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb271ee50>\nproject = <golioth.golioth.Project object at 0xffffb2897c90>\ndevice = <golioth.golioth.Device object at 0xffffb2739e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_name",
    "time" : {
      "start" : 1736213208696,
      "stop" : 1736213208696,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736213210051,
      "stop" : 1736213237022,
      "duration" : 26971
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736213208695,
      "stop" : 1736213208695,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736213208700,
      "stop" : 1736213209126,
      "duration" : 426
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736213237023,
      "stop" : 1736213238088,
      "duration" : 1065
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736213208694,
      "stop" : 1736213208694,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736213208695,
      "stop" : 1736213208696,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736213208693,
      "stop" : 1736213208693,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736213208697,
      "stop" : 1736213208699,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736213209127,
      "stop" : 1736213210051,
      "duration" : 924
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736213208696,
      "stop" : 1736213208697,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736213208694,
      "stop" : 1736213208695,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb271ee50>\nproject = <golioth.golioth.Project object at 0xffffb2897c90>\ndevice = <golioth.golioth.Device object at 0xffffb2739e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8ad6d94cac973242",
      "name" : "log",
      "source" : "8ad6d94cac973242.txt",
      "type" : "text/plain",
      "size" : 22260
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1736213332535,
      "stop" : 1736213332543,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736213332949,
      "stop" : 1736213332952,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736213332954,
      "stop" : 1736213332954,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736213332545,
      "stop" : 1736213332947,
      "duration" : 402
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "b8f37b3d96be"
  }, {
    "name" : "thread",
    "value" : "914-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 39
      },
      "items" : [ {
        "uid" : "4d3163796b1f06db",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/4d3163796b1f06db",
        "status" : "passed",
        "time" : {
          "start" : 1736192694372,
          "stop" : 1736192728333,
          "duration" : 33961
        }
      }, {
        "uid" : "a6738b47abfa6afc",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/a6738b47abfa6afc",
        "status" : "passed",
        "time" : {
          "start" : 1736190718691,
          "stop" : 1736190730644,
          "duration" : 11953
        }
      }, {
        "uid" : "900965171bc00bd5",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/18/#testresult/900965171bc00bd5",
        "status" : "passed",
        "time" : {
          "start" : 1736186271862,
          "stop" : 1736186302979,
          "duration" : 31117
        }
      }, {
        "uid" : "e2485e8ed0aeef45",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/17/#testresult/e2485e8ed0aeef45",
        "status" : "passed",
        "time" : {
          "start" : 1736126476376,
          "stop" : 1736126501304,
          "duration" : 24928
        }
      }, {
        "uid" : "4e51d092392f3fdc",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/16/#testresult/4e51d092392f3fdc",
        "status" : "passed",
        "time" : {
          "start" : 1736040034542,
          "stop" : 1736040046728,
          "duration" : 12186
        }
      }, {
        "uid" : "2101494e407cdc4c",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/15/#testresult/2101494e407cdc4c",
        "status" : "passed",
        "time" : {
          "start" : 1735954377493,
          "stop" : 1735954403717,
          "duration" : 26224
        }
      }, {
        "uid" : "25213dee2ebb3d41",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/8/#testresult/25213dee2ebb3d41",
        "status" : "passed",
        "time" : {
          "start" : 1735868954965,
          "stop" : 1735868996154,
          "duration" : 41189
        }
      }, {
        "uid" : "1c23a34c1b20ba85",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1991/#testresult/1c23a34c1b20ba85",
        "status" : "passed",
        "time" : {
          "start" : 1735782159057,
          "stop" : 1735782171326,
          "duration" : 12269
        }
      }, {
        "uid" : "93c1e633ebf53d61",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1990/#testresult/93c1e633ebf53d61",
        "status" : "passed",
        "time" : {
          "start" : 1735695596382,
          "stop" : 1735695608651,
          "duration" : 12269
        }
      }, {
        "uid" : "5bca0f1b9e30d92e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1984/#testresult/5bca0f1b9e30d92e",
        "status" : "passed",
        "time" : {
          "start" : 1735660549612,
          "stop" : 1735660575895,
          "duration" : 26283
        }
      }, {
        "uid" : "b265d95717cf67d8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1983/#testresult/b265d95717cf67d8",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735609110001,
          "stop" : 1735609204046,
          "duration" : 94045
        }
      }, {
        "uid" : "70af2e7577b93469",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1980/#testresult/70af2e7577b93469",
        "status" : "passed",
        "time" : {
          "start" : 1735523529347,
          "stop" : 1735523564634,
          "duration" : 35287
        }
      }, {
        "uid" : "323ba73434d0aa12",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1979/#testresult/323ba73434d0aa12",
        "status" : "passed",
        "time" : {
          "start" : 1735436617327,
          "stop" : 1735436628950,
          "duration" : 11623
        }
      }, {
        "uid" : "96779da64612dcf8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1978/#testresult/96779da64612dcf8",
        "status" : "passed",
        "time" : {
          "start" : 1735350394213,
          "stop" : 1735350421088,
          "duration" : 26875
        }
      }, {
        "uid" : "cbd20b709194b71e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/cbd20b709194b71e",
        "status" : "passed",
        "time" : {
          "start" : 1735263654027,
          "stop" : 1735263667647,
          "duration" : 13620
        }
      }, {
        "uid" : "51e015dab815bcfa",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/51e015dab815bcfa",
        "status" : "passed",
        "time" : {
          "start" : 1735177121436,
          "stop" : 1735177134556,
          "duration" : 13120
        }
      }, {
        "uid" : "773d1afd1acefa81",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/773d1afd1acefa81",
        "status" : "passed",
        "time" : {
          "start" : 1735091430737,
          "stop" : 1735091464209,
          "duration" : 33472
        }
      }, {
        "uid" : "dfe7089ab64f3eba",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/dfe7089ab64f3eba",
        "status" : "passed",
        "time" : {
          "start" : 1735004245396,
          "stop" : 1735004259069,
          "duration" : 13673
        }
      }, {
        "uid" : "6925d17b2b74a7fc",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/6925d17b2b74a7fc",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734918501790,
          "stop" : 1734918595733,
          "duration" : 93943
        }
      }, {
        "uid" : "6422b91946dd7b5e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1972/#testresult/6422b91946dd7b5e",
        "status" : "passed",
        "time" : {
          "start" : 1734832369301,
          "stop" : 1734832396206,
          "duration" : 26905
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "1afb1eaa3dfff787.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}