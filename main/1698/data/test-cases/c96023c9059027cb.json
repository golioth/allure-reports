{"uid":"c96023c9059027cb","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"ae1c7e14b29d468f72319f0a6ff27eb0","time":{"start":1729905393094,"stop":1729905494072,"duration":100978},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9bc14350>\nproject = <golioth.golioth.Project object at 0xffff9bdb0750>\ndevice = <golioth.golioth.Device object at 0xffff9bc16f50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <671c42d5990e7ed8707e0a3a, release_tags=[], device_tags=['671c42d3990e7ed8707e0a39'], artifact_ids=['66da3542c36587e4581f9491'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729905360867,"stop":1729905360867,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729905360868,"stop":1729905360868,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729905360868,"stop":1729905360868,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1729905360869,"stop":1729905360897,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729905360897,"stop":1729905360898,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729905360898,"stop":1729905360898,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729905360899,"stop":1729905360899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729905360899,"stop":1729905360899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729905360900,"stop":1729905360903,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"west_board","time":{"start":1729905360903,"stop":1729905360904,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729905360904,"stop":1729905361412,"duration":508},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729905361413,"stop":1729905362436,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1729905362437,"stop":1729905362915,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1729905362916,"stop":1729905363394,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1729905363394,"stop":1729905364872,"duration":1478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1729905364873,"stop":1729905365352,"duration":479},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729905365352,"stop":1729905391976,"duration":26624},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729905391977,"stop":1729905393089,"duration":1112},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9bc14350>\nproject = <golioth.golioth.Project object at 0xffff9bdb0750>\ndevice = <golioth.golioth.Device object at 0xffff9bc16f50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <671c42d5990e7ed8707e0a3a, release_tags=[], device_tags=['671c42d3990e7ed8707e0a39'], artifact_ids=['66da3542c36587e4581f9491'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f7389c871e55992e","name":"log","source":"f7389c871e55992e.txt","type":"text/plain","size":33619}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729905494339,"stop":1729905494348,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1729905494350,"stop":1729905494811,"duration":461},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1729905494813,"stop":1729905495748,"duration":935},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1729905495750,"stop":1729905495751,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1729905495753,"stop":1729905495753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729905495755,"stop":1729905496212,"duration":457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729905496215,"stop":1729905496215,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729905496218,"stop":1729905496218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1729905496254,"stop":1729905496256,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9bd3111e6526"},{"name":"thread","value":"465-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":5,"skipped":0,"passed":16,"unknown":0,"total":23},"items":[{"uid":"59239db0bafecaee","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/59239db0bafecaee","status":"passed","time":{"start":1729819220417,"stop":1729819559859,"duration":339442}},{"uid":"bbb13cbc10813e34","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/bbb13cbc10813e34","status":"passed","time":{"start":1729732833229,"stop":1729733209656,"duration":376427}},{"uid":"bcd2d4940c541c35","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/bcd2d4940c541c35","status":"passed","time":{"start":1729646421605,"stop":1729646668273,"duration":246668}},{"uid":"b4796a237fb7e66f","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/b4796a237fb7e66f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729559992552,"stop":1729560346432,"duration":353880}},{"uid":"b7797df286ab7132","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/b7797df286ab7132","status":"passed","time":{"start":1729473303578,"stop":1729473634633,"duration":331055}},{"uid":"7163deb4c57c83b5","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/7163deb4c57c83b5","status":"passed","time":{"start":1729387255240,"stop":1729387493101,"duration":237861}},{"uid":"e20b2e672599d112","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/e20b2e672599d112","status":"passed","time":{"start":1729370958034,"stop":1729371196426,"duration":238392}},{"uid":"1998ccb02da577d","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/1998ccb02da577d","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1729363970046,"stop":1729363970046,"duration":0}},{"uid":"797042883037028b","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/797042883037028b","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1729300819803,"stop":1729300819803,"duration":0}},{"uid":"eceea1d20616ed7c","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/eceea1d20616ed7c","status":"passed","time":{"start":1729213985248,"stop":1729214240226,"duration":254978}},{"uid":"d0958e48ccb1823c","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/d0958e48ccb1823c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729205045839,"stop":1729205146808,"duration":100969}},{"uid":"ffb7df74eb0484d6","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/ffb7df74eb0484d6","status":"passed","time":{"start":1729131531207,"stop":1729131802782,"duration":271575}},{"uid":"2f86c57f1b896d3e","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/2f86c57f1b896d3e","status":"passed","time":{"start":1729111961265,"stop":1729112266636,"duration":305371}},{"uid":"1b065117f94281bd","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/1b065117f94281bd","status":"passed","time":{"start":1729041228636,"stop":1729041522820,"duration":294184}},{"uid":"b758b32f9ec3852d","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/b758b32f9ec3852d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729029058958,"stop":1729029418434,"duration":359476}},{"uid":"de35199c53d52d29","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/de35199c53d52d29","status":"passed","time":{"start":1729009918953,"stop":1729010229748,"duration":310795}},{"uid":"fed67bd655c8bc9d","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/fed67bd655c8bc9d","status":"passed","time":{"start":1728955048350,"stop":1728955341817,"duration":293467}},{"uid":"ef9dcdc7b426d4c","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/ef9dcdc7b426d4c","status":"passed","time":{"start":1728868769348,"stop":1728869074545,"duration":305197}},{"uid":"10565734e6b89ccc","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/10565734e6b89ccc","status":"passed","time":{"start":1728782509317,"stop":1728782822233,"duration":312916}},{"uid":"cd832eb4d30f9b2d","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/cd832eb4d30f9b2d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728695530575,"stop":1728695631352,"duration":100777}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c96023c9059027cb.json","parameterValues":["'nrf9160dk'","'zephyr'"]}