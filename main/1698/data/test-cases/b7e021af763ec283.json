{"uid":"b7e021af763ec283","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1729905528063,"stop":1729905620916,"duration":92853},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad4ea510>\ndevice = <golioth.golioth.Device object at 0xffffad5013d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729905499521,"stop":1729905499521,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729905499521,"stop":1729905499521,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729905499522,"stop":1729905499522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729905499522,"stop":1729905499522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729905499523,"stop":1729905499523,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729905499523,"stop":1729905499525,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729905499526,"stop":1729905499526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729905499527,"stop":1729905499527,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729905499527,"stop":1729905500048,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729905500048,"stop":1729905501080,"duration":1032},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729905501080,"stop":1729905526979,"duration":25899},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729905526980,"stop":1729905528060,"duration":1080},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad4ea510>\ndevice = <golioth.golioth.Device object at 0xffffad5013d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c3a9dd560c63b201","name":"log","source":"c3a9dd560c63b201.txt","type":"text/plain","size":14012}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729905621275,"stop":1729905621416,"duration":141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729905621418,"stop":1729905621882,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729905621885,"stop":1729905621887,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729905621892,"stop":1729905621892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9bd3111e6526"},{"name":"thread","value":"511-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":4,"skipped":0,"passed":17,"unknown":0,"total":23},"items":[{"uid":"99ba5934d840e4a2","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/99ba5934d840e4a2","status":"passed","time":{"start":1729819594438,"stop":1729819613124,"duration":18686}},{"uid":"3eb59d20af692cc7","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/3eb59d20af692cc7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729733243379,"stop":1729733336259,"duration":92880}},{"uid":"a32dd79fbc138a9c","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/a32dd79fbc138a9c","status":"passed","time":{"start":1729646702464,"stop":1729646724134,"duration":21670}},{"uid":"6727ff96bbf0d88d","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/6727ff96bbf0d88d","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1729560351944,"stop":1729560351944,"duration":0}},{"uid":"5a5ec616427da3f7","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/5a5ec616427da3f7","status":"passed","time":{"start":1729473669676,"stop":1729473689209,"duration":19533}},{"uid":"ead6568b17ae99fb","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/ead6568b17ae99fb","status":"passed","time":{"start":1729387527520,"stop":1729387547050,"duration":19530}},{"uid":"9257da75d6b2379b","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/9257da75d6b2379b","status":"passed","time":{"start":1729371231232,"stop":1729371252611,"duration":21379}},{"uid":"44876605f9b26bdd","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/44876605f9b26bdd","status":"passed","time":{"start":1729364006167,"stop":1729364040757,"duration":34590}},{"uid":"cd089231a762697b","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/cd089231a762697b","status":"passed","time":{"start":1729300855475,"stop":1729300875093,"duration":19618}},{"uid":"d123046ed20cccd5","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/d123046ed20cccd5","status":"passed","time":{"start":1729214275103,"stop":1729214294721,"duration":19618}},{"uid":"d02970bb52c9977e","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/d02970bb52c9977e","status":"passed","time":{"start":1729205181722,"stop":1729205213338,"duration":31616}},{"uid":"ebd9ce23d5fcd308","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/ebd9ce23d5fcd308","status":"passed","time":{"start":1729131836497,"stop":1729131856410,"duration":19913}},{"uid":"6a9cd0912a89ca41","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/6a9cd0912a89ca41","status":"passed","time":{"start":1729112300659,"stop":1729112333365,"duration":32706}},{"uid":"229ab9a22641beca","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/229ab9a22641beca","status":"passed","time":{"start":1729041565291,"stop":1729041602611,"duration":37320}},{"uid":"4569c207073b7158","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/4569c207073b7158","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1729029423727,"stop":1729029423727,"duration":0}},{"uid":"cab6e3a63916a85d","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/cab6e3a63916a85d","status":"passed","time":{"start":1729010263416,"stop":1729010283723,"duration":20307}},{"uid":"5112ff2ef71eedb3","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/5112ff2ef71eedb3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728955988197,"stop":1728956080986,"duration":92789}},{"uid":"fecaa6ffb29b02a8","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/fecaa6ffb29b02a8","status":"passed","time":{"start":1728869108507,"stop":1728869144977,"duration":36470}},{"uid":"e33924b48a1059aa","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/e33924b48a1059aa","status":"passed","time":{"start":1728782856309,"stop":1728782876153,"duration":19844}},{"uid":"888763dd73845fba","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/888763dd73845fba","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728695666094,"stop":1728695758875,"duration":92781}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b7e021af763ec283.json","parameterValues":["'nrf9160dk'","'zephyr'"]}