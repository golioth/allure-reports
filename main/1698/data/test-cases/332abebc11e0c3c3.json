{"uid":"332abebc11e0c3c3","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1729905242092,"stop":1729905356666,"duration":114574},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5a58850>\ndevice = <golioth.golioth.Device object at 0xffffb5a5b310>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffb5bc9090>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729905213358,"stop":1729905213359,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1729905213359,"stop":1729905213374,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729905213375,"stop":1729905213376,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729905213376,"stop":1729905213376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729905213377,"stop":1729905213379,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729905213380,"stop":1729905213380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729905213380,"stop":1729905213380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729905213381,"stop":1729905213891,"duration":510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729905213892,"stop":1729905215004,"duration":1112},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729905215005,"stop":1729905241034,"duration":26029},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729905241035,"stop":1729905242090,"duration":1055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5a58850>\ndevice = <golioth.golioth.Device object at 0xffffb5a5b310>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffb5bc9090>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2bc4b9ed5c1b113f","name":"log","source":"2bc4b9ed5c1b113f.txt","type":"text/plain","size":16172}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729905356959,"stop":1729905356990,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729905356992,"stop":1729905357448,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729905357450,"stop":1729905357452,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729905357457,"stop":1729905357457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9bd3111e6526"},{"name":"thread","value":"419-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":2,"skipped":0,"passed":19,"unknown":0,"total":23},"items":[{"uid":"1bd11948caa63254","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/1bd11948caa63254","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1729819151289,"stop":1729819183701,"duration":32412}},{"uid":"678d101a6091e07d","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/678d101a6091e07d","status":"passed","time":{"start":1729732766673,"stop":1729732797369,"duration":30696}},{"uid":"5a934d7e341b206e","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/5a934d7e341b206e","status":"passed","time":{"start":1729646355720,"stop":1729646385492,"duration":29772}},{"uid":"4eb30e9844681b6b","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/4eb30e9844681b6b","status":"passed","time":{"start":1729559914719,"stop":1729559955515,"duration":40796}},{"uid":"fc00701df2804a3","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/fc00701df2804a3","status":"passed","time":{"start":1729473236013,"stop":1729473267352,"duration":31339}},{"uid":"fdb2b6de4dd06f04","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/fdb2b6de4dd06f04","status":"passed","time":{"start":1729387189081,"stop":1729387218682,"duration":29601}},{"uid":"e6779215c24e29ca","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/e6779215c24e29ca","status":"passed","time":{"start":1729370891757,"stop":1729370921951,"duration":30194}},{"uid":"8580619ed5cf2560","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/8580619ed5cf2560","status":"passed","time":{"start":1729363916591,"stop":1729363966106,"duration":49515}},{"uid":"7b94beaf1dbb1b29","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/7b94beaf1dbb1b29","status":"passed","time":{"start":1729300785734,"stop":1729300815855,"duration":30121}},{"uid":"5a853f47916142ec","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/5a853f47916142ec","status":"passed","time":{"start":1729213919522,"stop":1729213949046,"duration":29524}},{"uid":"7bd923d872e74173","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/7bd923d872e74173","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729204894248,"stop":1729205008878,"duration":114630}},{"uid":"d92345fe947369a2","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/d92345fe947369a2","status":"passed","time":{"start":1729131465388,"stop":1729131495328,"duration":29940}},{"uid":"2148fefd6d6e612f","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/2148fefd6d6e612f","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1729111884375,"stop":1729111924939,"duration":40564}},{"uid":"a2246771b24c8744","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/a2246771b24c8744","status":"passed","time":{"start":1729041152744,"stop":1729041192754,"duration":40010}},{"uid":"7dc78b1eb6801567","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/7dc78b1eb6801567","status":"passed","time":{"start":1729028974750,"stop":1729029023479,"duration":48729}},{"uid":"1abafa572981e454","reportUrl":"https://golioth.github.io/allure-reports/main/1639//#testresult/1abafa572981e454","status":"passed","time":{"start":1729009855061,"stop":1729009883547,"duration":28486}},{"uid":"806a6ce321f5f550","reportUrl":"https://golioth.github.io/allure-reports/main/1637//#testresult/806a6ce321f5f550","status":"passed","time":{"start":1728954959317,"stop":1728955012475,"duration":53158}},{"uid":"7b7b705b6ced04d6","reportUrl":"https://golioth.github.io/allure-reports/main/1636//#testresult/7b7b705b6ced04d6","status":"passed","time":{"start":1728868682490,"stop":1728868733706,"duration":51216}},{"uid":"84acc9fa7642ee1c","reportUrl":"https://golioth.github.io/allure-reports/main/1635//#testresult/84acc9fa7642ee1c","status":"passed","time":{"start":1728782442877,"stop":1728782473822,"duration":30945}},{"uid":"b1a5faac25c55fba","reportUrl":"https://golioth.github.io/allure-reports/main/1634//#testresult/b1a5faac25c55fba","status":"passed","time":{"start":1728695448817,"stop":1728695494666,"duration":45849}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"332abebc11e0c3c3.json","parameterValues":["'nrf9160dk'","'zephyr'"]}