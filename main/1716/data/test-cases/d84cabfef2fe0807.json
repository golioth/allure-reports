{"uid":"d84cabfef2fe0807","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"c2044a44affa44a6054bb6d6ddcfd33a","time":{"start":1730893501232,"stop":1730893513786,"duration":12554},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb08c64d0>\ndevice = <golioth.golioth.Device object at 0xffffb092e2d0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb092e2d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1730893390225,"stop":1730893390226,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1730893390226,"stop":1730893390227,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1730893390227,"stop":1730893390228,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1730893390228,"stop":1730893390228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730893390229,"stop":1730893390229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730893390230,"stop":1730893390230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1730893390230,"stop":1730893390230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1730893390231,"stop":1730893390231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1730893390231,"stop":1730893390231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730893390232,"stop":1730893390233,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730893390232,"stop":1730893390232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730893390232,"stop":1730893390232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730893390233,"stop":1730893390704,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1730893390705,"stop":1730893442223,"duration":51518},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730893442224,"stop":1730893443337,"duration":1113},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1730893443337,"stop":1730893457075,"duration":13738},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb08c64d0>\ndevice = <golioth.golioth.Device object at 0xffffb092e2d0>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb092e2d0>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"ea4595199d344aa5","name":"stdout","source":"ea4595199d344aa5.txt","type":"text/plain","size":675}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1730893598709,"stop":1730893598709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730893598711,"stop":1730893599185,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1730893599187,"stop":1730893599188,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730893599190,"stop":1730893599193,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"829b39491a88"},{"name":"thread","value":"258-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dc578d9b719a354a","status":"passed","time":{"start":1730853397118,"stop":1730853409592,"duration":12474}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":30,"unknown":0,"total":35},"items":[{"uid":"2739f17c84251b7d","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/2739f17c84251b7d","status":"passed","time":{"start":1730853397118,"stop":1730853409592,"duration":12474}},{"uid":"7c4983cdb8220131","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/7c4983cdb8220131","status":"passed","time":{"start":1730766907469,"stop":1730766919912,"duration":12443}},{"uid":"f20367280912e97a","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/f20367280912e97a","status":"passed","time":{"start":1730680584616,"stop":1730680597054,"duration":12438}},{"uid":"260c7f3e4fabd774","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/260c7f3e4fabd774","status":"passed","time":{"start":1730594363614,"stop":1730594375945,"duration":12331}},{"uid":"d906a703d156dd72","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/d906a703d156dd72","status":"passed","time":{"start":1730507788461,"stop":1730507800890,"duration":12429}},{"uid":"7b4f83a9dfced218","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/7b4f83a9dfced218","status":"passed","time":{"start":1730421557258,"stop":1730421569587,"duration":12329}},{"uid":"3986652c65af108f","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/3986652c65af108f","status":"passed","time":{"start":1730335047499,"stop":1730335059803,"duration":12304}},{"uid":"a139668f7bb1c72b","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/a139668f7bb1c72b","status":"passed","time":{"start":1730303473530,"stop":1730303485776,"duration":12246}},{"uid":"b5781b446b8efdf9","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/b5781b446b8efdf9","status":"passed","time":{"start":1730248493780,"stop":1730248506319,"duration":12539}},{"uid":"d69a332c570cb3c","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/d69a332c570cb3c","status":"passed","time":{"start":1730162191072,"stop":1730162203630,"duration":12558}},{"uid":"17ccf1f83821bffd","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/17ccf1f83821bffd","status":"passed","time":{"start":1730075866961,"stop":1730075879287,"duration":12326}},{"uid":"69b5659c9fcd8b3c","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/69b5659c9fcd8b3c","status":"passed","time":{"start":1729989562209,"stop":1729989574541,"duration":12332}},{"uid":"21db1796fab6e9bd","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/21db1796fab6e9bd","status":"passed","time":{"start":1729902995416,"stop":1729903007728,"duration":12312}},{"uid":"8d790ae0d039dfd6","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/8d790ae0d039dfd6","status":"passed","time":{"start":1729816617923,"stop":1729816630202,"duration":12279}},{"uid":"6c08b1c63c132c7c","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/6c08b1c63c132c7c","status":"passed","time":{"start":1729730069711,"stop":1729730081988,"duration":12277}},{"uid":"3f9ce3db6c39cbb4","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/3f9ce3db6c39cbb4","status":"passed","time":{"start":1729645478467,"stop":1729645491154,"duration":12687}},{"uid":"4dc4744183e0adf7","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/4dc4744183e0adf7","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729557488602,"stop":1729557500812,"duration":12210}},{"uid":"3a1ac0b7da86549f","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/3a1ac0b7da86549f","status":"passed","time":{"start":1729470999623,"stop":1729471012210,"duration":12587}},{"uid":"94467112885de549","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/94467112885de549","status":"passed","time":{"start":1729384759975,"stop":1729384772346,"duration":12371}},{"uid":"bfc8c213a8485e9c","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/bfc8c213a8485e9c","status":"passed","time":{"start":1729368597325,"stop":1729368609995,"duration":12670}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"d84cabfef2fe0807.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}