{"uid":"d3d4e57cf1a94453","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1730893930984,"stop":1730893954204,"duration":23220},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8f5e2850>\ndevice = <golioth.golioth.Device object at 0xffff8f5f9890>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*lightdb_observe: Counter \\\\(async\\\\)'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1730893902249,"stop":1730893902249,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730893902250,"stop":1730893902250,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730893902250,"stop":1730893902250,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730893902251,"stop":1730893902251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730893902252,"stop":1730893902254,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730893902252,"stop":1730893902252,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730893902255,"stop":1730893902255,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730893902256,"stop":1730893902256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730893902256,"stop":1730893902709,"duration":453},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730893902709,"stop":1730893903647,"duration":938},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730893903648,"stop":1730893929888,"duration":26240},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730893929889,"stop":1730893930982,"duration":1093},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8f5e2850>\ndevice = <golioth.golioth.Device object at 0xffff8f5f9890>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*lightdb_observe: Counter \\\\(async\\\\)'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"301409608da2ebb5","name":"log","source":"301409608da2ebb5.txt","type":"text/plain","size":20004}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730893954462,"stop":1730893954512,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730893954513,"stop":1730893954939,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730893954941,"stop":1730893954944,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730893954948,"stop":1730893954949,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"550791cfbb78"},{"name":"thread","value":"692-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3c62d62db29d460","status":"passed","time":{"start":1730856374328,"stop":1730856405785,"duration":31457}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":29,"unknown":0,"total":36},"items":[{"uid":"86950587b036049a","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/86950587b036049a","status":"passed","time":{"start":1730856374328,"stop":1730856405785,"duration":31457}},{"uid":"3cdbd21266b76ed6","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/3cdbd21266b76ed6","status":"passed","time":{"start":1730770296916,"stop":1730770326647,"duration":29731}},{"uid":"31b041192db57dca","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/31b041192db57dca","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730683820499,"stop":1730683913807,"duration":93308}},{"uid":"18fdec169ee32c4c","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/18fdec169ee32c4c","status":"passed","time":{"start":1730597426099,"stop":1730597448430,"duration":22331}},{"uid":"5c06955f11f80c73","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/5c06955f11f80c73","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730510552903,"stop":1730510645999,"duration":93096}},{"uid":"f8e6ab297fff21db","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/f8e6ab297fff21db","status":"passed","time":{"start":1730424210835,"stop":1730424233804,"duration":22969}},{"uid":"ef056a3cc686d58e","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/ef056a3cc686d58e","status":"passed","time":{"start":1730339193241,"stop":1730339203771,"duration":10530}},{"uid":"4546530d9117662e","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/4546530d9117662e","status":"passed","time":{"start":1730306535278,"stop":1730306545744,"duration":10466}},{"uid":"d13ed49fd1ab328","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/d13ed49fd1ab328","status":"passed","time":{"start":1730251793314,"stop":1730251818027,"duration":24713}},{"uid":"ca700eb79d7f3c95","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/ca700eb79d7f3c95","status":"passed","time":{"start":1730165587535,"stop":1730165597964,"duration":10429}},{"uid":"422ad7470ebabf6","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/422ad7470ebabf6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730078733773,"stop":1730078827170,"duration":93397}},{"uid":"6f50826f9f640fd0","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/6f50826f9f640fd0","status":"passed","time":{"start":1729992656485,"stop":1729992669502,"duration":13017}},{"uid":"eebc2256676f675c","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/eebc2256676f675c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729905898647,"stop":1729905991982,"duration":93335}},{"uid":"2c0b19c5e76c58b","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/2c0b19c5e76c58b","status":"passed","time":{"start":1729819819672,"stop":1729819832348,"duration":12676}},{"uid":"e84e89ce07c857bb","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/e84e89ce07c857bb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729733540270,"stop":1729733633494,"duration":93224}},{"uid":"5c1bdf50a93dc88f","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/5c1bdf50a93dc88f","status":"passed","time":{"start":1729646925798,"stop":1729646936691,"duration":10893}},{"uid":"a007a497cf757edc","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/a007a497cf757edc","status":"passed","time":{"start":1729560620784,"stop":1729560648433,"duration":27649}},{"uid":"e4d68c4d1289127b","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/e4d68c4d1289127b","status":"passed","time":{"start":1729473963161,"stop":1729473974590,"duration":11429}},{"uid":"70b0ecc60e428606","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/70b0ecc60e428606","status":"passed","time":{"start":1729387750521,"stop":1729387760747,"duration":10226}},{"uid":"67f4f1933d4b32d3","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/67f4f1933d4b32d3","status":"passed","time":{"start":1729371459549,"stop":1729371469942,"duration":10393}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d3d4e57cf1a94453.json","parameterValues":["'nrf9160dk'","'zephyr'"]}