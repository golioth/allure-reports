{"uid":"1a11b48148ee14b0","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1730855042643,"stop":1730855065269,"duration":22626},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8ceb6410>\ndevice = <golioth.golioth.Device object at 0xffff8cec9690>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730855024671,"stop":1730855024672,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730855024672,"stop":1730855024672,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730855024673,"stop":1730855024673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730855024673,"stop":1730855024673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730855024674,"stop":1730855024676,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730855024674,"stop":1730855024674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730855024677,"stop":1730855024677,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730855024678,"stop":1730855025206,"duration":528},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730855024678,"stop":1730855024678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730855025207,"stop":1730855026164,"duration":957},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730855026165,"stop":1730855041707,"duration":15542},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730855041708,"stop":1730855042640,"duration":932},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8ceb6410>\ndevice = <golioth.golioth.Device object at 0xffff8cec9690>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8c142f068385e8dd","name":"log","source":"8c142f068385e8dd.txt","type":"text/plain","size":12904}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730855065580,"stop":1730855065586,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730855065587,"stop":1730855065985,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730855065987,"stop":1730855065989,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730855065994,"stop":1730855065994,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b1af2743ced9"},{"name":"thread","value":"392-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":33,"unknown":0,"total":35},"items":[{"uid":"8c2fa3b3bd04c09c","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/8c2fa3b3bd04c09c","status":"passed","time":{"start":1730768910983,"stop":1730768932539,"duration":21556}},{"uid":"65ba9b809f8b9d95","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/65ba9b809f8b9d95","status":"passed","time":{"start":1730682192875,"stop":1730682218592,"duration":25717}},{"uid":"cb5f0c6c54aa1596","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/cb5f0c6c54aa1596","status":"passed","time":{"start":1730595880857,"stop":1730595904455,"duration":23598}},{"uid":"13ffda844e1c244c","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/13ffda844e1c244c","status":"passed","time":{"start":1730509252402,"stop":1730509267991,"duration":15589}},{"uid":"e84bce7c7b231a3e","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/e84bce7c7b231a3e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730423123773,"stop":1730423146603,"duration":22830}},{"uid":"f3dc080c17010263","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/f3dc080c17010263","status":"passed","time":{"start":1730337097324,"stop":1730337120059,"duration":22735}},{"uid":"c70d87e938e590dc","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/c70d87e938e590dc","status":"passed","time":{"start":1730305016068,"stop":1730305033993,"duration":17925}},{"uid":"86c3ef90d15830e4","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/86c3ef90d15830e4","status":"passed","time":{"start":1730250089206,"stop":1730250114027,"duration":24821}},{"uid":"fa26a138fc508f21","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/fa26a138fc508f21","status":"passed","time":{"start":1730164274768,"stop":1730164294200,"duration":19432}},{"uid":"91d77c4c89491dd","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/91d77c4c89491dd","status":"passed","time":{"start":1730077461003,"stop":1730077480909,"duration":19906}},{"uid":"c4cf17fd270b0e2a","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/c4cf17fd270b0e2a","status":"passed","time":{"start":1729990977631,"stop":1729991001534,"duration":23903}},{"uid":"e7a3e2541cf75cc5","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/e7a3e2541cf75cc5","status":"passed","time":{"start":1729904486366,"stop":1729904506203,"duration":19837}},{"uid":"d666518ad1454542","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/d666518ad1454542","status":"passed","time":{"start":1729818198417,"stop":1729818219276,"duration":20859}},{"uid":"a0ebfab01978c0ed","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/a0ebfab01978c0ed","status":"passed","time":{"start":1729732094428,"stop":1729732113406,"duration":18978}},{"uid":"f41e0cdcfdacc5a9","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/f41e0cdcfdacc5a9","status":"passed","time":{"start":1729645780104,"stop":1729645799003,"duration":18899}},{"uid":"4dc40b100ecee24","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/4dc40b100ecee24","status":"passed","time":{"start":1729559036282,"stop":1729559056769,"duration":20487}},{"uid":"7c269ea18c3d1ff8","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/7c269ea18c3d1ff8","status":"passed","time":{"start":1729472590523,"stop":1729472613135,"duration":22612}},{"uid":"f416b01f2666e34d","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/f416b01f2666e34d","status":"passed","time":{"start":1729386194033,"stop":1729386213908,"duration":19875}},{"uid":"5fb7dd876ec1370f","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/5fb7dd876ec1370f","status":"passed","time":{"start":1729370205135,"stop":1729370225004,"duration":19869}},{"uid":"5c77510cebd1e81c","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/5c77510cebd1e81c","status":"passed","time":{"start":1729363121503,"stop":1729363143868,"duration":22365}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1a11b48148ee14b0.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}