{"uid":"51330e0a1ccda3","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"467e555cbdae75d46aefa9c64cb6440a","time":{"start":1732310907236,"stop":1732311020078,"duration":112842},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff89bdab90>\ndevice = <golioth.golioth.Device object at 0xffff89bb2f90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732310892947,"stop":1732310892947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732310892948,"stop":1732310892949,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732310892948,"stop":1732310892948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732310892949,"stop":1732310892949,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732310892950,"stop":1732310892952,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732310892950,"stop":1732310892950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732310892953,"stop":1732310892954,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732310892953,"stop":1732310892953,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732310892954,"stop":1732310893379,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732310893380,"stop":1732310894212,"duration":832},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732310894212,"stop":1732310906615,"duration":12403},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732310906616,"stop":1732310907233,"duration":617},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff89bdab90>\ndevice = <golioth.golioth.Device object at 0xffff89bb2f90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"73d00f4c2ab244e7","name":"log","source":"73d00f4c2ab244e7.txt","type":"text/plain","size":18870}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732311020355,"stop":1732311020383,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732311020385,"stop":1732311020764,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732311020766,"stop":1732311020768,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732311020773,"stop":1732311020773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3c294744a0c3"},{"name":"thread","value":"562-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cba9f06237b6e4cb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732310594970,"stop":1732310707794,"duration":112824}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":59,"unknown":0,"total":64},"items":[{"uid":"c9e653d1bb46bcd9","reportUrl":"https://golioth.github.io/allure-reports/main/27//#testresult/c9e653d1bb46bcd9","status":"passed","time":{"start":1732307461962,"stop":1732307515159,"duration":53197}},{"uid":"79aeefcd22f5a16e","reportUrl":"https://golioth.github.io/allure-reports/main/1831//#testresult/79aeefcd22f5a16e","status":"passed","time":{"start":1732299369260,"stop":1732299423390,"duration":54130}},{"uid":"b6671158d9ee2998","reportUrl":"https://golioth.github.io/allure-reports/main/1822//#testresult/b6671158d9ee2998","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732278808536,"stop":1732278921334,"duration":112798}},{"uid":"f79aef81c1ccb30d","reportUrl":"https://golioth.github.io/allure-reports/main/1820//#testresult/f79aef81c1ccb30d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732238547764,"stop":1732238660532,"duration":112768}},{"uid":"65d9e71e4548864","reportUrl":"https://golioth.github.io/allure-reports/main/1809//#testresult/65d9e71e4548864","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'","time":{"start":1732214486722,"stop":1732214486722,"duration":0}},{"uid":"ed07f955f989cdb3","reportUrl":"https://golioth.github.io/allure-reports/main/1804//#testresult/ed07f955f989cdb3","status":"passed","time":{"start":1732162920129,"stop":1732162978271,"duration":58142}},{"uid":"edfd1d984b6c5818","reportUrl":"https://golioth.github.io/allure-reports/main/1803//#testresult/edfd1d984b6c5818","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732152995252,"stop":1732153107980,"duration":112728}},{"uid":"b419218a3c8f8d0d","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/b419218a3c8f8d0d","status":"passed","time":{"start":1732139791624,"stop":1732139845071,"duration":53447}},{"uid":"db74801ef529224","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/db74801ef529224","status":"passed","time":{"start":1732064852005,"stop":1732064905442,"duration":53437}},{"uid":"4c8fe25ea0d2862d","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/4c8fe25ea0d2862d","status":"passed","time":{"start":1732059826181,"stop":1732059879441,"duration":53260}},{"uid":"dd59445d9f6e998","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/dd59445d9f6e998","status":"passed","time":{"start":1732037849439,"stop":1732037901846,"duration":52407}},{"uid":"7db2f0344342c7e0","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/7db2f0344342c7e0","status":"passed","time":{"start":1731978507783,"stop":1731978561244,"duration":53461}},{"uid":"e4903bc2bdc14004","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/e4903bc2bdc14004","status":"passed","time":{"start":1731968346076,"stop":1731968399933,"duration":53857}},{"uid":"c7c347241ab4180f","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/c7c347241ab4180f","status":"passed","time":{"start":1731892277753,"stop":1731892332440,"duration":54687}},{"uid":"4f5162da2a27eaac","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/4f5162da2a27eaac","status":"passed","time":{"start":1731805922372,"stop":1731805976262,"duration":53890}},{"uid":"eeff65c1e9db7538","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/eeff65c1e9db7538","status":"passed","time":{"start":1731719767395,"stop":1731719820812,"duration":53417}},{"uid":"c79d4f9daa57c0eb","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/c79d4f9daa57c0eb","status":"passed","time":{"start":1731633330626,"stop":1731633384147,"duration":53521}},{"uid":"40486defa63eef88","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/40486defa63eef88","status":"passed","time":{"start":1731608781280,"stop":1731608834906,"duration":53626}},{"uid":"5050b058ef9dc147","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/5050b058ef9dc147","status":"passed","time":{"start":1731566988922,"stop":1731567042884,"duration":53962}},{"uid":"72f2f7e6fd6613cd","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/72f2f7e6fd6613cd","status":"passed","time":{"start":1731546395977,"stop":1731546448587,"duration":52610}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"51330e0a1ccda3.json","parameterValues":["'rak5010'","'zephyr'"]}