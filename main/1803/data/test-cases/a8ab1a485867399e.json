{"uid":"a8ab1a485867399e","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1732151852958,"stop":1732151945755,"duration":92797},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87ee81d0>\ndevice = <golioth.golioth.Device object at 0xffff87e95d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732151815875,"stop":1732151815875,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732151815876,"stop":1732151815876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732151815876,"stop":1732151815876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732151815877,"stop":1732151815878,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732151815877,"stop":1732151815877,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732151815878,"stop":1732151815880,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732151815881,"stop":1732151815881,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732151815881,"stop":1732151815881,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732151815882,"stop":1732151816369,"duration":487},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732151816369,"stop":1732151817302,"duration":933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732151817302,"stop":1732151852318,"duration":35016},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732151852318,"stop":1732151852955,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87ee81d0>\ndevice = <golioth.golioth.Device object at 0xffff87e95d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"910c1260e9e33c66","name":"log","source":"910c1260e9e33c66.txt","type":"text/plain","size":26892}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732151946119,"stop":1732151946455,"duration":336},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732151946457,"stop":1732151946856,"duration":399},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732151946858,"stop":1732151946860,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732151946865,"stop":1732151946865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3559d5a030cc"},{"name":"thread","value":"364-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":55,"unknown":0,"total":57},"items":[{"uid":"e1e5ae19381d49b3","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/e1e5ae19381d49b3","status":"passed","time":{"start":1732138927192,"stop":1732138975193,"duration":48001}},{"uid":"539dff4f64891ef1","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/539dff4f64891ef1","status":"passed","time":{"start":1732064212544,"stop":1732064261859,"duration":49315}},{"uid":"84049f63ad179799","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/84049f63ad179799","status":"passed","time":{"start":1732059273760,"stop":1732059329439,"duration":55679}},{"uid":"d3c6f933116c52e5","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/d3c6f933116c52e5","status":"passed","time":{"start":1732037215604,"stop":1732037263687,"duration":48083}},{"uid":"fa23b334c66c6aae","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/fa23b334c66c6aae","status":"passed","time":{"start":1731977864990,"stop":1731977914989,"duration":49999}},{"uid":"c5b23dd1d62740c6","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/c5b23dd1d62740c6","status":"passed","time":{"start":1731968160969,"stop":1731968208762,"duration":47793}},{"uid":"bb5ccb0ebe229799","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/bb5ccb0ebe229799","status":"passed","time":{"start":1731891586035,"stop":1731891634111,"duration":48076}},{"uid":"12116c4e441997fd","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/12116c4e441997fd","status":"passed","time":{"start":1731805231952,"stop":1731805279950,"duration":47998}},{"uid":"2813f4697b7d061","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/2813f4697b7d061","status":"passed","time":{"start":1731718875800,"stop":1731718923735,"duration":47935}},{"uid":"2227deb28dd72c2b","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/2227deb28dd72c2b","status":"passed","time":{"start":1731632438732,"stop":1731632486625,"duration":47893}},{"uid":"e3a72fa7cff238d3","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/e3a72fa7cff238d3","status":"passed","time":{"start":1731608054281,"stop":1731608102554,"duration":48273}},{"uid":"8e13f16eebecda5f","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/8e13f16eebecda5f","status":"passed","time":{"start":1731566146704,"stop":1731566195032,"duration":48328}},{"uid":"100a06b6dabfd87c","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/100a06b6dabfd87c","status":"passed","time":{"start":1731545537820,"stop":1731545585719,"duration":47899}},{"uid":"a920131133446887","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/a920131133446887","status":"passed","time":{"start":1731459951170,"stop":1731460000602,"duration":49432}},{"uid":"ce14346fb0c322ed","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/ce14346fb0c322ed","status":"passed","time":{"start":1731372975745,"stop":1731373024218,"duration":48473}},{"uid":"eeefc0895a59d528","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/eeefc0895a59d528","status":"passed","time":{"start":1731286700168,"stop":1731286753590,"duration":53422}},{"uid":"daf4c866541beded","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/daf4c866541beded","status":"passed","time":{"start":1731200458842,"stop":1731200507389,"duration":48547}},{"uid":"a2e49de68b1a7432","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/a2e49de68b1a7432","status":"passed","time":{"start":1731113856816,"stop":1731113904855,"duration":48039}},{"uid":"829381b6fb14956a","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/829381b6fb14956a","status":"passed","time":{"start":1731027392226,"stop":1731027440635,"duration":48409}},{"uid":"ab0147f08f95da0b","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/ab0147f08f95da0b","status":"passed","time":{"start":1730941080030,"stop":1730941127888,"duration":47858}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"a8ab1a485867399e.json","parameterValues":["'rak5010'","'zephyr'"]}