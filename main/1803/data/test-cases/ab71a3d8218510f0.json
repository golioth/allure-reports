{"uid":"ab71a3d8218510f0","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"c9ae6dc826a01d1d44d52fc2bf414310","time":{"start":1732152389733,"stop":1732152482878,"duration":93145},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff929f8d10>\ndevice = <golioth.golioth.Device object at 0xffff929aa850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732152353081,"stop":1732152353081,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732152353082,"stop":1732152353082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732152353082,"stop":1732152353083,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732152353083,"stop":1732152353083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732152353084,"stop":1732152353086,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732152353084,"stop":1732152353084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732152353087,"stop":1732152353087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732152353087,"stop":1732152353088,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732152353088,"stop":1732152353509,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732152353510,"stop":1732152354430,"duration":920},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732152354431,"stop":1732152389092,"duration":34661},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732152389092,"stop":1732152389730,"duration":638},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff929f8d10>\ndevice = <golioth.golioth.Device object at 0xffff929aa850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"799db6cf0ce56a7f","name":"log","source":"799db6cf0ce56a7f.txt","type":"text/plain","size":29066}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732152483227,"stop":1732152483234,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732152483236,"stop":1732152483650,"duration":414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732152483652,"stop":1732152483654,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732152483659,"stop":1732152483660,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3559d5a030cc"},{"name":"thread","value":"444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":56,"unknown":0,"total":57},"items":[{"uid":"b998a3af12ae2e55","reportUrl":"https://golioth.github.io/allure-reports/main/1794//#testresult/b998a3af12ae2e55","status":"passed","time":{"start":1732139297550,"stop":1732139351793,"duration":54243}},{"uid":"8112c015c79fce5f","reportUrl":"https://golioth.github.io/allure-reports/main/1789//#testresult/8112c015c79fce5f","status":"passed","time":{"start":1732064494136,"stop":1732064533988,"duration":39852}},{"uid":"5172e7795884ff39","reportUrl":"https://golioth.github.io/allure-reports/main/1788//#testresult/5172e7795884ff39","status":"passed","time":{"start":1732059561214,"stop":1732059601109,"duration":39895}},{"uid":"2bc99646d2ab53f8","reportUrl":"https://golioth.github.io/allure-reports/main/1782//#testresult/2bc99646d2ab53f8","status":"passed","time":{"start":1732037494348,"stop":1732037533640,"duration":39292}},{"uid":"9d63b871706fb9b5","reportUrl":"https://golioth.github.io/allure-reports/main/1777//#testresult/9d63b871706fb9b5","status":"passed","time":{"start":1731978147850,"stop":1731978188215,"duration":40365}},{"uid":"fcfc64b5a5cd8502","reportUrl":"https://golioth.github.io/allure-reports/main/1775//#testresult/fcfc64b5a5cd8502","status":"passed","time":{"start":1731967898353,"stop":1731967941610,"duration":43257}},{"uid":"9188791f9c1f123b","reportUrl":"https://golioth.github.io/allure-reports/main/1759//#testresult/9188791f9c1f123b","status":"passed","time":{"start":1731891867655,"stop":1731891907244,"duration":39589}},{"uid":"e30d1b4c3d1e7c4b","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/e30d1b4c3d1e7c4b","status":"passed","time":{"start":1731805510206,"stop":1731805550405,"duration":40199}},{"uid":"34ac381b9828c43","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/34ac381b9828c43","status":"passed","time":{"start":1731719242598,"stop":1731719282361,"duration":39763}},{"uid":"e37a7f93f554e596","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/e37a7f93f554e596","status":"passed","time":{"start":1731632804820,"stop":1731632844114,"duration":39294}},{"uid":"fbc342b5720932f1","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/fbc342b5720932f1","status":"passed","time":{"start":1731608429277,"stop":1731608469786,"duration":40509}},{"uid":"ca8dcb10e93c4f8b","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/ca8dcb10e93c4f8b","status":"passed","time":{"start":1731566514892,"stop":1731566554384,"duration":39492}},{"uid":"113bdef8add6ec3f","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/113bdef8add6ec3f","status":"passed","time":{"start":1731545921562,"stop":1731545961658,"duration":40096}},{"uid":"7b1cd2de11279c4b","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/7b1cd2de11279c4b","status":"passed","time":{"start":1731460323631,"stop":1731460367252,"duration":43621}},{"uid":"61a3f0454abb6d20","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/61a3f0454abb6d20","status":"passed","time":{"start":1731373342542,"stop":1731373383099,"duration":40557}},{"uid":"443339b91d1b19c9","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/443339b91d1b19c9","status":"passed","time":{"start":1731287038605,"stop":1731287083369,"duration":44764}},{"uid":"4783a100c6e6552d","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/4783a100c6e6552d","status":"passed","time":{"start":1731200827234,"stop":1731200868576,"duration":41342}},{"uid":"5408b5d7fe8a55e2","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/5408b5d7fe8a55e2","status":"passed","time":{"start":1731114221873,"stop":1731114261522,"duration":39649}},{"uid":"c69dfe3b8a02a581","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/c69dfe3b8a02a581","status":"passed","time":{"start":1731027673393,"stop":1731027714112,"duration":40719}},{"uid":"b1d7fbff2aa9c054","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/b1d7fbff2aa9c054","status":"passed","time":{"start":1730941457018,"stop":1730941496529,"duration":39511}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"ab71a3d8218510f0.json","parameterValues":["'rak5010'","'zephyr'"]}