{"uid":"f756d53988c8a424","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"d8e686a250b0b2521ef0135246e5fe06","time":{"start":1730304526301,"stop":1730304621995,"duration":95694},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9583ee90>\nproject = <golioth.golioth.Project object at 0xffff959c4a90>\ndevice_name = 'certificate-WgLRKjKRcIhhZhLX'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_001050245958-if00,baud=115200']\ncertificate_cred = '672259f1990e7ed8707e3c25', wifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1730304496425,"stop":1730304496426,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"anyio_backend","time":{"start":1730304496425,"stop":1730304496425,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_key","time":{"start":1730304496426,"stop":1730304496427,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"wifi_psk","time":{"start":1730304496426,"stop":1730304496426,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"api_url","time":{"start":1730304496427,"stop":1730304496427,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_object","time":{"start":1730304496428,"stop":1730304496430,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"twister_harness_config","time":{"start":1730304496428,"stop":1730304496428,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project","time":{"start":1730304496431,"stop":1730304496861,"duration":430},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_name","time":{"start":1730304496862,"stop":1730304496862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"certificate_cred","time":{"start":1730304496863,"stop":1730304497393,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"dut","time":{"start":1730304497393,"stop":1730304523086,"duration":25693},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"shell","time":{"start":1730304523087,"stop":1730304526292,"duration":3205},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"mcumgr_conn_args","time":{"start":1730304526293,"stop":1730304526294,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9583ee90>\nproject = <golioth.golioth.Project object at 0xffff959c4a90>\ndevice_name = 'certificate-WgLRKjKRcIhhZhLX'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_001050245958-if00,baud=115200']\ncertificate_cred = '672259f1990e7ed8707e3c25', wifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"86f225ac3108df7d","name":"log","source":"86f225ac3108df7d.txt","type":"text/plain","size":15613}],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"dut::0","time":{"start":1730304622265,"stop":1730304622309,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"certificate_cred::0","time":{"start":1730304622311,"stop":1730304622850,"duration":539},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_name::0","time":{"start":1730304622852,"stop":1730304623349,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"project::0","time":{"start":1730304623351,"stop":1730304623354,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device_object::0","time":{"start":1730304623356,"stop":1730304623356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"314e1c23a46f"},{"name":"thread","value":"939-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":26,"skipped":0,"passed":2,"unknown":0,"total":28},"items":[{"uid":"243b06244e44ce3c","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/243b06244e44ce3c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730249651653,"stop":1730249746967,"duration":95314}},{"uid":"8f38740c113024f4","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/8f38740c113024f4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730163315397,"stop":1730163410996,"duration":95599}},{"uid":"a0a15a2c722aa9fd","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/a0a15a2c722aa9fd","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730077598103,"stop":1730077693708,"duration":95605}},{"uid":"2c9b98dd3a327073","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/2c9b98dd3a327073","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729991301275,"stop":1729991396940,"duration":95665}},{"uid":"eb26025560e54f1d","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/eb26025560e54f1d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729904771153,"stop":1729904866757,"duration":95604}},{"uid":"e0b485fbf52e5ded","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/e0b485fbf52e5ded","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729818388030,"stop":1729818483346,"duration":95316}},{"uid":"8e069e055be4dbfa","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/8e069e055be4dbfa","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729731265964,"stop":1729731361288,"duration":95324}},{"uid":"cbf0a091bd2e9896","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/cbf0a091bd2e9896","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729645043483,"stop":1729645139095,"duration":95612}},{"uid":"55e9a52449bff52e","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/55e9a52449bff52e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729558486127,"stop":1729558581432,"duration":95305}},{"uid":"d20aadf46a7111a4","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/d20aadf46a7111a4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729472748017,"stop":1729472843759,"duration":95742}},{"uid":"7ebd3958e9f07664","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/7ebd3958e9f07664","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729386480388,"stop":1729386575996,"duration":95608}},{"uid":"9ae5b1f70ffc721e","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/9ae5b1f70ffc721e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729369752002,"stop":1729369847100,"duration":95098}},{"uid":"17ce20a1a073394","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/17ce20a1a073394","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729362033428,"stop":1729362129046,"duration":95618}},{"uid":"d69d57f615ee0226","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/d69d57f615ee0226","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729299972901,"stop":1729300068509,"duration":95608}},{"uid":"e0ee33ede11bcbef","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/e0ee33ede11bcbef","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729213367028,"stop":1729213462340,"duration":95312}},{"uid":"6436657c238c181a","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/6436657c238c181a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729203926554,"stop":1729204021857,"duration":95303}},{"uid":"50f4b94fe69bcddb","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/50f4b94fe69bcddb","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729131045942,"stop":1729131141258,"duration":95316}},{"uid":"69baea8869288bd4","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/69baea8869288bd4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729111217242,"stop":1729111312563,"duration":95321}},{"uid":"135514fe5fa3c05a","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/135514fe5fa3c05a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729040055503,"stop":1729040150774,"duration":95271}},{"uid":"7df5e831f1dbbdda","reportUrl":"https://golioth.github.io/allure-reports/main/1643//#testresult/7df5e831f1dbbdda","status":"passed","time":{"start":1729026961338,"stop":1729027002874,"duration":41536}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f756d53988c8a424.json","parameterValues":["'nrf52840dk'","'zephyr'"]}