{"uid":"5ec388edc8419bae","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"7b5bd2e87b0538b1f5ac1141f1902779","time":{"start":1759860971112,"stop":1759861004985,"duration":33873},"status":"failed","statusMessage":"AssertionError: assert 7 == 2\n +  where 7 = int('7')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffaeb83a10>\ndevice = <golioth.golioth.Device object at 0xffffae915160>\nproject = <golioth.golioth.Project object at 0xffffae9e9be0>\nreleases = {'test_blocks': Release <68e558b962fb6aa144e21063, release_tags=[], device_tags=['68e558b862fb6aa144e21060'], artifact...ease_tags=[], device_tags=['68e558b862fb6aa144e21060'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 7 == 2\nE                    +  where 7 = int('7')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759860889622,"stop":1759860889622,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759860889623,"stop":1759860889623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759860889624,"stop":1759860889624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759860889624,"stop":1759860889624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759860889625,"stop":1759860889626,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759860889625,"stop":1759860889625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759860889626,"stop":1759860889626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759860889627,"stop":1759860914972,"duration":25345},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759860914974,"stop":1759860915466,"duration":492},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759860915467,"stop":1759860916216,"duration":749},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759860916217,"stop":1759860919403,"duration":3186},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1759860919405,"stop":1759860919848,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1759860919848,"stop":1759860920527,"duration":679},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1759860920527,"stop":1759860922294,"duration":1767},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1759860971109,"stop":1759860971110,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 7 == 2\n +  where 7 = int('7')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffaeb83a10>\ndevice = <golioth.golioth.Device object at 0xffffae915160>\nproject = <golioth.golioth.Project object at 0xffffae9e9be0>\nreleases = {'test_blocks': Release <68e558b962fb6aa144e21063, release_tags=[], device_tags=['68e558b862fb6aa144e21060'], artifact...ease_tags=[], device_tags=['68e558b862fb6aa144e21060'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 7 == 2\nE                    +  where 7 = int('7')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"5f66762b969d6451","name":"stdout","source":"5f66762b969d6451.txt","type":"text/plain","size":276}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1759861005180,"stop":1759861005921,"duration":741},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1759861005923,"stop":1759861007608,"duration":1685},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1759861007611,"stop":1759861008243,"duration":632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1759861008245,"stop":1759861008246,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1759861008247,"stop":1759861008248,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759861008250,"stop":1759861008582,"duration":332},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759861008584,"stop":1759861008585,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759861008587,"stop":1759861008590,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"605177285bc8"},{"name":"thread","value":"227-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":2,"skipped":0,"passed":11,"unknown":0,"total":15},"items":[{"uid":"ff6c60010b1b58fb","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/ff6c60010b1b58fb","status":"passed","time":{"start":1759848348376,"stop":1759848397569,"duration":49193}},{"uid":"9613185fed6c4b54","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/9613185fed6c4b54","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759799366368,"stop":1759799366368,"duration":0}},{"uid":"bdbf7cb5a7a2108d","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/bdbf7cb5a7a2108d","status":"passed","time":{"start":1759781790399,"stop":1759781839875,"duration":49476}},{"uid":"6160f8f300bf9b48","reportUrl":"https://golioth.github.io/allure-reports/main/742//#testresult/6160f8f300bf9b48","status":"passed","time":{"start":1759712327076,"stop":1759712373777,"duration":46701}},{"uid":"5bdc3993d3974953","reportUrl":"https://golioth.github.io/allure-reports/main/741//#testresult/5bdc3993d3974953","status":"passed","time":{"start":1759623744009,"stop":1759623791614,"duration":47605}},{"uid":"382b880b0c57ee4f","reportUrl":"https://golioth.github.io/allure-reports/main/740//#testresult/382b880b0c57ee4f","status":"passed","time":{"start":1759536692726,"stop":1759536739533,"duration":46807}},{"uid":"19db5afa504bbef4","reportUrl":"https://golioth.github.io/allure-reports/main/738//#testresult/19db5afa504bbef4","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759450311282,"stop":1759450344233,"duration":32951}},{"uid":"874e08a71ee70409","reportUrl":"https://golioth.github.io/allure-reports/main/734//#testresult/874e08a71ee70409","status":"passed","time":{"start":1759364359805,"stop":1759364407342,"duration":47537}},{"uid":"94bdf0d1e5ef5b6a","reportUrl":"https://golioth.github.io/allure-reports/main/733//#testresult/94bdf0d1e5ef5b6a","status":"passed","time":{"start":1759280162578,"stop":1759280210996,"duration":48418}},{"uid":"77f7a7d2c071bcd4","reportUrl":"https://golioth.github.io/allure-reports/main/730//#testresult/77f7a7d2c071bcd4","status":"passed","time":{"start":1759191220286,"stop":1759191268386,"duration":48100}},{"uid":"44d4628263de30c6","reportUrl":"https://golioth.github.io/allure-reports/main/727//#testresult/44d4628263de30c6","status":"passed","time":{"start":1759113782818,"stop":1759113829497,"duration":46679}},{"uid":"ce0c6841b4b7b149","reportUrl":"https://golioth.github.io/allure-reports/main/725//#testresult/ce0c6841b4b7b149","status":"passed","time":{"start":1759018938589,"stop":1759018987331,"duration":48742}},{"uid":"262297dde32c0d21","reportUrl":"https://golioth.github.io/allure-reports/main/724//#testresult/262297dde32c0d21","status":"passed","time":{"start":1758932059793,"stop":1758932109725,"duration":49932}},{"uid":"8c760e7484801702","reportUrl":"https://golioth.github.io/allure-reports/main/719//#testresult/8c760e7484801702","status":"failed","statusDetails":"AssertionError: assert 7 == 2\n +  where 7 = int('7')","time":{"start":1758847555732,"stop":1758847592523,"duration":36791}}]},"tags":["mikes_orange_pi","esp-idf","anyio","esp32_devkitc_wrover_espidf"]},"source":"5ec388edc8419bae.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}