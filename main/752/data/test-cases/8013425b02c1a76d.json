{"uid":"8013425b02c1a76d","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"6d1f08dc1ecf1c9cd2ea05e90cb8bc0d","time":{"start":1759860911261,"stop":1759860940579,"duration":29318},"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff95e13a10>\ndevice = <golioth.golioth.Device object at 0xffff95ba5160>\nproject = <golioth.golioth.Project object at 0xffff95d4dbe0>\nreleases = {'test_blocks': Release <68e5586e62fb6aa144e2104d, release_tags=[], device_tags=['68e5586c62fb6aa144e21046'], artifact...ease_tags=[], device_tags=['68e5586c62fb6aa144e21046'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759860784955,"stop":1759860784955,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759860784956,"stop":1759860784956,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759860784957,"stop":1759860784958,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759860784957,"stop":1759860784957,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759860784958,"stop":1759860784958,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759860784959,"stop":1759860784959,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759860784959,"stop":1759860784959,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759860784960,"stop":1759860838886,"duration":53926},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759860838887,"stop":1759860839392,"duration":505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759860839393,"stop":1759860840185,"duration":792},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759860840186,"stop":1759860843764,"duration":3578},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1759860843766,"stop":1759860844293,"duration":527},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1759860844293,"stop":1759860845139,"duration":846},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1759860845139,"stop":1759860847147,"duration":2008},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1759860911258,"stop":1759860911258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff95e13a10>\ndevice = <golioth.golioth.Device object at 0xffff95ba5160>\nproject = <golioth.golioth.Project object at 0xffff95d4dbe0>\nreleases = {'test_blocks': Release <68e5586e62fb6aa144e2104d, release_tags=[], device_tags=['68e5586c62fb6aa144e21046'], artifact...ease_tags=[], device_tags=['68e5586c62fb6aa144e21046'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"19f237d285d87493","name":"stdout","source":"19f237d285d87493.txt","type":"text/plain","size":111}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1759860940741,"stop":1759860941631,"duration":890},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1759860941633,"stop":1759860943494,"duration":1861},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1759860943496,"stop":1759860944260,"duration":764},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1759860944262,"stop":1759860944262,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1759860944264,"stop":1759860944264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759860944266,"stop":1759860944686,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759860944689,"stop":1759860944689,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759860944691,"stop":1759860944701,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"6a22fc51a8f5"},{"name":"thread","value":"228-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":12,"unknown":0,"total":15},"items":[{"uid":"bd2bd4ae5244b99d","reportUrl":"https://golioth.github.io/allure-reports/main/751//#testresult/bd2bd4ae5244b99d","status":"passed","time":{"start":1759848721121,"stop":1759848773108,"duration":51987}},{"uid":"200e9ba903d102c1","reportUrl":"https://golioth.github.io/allure-reports/main/750//#testresult/200e9ba903d102c1","status":"passed","time":{"start":1759795967703,"stop":1759796019066,"duration":51363}},{"uid":"6179ca0b9b082d7b","reportUrl":"https://golioth.github.io/allure-reports/main/746//#testresult/6179ca0b9b082d7b","status":"passed","time":{"start":1759775810250,"stop":1759775860092,"duration":49842}},{"uid":"69294c028dda32b3","reportUrl":"https://golioth.github.io/allure-reports/main/742//#testresult/69294c028dda32b3","status":"passed","time":{"start":1759710328312,"stop":1759710378247,"duration":49935}},{"uid":"7131dd9b40d2713b","reportUrl":"https://golioth.github.io/allure-reports/main/741//#testresult/7131dd9b40d2713b","status":"passed","time":{"start":1759623178058,"stop":1759623227831,"duration":49773}},{"uid":"79e181dea6fe5400","reportUrl":"https://golioth.github.io/allure-reports/main/740//#testresult/79e181dea6fe5400","status":"failed","statusDetails":"AssertionError: assert 9 == 6\n +  where 9 = int('9')","time":{"start":1759536751636,"stop":1759536806063,"duration":54427}},{"uid":"dc2ef5d35f2d1beb","reportUrl":"https://golioth.github.io/allure-reports/main/738//#testresult/dc2ef5d35f2d1beb","status":"passed","time":{"start":1759450427517,"stop":1759450477950,"duration":50433}},{"uid":"abcc65397a4e8ce5","reportUrl":"https://golioth.github.io/allure-reports/main/734//#testresult/abcc65397a4e8ce5","status":"passed","time":{"start":1759363966619,"stop":1759364016059,"duration":49440}},{"uid":"cfc1b49c3a4849dc","reportUrl":"https://golioth.github.io/allure-reports/main/733//#testresult/cfc1b49c3a4849dc","status":"passed","time":{"start":1759277548657,"stop":1759277598202,"duration":49545}},{"uid":"543d4c3fb987e54f","reportUrl":"https://golioth.github.io/allure-reports/main/730//#testresult/543d4c3fb987e54f","status":"passed","time":{"start":1759191170868,"stop":1759191221096,"duration":50228}},{"uid":"6076eb59b8fab60f","reportUrl":"https://golioth.github.io/allure-reports/main/727//#testresult/6076eb59b8fab60f","status":"passed","time":{"start":1759104672630,"stop":1759104720504,"duration":47874}},{"uid":"783e75b3d9a35ec0","reportUrl":"https://golioth.github.io/allure-reports/main/725//#testresult/783e75b3d9a35ec0","status":"passed","time":{"start":1759018394042,"stop":1759018443756,"duration":49714}},{"uid":"5a0d2115ef79f506","reportUrl":"https://golioth.github.io/allure-reports/main/724//#testresult/5a0d2115ef79f506","status":"passed","time":{"start":1758931957230,"stop":1758932007873,"duration":50643}},{"uid":"ebd76d8b3c28577c","reportUrl":"https://golioth.github.io/allure-reports/main/719//#testresult/ebd76d8b3c28577c","status":"failed","statusDetails":"AssertionError: assert 6 == 0\n +  where 6 = int('6')","time":{"start":1758845593198,"stop":1758845622868,"duration":29670}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf"]},"source":"8013425b02c1a76d.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}