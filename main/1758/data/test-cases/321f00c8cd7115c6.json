{"uid":"321f00c8cd7115c6","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"abc89250cc42bcc27860ba6da8e15ba7","time":{"start":1731805702019,"stop":1731805828942,"duration":126923},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_credentials>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffa5c14c10>\nproject = <golioth.golioth.Project object at 0xffffa5d495d0>\ndevice_name = 'certificate-hHJkNSWfRaFdnEyG'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00,baud=115200']\ncertificate_cred = '673941f6991409ec59c69a62', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(request, shell,\n                               project, device_name,\n                               mcumgr_conn_args, certificate_cred,\n                               wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731805686029,"stop":1731805686029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731805686030,"stop":1731805686030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731805686030,"stop":1731805686030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731805686031,"stop":1731805686031,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731805686031,"stop":1731805686031,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731805686032,"stop":1731805686032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731805686032,"stop":1731805686034,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731805686035,"stop":1731805686496,"duration":461},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731805686497,"stop":1731805686498,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1731805686498,"stop":1731805686991,"duration":493},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731805686992,"stop":1731805701380,"duration":14388},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731805701381,"stop":1731805702015,"duration":634},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1731805702016,"stop":1731805702016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_credentials>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffa5c14c10>\nproject = <golioth.golioth.Project object at 0xffffa5d495d0>\ndevice_name = 'certificate-hHJkNSWfRaFdnEyG'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00,baud=115200']\ncertificate_cred = '673941f6991409ec59c69a62', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(request, shell,\n                               project, device_name,\n                               mcumgr_conn_args, certificate_cred,\n                               wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"21d0b99af25f2a79","name":"log","source":"21d0b99af25f2a79.txt","type":"text/plain","size":23263}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731805829282,"stop":1731805830016,"duration":734},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1731805830018,"stop":1731805830442,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1731805830444,"stop":1731805830892,"duration":448},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731805830894,"stop":1731805830896,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731805830898,"stop":1731805830898,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"80371c89c51b"},{"name":"thread","value":"509-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":45,"unknown":0,"total":49},"items":[{"uid":"750d41359b15d0a7","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/750d41359b15d0a7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731719598184,"stop":1731719725337,"duration":127153}},{"uid":"569aa4fb1c2bf15d","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/569aa4fb1c2bf15d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731633068986,"stop":1731633196126,"duration":127140}},{"uid":"9f0626c4e1703cff","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/9f0626c4e1703cff","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731608881916,"stop":1731609009334,"duration":127418}},{"uid":"8baa7cb066842688","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/8baa7cb066842688","status":"passed","time":{"start":1731566873207,"stop":1731566947586,"duration":74379}},{"uid":"c50783200e436c68","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/c50783200e436c68","status":"passed","time":{"start":1731546184750,"stop":1731546259521,"duration":74771}},{"uid":"1dda49edc3292f02","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/1dda49edc3292f02","status":"passed","time":{"start":1731460691312,"stop":1731460768277,"duration":76965}},{"uid":"36e9e51b961eca47","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/36e9e51b961eca47","status":"passed","time":{"start":1731373792907,"stop":1731373869958,"duration":77051}},{"uid":"765da37d7c4feda9","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/765da37d7c4feda9","status":"passed","time":{"start":1731287416990,"stop":1731287495897,"duration":78907}},{"uid":"c9b6e2a9dcef4e79","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/c9b6e2a9dcef4e79","status":"passed","time":{"start":1731201280807,"stop":1731201355121,"duration":74314}},{"uid":"fa33444f1ad84f6e","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/fa33444f1ad84f6e","status":"passed","time":{"start":1731114674460,"stop":1731114749809,"duration":75349}},{"uid":"1f2f6dd108e82ae9","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/1f2f6dd108e82ae9","status":"passed","time":{"start":1731028012849,"stop":1731028087156,"duration":74307}},{"uid":"f4a0510a343a746","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/f4a0510a343a746","status":"passed","time":{"start":1730941718710,"stop":1730941792305,"duration":73595}},{"uid":"ca93ad34ac46eb33","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/ca93ad34ac46eb33","status":"passed","time":{"start":1730855109297,"stop":1730855183001,"duration":73704}},{"uid":"e11e465b224969ab","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/e11e465b224969ab","status":"passed","time":{"start":1730855109297,"stop":1730855183001,"duration":73704}},{"uid":"db5b2446dd98451","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/db5b2446dd98451","status":"passed","time":{"start":1730768991939,"stop":1730769074709,"duration":82770}},{"uid":"6c23778e92b53958","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/6c23778e92b53958","status":"passed","time":{"start":1730682751313,"stop":1730682824852,"duration":73539}},{"uid":"29210a54fba4ee46","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/29210a54fba4ee46","status":"passed","time":{"start":1730596182859,"stop":1730596257454,"duration":74595}},{"uid":"9b731737503c1810","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/9b731737503c1810","status":"passed","time":{"start":1730509276370,"stop":1730509355057,"duration":78687}},{"uid":"6ede9504cf7656c9","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/6ede9504cf7656c9","status":"passed","time":{"start":1730423011089,"stop":1730423085570,"duration":74481}},{"uid":"3b779ef93a0ff676","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/3b779ef93a0ff676","status":"passed","time":{"start":1730338080796,"stop":1730338155078,"duration":74282}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"321f00c8cd7115c6.json","parameterValues":["'rak5010'","'zephyr'"]}