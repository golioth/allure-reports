{"uid":"aa0045b4dd2ccb1e","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1731806289417,"stop":1731806311988,"duration":22571},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95800e90>\ndevice = <golioth.golioth.Device object at 0xffff9569a750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1731806270824,"stop":1731806270824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731806270825,"stop":1731806270825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731806270825,"stop":1731806270825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731806270826,"stop":1731806270826,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731806270826,"stop":1731806270827,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731806270827,"stop":1731806270829,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731806270830,"stop":1731806270830,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731806270830,"stop":1731806270830,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731806270831,"stop":1731806271281,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731806271282,"stop":1731806272288,"duration":1006},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731806272288,"stop":1731806288471,"duration":16183},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731806288471,"stop":1731806289414,"duration":943},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95800e90>\ndevice = <golioth.golioth.Device object at 0xffff9569a750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9a09e05673c253a8","name":"log","source":"9a09e05673c253a8.txt","type":"text/plain","size":12529}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731806312336,"stop":1731806312344,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731806312345,"stop":1731806312806,"duration":461},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731806312808,"stop":1731806312810,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731806312815,"stop":1731806312816,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5dfb1a61dd54"},{"name":"thread","value":"504-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"756d7f3412b7f4bb","status":"passed","time":{"start":1731805996554,"stop":1731806022042,"duration":25488}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":42,"unknown":0,"total":49},"items":[{"uid":"936a20421401e0cc","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/936a20421401e0cc","status":"passed","time":{"start":1731719511984,"stop":1731719535827,"duration":23843}},{"uid":"2d111374dfc8de9e","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/2d111374dfc8de9e","status":"passed","time":{"start":1731633037844,"stop":1731633062281,"duration":24437}},{"uid":"262a65aba52bee1b","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/262a65aba52bee1b","status":"passed","time":{"start":1731608824068,"stop":1731608845198,"duration":21130}},{"uid":"b4500fd01c01cdb7","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/b4500fd01c01cdb7","status":"passed","time":{"start":1731567312002,"stop":1731567334540,"duration":22538}},{"uid":"90648c8559c0643d","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/90648c8559c0643d","status":"passed","time":{"start":1731546578643,"stop":1731546599054,"duration":20411}},{"uid":"f43399a0b644fd9e","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/f43399a0b644fd9e","status":"passed","time":{"start":1731460279945,"stop":1731460304203,"duration":24258}},{"uid":"5997ce7e56bf02d","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/5997ce7e56bf02d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731373860839,"stop":1731373883375,"duration":22536}},{"uid":"ddb31e91556e932f","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/ddb31e91556e932f","status":"passed","time":{"start":1731287155882,"stop":1731287176239,"duration":20357}},{"uid":"29b4e390512af380","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/29b4e390512af380","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731201857985,"stop":1731201880506,"duration":22521}},{"uid":"3d92cdc77effb82a","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/3d92cdc77effb82a","status":"passed","time":{"start":1731114743432,"stop":1731114764157,"duration":20725}},{"uid":"3390cf6c9ff09c8f","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/3390cf6c9ff09c8f","status":"passed","time":{"start":1731028078891,"stop":1731028100669,"duration":21778}},{"uid":"b586fc6e61089572","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/b586fc6e61089572","status":"passed","time":{"start":1730941882908,"stop":1730941905649,"duration":22741}},{"uid":"15500b6131bc7e05","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/15500b6131bc7e05","status":"passed","time":{"start":1730894959990,"stop":1730894985732,"duration":25742}},{"uid":"c726d4f0298f68f0","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/c726d4f0298f68f0","status":"passed","time":{"start":1730855340662,"stop":1730855363530,"duration":22868}},{"uid":"ed9cc3b867ef1d52","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/ed9cc3b867ef1d52","status":"passed","time":{"start":1730769252332,"stop":1730769277423,"duration":25091}},{"uid":"76ef636b6c33c5c4","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/76ef636b6c33c5c4","status":"passed","time":{"start":1730682534071,"stop":1730682557865,"duration":23794}},{"uid":"97b78815c2e223ec","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/97b78815c2e223ec","status":"passed","time":{"start":1730596221187,"stop":1730596247172,"duration":25985}},{"uid":"af9cbb0af01aea1c","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/af9cbb0af01aea1c","status":"passed","time":{"start":1730509589375,"stop":1730509612978,"duration":23603}},{"uid":"460a93ffc023770c","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/460a93ffc023770c","status":"passed","time":{"start":1730423471620,"stop":1730423497128,"duration":25508}},{"uid":"bdb156523cfc4a78","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/bdb156523cfc4a78","status":"passed","time":{"start":1730337583978,"stop":1730337606698,"duration":22720}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"aa0045b4dd2ccb1e.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}