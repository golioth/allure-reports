{"uid":"6f86b5d2c3ea392e","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1731807195474,"stop":1731807289450,"duration":93976},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8863d9d0>\nproject = <golioth.golioth.Project object at 0xffff887b0550>\ndevice = <golioth.golioth.Device object at 0xffff88650f50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731807165739,"stop":1731807165740,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731807165740,"stop":1731807165740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731807165741,"stop":1731807165741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731807165741,"stop":1731807165741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731807165742,"stop":1731807165742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731807165742,"stop":1731807165742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731807165743,"stop":1731807165745,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731807165743,"stop":1731807165743,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731807165746,"stop":1731807166161,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731807166161,"stop":1731807167233,"duration":1072},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731807167234,"stop":1731807194371,"duration":27137},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731807194372,"stop":1731807195471,"duration":1099},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8863d9d0>\nproject = <golioth.golioth.Project object at 0xffff887b0550>\ndevice = <golioth.golioth.Device object at 0xffff88650f50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"96bb389ac941bc5c","name":"log","source":"96bb389ac941bc5c.txt","type":"text/plain","size":20578}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731807289697,"stop":1731807289736,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731807289737,"stop":1731807290122,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731807290124,"stop":1731807290126,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731807290128,"stop":1731807290129,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"95166f264bef"},{"name":"thread","value":"745-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":34,"unknown":0,"total":49},"items":[{"uid":"cb7528e41666e71b","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/cb7528e41666e71b","status":"passed","time":{"start":1731720805969,"stop":1731720818563,"duration":12594}},{"uid":"c6a65b06a211c690","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/c6a65b06a211c690","status":"passed","time":{"start":1731634509892,"stop":1731634540981,"duration":31089}},{"uid":"876bbebe2795f6d6","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/876bbebe2795f6d6","status":"passed","time":{"start":1731609995412,"stop":1731610009389,"duration":13977}},{"uid":"4f1f76581caf0ae5","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/4f1f76581caf0ae5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731568399370,"stop":1731568493469,"duration":94099}},{"uid":"2e371fd8910bc277","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/2e371fd8910bc277","status":"passed","time":{"start":1731547489056,"stop":1731547505723,"duration":16667}},{"uid":"93f11ae6c9bd3e8","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/93f11ae6c9bd3e8","status":"passed","time":{"start":1731461932736,"stop":1731461955595,"duration":22859}},{"uid":"c04de341b5a11bfb","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/c04de341b5a11bfb","status":"passed","time":{"start":1731374863868,"stop":1731374875564,"duration":11696}},{"uid":"b94fd77a18e9292f","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/b94fd77a18e9292f","status":"passed","time":{"start":1731288347596,"stop":1731288361196,"duration":13600}},{"uid":"6a612533b4975c85","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/6a612533b4975c85","status":"passed","time":{"start":1731202258991,"stop":1731202271429,"duration":12438}},{"uid":"e5eaf33bb56fb49a","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/e5eaf33bb56fb49a","status":"passed","time":{"start":1731115882036,"stop":1731115910683,"duration":28647}},{"uid":"543ab746ad0f8e8d","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/543ab746ad0f8e8d","status":"passed","time":{"start":1731029234185,"stop":1731029266919,"duration":32734}},{"uid":"3a99169822be0feb","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/3a99169822be0feb","status":"passed","time":{"start":1730943010617,"stop":1730943022789,"duration":12172}},{"uid":"ca60134c3a7c58e0","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/ca60134c3a7c58e0","status":"passed","time":{"start":1730893987881,"stop":1730894067749,"duration":79868}},{"uid":"f937e15a877e7790","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/f937e15a877e7790","status":"passed","time":{"start":1730856439243,"stop":1730856459465,"duration":20222}},{"uid":"819c48cb31ed19bb","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/819c48cb31ed19bb","status":"passed","time":{"start":1730770360070,"stop":1730770391029,"duration":30959}},{"uid":"61cc992baa0c1277","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/61cc992baa0c1277","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730683946877,"stop":1730684040881,"duration":94004}},{"uid":"b0c6030b8c9f6dc2","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/b0c6030b8c9f6dc2","status":"passed","time":{"start":1730597481540,"stop":1730597502540,"duration":21000}},{"uid":"f82ec609a506eb5b","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/f82ec609a506eb5b","status":"passed","time":{"start":1730510679502,"stop":1730510700317,"duration":20815}},{"uid":"51b85d07a6e9a691","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/51b85d07a6e9a691","status":"passed","time":{"start":1730424267142,"stop":1730424291519,"duration":24377}},{"uid":"702bb61cde8d2573","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/702bb61cde8d2573","status":"passed","time":{"start":1730339237268,"stop":1730339249555,"duration":12287}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6f86b5d2c3ea392e.json","parameterValues":["'nrf9160dk'","'zephyr'"]}