{"uid":"5691fe0a7e9fd05e","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"43d6dfcea201fa025ad1a835141d5ee7","time":{"start":1731545776121,"stop":1731545870121,"duration":94000},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaa029610>\nproject = <golioth.golioth.Project object at 0xffffaa162d90>\ndevice_name = 'certificate-XQfNFgBRWeotlgcY'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000725574531-if00,baud=115200']\ncertificate_cred = '67354aa78590529831ce5052', wifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731545766174,"stop":1731545766174,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731545766174,"stop":1731545766174,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731545766175,"stop":1731545766175,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731545766175,"stop":1731545766176,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731545766176,"stop":1731545766176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731545766177,"stop":1731545766179,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731545766177,"stop":1731545766177,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731545766180,"stop":1731545766658,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731545766659,"stop":1731545766660,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1731545766660,"stop":1731545767137,"duration":477},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731545767138,"stop":1731545775482,"duration":8344},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731545775482,"stop":1731545776118,"duration":636},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1731545776118,"stop":1731545776119,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaa029610>\nproject = <golioth.golioth.Project object at 0xffffaa162d90>\ndevice_name = 'certificate-XQfNFgBRWeotlgcY'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000725574531-if00,baud=115200']\ncertificate_cred = '67354aa78590529831ce5052', wifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8c120f4d2eb35710","name":"log","source":"8c120f4d2eb35710.txt","type":"text/plain","size":15102}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731545870390,"stop":1731545870433,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1731545870435,"stop":1731545870904,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1731545870906,"stop":1731545871399,"duration":493},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731545871402,"stop":1731545871404,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731545871406,"stop":1731545871406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cf116bfdc9cb"},{"name":"thread","value":"516-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":43,"unknown":0,"total":44},"items":[{"uid":"3d5a3a4ab0be9022","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/3d5a3a4ab0be9022","status":"passed","time":{"start":1731459399727,"stop":1731459420595,"duration":20868}},{"uid":"39c6f2e578f6f867","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/39c6f2e578f6f867","status":"passed","time":{"start":1731373076811,"stop":1731373096610,"duration":19799}},{"uid":"bee1ff2d9d336c3a","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/bee1ff2d9d336c3a","status":"passed","time":{"start":1731286906872,"stop":1731286928636,"duration":21764}},{"uid":"a0279b09df9efdea","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/a0279b09df9efdea","status":"passed","time":{"start":1731200483183,"stop":1731200503360,"duration":20177}},{"uid":"8579b3ed3a003ff3","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/8579b3ed3a003ff3","status":"passed","time":{"start":1731114000498,"stop":1731114020375,"duration":19877}},{"uid":"e75fb987d8acd3c3","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/e75fb987d8acd3c3","status":"passed","time":{"start":1731027903007,"stop":1731027923794,"duration":20787}},{"uid":"8e8dae03b66e89d7","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/8e8dae03b66e89d7","status":"passed","time":{"start":1730941130480,"stop":1730941150339,"duration":19859}},{"uid":"c74cb1d3b1a25a0d","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/c74cb1d3b1a25a0d","status":"passed","time":{"start":1730854576439,"stop":1730854597391,"duration":20952}},{"uid":"34cb3794bcf227b5","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/34cb3794bcf227b5","status":"passed","time":{"start":1730854576439,"stop":1730854597391,"duration":20952}},{"uid":"b7bf9ba313498045","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/b7bf9ba313498045","status":"passed","time":{"start":1730768467241,"stop":1730768487083,"duration":19842}},{"uid":"7e14b7e049adae56","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/7e14b7e049adae56","status":"passed","time":{"start":1730681555612,"stop":1730681576234,"duration":20622}},{"uid":"e47735a6c1ac5366","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/e47735a6c1ac5366","status":"passed","time":{"start":1730595940541,"stop":1730595962198,"duration":21657}},{"uid":"f8347d1ae3082fbc","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/f8347d1ae3082fbc","status":"passed","time":{"start":1730509229192,"stop":1730509248945,"duration":19753}},{"uid":"652772ebe859f88d","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/652772ebe859f88d","status":"passed","time":{"start":1730422844773,"stop":1730422864646,"duration":19873}},{"uid":"ba0c01e042d8996","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/ba0c01e042d8996","status":"passed","time":{"start":1730336533588,"stop":1730336555039,"duration":21451}},{"uid":"77eb13e1b3dd51bb","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/77eb13e1b3dd51bb","status":"passed","time":{"start":1730305267251,"stop":1730305287935,"duration":20684}},{"uid":"57ff0aeb235b6632","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/57ff0aeb235b6632","status":"passed","time":{"start":1730250109084,"stop":1730250130558,"duration":21474}},{"uid":"2cbc16fbe32fc0e","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/2cbc16fbe32fc0e","status":"passed","time":{"start":1730163799260,"stop":1730163820156,"duration":20896}},{"uid":"8e028fb7e933c0bc","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/8e028fb7e933c0bc","status":"passed","time":{"start":1730077426664,"stop":1730077447088,"duration":20424}},{"uid":"b2873539bf16d652","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/b2873539bf16d652","status":"passed","time":{"start":1729990913395,"stop":1729990934262,"duration":20867}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"5691fe0a7e9fd05e.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}