{"uid":"61d6561114314670","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a7312cf31d6314ecf7ffd5a0a0af0ddc","time":{"start":1731546314411,"stop":1731546335620,"duration":21209},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fe3ed90>\ndevice = <golioth.golioth.Device object at 0xffff9fe5dc90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731546297727,"stop":1731546297728,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731546297727,"stop":1731546297727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731546297728,"stop":1731546297729,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731546297728,"stop":1731546297728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731546297729,"stop":1731546297729,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731546297730,"stop":1731546297732,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731546297732,"stop":1731546297733,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731546297733,"stop":1731546297733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731546297734,"stop":1731546298158,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731546298158,"stop":1731546299035,"duration":877},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731546299036,"stop":1731546313364,"duration":14328},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731546313365,"stop":1731546314408,"duration":1043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fe3ed90>\ndevice = <golioth.golioth.Device object at 0xffff9fe5dc90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"994614989eae212c","name":"log","source":"994614989eae212c.txt","type":"text/plain","size":21026}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731546335931,"stop":1731546336098,"duration":167},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731546336100,"stop":1731546336743,"duration":643},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731546336746,"stop":1731546336748,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731546336753,"stop":1731546336753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b4182686e6ff"},{"name":"thread","value":"411-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":38,"unknown":0,"total":44},"items":[{"uid":"9acd4015614addc6","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/9acd4015614addc6","status":"passed","time":{"start":1731459984766,"stop":1731460015671,"duration":30905}},{"uid":"1417c5ddc95318ea","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/1417c5ddc95318ea","status":"passed","time":{"start":1731373567644,"stop":1731373595731,"duration":28087}},{"uid":"8dd1e0483b227d2f","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/8dd1e0483b227d2f","status":"passed","time":{"start":1731286857587,"stop":1731286883681,"duration":26094}},{"uid":"78ac9ba649ff3fdb","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/78ac9ba649ff3fdb","status":"passed","time":{"start":1731201577494,"stop":1731201607440,"duration":29946}},{"uid":"47cd2bbc4208a0ab","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/47cd2bbc4208a0ab","status":"passed","time":{"start":1731114451281,"stop":1731114476239,"duration":24958}},{"uid":"47d2d59ce8b5b61f","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/47d2d59ce8b5b61f","status":"passed","time":{"start":1731027786695,"stop":1731027813786,"duration":27091}},{"uid":"419627d98e4d7ee1","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/419627d98e4d7ee1","status":"passed","time":{"start":1730941616166,"stop":1730941641209,"duration":25043}},{"uid":"17bf7efe6ab57fe","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/17bf7efe6ab57fe","status":"passed","time":{"start":1730894664043,"stop":1730894693883,"duration":29840}},{"uid":"62e467d89233dcb","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/62e467d89233dcb","status":"passed","time":{"start":1730855385390,"stop":1730855410355,"duration":24965}},{"uid":"8afa0b5801878eab","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/8afa0b5801878eab","status":"passed","time":{"start":1730768954491,"stop":1730768981567,"duration":27076}},{"uid":"e7f846dd152cd8a8","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/e7f846dd152cd8a8","status":"passed","time":{"start":1730682240666,"stop":1730682270589,"duration":29923}},{"uid":"9526ce673c48bafd","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/9526ce673c48bafd","status":"passed","time":{"start":1730595926302,"stop":1730595956178,"duration":29876}},{"uid":"219fc177135fe5e9","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/219fc177135fe5e9","status":"passed","time":{"start":1730509291043,"stop":1730509318182,"duration":27139}},{"uid":"9f18d6cca77c7c9","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/9f18d6cca77c7c9","status":"passed","time":{"start":1730423170099,"stop":1730423205859,"duration":35760}},{"uid":"edff98c8e1e7144","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/edff98c8e1e7144","status":"passed","time":{"start":1730337141846,"stop":1730337168879,"duration":27033}},{"uid":"d6f7a10f7f72b56f","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/d6f7a10f7f72b56f","status":"passed","time":{"start":1730305055788,"stop":1730305084665,"duration":28877}},{"uid":"85bb07db479b5510","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/85bb07db479b5510","status":"passed","time":{"start":1730250137491,"stop":1730250164364,"duration":26873}},{"uid":"7ac91832fb38e2ee","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/7ac91832fb38e2ee","status":"passed","time":{"start":1730164314170,"stop":1730164342012,"duration":27842}},{"uid":"ce5801e0dbe7bddd","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/ce5801e0dbe7bddd","status":"passed","time":{"start":1730077501528,"stop":1730077529208,"duration":27680}},{"uid":"91bd5954dbd0c88a","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/91bd5954dbd0c88a","status":"passed","time":{"start":1729991023747,"stop":1729991054690,"duration":30943}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"61d6561114314670.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}