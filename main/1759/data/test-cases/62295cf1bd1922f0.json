{"uid":"62295cf1bd1922f0","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1731892042996,"stop":1731892135786,"duration":92790},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb9122050>\ndevice = <golioth.golioth.Device object at 0xffffb9134f50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731892024975,"stop":1731892024975,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731892024976,"stop":1731892024976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731892024976,"stop":1731892024976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731892024977,"stop":1731892024977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731892024977,"stop":1731892024977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731892024978,"stop":1731892024980,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731892024980,"stop":1731892024981,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731892024981,"stop":1731892024981,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731892024982,"stop":1731892025405,"duration":423},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731892025406,"stop":1731892026317,"duration":911},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731892026317,"stop":1731892042124,"duration":15807},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731892042124,"stop":1731892042993,"duration":869},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb9122050>\ndevice = <golioth.golioth.Device object at 0xffffb9134f50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2515b5b91de11e7b","name":"log","source":"2515b5b91de11e7b.txt","type":"text/plain","size":16073}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731892136070,"stop":1731892136105,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731892136107,"stop":1731892136501,"duration":394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731892136503,"stop":1731892136505,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731892136510,"stop":1731892136510,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"df1bc683e5dc"},{"name":"thread","value":"420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":47,"unknown":0,"total":50},"items":[{"uid":"2fd8b70a38f76b4","reportUrl":"https://golioth.github.io/allure-reports/main/1758//#testresult/2fd8b70a38f76b4","status":"passed","time":{"start":1731806248680,"stop":1731806266381,"duration":17701}},{"uid":"e94fd126e8d6fb19","reportUrl":"https://golioth.github.io/allure-reports/main/1757//#testresult/e94fd126e8d6fb19","status":"passed","time":{"start":1731719187054,"stop":1731719203789,"duration":16735}},{"uid":"7dd74f859f166e90","reportUrl":"https://golioth.github.io/allure-reports/main/1748//#testresult/7dd74f859f166e90","status":"passed","time":{"start":1731633092084,"stop":1731633107896,"duration":15812}},{"uid":"af83f49aacf616bf","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/af83f49aacf616bf","status":"passed","time":{"start":1731608482845,"stop":1731608506147,"duration":23302}},{"uid":"aa0964052ed8d238","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/aa0964052ed8d238","status":"passed","time":{"start":1731566840771,"stop":1731566864460,"duration":23689}},{"uid":"6d6ddce77ba99a29","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/6d6ddce77ba99a29","status":"passed","time":{"start":1731546276300,"stop":1731546293967,"duration":17667}},{"uid":"e7a1e8fb6948ee95","reportUrl":"https://golioth.github.io/allure-reports/main/1728//#testresult/e7a1e8fb6948ee95","status":"passed","time":{"start":1731459945608,"stop":1731459964049,"duration":18441}},{"uid":"4a4dbcb362abc7b3","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/4a4dbcb362abc7b3","status":"passed","time":{"start":1731373519300,"stop":1731373545958,"duration":26658}},{"uid":"aef8ed2be68d7277","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/aef8ed2be68d7277","status":"passed","time":{"start":1731286813132,"stop":1731286835521,"duration":22389}},{"uid":"dc35e4e207f2c9cb","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/dc35e4e207f2c9cb","status":"passed","time":{"start":1731201541062,"stop":1731201557651,"duration":16589}},{"uid":"6d83e256d6479805","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/6d83e256d6479805","status":"passed","time":{"start":1731114410879,"stop":1731114429419,"duration":18540}},{"uid":"df2ad56784641510","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/df2ad56784641510","status":"passed","time":{"start":1731027741848,"stop":1731027764855,"duration":23007}},{"uid":"5e264a49563ecdd4","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/5e264a49563ecdd4","status":"passed","time":{"start":1730941572938,"stop":1730941594524,"duration":21586}},{"uid":"96d0bf0c09c602b0","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/96d0bf0c09c602b0","status":"passed","time":{"start":1730894620770,"stop":1730894641957,"duration":21187}},{"uid":"1a11b48148ee14b0","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/1a11b48148ee14b0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730855042643,"stop":1730855065269,"duration":22626}},{"uid":"8c2fa3b3bd04c09c","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/8c2fa3b3bd04c09c","status":"passed","time":{"start":1730768910983,"stop":1730768932539,"duration":21556}},{"uid":"65ba9b809f8b9d95","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/65ba9b809f8b9d95","status":"passed","time":{"start":1730682192875,"stop":1730682218592,"duration":25717}},{"uid":"cb5f0c6c54aa1596","reportUrl":"https://golioth.github.io/allure-reports/main/1713//#testresult/cb5f0c6c54aa1596","status":"passed","time":{"start":1730595880857,"stop":1730595904455,"duration":23598}},{"uid":"13ffda844e1c244c","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/13ffda844e1c244c","status":"passed","time":{"start":1730509252402,"stop":1730509267991,"duration":15589}},{"uid":"e84bce7c7b231a3e","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/e84bce7c7b231a3e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730423123773,"stop":1730423146603,"duration":22830}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"62295cf1bd1922f0.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}