{"uid":"ed4958eb294bdb71","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"b97b1b0ab58c7d7afa3114dbec351998","time":{"start":1731634753229,"stop":1731634755119,"duration":1890},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_credentials>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffa3c1ee10>\nproject = <golioth.golioth.Project object at 0xffffa3deeb50>\ndevice_name = 'certificate-BHOtLJGrRRNxkqdg'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960017212-if00,baud=115200']\ncertificate_cred = '6736a622991409ec59c680f6', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(request, shell,\n                               project, device_name,\n                               mcumgr_conn_args, certificate_cred,\n                               wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731634722075,"stop":1731634722075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731634722076,"stop":1731634722076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731634722076,"stop":1731634722076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731634722077,"stop":1731634722077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731634722077,"stop":1731634722077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731634722078,"stop":1731634722080,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731634722078,"stop":1731634722078,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731634722081,"stop":1731634722498,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731634722498,"stop":1731634722499,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1731634722500,"stop":1731634722977,"duration":477},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731634722978,"stop":1731634752103,"duration":29125},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731634752103,"stop":1731634753220,"duration":1117},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1731634753221,"stop":1731634753222,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_credentials>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffa3c1ee10>\nproject = <golioth.golioth.Project object at 0xffffa3deeb50>\ndevice_name = 'certificate-BHOtLJGrRRNxkqdg'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960017212-if00,baud=115200']\ncertificate_cred = '6736a622991409ec59c680f6', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(request, shell,\n                               project, device_name,\n                               mcumgr_conn_args, certificate_cred,\n                               wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"3cc4a19b568abfb1","name":"log","source":"3cc4a19b568abfb1.txt","type":"text/plain","size":14628}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731634755355,"stop":1731634755383,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1731634755385,"stop":1731634755773,"duration":388},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1731634755775,"stop":1731634756158,"duration":383},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731634756161,"stop":1731634756163,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731634756165,"stop":1731634756165,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ddcb303dec17"},{"name":"thread","value":"809-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":40,"unknown":0,"total":44},"items":[{"uid":"6498ff8c3d1d59b4","reportUrl":"https://golioth.github.io/allure-reports/main/13//#testresult/6498ff8c3d1d59b4","status":"passed","time":{"start":1731610178270,"stop":1731610205888,"duration":27618}},{"uid":"9223fcb61cc80d2f","reportUrl":"https://golioth.github.io/allure-reports/main/1741//#testresult/9223fcb61cc80d2f","status":"passed","time":{"start":1731568605140,"stop":1731568743674,"duration":138534}},{"uid":"83dc5e24de806aed","reportUrl":"https://golioth.github.io/allure-reports/main/1738//#testresult/83dc5e24de806aed","status":"passed","time":{"start":1731547599386,"stop":1731547646968,"duration":47582}},{"uid":"bf5d3578b79e595d","reportUrl":"https://golioth.github.io/allure-reports/main/1724//#testresult/bf5d3578b79e595d","status":"passed","time":{"start":1731375026939,"stop":1731375053475,"duration":26536}},{"uid":"d0f1e606eba4f313","reportUrl":"https://golioth.github.io/allure-reports/main/1723//#testresult/d0f1e606eba4f313","status":"passed","time":{"start":1731288582221,"stop":1731288610092,"duration":27871}},{"uid":"9b8eaca3daadf825","reportUrl":"https://golioth.github.io/allure-reports/main/1722//#testresult/9b8eaca3daadf825","status":"passed","time":{"start":1731202550294,"stop":1731202577146,"duration":26852}},{"uid":"71f1fb50e347","reportUrl":"https://golioth.github.io/allure-reports/main/1721//#testresult/71f1fb50e347","status":"passed","time":{"start":1731116099015,"stop":1731116139711,"duration":40696}},{"uid":"56d7cb272bdf0d62","reportUrl":"https://golioth.github.io/allure-reports/main/1718//#testresult/56d7cb272bdf0d62","status":"passed","time":{"start":1731029621909,"stop":1731029655912,"duration":34003}},{"uid":"21e9734f10854c09","reportUrl":"https://golioth.github.io/allure-reports/main/1717//#testresult/21e9734f10854c09","status":"passed","time":{"start":1730943173907,"stop":1730943202238,"duration":28331}},{"uid":"1780c7afe3359ab4","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/1780c7afe3359ab4","status":"passed","time":{"start":1730894159483,"stop":1730894187344,"duration":27861}},{"uid":"14b5f310f1262389","reportUrl":"https://golioth.github.io/allure-reports/main/1716//#testresult/14b5f310f1262389","status":"passed","time":{"start":1730856646106,"stop":1730856685222,"duration":39116}},{"uid":"9b6b8d496b72d4f5","reportUrl":"https://golioth.github.io/allure-reports/main/1715//#testresult/9b6b8d496b72d4f5","status":"passed","time":{"start":1730770570368,"stop":1730770611415,"duration":41047}},{"uid":"7c226cec1ed459b9","reportUrl":"https://golioth.github.io/allure-reports/main/1714//#testresult/7c226cec1ed459b9","status":"passed","time":{"start":1730684238739,"stop":1730684285060,"duration":46321}},{"uid":"70d18c0bb1321a5d","reportUrl":"https://golioth.github.io/allure-reports/main/1711//#testresult/70d18c0bb1321a5d","status":"passed","time":{"start":1730510808198,"stop":1730510848615,"duration":40417}},{"uid":"936f04c745769e00","reportUrl":"https://golioth.github.io/allure-reports/main/1709//#testresult/936f04c745769e00","status":"passed","time":{"start":1730424507736,"stop":1730424542296,"duration":34560}},{"uid":"230f3b64f79a1de6","reportUrl":"https://golioth.github.io/allure-reports/main/1705//#testresult/230f3b64f79a1de6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1730339461032,"stop":1730339562145,"duration":101113}},{"uid":"3aff4cd4d52a74d1","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/3aff4cd4d52a74d1","status":"passed","time":{"start":1730306741770,"stop":1730306769218,"duration":27448}},{"uid":"7cb84e7e5992dd27","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/7cb84e7e5992dd27","status":"passed","time":{"start":1730252127734,"stop":1730252162488,"duration":34754}},{"uid":"9010b5b3f31ca4ce","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/9010b5b3f31ca4ce","status":"passed","time":{"start":1730165818053,"stop":1730165845428,"duration":27375}},{"uid":"ff36a4a8f3c42b6d","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/ff36a4a8f3c42b6d","status":"passed","time":{"start":1730079206737,"stop":1730079247439,"duration":40702}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"ed4958eb294bdb71.json","parameterValues":["'nrf9160dk'","'zephyr'"]}