{
  "uid" : "b265d95717cf67d8",
  "name" : "test_settings",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings",
  "historyId" : "d6d167c5ecb927d8d413dac5f1f3452a",
  "time" : {
    "start" : 1735609110001,
    "stop" : 1735609204046,
    "duration" : 94045
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb735a890>\nproject = <golioth.golioth.Project object at 0xffffb74d2d90>\ndevice = <golioth.golioth.Device object at 0xffffb7375b90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_object",
    "time" : {
      "start" : 1735609081171,
      "stop" : 1735609081173,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1735609081168,
      "stop" : 1735609081168,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1735609081170,
      "stop" : 1735609081170,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1735609081167,
      "stop" : 1735609081167,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1735609108900,
      "stop" : 1735609109998,
      "duration" : 1098
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1735609081168,
      "stop" : 1735609081168,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1735609081170,
      "stop" : 1735609081171,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1735609081174,
      "stop" : 1735609081590,
      "duration" : 416
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1735609081169,
      "stop" : 1735609081169,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1735609081590,
      "stop" : 1735609082462,
      "duration" : 872
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1735609082463,
      "stop" : 1735609108899,
      "duration" : 26436
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1735609081169,
      "stop" : 1735609081169,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb735a890>\nproject = <golioth.golioth.Project object at 0xffffb74d2d90>\ndevice = <golioth.golioth.Device object at 0xffffb7375b90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "92fde24427cb3154",
      "name" : "log",
      "source" : "92fde24427cb3154.txt",
      "type" : "text/plain",
      "size" : 21659
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1735609204797,
      "stop" : 1735609204797,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1735609204793,
      "stop" : 1735609204795,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1735609204367,
      "stop" : 1735609204791,
      "duration" : 424
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1735609204320,
      "stop" : 1735609204365,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "55bdbdc60417"
  }, {
    "name" : "thread",
    "value" : "837-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 26,
        "unknown" : 0,
        "total" : 28
      },
      "items" : [ {
        "uid" : "70af2e7577b93469",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1980/#testresult/70af2e7577b93469",
        "status" : "passed",
        "time" : {
          "start" : 1735523529347,
          "stop" : 1735523564634,
          "duration" : 35287
        }
      }, {
        "uid" : "323ba73434d0aa12",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1979/#testresult/323ba73434d0aa12",
        "status" : "passed",
        "time" : {
          "start" : 1735436617327,
          "stop" : 1735436628950,
          "duration" : 11623
        }
      }, {
        "uid" : "96779da64612dcf8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1978/#testresult/96779da64612dcf8",
        "status" : "passed",
        "time" : {
          "start" : 1735350394213,
          "stop" : 1735350421088,
          "duration" : 26875
        }
      }, {
        "uid" : "cbd20b709194b71e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1977/#testresult/cbd20b709194b71e",
        "status" : "passed",
        "time" : {
          "start" : 1735263654027,
          "stop" : 1735263667647,
          "duration" : 13620
        }
      }, {
        "uid" : "51e015dab815bcfa",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1976/#testresult/51e015dab815bcfa",
        "status" : "passed",
        "time" : {
          "start" : 1735177121436,
          "stop" : 1735177134556,
          "duration" : 13120
        }
      }, {
        "uid" : "773d1afd1acefa81",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1975/#testresult/773d1afd1acefa81",
        "status" : "passed",
        "time" : {
          "start" : 1735091430737,
          "stop" : 1735091464209,
          "duration" : 33472
        }
      }, {
        "uid" : "dfe7089ab64f3eba",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1974/#testresult/dfe7089ab64f3eba",
        "status" : "passed",
        "time" : {
          "start" : 1735004245396,
          "stop" : 1735004259069,
          "duration" : 13673
        }
      }, {
        "uid" : "6925d17b2b74a7fc",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1973/#testresult/6925d17b2b74a7fc",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734918501790,
          "stop" : 1734918595733,
          "duration" : 93943
        }
      }, {
        "uid" : "6422b91946dd7b5e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1972/#testresult/6422b91946dd7b5e",
        "status" : "passed",
        "time" : {
          "start" : 1734832369301,
          "stop" : 1734832396206,
          "duration" : 26905
        }
      }, {
        "uid" : "c79d81d1fc48a520",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1969/#testresult/c79d81d1fc48a520",
        "status" : "passed",
        "time" : {
          "start" : 1734745738386,
          "stop" : 1734745785791,
          "duration" : 47405
        }
      }, {
        "uid" : "130b01e3744bb268",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1965/#testresult/130b01e3744bb268",
        "status" : "passed",
        "time" : {
          "start" : 1734658840829,
          "stop" : 1734658852227,
          "duration" : 11398
        }
      }, {
        "uid" : "b39a63b7303e018e",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1957/#testresult/b39a63b7303e018e",
        "status" : "passed",
        "time" : {
          "start" : 1734572629973,
          "stop" : 1734572644733,
          "duration" : 14760
        }
      }, {
        "uid" : "f0c5f8935e3fe999",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1950/#testresult/f0c5f8935e3fe999",
        "status" : "passed",
        "time" : {
          "start" : 1734486592184,
          "stop" : 1734486623401,
          "duration" : 31217
        }
      }, {
        "uid" : "8189ea9e5ed0c2fa",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1949/#testresult/8189ea9e5ed0c2fa",
        "status" : "passed",
        "time" : {
          "start" : 1734472159375,
          "stop" : 1734472170998,
          "duration" : 11623
        }
      }, {
        "uid" : "234440a7adc47e87",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1946/#testresult/234440a7adc47e87",
        "status" : "passed",
        "time" : {
          "start" : 1734449799384,
          "stop" : 1734449811883,
          "duration" : 12499
        }
      }, {
        "uid" : "df6d48d28c57c6d8",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1944/#testresult/df6d48d28c57c6d8",
        "status" : "passed",
        "time" : {
          "start" : 1734399278864,
          "stop" : 1734399289918,
          "duration" : 11054
        }
      }, {
        "uid" : "489a326439d0c1cd",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1935/#testresult/489a326439d0c1cd",
        "status" : "passed",
        "time" : {
          "start" : 1734312899573,
          "stop" : 1734312910806,
          "duration" : 11233
        }
      }, {
        "uid" : "12d7ec04ebb08beb",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1934/#testresult/12d7ec04ebb08beb",
        "status" : "passed",
        "time" : {
          "start" : 1734226553871,
          "stop" : 1734226567338,
          "duration" : 13467
        }
      }, {
        "uid" : "f034f8b3f8a0a38b",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1933/#testresult/f034f8b3f8a0a38b",
        "status" : "passed",
        "time" : {
          "start" : 1734139758056,
          "stop" : 1734139772042,
          "duration" : 13986
        }
      }, {
        "uid" : "712776b468261e96",
        "reportUrl" : "https://golioth.github.io/allure-reports/main/1930/#testresult/712776b468261e96",
        "status" : "passed",
        "time" : {
          "start" : 1734120839968,
          "stop" : 1734120872561,
          "duration" : 32593
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "b265d95717cf67d8.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}