{"uid":"47cc1c86cf7709f1","name":"test_hello","fullName":"examples.esp_idf.cpp.pytest.test_sample#test_hello","historyId":"2a827d3f5ec96095267b56ef87e51b07","time":{"start":1737060589906,"stop":1737060603147,"duration":13241},"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb5d6f490>\ndevice = <golioth.golioth.Device object at 0xffffb5da9a10>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1737060544517,"stop":1737060544517,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1737060544518,"stop":1737060544518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1737060544519,"stop":1737060544519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1737060544519,"stop":1737060544519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1737060544520,"stop":1737060544520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1737060544521,"stop":1737060544521,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1737060544521,"stop":1737060544521,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1737060544522,"stop":1737060544522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1737060544522,"stop":1737060544522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1737060544523,"stop":1737060544523,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1737060544523,"stop":1737060544524,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1737060544523,"stop":1737060544523,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1737060544524,"stop":1737060588615,"duration":44091},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1737060588617,"stop":1737060589105,"duration":488},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1737060589105,"stop":1737060589902,"duration":797},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb5d6f490>\ndevice = <golioth.golioth.Device object at 0xffffb5da9a10>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","steps":[],"attachments":[{"uid":"33c8d180961c7917","name":"stdout","source":"33c8d180961c7917.txt","type":"text/plain","size":7251}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1737060603297,"stop":1737060603675,"duration":378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1737060603678,"stop":1737060603678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1737060603680,"stop":1737060603683,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d22b2cce09e0"},{"name":"thread","value":"266-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.cpp.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":14},"items":[{"uid":"12234e19e41f2978","reportUrl":"https://golioth.github.io/allure-reports/main/68//#testresult/12234e19e41f2978","status":"passed","time":{"start":1736996298695,"stop":1736996311516,"duration":12821}},{"uid":"2ab4325e1f89deb","reportUrl":"https://golioth.github.io/allure-reports/main/67//#testresult/2ab4325e1f89deb","status":"passed","time":{"start":1736989635317,"stop":1736989648328,"duration":13011}},{"uid":"2f7fc0ca8d6e8984","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/2f7fc0ca8d6e8984","status":"passed","time":{"start":1736903265719,"stop":1736903278775,"duration":13056}},{"uid":"bc4df08630f58692","reportUrl":"https://golioth.github.io/allure-reports/main/56//#testresult/bc4df08630f58692","status":"passed","time":{"start":1736903265719,"stop":1736903278775,"duration":13056}},{"uid":"77965282a1d04714","reportUrl":"https://golioth.github.io/allure-reports/main/54//#testresult/77965282a1d04714","status":"passed","time":{"start":1736729819443,"stop":1736729832156,"duration":12713}},{"uid":"878ba2455d19692a","reportUrl":"https://golioth.github.io/allure-reports/main/53//#testresult/878ba2455d19692a","status":"passed","time":{"start":1736644706600,"stop":1736644719538,"duration":12938}},{"uid":"1bcdfc1c6755f543","reportUrl":"https://golioth.github.io/allure-reports/main/49//#testresult/1bcdfc1c6755f543","status":"passed","time":{"start":1736586384406,"stop":1736586397230,"duration":12824}},{"uid":"3da8380518d03bfd","reportUrl":"https://golioth.github.io/allure-reports/main/48//#testresult/3da8380518d03bfd","status":"passed","time":{"start":1736557626972,"stop":1736557639769,"duration":12797}},{"uid":"9e2da3b5e6e136a4","reportUrl":"https://golioth.github.io/allure-reports/main/45//#testresult/9e2da3b5e6e136a4","status":"passed","time":{"start":1736471340104,"stop":1736471353110,"duration":13006}},{"uid":"f649ef9fec8aeeeb","reportUrl":"https://golioth.github.io/allure-reports/main/44//#testresult/f649ef9fec8aeeeb","status":"passed","time":{"start":1736458460440,"stop":1736458473505,"duration":13065}},{"uid":"7062e5b0091a1edc","reportUrl":"https://golioth.github.io/allure-reports/main/34//#testresult/7062e5b0091a1edc","status":"passed","time":{"start":1736384839992,"stop":1736384852986,"duration":12994}},{"uid":"6350d713294b50ab","reportUrl":"https://golioth.github.io/allure-reports/main/28/#testresult/6350d713294b50ab","status":"passed","time":{"start":1736298572018,"stop":1736298584920,"duration":12902}},{"uid":"93155b1b914abc59","reportUrl":"https://golioth.github.io/allure-reports/main/23/#testresult/93155b1b914abc59","status":"passed","time":{"start":1736271280224,"stop":1736271293190,"duration":12966}}]},"tags":["esp-idf","anyio","tims_orange_pi","esp32_devkitc_wrover_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"47cc1c86cf7709f1.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}