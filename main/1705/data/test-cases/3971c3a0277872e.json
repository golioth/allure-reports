{"uid":"3971c3a0277872e","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1730337302631,"stop":1730337326505,"duration":23874},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7de51d50>\nproject = <golioth.golioth.Project object at 0xffff7f3bad90>\ndevice = <golioth.golioth.Device object at 0xffff7de60e10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730337283550,"stop":1730337283550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730337283551,"stop":1730337283551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730337283552,"stop":1730337283552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730337283552,"stop":1730337283552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730337283553,"stop":1730337283553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730337283553,"stop":1730337283553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730337283554,"stop":1730337283556,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730337283554,"stop":1730337283554,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730337283557,"stop":1730337283983,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730337283984,"stop":1730337284949,"duration":965},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730337284949,"stop":1730337301670,"duration":16721},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1730337301670,"stop":1730337302628,"duration":958},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7de51d50>\nproject = <golioth.golioth.Project object at 0xffff7f3bad90>\ndevice = <golioth.golioth.Device object at 0xffff7de60e10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"861bc33cc384f1a4","name":"log","source":"861bc33cc384f1a4.txt","type":"text/plain","size":19427}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730337326851,"stop":1730337326874,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730337326876,"stop":1730337327260,"duration":384},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730337327262,"stop":1730337327265,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730337327267,"stop":1730337327267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cd88a90f6622"},{"name":"thread","value":"489-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":28,"unknown":0,"total":29},"items":[{"uid":"a966a28c901d2190","reportUrl":"https://golioth.github.io/allure-reports/main/1704//#testresult/a966a28c901d2190","status":"passed","time":{"start":1730305226394,"stop":1730305237073,"duration":10679}},{"uid":"8e2a451234ae0f5b","reportUrl":"https://golioth.github.io/allure-reports/main/1703//#testresult/8e2a451234ae0f5b","status":"passed","time":{"start":1730250309157,"stop":1730250321029,"duration":11872}},{"uid":"f816a2b845d7957e","reportUrl":"https://golioth.github.io/allure-reports/main/1701//#testresult/f816a2b845d7957e","status":"passed","time":{"start":1730164477437,"stop":1730164487473,"duration":10036}},{"uid":"2e7bcb0acff987ad","reportUrl":"https://golioth.github.io/allure-reports/main/1700//#testresult/2e7bcb0acff987ad","status":"passed","time":{"start":1730077661761,"stop":1730077674621,"duration":12860}},{"uid":"7e729dbb8032366a","reportUrl":"https://golioth.github.io/allure-reports/main/1699//#testresult/7e729dbb8032366a","status":"passed","time":{"start":1729991268888,"stop":1729991281415,"duration":12527}},{"uid":"d128dc957692f7a9","reportUrl":"https://golioth.github.io/allure-reports/main/1698//#testresult/d128dc957692f7a9","status":"passed","time":{"start":1729904797890,"stop":1729904809157,"duration":11267}},{"uid":"df165a80fc2cc8ad","reportUrl":"https://golioth.github.io/allure-reports/main/1697//#testresult/df165a80fc2cc8ad","status":"passed","time":{"start":1729818408599,"stop":1729818419232,"duration":10633}},{"uid":"cf017bf8253a54e1","reportUrl":"https://golioth.github.io/allure-reports/main/1695//#testresult/cf017bf8253a54e1","status":"passed","time":{"start":1729732301568,"stop":1729732311650,"duration":10082}},{"uid":"3bc60ff2f8c38b1e","reportUrl":"https://golioth.github.io/allure-reports/main/1689//#testresult/3bc60ff2f8c38b1e","status":"passed","time":{"start":1729645981747,"stop":1729645995320,"duration":13573}},{"uid":"8cf8bfa8ba460170","reportUrl":"https://golioth.github.io/allure-reports/main/1688//#testresult/8cf8bfa8ba460170","status":"passed","time":{"start":1729559242022,"stop":1729559254306,"duration":12284}},{"uid":"7712613ced5d1420","reportUrl":"https://golioth.github.io/allure-reports/main/1684//#testresult/7712613ced5d1420","status":"passed","time":{"start":1729472803599,"stop":1729472816269,"duration":12670}},{"uid":"795bd901793ac8a4","reportUrl":"https://golioth.github.io/allure-reports/main/1683//#testresult/795bd901793ac8a4","status":"passed","time":{"start":1729386387693,"stop":1729386398103,"duration":10410}},{"uid":"79171a5e234d0831","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/79171a5e234d0831","status":"passed","time":{"start":1729370415285,"stop":1729370424952,"duration":9667}},{"uid":"1bfe9f6e3e2a7311","reportUrl":"https://golioth.github.io/allure-reports/main/1//#testresult/1bfe9f6e3e2a7311","status":"passed","time":{"start":1729363333508,"stop":1729363341616,"duration":8108}},{"uid":"76574f7f50fa8e43","reportUrl":"https://golioth.github.io/allure-reports/main/1676//#testresult/76574f7f50fa8e43","status":"passed","time":{"start":1729300515028,"stop":1729300527551,"duration":12523}},{"uid":"fbb234136d86b88b","reportUrl":"https://golioth.github.io/allure-reports/main/1675//#testresult/fbb234136d86b88b","status":"passed","time":{"start":1729213433035,"stop":1729213446610,"duration":13575}},{"uid":"b9d7327e5b8482e3","reportUrl":"https://golioth.github.io/allure-reports/main/1674//#testresult/b9d7327e5b8482e3","status":"passed","time":{"start":1729204415227,"stop":1729204427756,"duration":12529}},{"uid":"ac4655f6fe13ae4c","reportUrl":"https://golioth.github.io/allure-reports/main/1659//#testresult/ac4655f6fe13ae4c","status":"passed","time":{"start":1729130981538,"stop":1729130989533,"duration":7995}},{"uid":"417c0b6b2c571a1e","reportUrl":"https://golioth.github.io/allure-reports/main/1649//#testresult/417c0b6b2c571a1e","status":"passed","time":{"start":1729111490990,"stop":1729111500755,"duration":9765}},{"uid":"25d1d60d967b231d","reportUrl":"https://golioth.github.io/allure-reports/main/1647//#testresult/25d1d60d967b231d","status":"passed","time":{"start":1729040938288,"stop":1729040949549,"duration":11261}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"3971c3a0277872e.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}