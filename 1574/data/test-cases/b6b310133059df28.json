{"uid":"b6b310133059df28","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1728058640173,"stop":1728058662813,"duration":22640},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff939d54d0>\ndevice = <golioth.golioth.Device object at 0xffff939f0310>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728058623468,"stop":1728058623468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728058623469,"stop":1728058623469,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728058623469,"stop":1728058623470,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728058623470,"stop":1728058623470,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728058623471,"stop":1728058623471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728058623471,"stop":1728058623473,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728058623474,"stop":1728058623474,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728058623475,"stop":1728058623917,"duration":442},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728058623475,"stop":1728058623475,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728058623917,"stop":1728058624845,"duration":928},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728058624845,"stop":1728058639254,"duration":14409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728058639255,"stop":1728058640171,"duration":916},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff939d54d0>\ndevice = <golioth.golioth.Device object at 0xffff939f0310>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f1b86af92f790a36","name":"log","source":"f1b86af92f790a36.txt","type":"text/plain","size":16855}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728058663149,"stop":1728058663179,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728058663181,"stop":1728058663595,"duration":414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728058663597,"stop":1728058663599,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728058663604,"stop":1728058663604,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a8f6037c1080"},{"name":"thread","value":"435-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":78,"unknown":0,"total":87},"items":[{"uid":"c200934d68f74263","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/c200934d68f74263","status":"passed","time":{"start":1728058028994,"stop":1728058052620,"duration":23626}},{"uid":"11f174bab2a01f9f","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/11f174bab2a01f9f","status":"passed","time":{"start":1728050718840,"stop":1728050741136,"duration":22296}},{"uid":"9a3ed5b95ee70c3f","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/9a3ed5b95ee70c3f","status":"passed","time":{"start":1728036612809,"stop":1728036632723,"duration":19914}},{"uid":"db45383dbe8eff96","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/db45383dbe8eff96","status":"passed","time":{"start":1728030747831,"stop":1728030766826,"duration":18995}},{"uid":"bc51bb622973b6a3","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/bc51bb622973b6a3","status":"passed","time":{"start":1728027904100,"stop":1728027926438,"duration":22338}},{"uid":"94e3abeb2d994e78","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/94e3abeb2d994e78","status":"passed","time":{"start":1728024189534,"stop":1728024210951,"duration":21417}},{"uid":"f81c2b4a606a8010","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/f81c2b4a606a8010","status":"passed","time":{"start":1728004067197,"stop":1728004089764,"duration":22567}},{"uid":"52b3e6043131097b","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/52b3e6043131097b","status":"passed","time":{"start":1727994232733,"stop":1727994254664,"duration":21931}},{"uid":"fafbf8f45f12169a","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/fafbf8f45f12169a","status":"passed","time":{"start":1727994524842,"stop":1727994548819,"duration":23977}},{"uid":"e7eb16410dc39981","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/e7eb16410dc39981","status":"passed","time":{"start":1727988656661,"stop":1727988677891,"duration":21230}},{"uid":"644cf06fafe7e258","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/644cf06fafe7e258","status":"passed","time":{"start":1727986461289,"stop":1727986483148,"duration":21859}},{"uid":"7bdf87d3ba620511","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/7bdf87d3ba620511","status":"passed","time":{"start":1727980766319,"stop":1727980785779,"duration":19460}},{"uid":"23cb0c2d15d35575","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/23cb0c2d15d35575","status":"passed","time":{"start":1727977497526,"stop":1727977519104,"duration":21578}},{"uid":"2a3b2fa40e3dbe51","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/2a3b2fa40e3dbe51","status":"passed","time":{"start":1727975339745,"stop":1727975361325,"duration":21580}},{"uid":"28b1de0e84b9e15c","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/28b1de0e84b9e15c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727972819068,"stop":1727972841598,"duration":22530}},{"uid":"a32657a5f03aa775","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/a32657a5f03aa775","status":"passed","time":{"start":1727966603923,"stop":1727966628588,"duration":24665}},{"uid":"7cc1d1cc3247c7ae","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/7cc1d1cc3247c7ae","status":"passed","time":{"start":1727964512195,"stop":1727964536786,"duration":24591}},{"uid":"934cb7c9ae463478","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/934cb7c9ae463478","status":"passed","time":{"start":1727958033350,"stop":1727958056480,"duration":23130}},{"uid":"398a6a479e9c51b6","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/398a6a479e9c51b6","status":"passed","time":{"start":1727956953695,"stop":1727956975678,"duration":21983}},{"uid":"8781e41a5a7a752e","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/8781e41a5a7a752e","status":"passed","time":{"start":1727956414929,"stop":1727956437976,"duration":23047}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b6b310133059df28.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}