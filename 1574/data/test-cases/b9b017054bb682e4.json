{"uid":"b9b017054bb682e4","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1728027022617,"stop":1728027036430,"duration":13813},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb6b19750>\ndevice = <golioth.golioth.Device object at 0xffffb6b0a810>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb6b0a810>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728026951455,"stop":1728026951456,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728026951456,"stop":1728026951457,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728026951457,"stop":1728026951457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728026951458,"stop":1728026951458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728026951459,"stop":1728026951460,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728026951459,"stop":1728026951459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728026951460,"stop":1728026951461,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728026951460,"stop":1728026951460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728026951461,"stop":1728026951461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728026951462,"stop":1728026951463,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728026951462,"stop":1728026951462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728026951462,"stop":1728026951462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728026951463,"stop":1728026951921,"duration":458},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728026951922,"stop":1728027001587,"duration":49665},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728027001589,"stop":1728027002577,"duration":988},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1728027002577,"stop":1728027015512,"duration":12935},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb6b19750>\ndevice = <golioth.golioth.Device object at 0xffffb6b0a810>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffb6b0a810>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"a10f5d08dd478c23","name":"stdout","source":"a10f5d08dd478c23.txt","type":"text/plain","size":3498}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1728027172670,"stop":1728027172670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728027172674,"stop":1728027173170,"duration":496},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728027173173,"stop":1728027173177,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728027173180,"stop":1728027173182,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"936383d9b0c0"},{"name":"thread","value":"252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":2,"skipped":0,"passed":64,"unknown":0,"total":86},"items":[{"uid":"9306f2b01abf36e2","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/9306f2b01abf36e2","status":"passed","time":{"start":1728025385508,"stop":1728025398775,"duration":13267}},{"uid":"bac2e21802b8a8ef","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/bac2e21802b8a8ef","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1728023663533,"stop":1728023663533,"duration":0}},{"uid":"b389f04ce9c3845f","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/b389f04ce9c3845f","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1728021333011,"stop":1728021333011,"duration":0}},{"uid":"30b76422224adf32","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/30b76422224adf32","status":"passed","time":{"start":1728002166658,"stop":1728002180043,"duration":13385}},{"uid":"40f82d8a4d0bf01f","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/40f82d8a4d0bf01f","status":"passed","time":{"start":1727989656858,"stop":1727989669967,"duration":13109}},{"uid":"e2f8a1be8a37c2ee","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/e2f8a1be8a37c2ee","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727989446427,"stop":1727989459537,"duration":13110}},{"uid":"cf7fe7d50308d59a","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/cf7fe7d50308d59a","status":"passed","time":{"start":1727986434765,"stop":1727986447952,"duration":13187}},{"uid":"7322fb28cb51467c","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/7322fb28cb51467c","status":"passed","time":{"start":1727983998020,"stop":1727984011397,"duration":13377}},{"uid":"e576d244ae43cf04","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/e576d244ae43cf04","status":"passed","time":{"start":1727976363637,"stop":1727976376698,"duration":13061}},{"uid":"c5184d39c105d817","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/c5184d39c105d817","status":"passed","time":{"start":1727964922611,"stop":1727964935625,"duration":13014}},{"uid":"5c1830b73f4e433","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/5c1830b73f4e433","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727972640284,"stop":1727972654943,"duration":14659}},{"uid":"2e504e0025158b5b","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/2e504e0025158b5b","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727968767001,"stop":1727968791024,"duration":24023}},{"uid":"e2be59c0fd8e9913","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/e2be59c0fd8e9913","status":"passed","time":{"start":1727967867963,"stop":1727967880903,"duration":12940}},{"uid":"7e7f7570ded0f306","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/7e7f7570ded0f306","status":"passed","time":{"start":1727964922611,"stop":1727964935625,"duration":13014}},{"uid":"afdf321f77717361","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/afdf321f77717361","status":"passed","time":{"start":1727961525003,"stop":1727961538341,"duration":13338}},{"uid":"b702e0fcfb6286b6","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b702e0fcfb6286b6","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727955569148,"stop":1727955582145,"duration":12997}},{"uid":"95c60edd0f20d6d","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/95c60edd0f20d6d","status":"passed","time":{"start":1727954677207,"stop":1727954690070,"duration":12863}},{"uid":"e0962594aad2a9f7","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/e0962594aad2a9f7","status":"passed","time":{"start":1727906815939,"stop":1727906829605,"duration":13666}},{"uid":"c4cbe9979670bf20","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c4cbe9979670bf20","status":"passed","time":{"start":1727932509928,"stop":1727932523016,"duration":13088}},{"uid":"3d18758029b5b777","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/3d18758029b5b777","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727944481467,"stop":1727944495834,"duration":14367}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"b9b017054bb682e4.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}