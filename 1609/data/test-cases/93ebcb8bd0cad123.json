{"uid":"93ebcb8bd0cad123","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"d6d2d14ea0fc70fc132a4ce39ee3d167","time":{"start":1728336907656,"stop":1728337000560,"duration":92904},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb55ce090>\ndevice = <golioth.golioth.Device object at 0xffffb55bed10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728336877748,"stop":1728336877748,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728336877749,"stop":1728336877749,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728336877749,"stop":1728336877749,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728336877750,"stop":1728336877750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728336877750,"stop":1728336877750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728336877751,"stop":1728336877753,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728336877754,"stop":1728336877754,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728336877754,"stop":1728336877754,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728336877755,"stop":1728336879985,"duration":2230},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728336879986,"stop":1728336880808,"duration":822},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728336880808,"stop":1728336904388,"duration":23580},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728336904389,"stop":1728336907649,"duration":3260},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb55ce090>\ndevice = <golioth.golioth.Device object at 0xffffb55bed10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ad1d26f2e722cb12","name":"log","source":"ad1d26f2e722cb12.txt","type":"text/plain","size":15424}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728337000761,"stop":1728337000769,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728337000771,"stop":1728337001140,"duration":369},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728337001142,"stop":1728337001144,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728337001149,"stop":1728337001149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"750d08c97975"},{"name":"thread","value":"339-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":109,"unknown":0,"total":111},"items":[{"uid":"7e4414ba97c051ce","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/7e4414ba97c051ce","status":"passed","time":{"start":1728317594943,"stop":1728317617889,"duration":22946}},{"uid":"6a542c9ed6a38819","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/6a542c9ed6a38819","status":"passed","time":{"start":1728325072253,"stop":1728325095343,"duration":23090}},{"uid":"b81c9cf20ef885a3","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/b81c9cf20ef885a3","status":"passed","time":{"start":1728320489630,"stop":1728320511838,"duration":22208}},{"uid":"6dcbf48cfbc2853","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/6dcbf48cfbc2853","status":"passed","time":{"start":1728317594943,"stop":1728317617889,"duration":22946}},{"uid":"2952bd2d7db150e","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/2952bd2d7db150e","status":"passed","time":{"start":1728313767053,"stop":1728313789708,"duration":22655}},{"uid":"d9cd81c204a1bcdc","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/d9cd81c204a1bcdc","status":"passed","time":{"start":1728306540825,"stop":1728306563437,"duration":22612}},{"uid":"46c1b5fc62582e98","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/46c1b5fc62582e98","status":"passed","time":{"start":1728305453672,"stop":1728305476277,"duration":22605}},{"uid":"9cfa158d1c2b4d26","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/9cfa158d1c2b4d26","status":"passed","time":{"start":1728262529154,"stop":1728262551895,"duration":22741}},{"uid":"e8994f4229287918","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/e8994f4229287918","status":"passed","time":{"start":1728176165612,"stop":1728176188537,"duration":22925}},{"uid":"af7a824091a7a21f","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/af7a824091a7a21f","status":"passed","time":{"start":1728131584500,"stop":1728131607249,"duration":22749}},{"uid":"ce812166c70daee4","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/ce812166c70daee4","status":"passed","time":{"start":1728130210905,"stop":1728130233792,"duration":22887}},{"uid":"82d079fd83b68cf","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/82d079fd83b68cf","status":"passed","time":{"start":1728124842031,"stop":1728124864932,"duration":22901}},{"uid":"7fe553d2ce9c9fe1","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/7fe553d2ce9c9fe1","status":"passed","time":{"start":1728123855321,"stop":1728123877889,"duration":22568}},{"uid":"48accfed50fbb514","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/48accfed50fbb514","status":"passed","time":{"start":1728120971533,"stop":1728120994330,"duration":22797}},{"uid":"1a797483ee6fb619","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/1a797483ee6fb619","status":"passed","time":{"start":1728120408729,"stop":1728120431298,"duration":22569}},{"uid":"2ba52104eaafcac7","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/2ba52104eaafcac7","status":"passed","time":{"start":1728089060740,"stop":1728089083734,"duration":22994}},{"uid":"544af970c403df48","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/544af970c403df48","status":"passed","time":{"start":1728081696051,"stop":1728081718743,"duration":22692}},{"uid":"75704bd3c7974691","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/75704bd3c7974691","status":"passed","time":{"start":1728075095242,"stop":1728075117978,"duration":22736}},{"uid":"7358c8db3717d8e1","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/7358c8db3717d8e1","status":"passed","time":{"start":1728071945616,"stop":1728071968680,"duration":23064}},{"uid":"c1d0fbeb54497c5a","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/c1d0fbeb54497c5a","status":"passed","time":{"start":1728068304835,"stop":1728068327501,"duration":22666}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"93ebcb8bd0cad123.json","parameterValues":["'nrf52840dk'","'zephyr'"]}