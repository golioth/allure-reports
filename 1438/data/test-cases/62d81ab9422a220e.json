{"uid":"62d81ab9422a220e","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"760eff61a6b23948f80921df65cbf7f5","time":{"start":1727369780758,"stop":1727369789300,"duration":8542},"status":"failed","statusMessage":"AssertionError: assert 20.5 == 20.0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaa1b9890>\ndevice = <golioth.golioth.Device object at 0xffffaa1ac590>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 20.5 == 20.0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727369770849,"stop":1727369770849,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727369770850,"stop":1727369770850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727369770850,"stop":1727369770850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727369770851,"stop":1727369770851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727369770851,"stop":1727369770851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727369770852,"stop":1727369770854,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727369770855,"stop":1727369770855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727369770855,"stop":1727369770855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727369770856,"stop":1727369771496,"duration":640},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727369771496,"stop":1727369772423,"duration":927},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727369772424,"stop":1727369780201,"duration":7777},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727369780202,"stop":1727369780755,"duration":553},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 20.5 == 20.0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaa1b9890>\ndevice = <golioth.golioth.Device object at 0xffffaa1ac590>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 20.5 == 20.0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","steps":[],"attachments":[{"uid":"68e6d7da93086a9e","name":"log","source":"68e6d7da93086a9e.txt","type":"text/plain","size":15028}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727369789573,"stop":1727369789809,"duration":236},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727369789811,"stop":1727369790314,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727369790316,"stop":1727369790318,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727369790323,"stop":1727369790323,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a2a59d5ca3d3"},{"name":"thread","value":"479-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":13},"items":[{"uid":"689bb61bf5fb0b0c","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/689bb61bf5fb0b0c","status":"passed","time":{"start":1727365445406,"stop":1727365467873,"duration":22467}},{"uid":"6b76a67261411549","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/6b76a67261411549","status":"passed","time":{"start":1727365930323,"stop":1727365952501,"duration":22178}},{"uid":"85ec1d6738eaf134","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/85ec1d6738eaf134","status":"passed","time":{"start":1727360953415,"stop":1727360977079,"duration":23664}},{"uid":"df365941ab6345ea","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/df365941ab6345ea","status":"passed","time":{"start":1727316023620,"stop":1727316047981,"duration":24361}},{"uid":"9a5f9090523d7792","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/9a5f9090523d7792","status":"failed","statusDetails":"AssertionError: assert 20.5 == 20.0","time":{"start":1727312401620,"stop":1727312410028,"duration":8408}},{"uid":"2bc5f328f79a615","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/2bc5f328f79a615","status":"passed","time":{"start":1727308487564,"stop":1727308507261,"duration":19697}},{"uid":"6f0ed1ef05b934b3","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/6f0ed1ef05b934b3","status":"passed","time":{"start":1727306240535,"stop":1727306263581,"duration":23046}},{"uid":"3a08ddd86e64f8a0","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/3a08ddd86e64f8a0","status":"passed","time":{"start":1727301512753,"stop":1727301536156,"duration":23403}},{"uid":"a0916c527d256804","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/a0916c527d256804","status":"passed","time":{"start":1727295204238,"stop":1727295227983,"duration":23745}},{"uid":"9a662fb56baf1be0","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/9a662fb56baf1be0","status":"passed","time":{"start":1727289054676,"stop":1727289078925,"duration":24249}},{"uid":"b86772de3ac6ac26","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/b86772de3ac6ac26","status":"passed","time":{"start":1727284907364,"stop":1727284930698,"duration":23334}},{"uid":"8ca887a1079d7cd8","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/8ca887a1079d7cd8","status":"passed","time":{"start":1727282822568,"stop":1727282845988,"duration":23420}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"62d81ab9422a220e.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}