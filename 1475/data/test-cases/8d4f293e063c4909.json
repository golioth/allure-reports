{"uid":"8d4f293e063c4909","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"1c3f2c0d9c38a2f03a05e8ca5e7158fa","time":{"start":1727656436694,"stop":1727656458966,"duration":22272},"status":"failed","statusMessage":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb96472d0>\ndevice = <golioth.golioth.Device object at 0xffffb95f0c90>\nproject = <golioth.golioth.Project object at 0xffffb9588c90>\nreleases = {'test_blocks': Release <66f9f1eb0e704510295c9c10, release_tags=[], device_tags=['66f9f1e90e704510295c9c0d'], artifact..., release_tags=[], device_tags=['66f9f1e90e704510295c9c0d'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 2 == 0\nE            +  where 2 = int('2')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727656365601,"stop":1727656365601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727656365602,"stop":1727656365602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727656365603,"stop":1727656365603,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727656365604,"stop":1727656365604,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727656365605,"stop":1727656365605,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727656365605,"stop":1727656365605,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727656365606,"stop":1727656365606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727656365606,"stop":1727656365607,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727656365608,"stop":1727656365608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727656365609,"stop":1727656365609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727656365610,"stop":1727656365610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727656365611,"stop":1727656365611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727656365612,"stop":1727656417239,"duration":51627},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727656417241,"stop":1727656417687,"duration":446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727656417688,"stop":1727656418551,"duration":863},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727656418551,"stop":1727656424817,"duration":6266},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1727656424818,"stop":1727656425296,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1727656425297,"stop":1727656426072,"duration":775},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1727656426073,"stop":1727656427623,"duration":1550},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1727656436691,"stop":1727656436692,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffb96472d0>\ndevice = <golioth.golioth.Device object at 0xffffb95f0c90>\nproject = <golioth.golioth.Project object at 0xffffb9588c90>\nreleases = {'test_blocks': Release <66f9f1eb0e704510295c9c10, release_tags=[], device_tags=['66f9f1e90e704510295c9c0d'], artifact..., release_tags=[], device_tags=['66f9f1e90e704510295c9c0d'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            await board.wait_for_regex_in_line(\"OTA status reported successfully\", timeout_s=20)\n    \n            # Wait for state update to propagate\n            await trio.sleep(2)\n    \n            await device.refresh()\n    \n            print(f\"Test reason code: {r}\")\n            print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>           assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE           AssertionError: assert 2 == 0\nE            +  where 2 = int('2')\n\ntests/hil/tests/ota/test_ota.py:189: AssertionError","steps":[],"attachments":[{"uid":"4c4dd4e8bcdbadb5","name":"stdout","source":"4c4dd4e8bcdbadb5.txt","type":"text/plain","size":1217}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1727656459017,"stop":1727656459891,"duration":874},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1727656459893,"stop":1727656461383,"duration":1490},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1727656461385,"stop":1727656462138,"duration":753},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1727656462140,"stop":1727656462140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1727656462142,"stop":1727656462142,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727656462144,"stop":1727656462564,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727656462567,"stop":1727656462567,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727656462569,"stop":1727656462572,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"77707f99016f"},{"name":"thread","value":"249-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":6,"skipped":0,"passed":17,"unknown":0,"total":35},"items":[{"uid":"526fd52c57967e0b","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/526fd52c57967e0b","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1727570088575,"stop":1727570101584,"duration":13009}},{"uid":"51f70a1de8bf55e5","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/51f70a1de8bf55e5","status":"passed","time":{"start":1727543770988,"stop":1727543848094,"duration":77106}},{"uid":"902d5cc0a7488eda","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/902d5cc0a7488eda","status":"passed","time":{"start":1727542171361,"stop":1727542248223,"duration":76862}},{"uid":"870fc398078c11f4","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/870fc398078c11f4","status":"passed","time":{"start":1727541275657,"stop":1727541354062,"duration":78405}},{"uid":"e29b89d87c0d286e","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/e29b89d87c0d286e","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727483500887,"stop":1727483521251,"duration":20364}},{"uid":"deaeff9c0fd528dc","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/deaeff9c0fd528dc","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727475627636,"stop":1727475672301,"duration":44665}},{"uid":"200be8ac0360bec3","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/200be8ac0360bec3","status":"failed","statusDetails":"AssertionError: assert 7 == 6\n +  where 7 = int('7')","time":{"start":1727460899575,"stop":1727460952341,"duration":52766}},{"uid":"7a40a1ded70f9dec","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/7a40a1ded70f9dec","status":"failed","statusDetails":"AssertionError: assert 7 == 6\n +  where 7 = int('7')","time":{"start":1727460899575,"stop":1727460952341,"duration":52766}},{"uid":"94e1945a180b6ba2","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/94e1945a180b6ba2","status":"passed","time":{"start":1727455494964,"stop":1727455575571,"duration":80607}},{"uid":"9067d7f12ca64e84","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/9067d7f12ca64e84","status":"passed","time":{"start":1727454739746,"stop":1727454819653,"duration":79907}},{"uid":"cacd4f8752bca040","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/cacd4f8752bca040","status":"passed","time":{"start":1727387603229,"stop":1727387681660,"duration":78431}},{"uid":"f6bed1c797c18ffd","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/f6bed1c797c18ffd","status":"passed","time":{"start":1727362800053,"stop":1727362877009,"duration":76956}},{"uid":"994f82f5006d7d04","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/994f82f5006d7d04","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1727397127640,"stop":1727397138460,"duration":10820}},{"uid":"db0919173c0ca491","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/db0919173c0ca491","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1727394175034,"stop":1727394188898,"duration":13864}},{"uid":"481685327acf0692","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/481685327acf0692","status":"failed","statusDetails":"AssertionError: assert 2 == 0\n +  where 2 = int('2')","time":{"start":1727387526025,"stop":1727387548609,"duration":22584}},{"uid":"69b9795171dd120e","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/69b9795171dd120e","status":"passed","time":{"start":1727387603229,"stop":1727387681660,"duration":78431}},{"uid":"c22ddeda514e2410","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/c22ddeda514e2410","status":"passed","time":{"start":1727383993057,"stop":1727384070508,"duration":77451}},{"uid":"e0d77cfbc1eaf29a","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/e0d77cfbc1eaf29a","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1727381267125,"stop":1727381279712,"duration":12587}},{"uid":"cdd8b61a44b14a4b","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/cdd8b61a44b14a4b","status":"failed","statusDetails":"AssertionError: assert 1 == 0\n +  where 1 = int('1')","time":{"start":1727378562513,"stop":1727378575319,"duration":12806}},{"uid":"190a722bd2adb533","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/190a722bd2adb533","status":"passed","time":{"start":1727373855519,"stop":1727373935850,"duration":80331}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"8d4f293e063c4909.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}