{"uid":"d3fb4a4000c8a38a","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"bfe488b0ced6617e28e9fae7ab667d7b","time":{"start":1727657989599,"stop":1727658006952,"duration":17353},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbcb65e90>\ndevice = <golioth.golioth.Device object at 0xffffbcb58e90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727657979775,"stop":1727657979775,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727657979776,"stop":1727657979776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727657979776,"stop":1727657979776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727657979777,"stop":1727657979777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727657979777,"stop":1727657979777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727657979778,"stop":1727657979780,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727657979780,"stop":1727657979781,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727657979781,"stop":1727657979781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727657979782,"stop":1727657980359,"duration":577},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727657980359,"stop":1727657981618,"duration":1259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727657981618,"stop":1727657989077,"duration":7459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727657989077,"stop":1727657989596,"duration":519},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbcb65e90>\ndevice = <golioth.golioth.Device object at 0xffffbcb58e90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"e451cc21d5a42513","name":"log","source":"e451cc21d5a42513.txt","type":"text/plain","size":23969}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727658007243,"stop":1727658007535,"duration":292},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727658007537,"stop":1727658008139,"duration":602},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727658008141,"stop":1727658008143,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727658008148,"stop":1727658008148,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"957cab918b9b"},{"name":"thread","value":"383-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":32,"unknown":0,"total":35},"items":[{"uid":"351a16a7377c6cb3","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/351a16a7377c6cb3","status":"passed","time":{"start":1727571631272,"stop":1727571654676,"duration":23404}},{"uid":"fe6fe072395638f3","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/fe6fe072395638f3","status":"passed","time":{"start":1727546561869,"stop":1727546585233,"duration":23364}},{"uid":"3bd49743b9c76ce9","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/3bd49743b9c76ce9","status":"passed","time":{"start":1727545835367,"stop":1727545858706,"duration":23339}},{"uid":"f443f97c2b001cab","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/f443f97c2b001cab","status":"passed","time":{"start":1727545002511,"stop":1727545026851,"duration":24340}},{"uid":"cdb2f80000d95bb5","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/cdb2f80000d95bb5","status":"passed","time":{"start":1727484813102,"stop":1727484836432,"duration":23330}},{"uid":"b8012d594cd022e0","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/b8012d594cd022e0","status":"passed","time":{"start":1727476956882,"stop":1727476980282,"duration":23400}},{"uid":"563aa04805198e03","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/563aa04805198e03","status":"passed","time":{"start":1727464651654,"stop":1727464675041,"duration":23387}},{"uid":"74317ae9fe18e487","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/74317ae9fe18e487","status":"passed","time":{"start":1727462364250,"stop":1727462388611,"duration":24361}},{"uid":"24c3113d6ab64657","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/24c3113d6ab64657","status":"passed","time":{"start":1727456683589,"stop":1727456707946,"duration":24357}},{"uid":"3cdf5a8cca55dc8","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/3cdf5a8cca55dc8","status":"passed","time":{"start":1727394017598,"stop":1727394040901,"duration":23303}},{"uid":"6b5638d2f08ee2a8","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6b5638d2f08ee2a8","status":"passed","time":{"start":1727454970720,"stop":1727454995041,"duration":24321}},{"uid":"14cc7db0543bf4a1","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/14cc7db0543bf4a1","status":"passed","time":{"start":1727365817768,"stop":1727365841089,"duration":23321}},{"uid":"d483ee2fc7c276f4","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/d483ee2fc7c276f4","status":"passed","time":{"start":1727398681128,"stop":1727398758020,"duration":76892}},{"uid":"e314d5212965b4ef","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/e314d5212965b4ef","status":"passed","time":{"start":1727394017598,"stop":1727394040901,"duration":23303}},{"uid":"c6d4e56e7c96cc67","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/c6d4e56e7c96cc67","status":"failed","statusDetails":"AssertionError: assert 1 == 0","time":{"start":1727391049550,"stop":1727391066839,"duration":17289}},{"uid":"34d700eb3fe982f6","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/34d700eb3fe982f6","status":"passed","time":{"start":1727390754116,"stop":1727390777495,"duration":23379}},{"uid":"f48ee84773f67393","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/f48ee84773f67393","status":"passed","time":{"start":1727385188905,"stop":1727385213257,"duration":24352}},{"uid":"78a308d763e6efc9","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/78a308d763e6efc9","status":"passed","time":{"start":1727382953348,"stop":1727382978260,"duration":24912}},{"uid":"c9890538089bb939","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/c9890538089bb939","status":"passed","time":{"start":1727380060977,"stop":1727380086137,"duration":25160}},{"uid":"b88d2724f349c5e1","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/b88d2724f349c5e1","status":"passed","time":{"start":1727374004285,"stop":1727374028033,"duration":23748}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"d3fb4a4000c8a38a.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}