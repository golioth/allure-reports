{"uid":"e71f05d60fa4559e","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"fa8c1766fb90779ba45428eac4722ac6","time":{"start":1728121568994,"stop":1728121584280,"duration":15286},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffba7c5a90>\ndevice = <golioth.golioth.Device object at 0xffffba747290>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffba747290>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728121511712,"stop":1728121511712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728121511713,"stop":1728121511714,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728121511713,"stop":1728121511713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728121511714,"stop":1728121511714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728121511715,"stop":1728121511715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728121511716,"stop":1728121511716,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728121511716,"stop":1728121511716,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728121511717,"stop":1728121511717,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728121511717,"stop":1728121511717,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728121511718,"stop":1728121511718,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728121511718,"stop":1728121511718,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728121511719,"stop":1728121511719,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728121511719,"stop":1728121512138,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728121512139,"stop":1728121537455,"duration":25316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728121537457,"stop":1728121538860,"duration":1403},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1728121538861,"stop":1728121559530,"duration":20669},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffba7c5a90>\ndevice = <golioth.golioth.Device object at 0xffffba747290>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffba747290>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"fd371740f779737b","name":"stdout","source":"fd371740f779737b.txt","type":"text/plain","size":2837}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1728121742317,"stop":1728121742317,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728121742323,"stop":1728121742824,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728121742827,"stop":1728121742828,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728121742830,"stop":1728121742832,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"87c0662e257e"},{"name":"thread","value":"262-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":1,"skipped":0,"passed":85,"unknown":0,"total":98},"items":[{"uid":"5c84dd5b979914a6","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/5c84dd5b979914a6","status":"passed","time":{"start":1728024795743,"stop":1728024808636,"duration":12893}},{"uid":"b8a00566c806b0e8","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/b8a00566c806b0e8","status":"passed","time":{"start":1728059123301,"stop":1728059136328,"duration":13027}},{"uid":"cf9b1ddc148426c6","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/cf9b1ddc148426c6","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728088539667,"stop":1728088553545,"duration":13878}},{"uid":"c677cd0c87cb3088","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/c677cd0c87cb3088","status":"passed","time":{"start":1728080548687,"stop":1728080561855,"duration":13168}},{"uid":"f8d0242340135015","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/f8d0242340135015","status":"passed","time":{"start":1728073718249,"stop":1728073732342,"duration":14093}},{"uid":"7cee85ede291b127","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/7cee85ede291b127","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728071485694,"stop":1728071499141,"duration":13447}},{"uid":"dcc01adf8d4f50bf","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/dcc01adf8d4f50bf","status":"passed","time":{"start":1728068514345,"stop":1728068527174,"duration":12829}},{"uid":"97d1b24378e91a63","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/97d1b24378e91a63","status":"passed","time":{"start":1728024795743,"stop":1728024808636,"duration":12893}},{"uid":"d8349a311b9b44b6","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/d8349a311b9b44b6","status":"passed","time":{"start":1728059123301,"stop":1728059136328,"duration":13027}},{"uid":"b6fcedd225dc20f1","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/b6fcedd225dc20f1","status":"passed","time":{"start":1728036059457,"stop":1728036072433,"duration":12976}},{"uid":"70d7459519c37e8c","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/70d7459519c37e8c","status":"passed","time":{"start":1728028540335,"stop":1728028553206,"duration":12871}},{"uid":"c29424179fd18b80","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/c29424179fd18b80","status":"passed","time":{"start":1728036059457,"stop":1728036072433,"duration":12976}},{"uid":"290eec12705126f3","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/290eec12705126f3","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728048688818,"stop":1728048703543,"duration":14725}},{"uid":"4a06ebe86c8fdb8f","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/4a06ebe86c8fdb8f","status":"passed","time":{"start":1728036059457,"stop":1728036072433,"duration":12976}},{"uid":"ff8a31275f1c497","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/ff8a31275f1c497","status":"passed","time":{"start":1728028540335,"stop":1728028553206,"duration":12871}},{"uid":"b8d0353bada5e8a2","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/b8d0353bada5e8a2","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1728026203054,"stop":1728026216160,"duration":13106}},{"uid":"d0772abeec71e08d","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/d0772abeec71e08d","status":"passed","time":{"start":1728024795743,"stop":1728024808636,"duration":12893}},{"uid":"e0175e1e6c7c1a1f","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/e0175e1e6c7c1a1f","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1728021328449,"stop":1728021328449,"duration":0}},{"uid":"2ed27b7d98008002","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/2ed27b7d98008002","status":"passed","time":{"start":1728002111503,"stop":1728002124462,"duration":12959}},{"uid":"8850bc472eb4f0ad","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/8850bc472eb4f0ad","status":"passed","time":{"start":1727990380365,"stop":1727990393302,"duration":12937}}]},"tags":["mikes_orange_pi","esp-idf","anyio","esp32_devkitc_wrover_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"e71f05d60fa4559e.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}