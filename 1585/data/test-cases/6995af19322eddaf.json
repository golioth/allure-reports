{"uid":"6995af19322eddaf","name":"test_lightdb_get","fullName":"examples.esp_idf.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"f1665023a29e368653101cf8b6a81eaa","time":{"start":1728129188951,"stop":1728129214296,"duration":25345},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 151593.7556751598\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <espidfboard.ESPIDFBoard object at 0xffff9dd164d0>\ndevice = <golioth.golioth.Device object at 0xffff9dd29910>\n\n    async def test_lightdb_get(board, device):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Wait for device to connect\n        await board.wait_for_regex_in_line(r'.*Golioth client connected', timeout_s=30.0)\n    \n        # Verify lightdb reads\n    \n        await board.wait_for_regex_in_line(r'.*Failed to get counter \\(async\\): 0', timeout_s=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       await board.wait_for_regex_in_line(r'.*Counter \\(sync\\): 13', timeout_s=10.0)\n\nexamples/esp_idf/lightdb/get/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 151593.7556751598\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728129136006,"stop":1728129136006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728129136007,"stop":1728129136007,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728129136008,"stop":1728129136008,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728129136008,"stop":1728129136009,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728129136009,"stop":1728129136009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728129136010,"stop":1728129136010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728129136011,"stop":1728129136012,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728129136011,"stop":1728129136011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728129136011,"stop":1728129136011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728129136012,"stop":1728129136012,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728129136012,"stop":1728129136012,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728129136013,"stop":1728129187642,"duration":51629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728129136013,"stop":1728129136013,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728129187644,"stop":1728129188167,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728129188168,"stop":1728129188948,"duration":780},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 151593.7556751598\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <espidfboard.ESPIDFBoard object at 0xffff9dd164d0>\ndevice = <golioth.golioth.Device object at 0xffff9dd29910>\n\n    async def test_lightdb_get(board, device):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Wait for device to connect\n        await board.wait_for_regex_in_line(r'.*Golioth client connected', timeout_s=30.0)\n    \n        # Verify lightdb reads\n    \n        await board.wait_for_regex_in_line(r'.*Failed to get counter \\(async\\): 0', timeout_s=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       await board.wait_for_regex_in_line(r'.*Counter \\(sync\\): 13', timeout_s=10.0)\n\nexamples/esp_idf/lightdb/get/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 151593.7556751598\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"155dec96d0c3f2a4","name":"stdout","source":"155dec96d0c3f2a4.txt","type":"text/plain","size":8604}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1728129214767,"stop":1728129215128,"duration":361},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728129215130,"stop":1728129215130,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728129215132,"stop":1728129215135,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5375825033af"},{"name":"thread","value":"281-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":95,"unknown":0,"total":99},"items":[{"uid":"ee3f04e8624b7dd6","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/ee3f04e8624b7dd6","status":"passed","time":{"start":1728029455960,"stop":1728029482545,"duration":26585}},{"uid":"b8c21112166f29c4","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/b8c21112166f29c4","status":"passed","time":{"start":1728031270499,"stop":1728031297845,"duration":27346}},{"uid":"834b7c2fec96dfc7","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/834b7c2fec96dfc7","status":"passed","time":{"start":1728090397439,"stop":1728090424686,"duration":27247}},{"uid":"34517e3ce1562f3c","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/34517e3ce1562f3c","status":"passed","time":{"start":1728082115136,"stop":1728082141893,"duration":26757}},{"uid":"66f47d5f1fb9aac0","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/66f47d5f1fb9aac0","status":"passed","time":{"start":1728075244842,"stop":1728075272284,"duration":27442}},{"uid":"6cdae82b81b3f129","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/6cdae82b81b3f129","status":"passed","time":{"start":1728071533151,"stop":1728071560268,"duration":27117}},{"uid":"3fed5e225bec4338","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/3fed5e225bec4338","status":"passed","time":{"start":1728067899662,"stop":1728067927100,"duration":27438}},{"uid":"496ae985b723b92","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/496ae985b723b92","status":"passed","time":{"start":1728029455960,"stop":1728029482545,"duration":26585}},{"uid":"bfe93ab3b040703a","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/bfe93ab3b040703a","status":"passed","time":{"start":1728031270499,"stop":1728031297845,"duration":27346}},{"uid":"ccee0fd02e99fb9e","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/ccee0fd02e99fb9e","status":"passed","time":{"start":1728037929203,"stop":1728037956283,"duration":27080}},{"uid":"37b13431a2cd3464","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/37b13431a2cd3464","status":"passed","time":{"start":1728033573502,"stop":1728033600229,"duration":26727}},{"uid":"236fbef7cd05460e","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/236fbef7cd05460e","status":"passed","time":{"start":1728037929203,"stop":1728037956283,"duration":27080}},{"uid":"34988cf2345ea960","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/34988cf2345ea960","status":"passed","time":{"start":1728037929203,"stop":1728037956283,"duration":27080}},{"uid":"85b9cab98a9c5019","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/85b9cab98a9c5019","status":"passed","time":{"start":1728033573502,"stop":1728033600229,"duration":26727}},{"uid":"bb2d7363fcf4e22","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/bb2d7363fcf4e22","status":"passed","time":{"start":1728031270499,"stop":1728031297845,"duration":27346}},{"uid":"3a71b39cc7dffeed","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/3a71b39cc7dffeed","status":"passed","time":{"start":1728029455960,"stop":1728029482545,"duration":26585}},{"uid":"b80743208b84eca0","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/b80743208b84eca0","status":"passed","time":{"start":1728024330962,"stop":1728024357610,"duration":26648}},{"uid":"1f06843e0f236415","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/1f06843e0f236415","status":"passed","time":{"start":1728003947213,"stop":1728003973918,"duration":26705}},{"uid":"aca0c471a2e7497d","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/aca0c471a2e7497d","status":"passed","time":{"start":1727993866525,"stop":1727993893205,"duration":26680}},{"uid":"b6e95f7a7d123b94","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/b6e95f7a7d123b94","status":"passed","time":{"start":1727993052296,"stop":1727993078711,"duration":26415}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"6995af19322eddaf.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}