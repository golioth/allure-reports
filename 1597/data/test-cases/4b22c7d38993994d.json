{"uid":"4b22c7d38993994d","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1728314691294,"stop":1728314804175,"duration":112881},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8dae67d0>\ndevice = <golioth.golioth.Device object at 0xffff8dac8990>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728314681258,"stop":1728314681259,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728314681258,"stop":1728314681258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728314681259,"stop":1728314681259,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728314681260,"stop":1728314681260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728314681260,"stop":1728314681260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728314681261,"stop":1728314681264,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728314681264,"stop":1728314681265,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728314681265,"stop":1728314681265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728314681266,"stop":1728314681742,"duration":476},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728314681742,"stop":1728314682813,"duration":1071},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728314682814,"stop":1728314690749,"duration":7935},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728314690749,"stop":1728314691291,"duration":542},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8dae67d0>\ndevice = <golioth.golioth.Device object at 0xffff8dac8990>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"80f6abecb35e0cda","name":"log","source":"80f6abecb35e0cda.txt","type":"text/plain","size":15553}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728314804442,"stop":1728314804625,"duration":183},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728314804627,"stop":1728314805079,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728314805081,"stop":1728314805084,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728314805089,"stop":1728314805089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"dbb309157e1c"},{"name":"thread","value":"590-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f1f0644a3e0b5821","status":"passed","time":{"start":1728314653324,"stop":1728314677137,"duration":23813}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":11,"skipped":0,"passed":96,"unknown":0,"total":108},"items":[{"uid":"5d5d80ef77aa5965","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/5d5d80ef77aa5965","status":"passed","time":{"start":1728306603085,"stop":1728306627391,"duration":24306}},{"uid":"5c191107cdb9a8b9","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/5c191107cdb9a8b9","status":"passed","time":{"start":1728305730041,"stop":1728305750329,"duration":20288}},{"uid":"c0d8d23037662327","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/c0d8d23037662327","status":"passed","time":{"start":1728263187066,"stop":1728263211313,"duration":24247}},{"uid":"e60794567bc0a4a1","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/e60794567bc0a4a1","status":"passed","time":{"start":1728176974082,"stop":1728177021919,"duration":47837}},{"uid":"135119309498e011","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/135119309498e011","status":"passed","time":{"start":1728133774728,"stop":1728133798562,"duration":23834}},{"uid":"b9fe2481a3efe64f","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/b9fe2481a3efe64f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728130631727,"stop":1728130744480,"duration":112753}},{"uid":"55f13139d65f5dd8","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/55f13139d65f5dd8","status":"passed","time":{"start":1728126028669,"stop":1728126053458,"duration":24789}},{"uid":"5517d4999f5f6cf0","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/5517d4999f5f6cf0","status":"passed","time":{"start":1728125305567,"stop":1728125331630,"duration":26063}},{"uid":"e681c578d770371a","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/e681c578d770371a","status":"passed","time":{"start":1728059330012,"stop":1728059354325,"duration":24313}},{"uid":"5cd31508ba4c685d","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/5cd31508ba4c685d","status":"passed","time":{"start":1728059533854,"stop":1728059558417,"duration":24563}},{"uid":"acfe6403998432c3","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/acfe6403998432c3","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1728090180805,"stop":1728090203997,"duration":23192}},{"uid":"19d50a129e1ec71c","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/19d50a129e1ec71c","status":"passed","time":{"start":1728082039133,"stop":1728082062684,"duration":23551}},{"uid":"11635cd3d626f4dd","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/11635cd3d626f4dd","status":"passed","time":{"start":1728075594646,"stop":1728075621201,"duration":26555}},{"uid":"a58aa3490cb87a4f","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/a58aa3490cb87a4f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728073365863,"stop":1728073478718,"duration":112855}},{"uid":"b0e41d9ad1d68a42","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/b0e41d9ad1d68a42","status":"passed","time":{"start":1728069113905,"stop":1728069137391,"duration":23486}},{"uid":"d42ebdee73c3c082","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/d42ebdee73c3c082","status":"passed","time":{"start":1728059330012,"stop":1728059354325,"duration":24313}},{"uid":"4f645b26a2c8cac2","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/4f645b26a2c8cac2","status":"passed","time":{"start":1728059533854,"stop":1728059558417,"duration":24563}},{"uid":"b9e87802634f36ed","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/b9e87802634f36ed","status":"passed","time":{"start":1728066189905,"stop":1728066213407,"duration":23502}},{"uid":"9aae446ac2db67b4","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/9aae446ac2db67b4","status":"passed","time":{"start":1728032129027,"stop":1728032152555,"duration":23528}},{"uid":"bf9c73ff388f71b7","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/bf9c73ff388f71b7","status":"passed","time":{"start":1728055038202,"stop":1728055061707,"duration":23505}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"4b22c7d38993994d.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}