{"uid":"c8a389d7f3c26f37","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1728050887590,"stop":1728050980443,"duration":92853},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb9314dd0>\ndevice = <golioth.golioth.Device object at 0xffffb9205850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728050856613,"stop":1728050856613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728050856613,"stop":1728050856613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728050856614,"stop":1728050856614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728050856614,"stop":1728050856615,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728050856615,"stop":1728050856615,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728050856616,"stop":1728050856618,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728050856618,"stop":1728050856619,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728050856619,"stop":1728050856619,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728050856620,"stop":1728050857430,"duration":810},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728050857431,"stop":1728050859444,"duration":2013},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728050859446,"stop":1728050886496,"duration":27050},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728050886496,"stop":1728050887587,"duration":1091},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb9314dd0>\ndevice = <golioth.golioth.Device object at 0xffffb9205850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e3d5f8e159213aa","name":"log","source":"e3d5f8e159213aa.txt","type":"text/plain","size":14179}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728050980787,"stop":1728050980799,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728050980801,"stop":1728050981214,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728050981216,"stop":1728050981218,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728050981223,"stop":1728050981223,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57c71466a54f"},{"name":"thread","value":"389-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":15,"skipped":0,"passed":64,"unknown":0,"total":80},"items":[{"uid":"ba687082deac2e83","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/ba687082deac2e83","status":"passed","time":{"start":1728036641746,"stop":1728036658516,"duration":16770}},{"uid":"9ed4225b24f7c376","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/9ed4225b24f7c376","status":"passed","time":{"start":1728033463800,"stop":1728033509533,"duration":45733}},{"uid":"54bcbc4d7ae48265","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/54bcbc4d7ae48265","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728029282793,"stop":1728029375688,"duration":92895}},{"uid":"5288d48592c45d57","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/5288d48592c45d57","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728024277985,"stop":1728024277985,"duration":0}},{"uid":"710eb28d48c591aa","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/710eb28d48c591aa","status":"passed","time":{"start":1728003393818,"stop":1728003410936,"duration":17118}},{"uid":"b97c85454b1bee93","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/b97c85454b1bee93","status":"passed","time":{"start":1727995170268,"stop":1727995188200,"duration":17932}},{"uid":"25dcf0f1f204c1ed","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/25dcf0f1f204c1ed","status":"passed","time":{"start":1727993785577,"stop":1727993805735,"duration":20158}},{"uid":"45c4ec6a62f795a0","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/45c4ec6a62f795a0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727989273546,"stop":1727989366387,"duration":92841}},{"uid":"c5e245162ee4d898","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/c5e245162ee4d898","status":"passed","time":{"start":1727985409144,"stop":1727985428009,"duration":18865}},{"uid":"2878722cfe861cce","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/2878722cfe861cce","status":"passed","time":{"start":1727979599391,"stop":1727979619649,"duration":20258}},{"uid":"f0afe2f18d9b6a67","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/f0afe2f18d9b6a67","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727977068137,"stop":1727977160989,"duration":92852}},{"uid":"5b4eebe1409de26d","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/5b4eebe1409de26d","status":"passed","time":{"start":1727975690884,"stop":1727975708375,"duration":17491}},{"uid":"f2681941d23948ab","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/f2681941d23948ab","status":"passed","time":{"start":1727973492047,"stop":1727973511180,"duration":19133}},{"uid":"59712171e6b3e7c2","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/59712171e6b3e7c2","status":"passed","time":{"start":1727972295579,"stop":1727972321169,"duration":25590}},{"uid":"ab2d4e729d4ebca2","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/ab2d4e729d4ebca2","status":"passed","time":{"start":1727966966833,"stop":1727966984073,"duration":17240}},{"uid":"eb9461a596f8e3e8","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/eb9461a596f8e3e8","status":"passed","time":{"start":1727961119463,"stop":1727961138803,"duration":19340}},{"uid":"755e5fbe7300740d","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/755e5fbe7300740d","status":"passed","time":{"start":1727950620304,"stop":1727950637240,"duration":16936}},{"uid":"5462b120cc46ca4c","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/5462b120cc46ca4c","status":"passed","time":{"start":1727954943901,"stop":1727954962747,"duration":18846}},{"uid":"62701675b723e23e","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/62701675b723e23e","status":"passed","time":{"start":1727953096353,"stop":1727953130917,"duration":34564}},{"uid":"613d2ce1b4a26828","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/613d2ce1b4a26828","status":"passed","time":{"start":1727927505131,"stop":1727927522917,"duration":17786}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c8a389d7f3c26f37.json","parameterValues":["'nrf9160dk'","'zephyr'"]}