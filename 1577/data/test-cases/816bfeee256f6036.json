{"uid":"816bfeee256f6036","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1728052338718,"stop":1728052431933,"duration":93215},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99d7e690>\ndevice = <golioth.golioth.Device object at 0xffff99d99950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728052309312,"stop":1728052309312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728052309313,"stop":1728052309313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728052309313,"stop":1728052309313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728052309314,"stop":1728052309315,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728052309314,"stop":1728052309314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728052309315,"stop":1728052309317,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728052309318,"stop":1728052309318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728052309318,"stop":1728052309318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728052309319,"stop":1728052309787,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728052309788,"stop":1728052310676,"duration":888},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728052310677,"stop":1728052337608,"duration":26931},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728052337609,"stop":1728052338715,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99d7e690>\ndevice = <golioth.golioth.Device object at 0xffff99d99950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d0e1478779a5874c","name":"log","source":"d0e1478779a5874c.txt","type":"text/plain","size":16341}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728052432189,"stop":1728052432225,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728052432228,"stop":1728052432643,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728052432645,"stop":1728052432647,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728052432652,"stop":1728052432652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57c71466a54f"},{"name":"thread","value":"950-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":19,"skipped":0,"passed":55,"unknown":0,"total":76},"items":[{"uid":"106c41a73425bf32","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/106c41a73425bf32","status":"passed","time":{"start":1728038087220,"stop":1728038116676,"duration":29456}},{"uid":"ef4b4d8f37a7e15f","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/ef4b4d8f37a7e15f","status":"passed","time":{"start":1728034535995,"stop":1728034592487,"duration":56492}},{"uid":"49a25eae2319f3e8","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/49a25eae2319f3e8","status":"passed","time":{"start":1728030339774,"stop":1728030368999,"duration":29225}},{"uid":"ff3a8ba12a5dc9bf","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/ff3a8ba12a5dc9bf","status":"passed","time":{"start":1728025310507,"stop":1728025341278,"duration":30771}},{"uid":"ac531c6a1eaefb13","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/ac531c6a1eaefb13","status":"passed","time":{"start":1728004383033,"stop":1728004413093,"duration":30060}},{"uid":"b1cc3fb2bcb939d7","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/b1cc3fb2bcb939d7","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727995996256,"stop":1727995996256,"duration":0}},{"uid":"53914a05d82e147e","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/53914a05d82e147e","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727994662614,"stop":1727994667846,"duration":5232}},{"uid":"22e5ae78b25dfc6a","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/22e5ae78b25dfc6a","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1727990481078,"stop":1727990481078,"duration":0}},{"uid":"ab3d8d9aa905d1f6","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/ab3d8d9aa905d1f6","status":"passed","time":{"start":1727986329006,"stop":1727986360835,"duration":31829}},{"uid":"7c20bf2721f6662c","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/7c20bf2721f6662c","status":"passed","time":{"start":1727980552796,"stop":1727980588590,"duration":35794}},{"uid":"50f293f54fcc4708","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/50f293f54fcc4708","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727978111914,"stop":1727978205266,"duration":93352}},{"uid":"ab4531e0865860a","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/ab4531e0865860a","status":"passed","time":{"start":1727976774465,"stop":1727976805502,"duration":31037}},{"uid":"9de4c022ce64a083","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/9de4c022ce64a083","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1727974408697,"stop":1727974408697,"duration":0}},{"uid":"68452dfb3afb1293","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/68452dfb3afb1293","status":"passed","time":{"start":1727973345166,"stop":1727973376764,"duration":31598}},{"uid":"ad2a4fa479960f17","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/ad2a4fa479960f17","status":"passed","time":{"start":1727967875728,"stop":1727967905829,"duration":30101}},{"uid":"cd4b2ccb22ff50f1","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/cd4b2ccb22ff50f1","status":"passed","time":{"start":1727961861878,"stop":1727961891689,"duration":29811}},{"uid":"7bad5bbb660960a5","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/7bad5bbb660960a5","status":"passed","time":{"start":1727951398536,"stop":1727951425425,"duration":26889}},{"uid":"790661022b9e04d7","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/790661022b9e04d7","status":"passed","time":{"start":1727955753956,"stop":1727955783450,"duration":29494}},{"uid":"6c17401fb0288442","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/6c17401fb0288442","status":"passed","time":{"start":1727954070363,"stop":1727954109883,"duration":39520}},{"uid":"7f463401062227e3","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/7f463401062227e3","status":"passed","time":{"start":1727928388572,"stop":1727928418034,"duration":29462}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"816bfeee256f6036.json","parameterValues":["'nrf9160dk'","'zephyr'"]}