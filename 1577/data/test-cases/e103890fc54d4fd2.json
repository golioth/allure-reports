{"uid":"e103890fc54d4fd2","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"c4178e273bd3962d06b411c6f8e74f6b","time":{"start":1728051536053,"stop":1728051628802,"duration":92749},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9861dad0>\ndevice = <golioth.golioth.Device object at 0xffff98638710>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728051506726,"stop":1728051506726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728051506727,"stop":1728051506727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728051506727,"stop":1728051506727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728051506728,"stop":1728051506728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728051506728,"stop":1728051506728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728051506729,"stop":1728051506731,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728051506732,"stop":1728051506732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728051506732,"stop":1728051506732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728051506733,"stop":1728051507173,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728051507173,"stop":1728051508117,"duration":944},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728051508118,"stop":1728051534924,"duration":26806},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728051534925,"stop":1728051536050,"duration":1125},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9861dad0>\ndevice = <golioth.golioth.Device object at 0xffff98638710>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"370a19c8a20e1952","name":"log","source":"370a19c8a20e1952.txt","type":"text/plain","size":14167}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728051629150,"stop":1728051629158,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728051629160,"stop":1728051629597,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728051629599,"stop":1728051629601,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728051629606,"stop":1728051629606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57c71466a54f"},{"name":"thread","value":"667-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":22,"skipped":0,"passed":54,"unknown":0,"total":76},"items":[{"uid":"d93f0429177cdefc","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/d93f0429177cdefc","status":"passed","time":{"start":1728036950624,"stop":1728036963036,"duration":12412}},{"uid":"b706da4140350755","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/b706da4140350755","status":"passed","time":{"start":1728033877376,"stop":1728033909885,"duration":32509}},{"uid":"ec1cb54b1cd0bc93","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/ec1cb54b1cd0bc93","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1728029826717,"stop":1728029839433,"duration":12716}},{"uid":"54340fc33e60a02b","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/54340fc33e60a02b","status":"passed","time":{"start":1728024725509,"stop":1728024735498,"duration":9989}},{"uid":"332b8976f95edd90","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/332b8976f95edd90","status":"passed","time":{"start":1728003708192,"stop":1728003728250,"duration":20058}},{"uid":"5c1b2922e8c05b37","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/5c1b2922e8c05b37","status":"passed","time":{"start":1727995483267,"stop":1727995495387,"duration":12120}},{"uid":"632f652b8985d4f4","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/632f652b8985d4f4","status":"passed","time":{"start":1727994254637,"stop":1727994265642,"duration":11005}},{"uid":"cd1f18864d5552b8","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/cd1f18864d5552b8","status":"passed","time":{"start":1727989954747,"stop":1727989963634,"duration":8887}},{"uid":"b5cd86aecc48f9d8","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/b5cd86aecc48f9d8","status":"passed","time":{"start":1727985717479,"stop":1727985730379,"duration":12900}},{"uid":"aedeeb940a87aca1","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/aedeeb940a87aca1","status":"passed","time":{"start":1727979908796,"stop":1727979922081,"duration":13285}},{"uid":"bc4d84891045ae91","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/bc4d84891045ae91","status":"passed","time":{"start":1727977462715,"stop":1727977474260,"duration":11545}},{"uid":"bb4c760da0df752f","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/bb4c760da0df752f","status":"passed","time":{"start":1727976003759,"stop":1727976014728,"duration":10969}},{"uid":"8ab101744f595e3d","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/8ab101744f595e3d","status":"passed","time":{"start":1727973809580,"stop":1727973821853,"duration":12273}},{"uid":"e7badce6187e0324","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/e7badce6187e0324","status":"passed","time":{"start":1727972619905,"stop":1727972634006,"duration":14101}},{"uid":"1459df71ddad698f","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/1459df71ddad698f","status":"passed","time":{"start":1727967275297,"stop":1727967293005,"duration":17708}},{"uid":"83a6d2a061cc70ec","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/83a6d2a061cc70ec","status":"passed","time":{"start":1727961426257,"stop":1727961439192,"duration":12935}},{"uid":"bb7541bafa9b6bc","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/bb7541bafa9b6bc","status":"passed","time":{"start":1727950927708,"stop":1727950937122,"duration":9414}},{"uid":"7ec3381175f73fb6","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/7ec3381175f73fb6","status":"passed","time":{"start":1727955245942,"stop":1727955259164,"duration":13222}},{"uid":"9cee81dfc560db96","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/9cee81dfc560db96","status":"passed","time":{"start":1727953508123,"stop":1727953528523,"duration":20400}},{"uid":"788aaa3614d0732f","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/788aaa3614d0732f","status":"passed","time":{"start":1727927819628,"stop":1727927830628,"duration":11000}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e103890fc54d4fd2.json","parameterValues":["'nrf9160dk'","'zephyr'"]}