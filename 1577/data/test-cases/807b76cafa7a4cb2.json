{"uid":"807b76cafa7a4cb2","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6fabbbcd9afd469e2e0bf8673f87e50e","time":{"start":1728049848004,"stop":1728049941445,"duration":93441},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9c725f90>\ndevice = <golioth.golioth.Device object at 0xffff9c71cd50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728049838358,"stop":1728049838359,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728049838359,"stop":1728049838359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728049838360,"stop":1728049838360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728049838360,"stop":1728049838360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728049838361,"stop":1728049838361,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728049838361,"stop":1728049838363,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728049838364,"stop":1728049838364,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728049838365,"stop":1728049838365,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728049838365,"stop":1728049838822,"duration":457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728049838823,"stop":1728049839773,"duration":950},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728049839774,"stop":1728049847452,"duration":7678},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728049847453,"stop":1728049848001,"duration":548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9c725f90>\ndevice = <golioth.golioth.Device object at 0xffff9c71cd50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"39107b4643b4b2bb","name":"log","source":"39107b4643b4b2bb.txt","type":"text/plain","size":20378}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728049941771,"stop":1728049941816,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728049941818,"stop":1728049942251,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728049942253,"stop":1728049942255,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728049942260,"stop":1728049942260,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"38785a894d9e"},{"name":"thread","value":"412-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":80,"unknown":0,"total":87},"items":[{"uid":"12b39d2eb6961105","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/12b39d2eb6961105","status":"passed","time":{"start":1728035766558,"stop":1728035782918,"duration":16360}},{"uid":"f1354cf46d096107","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/f1354cf46d096107","status":"passed","time":{"start":1728031829758,"stop":1728031845168,"duration":15410}},{"uid":"7cd610cc66235af0","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/7cd610cc66235af0","status":"passed","time":{"start":1728028524632,"stop":1728028537244,"duration":12612}},{"uid":"25e542bc3cf8bd39","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/25e542bc3cf8bd39","status":"passed","time":{"start":1728027529940,"stop":1728027542120,"duration":12180}},{"uid":"6213cec172b2b2f5","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/6213cec172b2b2f5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728023215673,"stop":1728023309184,"duration":93511}},{"uid":"bf49b0ef5b83019d","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/bf49b0ef5b83019d","status":"passed","time":{"start":1728003310254,"stop":1728003325590,"duration":15336}},{"uid":"5f3a27007e128516","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/5f3a27007e128516","status":"passed","time":{"start":1727993821880,"stop":1727993837429,"duration":15549}},{"uid":"ca434da17368eef8","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/ca434da17368eef8","status":"passed","time":{"start":1727993476385,"stop":1727993492727,"duration":16342}},{"uid":"fad576a31ea7b4","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/fad576a31ea7b4","status":"passed","time":{"start":1727988575962,"stop":1727988592108,"duration":16146}},{"uid":"a40c557cb2fc6b67","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/a40c557cb2fc6b67","status":"passed","time":{"start":1727984719073,"stop":1727984734556,"duration":15483}},{"uid":"b4e338e55c670e9","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/b4e338e55c670e9","status":"passed","time":{"start":1727979512773,"stop":1727979529999,"duration":17226}},{"uid":"434ba0e5688e8f55","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/434ba0e5688e8f55","status":"passed","time":{"start":1727966351201,"stop":1727966368072,"duration":16871}},{"uid":"3ca8594a55512e78","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/3ca8594a55512e78","status":"passed","time":{"start":1727974776178,"stop":1727974791436,"duration":15258}},{"uid":"ee7922a1b4dca166","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/ee7922a1b4dca166","status":"passed","time":{"start":1727971968586,"stop":1727971983824,"duration":15238}},{"uid":"7a798751ddac7a31","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/7a798751ddac7a31","status":"passed","time":{"start":1727970668981,"stop":1727970685188,"duration":16207}},{"uid":"7ab795df5147c676","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/7ab795df5147c676","status":"passed","time":{"start":1727966351201,"stop":1727966368072,"duration":16871}},{"uid":"3bb8ab18aeb5a34e","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/3bb8ab18aeb5a34e","status":"passed","time":{"start":1727959200818,"stop":1727959216550,"duration":15732}},{"uid":"f2875253df31f3d6","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/f2875253df31f3d6","status":"passed","time":{"start":1727957734859,"stop":1727957751862,"duration":17003}},{"uid":"f75cbe1bc50cbc5d","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/f75cbe1bc50cbc5d","status":"passed","time":{"start":1727954615516,"stop":1727954630840,"duration":15324}},{"uid":"723b9034f287d54b","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/723b9034f287d54b","status":"passed","time":{"start":1727908077533,"stop":1727908092935,"duration":15402}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"807b76cafa7a4cb2.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}