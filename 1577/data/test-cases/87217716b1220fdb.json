{"uid":"87217716b1220fdb","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1728051266963,"stop":1728051360599,"duration":93636},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7ebc9c50>\ndevice = <golioth.golioth.Device object at 0xffff7ebe0d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728051237856,"stop":1728051237856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728051237857,"stop":1728051237857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728051237857,"stop":1728051237857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728051237858,"stop":1728051237858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728051237858,"stop":1728051237858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728051237859,"stop":1728051237861,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728051237862,"stop":1728051237862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728051237862,"stop":1728051237862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728051237863,"stop":1728051238326,"duration":463},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728051238326,"stop":1728051239224,"duration":898},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728051239224,"stop":1728051265880,"duration":26656},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728051265881,"stop":1728051266961,"duration":1080},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7ebc9c50>\ndevice = <golioth.golioth.Device object at 0xffff7ebe0d90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"3076a8d4e3cd6f1c","name":"log","source":"3076a8d4e3cd6f1c.txt","type":"text/plain","size":18482}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728051360923,"stop":1728051361096,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728051361098,"stop":1728051361523,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728051361525,"stop":1728051361527,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728051361532,"stop":1728051361532,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57c71466a54f"},{"name":"thread","value":"530-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":68,"unknown":0,"total":80},"items":[{"uid":"fd6bd3641d9641b1","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/fd6bd3641d9641b1","status":"passed","time":{"start":1728036791150,"stop":1728036805323,"duration":14173}},{"uid":"525c921883a42868","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/525c921883a42868","status":"passed","time":{"start":1728033683201,"stop":1728033706374,"duration":23173}},{"uid":"3a381eab0feec8a2","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/3a381eab0feec8a2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728029510808,"stop":1728029604809,"duration":94001}},{"uid":"7616b176e719c2e2","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/7616b176e719c2e2","status":"passed","time":{"start":1728024489325,"stop":1728024503433,"duration":14108}},{"uid":"1ca93012f6134a56","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/1ca93012f6134a56","status":"passed","time":{"start":1728003545147,"stop":1728003561900,"duration":16753}},{"uid":"b71b42f201537897","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/b71b42f201537897","status":"passed","time":{"start":1727995322701,"stop":1727995339599,"duration":16898}},{"uid":"c55f47cda1563c97","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/c55f47cda1563c97","status":"passed","time":{"start":1727993957307,"stop":1727993970980,"duration":13673}},{"uid":"e3dfa4adfe7cd342","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/e3dfa4adfe7cd342","status":"passed","time":{"start":1727989590102,"stop":1727989609385,"duration":19283}},{"uid":"2525f493907adeb5","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/2525f493907adeb5","status":"passed","time":{"start":1727985562259,"stop":1727985578701,"duration":16442}},{"uid":"3c0287f24a304b8b","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/3c0287f24a304b8b","status":"passed","time":{"start":1727979754823,"stop":1727979771371,"duration":16548}},{"uid":"6aa999e03b3f622f","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/6aa999e03b3f622f","status":"passed","time":{"start":1727977296116,"stop":1727977309985,"duration":13869}},{"uid":"621fbeca0a982d37","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/621fbeca0a982d37","status":"passed","time":{"start":1727975844654,"stop":1727975860661,"duration":16007}},{"uid":"3f0d646beea7e916","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/3f0d646beea7e916","status":"passed","time":{"start":1727973645056,"stop":1727973666365,"duration":21309}},{"uid":"195e97041c3c9cdb","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/195e97041c3c9cdb","status":"passed","time":{"start":1727972455889,"stop":1727972472076,"duration":16187}},{"uid":"b3c482ab63ca7493","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/b3c482ab63ca7493","status":"passed","time":{"start":1727967117045,"stop":1727967131171,"duration":14126}},{"uid":"c49dd81d1c8de7a1","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/c49dd81d1c8de7a1","status":"passed","time":{"start":1727961275491,"stop":1727961291915,"duration":16424}},{"uid":"fcaa4ad5200eceb6","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/fcaa4ad5200eceb6","status":"passed","time":{"start":1727950770161,"stop":1727950783686,"duration":13525}},{"uid":"825725c5b6ca55c0","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/825725c5b6ca55c0","status":"passed","time":{"start":1727955094103,"stop":1727955110688,"duration":16585}},{"uid":"9ca62a903cee9e3","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/9ca62a903cee9e3","status":"passed","time":{"start":1727953299132,"stop":1727953332206,"duration":33074}},{"uid":"b187181acb56499c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b187181acb56499c","status":"passed","time":{"start":1727927658562,"stop":1727927672072,"duration":13510}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"87217716b1220fdb.json","parameterValues":["'nrf9160dk'","'zephyr'"]}