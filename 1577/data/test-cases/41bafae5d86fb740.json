{"uid":"41bafae5d86fb740","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1728051140526,"stop":1728051233815,"duration":93289},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8f16050>\ndevice = <golioth.golioth.Device object at 0xffffa8f29150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728051111583,"stop":1728051111583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728051111584,"stop":1728051111585,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728051111584,"stop":1728051111584,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728051111585,"stop":1728051111585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728051111586,"stop":1728051111586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728051111586,"stop":1728051111588,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728051111589,"stop":1728051111589,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728051111589,"stop":1728051111590,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728051111590,"stop":1728051112043,"duration":453},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728051112044,"stop":1728051112985,"duration":941},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728051112986,"stop":1728051139427,"duration":26441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728051139428,"stop":1728051140523,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8f16050>\ndevice = <golioth.golioth.Device object at 0xffffa8f29150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"daff616ddd787113","name":"log","source":"daff616ddd787113.txt","type":"text/plain","size":16351}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728051234099,"stop":1728051234130,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728051234132,"stop":1728051234560,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728051234562,"stop":1728051234564,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728051234569,"stop":1728051234569,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57c71466a54f"},{"name":"thread","value":"484-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":68,"unknown":0,"total":80},"items":[{"uid":"f3e0ee90f0fbf1d2","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/f3e0ee90f0fbf1d2","status":"passed","time":{"start":1728036748700,"stop":1728036756889,"duration":8189}},{"uid":"dba8bc3ea07d7ef3","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/dba8bc3ea07d7ef3","status":"passed","time":{"start":1728033621207,"stop":1728033649535,"duration":28328}},{"uid":"56991dbfb99cd99e","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/56991dbfb99cd99e","status":"passed","time":{"start":1728029467261,"stop":1728029476737,"duration":9476}},{"uid":"ff177f4f39878b90","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/ff177f4f39878b90","status":"passed","time":{"start":1728024446765,"stop":1728024454925,"duration":8160}},{"uid":"5344c833e112dc81","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/5344c833e112dc81","status":"passed","time":{"start":1728003502326,"stop":1728003510903,"duration":8577}},{"uid":"acf52822b646ad2b","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/acf52822b646ad2b","status":"passed","time":{"start":1727995279700,"stop":1727995288495,"duration":8795}},{"uid":"b2f76af698840d51","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/b2f76af698840d51","status":"passed","time":{"start":1727993914523,"stop":1727993922998,"duration":8475}},{"uid":"7b7f521e72dae5f6","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/7b7f521e72dae5f6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727989457558,"stop":1727989550841,"duration":93283}},{"uid":"55ac2522fa02a43b","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/55ac2522fa02a43b","status":"passed","time":{"start":1727985518977,"stop":1727985529494,"duration":10517}},{"uid":"c2fae10d09f087e4","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/c2fae10d09f087e4","status":"passed","time":{"start":1727979711037,"stop":1727979722405,"duration":11368}},{"uid":"14ae9707332084f5","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/14ae9707332084f5","status":"passed","time":{"start":1727977252893,"stop":1727977262317,"duration":9424}},{"uid":"5c92e73ef3c4f1c5","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/5c92e73ef3c4f1c5","status":"passed","time":{"start":1727975801689,"stop":1727975810811,"duration":9122}},{"uid":"10646dc84ea7f8d9","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/10646dc84ea7f8d9","status":"passed","time":{"start":1727973601373,"stop":1727973612674,"duration":11301}},{"uid":"9b0c701b99e73fe5","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/9b0c701b99e73fe5","status":"passed","time":{"start":1727972412609,"stop":1727972421552,"duration":8943}},{"uid":"32e1b6979997b64b","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/32e1b6979997b64b","status":"passed","time":{"start":1727967074906,"stop":1727967083525,"duration":8619}},{"uid":"c2b70b77690429aa","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/c2b70b77690429aa","status":"passed","time":{"start":1727961232986,"stop":1727961243227,"duration":10241}},{"uid":"3f811a39018bfbd4","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/3f811a39018bfbd4","status":"passed","time":{"start":1727950727808,"stop":1727950736325,"duration":8517}},{"uid":"333f1c7e40b1ff3e","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/333f1c7e40b1ff3e","status":"passed","time":{"start":1727955051659,"stop":1727955061621,"duration":9962}},{"uid":"9ad3b3c1c6357bdb","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/9ad3b3c1c6357bdb","status":"passed","time":{"start":1727953230892,"stop":1727953266202,"duration":35310}},{"uid":"2653ad7c74bcd646","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/2653ad7c74bcd646","status":"passed","time":{"start":1727927614571,"stop":1727927623680,"duration":9109}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"41bafae5d86fb740.json","parameterValues":["'nrf9160dk'","'zephyr'"]}