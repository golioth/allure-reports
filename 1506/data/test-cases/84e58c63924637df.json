{"uid":"84e58c63924637df","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1727780414944,"stop":1727780508180,"duration":93236},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb92420d0>\ndevice = <golioth.golioth.Device object at 0xffffb9258f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727780386039,"stop":1727780386039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727780386040,"stop":1727780386040,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727780386040,"stop":1727780386040,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727780386041,"stop":1727780386041,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727780386041,"stop":1727780386042,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727780386042,"stop":1727780386044,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727780386045,"stop":1727780386046,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727780386045,"stop":1727780386045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727780386046,"stop":1727780386545,"duration":499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727780386545,"stop":1727780387505,"duration":960},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727780387506,"stop":1727780413860,"duration":26354},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727780413861,"stop":1727780414941,"duration":1080},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb92420d0>\ndevice = <golioth.golioth.Device object at 0xffffb9258f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ad2622e501be0550","name":"log","source":"ad2622e501be0550.txt","type":"text/plain","size":16348}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727780508467,"stop":1727780508498,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727780508500,"stop":1727780508936,"duration":436},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727780508938,"stop":1727780508940,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727780508945,"stop":1727780508945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9fa153c65d0f"},{"name":"thread","value":"476-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":32,"unknown":0,"total":41},"items":[{"uid":"73cf08bcb8e3508e","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/73cf08bcb8e3508e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727778571544,"stop":1727778664780,"duration":93236}},{"uid":"c4c85c78889e99ae","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/c4c85c78889e99ae","status":"passed","time":{"start":1727775136766,"stop":1727775145244,"duration":8478}},{"uid":"c74f302088115799","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/c74f302088115799","status":"passed","time":{"start":1727771794553,"stop":1727771803167,"duration":8614}},{"uid":"e12a298b3a1bd076","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/e12a298b3a1bd076","status":"passed","time":{"start":1727766680936,"stop":1727766690905,"duration":9969}},{"uid":"4ba87cd448e39793","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/4ba87cd448e39793","status":"passed","time":{"start":1727765456000,"stop":1727765465204,"duration":9204}},{"uid":"47566a67838fbc11","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/47566a67838fbc11","status":"passed","time":{"start":1727745245266,"stop":1727745266015,"duration":20749}},{"uid":"5cb49164254d56e8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/5cb49164254d56e8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727732870047,"stop":1727732963423,"duration":93376}},{"uid":"d8a1f96ae9ae16c8","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/d8a1f96ae9ae16c8","status":"passed","time":{"start":1727658928152,"stop":1727658938728,"duration":10576}},{"uid":"dd300c85d95a118f","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/dd300c85d95a118f","status":"passed","time":{"start":1727571806352,"stop":1727571814628,"duration":8276}},{"uid":"72ce8d1b39cc74bb","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/72ce8d1b39cc74bb","status":"passed","time":{"start":1727549654204,"stop":1727549665392,"duration":11188}},{"uid":"65f0645078bcffbf","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/65f0645078bcffbf","status":"passed","time":{"start":1727548591962,"stop":1727548600750,"duration":8788}},{"uid":"4c0351133ff3187e","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/4c0351133ff3187e","status":"passed","time":{"start":1727548332377,"stop":1727548361876,"duration":29499}},{"uid":"e94fe5d38bc6b53f","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/e94fe5d38bc6b53f","status":"passed","time":{"start":1727485902253,"stop":1727485915861,"duration":13608}},{"uid":"ef781e04b199148e","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/ef781e04b199148e","status":"passed","time":{"start":1727478205938,"stop":1727478226688,"duration":20750}},{"uid":"dfbb2818c7d44969","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/dfbb2818c7d44969","status":"passed","time":{"start":1727462602995,"stop":1727462615729,"duration":12734}},{"uid":"a86fc3be5735208a","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/a86fc3be5735208a","status":"passed","time":{"start":1727462602995,"stop":1727462615729,"duration":12734}},{"uid":"d8804566f4fa2ec1","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/d8804566f4fa2ec1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727457885888,"stop":1727457979096,"duration":93208}},{"uid":"180847fc3ecb0a81","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/180847fc3ecb0a81","status":"passed","time":{"start":1727454537738,"stop":1727454551320,"duration":13582}},{"uid":"ef03c92e2ec00603","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/ef03c92e2ec00603","status":"passed","time":{"start":1727455913881,"stop":1727455929647,"duration":15766}},{"uid":"581bdf2f91f34a12","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/581bdf2f91f34a12","status":"passed","time":{"start":1727453070377,"stop":1727453083973,"duration":13596}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"84e58c63924637df.json","parameterValues":["'nrf9160dk'","'zephyr'"]}