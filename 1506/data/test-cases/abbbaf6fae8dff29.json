{"uid":"abbbaf6fae8dff29","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"c3c56fd394e8a51c6a7b951f90915fb9","time":{"start":1727781740296,"stop":1727781833469,"duration":93173},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb0371650>\ndevice = <golioth.golioth.Device object at 0xffffb0338fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727781725853,"stop":1727781725854,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727781725853,"stop":1727781725853,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727781725854,"stop":1727781725854,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727781725855,"stop":1727781725855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727781725855,"stop":1727781725855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727781725856,"stop":1727781725858,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727781725858,"stop":1727781725859,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727781725859,"stop":1727781725859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727781725860,"stop":1727781726280,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727781726280,"stop":1727781727172,"duration":892},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727781727173,"stop":1727781739654,"duration":12481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727781739654,"stop":1727781740293,"duration":639},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb0371650>\ndevice = <golioth.golioth.Device object at 0xffffb0338fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"32ce2e404e2cf4e8","name":"log","source":"32ce2e404e2cf4e8.txt","type":"text/plain","size":23640}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727781833717,"stop":1727781833916,"duration":199},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727781833918,"stop":1727781834354,"duration":436},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727781834357,"stop":1727781834359,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727781834364,"stop":1727781834364,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"568a776f15a5"},{"name":"thread","value":"410-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":43,"unknown":0,"total":45},"items":[{"uid":"812e1a301c5c085c","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/812e1a301c5c085c","status":"passed","time":{"start":1727776912575,"stop":1727776966986,"duration":54411}},{"uid":"68435733f13209b6","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/68435733f13209b6","status":"passed","time":{"start":1727774305408,"stop":1727774359228,"duration":53820}},{"uid":"fa7c1d49c8bfe2c","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/fa7c1d49c8bfe2c","status":"passed","time":{"start":1727771297074,"stop":1727771350484,"duration":53410}},{"uid":"ad9e3f336034770b","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/ad9e3f336034770b","status":"passed","time":{"start":1727768842294,"stop":1727768896304,"duration":54010}},{"uid":"4071414b1c23a0d5","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/4071414b1c23a0d5","status":"passed","time":{"start":1727765154311,"stop":1727765207805,"duration":53494}},{"uid":"6283570fd2ac2fd2","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/6283570fd2ac2fd2","status":"passed","time":{"start":1727763936738,"stop":1727763990245,"duration":53507}},{"uid":"bb1e69f900283fa3","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/bb1e69f900283fa3","status":"passed","time":{"start":1727760086459,"stop":1727760140432,"duration":53973}},{"uid":"4d97731fd1b0239b","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/4d97731fd1b0239b","status":"passed","time":{"start":1727744458535,"stop":1727744512411,"duration":53876}},{"uid":"7332242135f43c88","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/7332242135f43c88","status":"passed","time":{"start":1727731983535,"stop":1727732037238,"duration":53703}},{"uid":"a3d7762b29da9c1c","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/a3d7762b29da9c1c","status":"passed","time":{"start":1727658016835,"stop":1727658070036,"duration":53201}},{"uid":"5da14ee32c0e7903","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/5da14ee32c0e7903","status":"passed","time":{"start":1727571616342,"stop":1727571669885,"duration":53543}},{"uid":"d33e52d6f0b8feb1","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/d33e52d6f0b8feb1","status":"passed","time":{"start":1727547177087,"stop":1727547230756,"duration":53669}},{"uid":"c00472bede06ecd2","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/c00472bede06ecd2","status":"passed","time":{"start":1727544134022,"stop":1727544187803,"duration":53781}},{"uid":"7f1e57566d99db10","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/7f1e57566d99db10","status":"passed","time":{"start":1727543975051,"stop":1727544028536,"duration":53485}},{"uid":"9f2f6eb2410c8314","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/9f2f6eb2410c8314","status":"passed","time":{"start":1727485230662,"stop":1727485284146,"duration":53484}},{"uid":"98872e3e279c5509","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/98872e3e279c5509","status":"passed","time":{"start":1727476592410,"stop":1727476650146,"duration":57736}},{"uid":"ac733686af8a189f","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ac733686af8a189f","status":"passed","time":{"start":1727462370525,"stop":1727462424890,"duration":54365}},{"uid":"67ed03217ea41439","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/67ed03217ea41439","status":"passed","time":{"start":1727462370525,"stop":1727462424890,"duration":54365}},{"uid":"da925fee06e5d68f","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/da925fee06e5d68f","status":"passed","time":{"start":1727365142469,"stop":1727365195892,"duration":53423}},{"uid":"442200aac9863296","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/442200aac9863296","status":"passed","time":{"start":1727454794892,"stop":1727454848126,"duration":53234}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"abbbaf6fae8dff29.json","parameterValues":["'rak5010'","'zephyr'"]}