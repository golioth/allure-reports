{"uid":"c7254629613754ea","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"b3d5b97364e6f035c71c0a09d7a1be64","time":{"start":1727782814782,"stop":1727782907525,"duration":92743},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffadb31490>\ndevice = <golioth.golioth.Device object at 0xffffadaf0c90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727782800108,"stop":1727782800108,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727782800109,"stop":1727782800109,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727782800109,"stop":1727782800109,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727782800110,"stop":1727782800110,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727782800110,"stop":1727782800111,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727782800111,"stop":1727782800113,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727782800114,"stop":1727782800114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727782800114,"stop":1727782800114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727782800115,"stop":1727782800540,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727782800541,"stop":1727782801406,"duration":865},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727782801407,"stop":1727782814145,"duration":12738},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727782814145,"stop":1727782814779,"duration":634},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffadb31490>\ndevice = <golioth.golioth.Device object at 0xffffadaf0c90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"10a6fc106ee917ea","name":"log","source":"10a6fc106ee917ea.txt","type":"text/plain","size":21643}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727782907800,"stop":1727782907845,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727782907847,"stop":1727782908214,"duration":367},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727782908216,"stop":1727782908219,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727782908224,"stop":1727782908224,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"568a776f15a5"},{"name":"thread","value":"582-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":33,"unknown":0,"total":41},"items":[{"uid":"56d0f3eb21129f74","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/56d0f3eb21129f74","status":"passed","time":{"start":1727777248224,"stop":1727777290422,"duration":42198}},{"uid":"a4eeeea8338d328d","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/a4eeeea8338d328d","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1727774741920,"stop":1727774786146,"duration":44226}},{"uid":"2bf500ff368ce8ea","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/2bf500ff368ce8ea","status":"passed","time":{"start":1727771734064,"stop":1727771775319,"duration":41255}},{"uid":"e39cc8db6fbdfc4d","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/e39cc8db6fbdfc4d","status":"passed","time":{"start":1727769169127,"stop":1727769209552,"duration":40425}},{"uid":"8b2b02261590b77d","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/8b2b02261590b77d","status":"passed","time":{"start":1727765591249,"stop":1727765632381,"duration":41132}},{"uid":"a656cde124398e13","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/a656cde124398e13","status":"broken","statusDetails":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","time":{"start":1727764371677,"stop":1727764416871,"duration":45194}},{"uid":"b3af0056ae83324","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/b3af0056ae83324","status":"passed","time":{"start":1727760523952,"stop":1727760564584,"duration":40632}},{"uid":"ab82139ce1b461f9","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/ab82139ce1b461f9","status":"passed","time":{"start":1727744893235,"stop":1727744933363,"duration":40128}},{"uid":"9ef52833a6b641b8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/9ef52833a6b641b8","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1727732629179,"stop":1727732672839,"duration":43660}},{"uid":"d961cebe13acf926","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/d961cebe13acf926","status":"passed","time":{"start":1727658452581,"stop":1727658493863,"duration":41282}},{"uid":"8e6e6aa4c1663f2f","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/8e6e6aa4c1663f2f","status":"passed","time":{"start":1727572052144,"stop":1727572092209,"duration":40065}},{"uid":"ac835f3b42a9e3e5","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/ac835f3b42a9e3e5","status":"passed","time":{"start":1727547500437,"stop":1727547540692,"duration":40255}},{"uid":"445fb1098d9df134","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/445fb1098d9df134","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1727544575132,"stop":1727544619661,"duration":44529}},{"uid":"1187e5b57ead696a","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/1187e5b57ead696a","status":"broken","statusDetails":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","time":{"start":1727544300449,"stop":1727544345636,"duration":45187}},{"uid":"3c5cda2b5dbc1d11","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/3c5cda2b5dbc1d11","status":"passed","time":{"start":1727485666406,"stop":1727485707744,"duration":41338}},{"uid":"9585ec31e52fbf23","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/9585ec31e52fbf23","status":"passed","time":{"start":1727477038338,"stop":1727477078790,"duration":40452}},{"uid":"d8a254a3d5312e5a","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d8a254a3d5312e5a","status":"passed","time":{"start":1727462808269,"stop":1727462848211,"duration":39942}},{"uid":"e4ed79234ef0c2bd","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/e4ed79234ef0c2bd","status":"passed","time":{"start":1727462808269,"stop":1727462848211,"duration":39942}},{"uid":"29e161687ff5017c","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/29e161687ff5017c","status":"passed","time":{"start":1727365588108,"stop":1727365627933,"duration":39825}},{"uid":"b3965a8d8c689f97","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/b3965a8d8c689f97","status":"passed","time":{"start":1727455235444,"stop":1727455275628,"duration":40184}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"c7254629613754ea.json","parameterValues":["'rak5010'","'zephyr'"]}