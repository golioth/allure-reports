{"uid":"577fffe9f8ae4e25","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1727781628746,"stop":1727781721538,"duration":92792},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa976ca50>\ndevice = <golioth.golioth.Device object at 0xffffa9755990>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727781613451,"stop":1727781613451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727781613452,"stop":1727781613452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727781613452,"stop":1727781613453,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727781613453,"stop":1727781613453,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727781613454,"stop":1727781613454,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727781613454,"stop":1727781613456,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727781613457,"stop":1727781613458,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727781613457,"stop":1727781613457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727781613458,"stop":1727781613990,"duration":532},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727781613991,"stop":1727781615022,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727781615022,"stop":1727781628130,"duration":13108},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727781628130,"stop":1727781628743,"duration":613},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa976ca50>\ndevice = <golioth.golioth.Device object at 0xffffa9755990>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8a5f28c7e65cbc72","name":"log","source":"8a5f28c7e65cbc72.txt","type":"text/plain","size":19343}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727781721888,"stop":1727781722077,"duration":189},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727781722079,"stop":1727781722477,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727781722480,"stop":1727781722482,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727781722487,"stop":1727781722487,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"568a776f15a5"},{"name":"thread","value":"388-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":44,"unknown":0,"total":45},"items":[{"uid":"dbb951798a2454d1","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/dbb951798a2454d1","status":"passed","time":{"start":1727776866551,"stop":1727776894024,"duration":27473}},{"uid":"c0bb5eaf244725d1","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/c0bb5eaf244725d1","status":"passed","time":{"start":1727774237567,"stop":1727774264876,"duration":27309}},{"uid":"4b8b30b411ad55ac","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/4b8b30b411ad55ac","status":"passed","time":{"start":1727771208211,"stop":1727771256251,"duration":48040}},{"uid":"7128fb9a2d211e2b","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/7128fb9a2d211e2b","status":"passed","time":{"start":1727768795895,"stop":1727768823538,"duration":27643}},{"uid":"f2c562fe74ca00c2","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/f2c562fe74ca00c2","status":"passed","time":{"start":1727765086862,"stop":1727765113633,"duration":26771}},{"uid":"fb60186d822fca9c","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/fb60186d822fca9c","status":"passed","time":{"start":1727763869368,"stop":1727763896006,"duration":26638}},{"uid":"3cdc3faa5a1b5526","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/3cdc3faa5a1b5526","status":"passed","time":{"start":1727760019617,"stop":1727760045854,"duration":26237}},{"uid":"a3e0fff8746f455","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/a3e0fff8746f455","status":"passed","time":{"start":1727744391781,"stop":1727744418298,"duration":26517}},{"uid":"294a5307368cea37","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/294a5307368cea37","status":"passed","time":{"start":1727731938196,"stop":1727731965116,"duration":26920}},{"uid":"150979488c28cde9","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/150979488c28cde9","status":"passed","time":{"start":1727657950277,"stop":1727657976262,"duration":25985}},{"uid":"4f6bea1b15fb4453","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/4f6bea1b15fb4453","status":"passed","time":{"start":1727571550354,"stop":1727571576165,"duration":25811}},{"uid":"20552c5c4c9d8c78","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/20552c5c4c9d8c78","status":"passed","time":{"start":1727547131830,"stop":1727547158773,"duration":26943}},{"uid":"ef8def0fc0cd82d5","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/ef8def0fc0cd82d5","status":"passed","time":{"start":1727544066483,"stop":1727544093578,"duration":27095}},{"uid":"d12e6dbe4cf19075","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/d12e6dbe4cf19075","status":"passed","time":{"start":1727543930222,"stop":1727543956468,"duration":26246}},{"uid":"dc91d471502acaeb","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/dc91d471502acaeb","status":"passed","time":{"start":1727485164075,"stop":1727485190352,"duration":26277}},{"uid":"9ce43cc4ec1b70f","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/9ce43cc4ec1b70f","status":"passed","time":{"start":1727476523763,"stop":1727476552073,"duration":28310}},{"uid":"3ad81919ff7eeb6","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/3ad81919ff7eeb6","status":"passed","time":{"start":1727462303701,"stop":1727462330109,"duration":26408}},{"uid":"fddde7e6e1706461","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/fddde7e6e1706461","status":"passed","time":{"start":1727462303701,"stop":1727462330109,"duration":26408}},{"uid":"8f1a9f175fe31dbc","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/8f1a9f175fe31dbc","status":"passed","time":{"start":1727365075918,"stop":1727365102330,"duration":26412}},{"uid":"b71f754086559645","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/b71f754086559645","status":"passed","time":{"start":1727454727792,"stop":1727454754562,"duration":26770}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"577fffe9f8ae4e25.json","parameterValues":["'rak5010'","'zephyr'"]}