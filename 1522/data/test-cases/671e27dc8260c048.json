{"uid":"671e27dc8260c048","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1727810755961,"stop":1727810778584,"duration":22623},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff991bbad0>\ndevice = <golioth.golioth.Device object at 0xffff991dab10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727810738170,"stop":1727810738170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727810738170,"stop":1727810738170,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727810738171,"stop":1727810738171,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727810738171,"stop":1727810738172,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727810738172,"stop":1727810738175,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727810738172,"stop":1727810738172,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727810738176,"stop":1727810738176,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727810738177,"stop":1727810738177,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727810738177,"stop":1727810738589,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727810738590,"stop":1727810739432,"duration":842},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727810739433,"stop":1727810755038,"duration":15605},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727810755039,"stop":1727810755958,"duration":919},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff991bbad0>\ndevice = <golioth.golioth.Device object at 0xffff991dab10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7864d55ee5c2561c","name":"log","source":"7864d55ee5c2561c.txt","type":"text/plain","size":12523}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727810778887,"stop":1727810778893,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727810778894,"stop":1727810779279,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727810779281,"stop":1727810779284,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727810779289,"stop":1727810779289,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"70c7d82e26fb"},{"name":"thread","value":"517-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1c32950b5284cf85","status":"passed","time":{"start":1727810713380,"stop":1727810733995,"duration":20615}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":18,"skipped":0,"passed":34,"unknown":0,"total":52},"items":[{"uid":"aac50b7117711758","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/aac50b7117711758","status":"passed","time":{"start":1727807485952,"stop":1727807510429,"duration":24477}},{"uid":"68a1655ca93c8f1d","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/68a1655ca93c8f1d","status":"passed","time":{"start":1727799810111,"stop":1727799830483,"duration":20372}},{"uid":"2fa94a9794a89d68","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/2fa94a9794a89d68","status":"passed","time":{"start":1727798508563,"stop":1727798532331,"duration":23768}},{"uid":"1dd5d493ab0e2751","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/1dd5d493ab0e2751","status":"passed","time":{"start":1727789751854,"stop":1727789772387,"duration":20533}},{"uid":"669990e2f38388e6","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/669990e2f38388e6","status":"passed","time":{"start":1727786980079,"stop":1727786999829,"duration":19750}},{"uid":"a56c5e6e7a1fe70e","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/a56c5e6e7a1fe70e","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727784768983,"stop":1727784768983,"duration":0}},{"uid":"c3f1cd1cf91787a6","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/c3f1cd1cf91787a6","status":"passed","time":{"start":1727781356469,"stop":1727781378132,"duration":21663}},{"uid":"d2f4bb73454b6d7c","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/d2f4bb73454b6d7c","status":"passed","time":{"start":1727777995471,"stop":1727778019257,"duration":23786}},{"uid":"1cb6cd16ef94c131","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/1cb6cd16ef94c131","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727775852556,"stop":1727775875283,"duration":22727}},{"uid":"24bc07345c026b58","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/24bc07345c026b58","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727772198392,"stop":1727772220983,"duration":22591}},{"uid":"6ac9fa52aadf5582","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/6ac9fa52aadf5582","status":"passed","time":{"start":1727771135287,"stop":1727771158403,"duration":23116}},{"uid":"c8d31c810dd48749","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/c8d31c810dd48749","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727766300697,"stop":1727766413506,"duration":112809}},{"uid":"7996f7dcf86a84e2","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/7996f7dcf86a84e2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727766300647,"stop":1727766323338,"duration":22691}},{"uid":"73f293edf98d78b3","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/73f293edf98d78b3","status":"passed","time":{"start":1727761406937,"stop":1727761430121,"duration":23184}},{"uid":"ab5140e0520959e8","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/ab5140e0520959e8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727744953396,"stop":1727744975970,"duration":22574}},{"uid":"ba2cb0508adfbc1d","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/ba2cb0508adfbc1d","status":"passed","time":{"start":1727732424732,"stop":1727732446250,"duration":21518}},{"uid":"7ca25c05d1cb36ac","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/7ca25c05d1cb36ac","status":"passed","time":{"start":1727658731535,"stop":1727658756208,"duration":24673}},{"uid":"adaf40636bbe139b","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/adaf40636bbe139b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727572919696,"stop":1727572942372,"duration":22676}},{"uid":"610802095fc19365","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/610802095fc19365","status":"passed","time":{"start":1727548334159,"stop":1727548356897,"duration":22738}},{"uid":"a0b0ba9ae13a40d1","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/a0b0ba9ae13a40d1","status":"passed","time":{"start":1727547558106,"stop":1727547581814,"duration":23708}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"671e27dc8260c048.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}