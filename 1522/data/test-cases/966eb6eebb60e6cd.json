{"uid":"966eb6eebb60e6cd","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1727809671243,"stop":1727809784058,"duration":112815},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8c877e10>\ndevice = <golioth.golioth.Device object at 0xffff8c898350>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727809642136,"stop":1727809642137,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727809642137,"stop":1727809642137,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727809642138,"stop":1727809642138,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727809642138,"stop":1727809642138,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727809642139,"stop":1727809642139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727809642139,"stop":1727809642142,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727809642143,"stop":1727809642143,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727809642144,"stop":1727809642598,"duration":454},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727809642144,"stop":1727809642144,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727809642598,"stop":1727809643502,"duration":904},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727809643502,"stop":1727809670111,"duration":26609},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727809670112,"stop":1727809671240,"duration":1128},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8c877e10>\ndevice = <golioth.golioth.Device object at 0xffff8c898350>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8e217b3a1ac53368","name":"log","source":"8e217b3a1ac53368.txt","type":"text/plain","size":14171}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727809784325,"stop":1727809784371,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727809784373,"stop":1727809784787,"duration":414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727809784789,"stop":1727809784791,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727809784796,"stop":1727809784796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"11f5a7b34fd3"},{"name":"thread","value":"979-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"223979c1f5331ee3","status":"passed","time":{"start":1727809594101,"stop":1727809637546,"duration":43445}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":5,"skipped":0,"passed":38,"unknown":0,"total":44},"items":[{"uid":"e98caf999b07be4d","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/e98caf999b07be4d","status":"passed","time":{"start":1727808830727,"stop":1727808862610,"duration":31883}},{"uid":"c5fd6e04ca8471ce","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/c5fd6e04ca8471ce","status":"passed","time":{"start":1727801142241,"stop":1727801188805,"duration":46564}},{"uid":"a04bce879a4602f7","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/a04bce879a4602f7","status":"passed","time":{"start":1727799647132,"stop":1727799669389,"duration":22257}},{"uid":"3e01302aead2e6d2","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/3e01302aead2e6d2","status":"passed","time":{"start":1727775914527,"stop":1727775938447,"duration":23920}},{"uid":"1c7e82d90d0e2f10","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/1c7e82d90d0e2f10","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727781533134,"stop":1727781645910,"duration":112776}},{"uid":"b153300cdea7d8e1","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/b153300cdea7d8e1","status":"passed","time":{"start":1727779832742,"stop":1727779898673,"duration":65931}},{"uid":"f6d4cc0defceb598","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/f6d4cc0defceb598","status":"passed","time":{"start":1727775914527,"stop":1727775938447,"duration":23920}},{"uid":"9d0a81a7b06f2815","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/9d0a81a7b06f2815","status":"passed","time":{"start":1727772582938,"stop":1727772606460,"duration":23522}},{"uid":"42cc8a90cc647887","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/42cc8a90cc647887","status":"passed","time":{"start":1727767421203,"stop":1727767443237,"duration":22034}},{"uid":"3d9ad71fb315ee0b","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/3d9ad71fb315ee0b","status":"passed","time":{"start":1727766263821,"stop":1727766288549,"duration":24728}},{"uid":"2a162ff2009cce05","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/2a162ff2009cce05","status":"passed","time":{"start":1727746556861,"stop":1727746587325,"duration":30464}},{"uid":"d5e78d87b212d30f","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/d5e78d87b212d30f","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1727734198686,"stop":1727734221239,"duration":22553}},{"uid":"e1d444202cf9c5c5","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/e1d444202cf9c5c5","status":"passed","time":{"start":1727660099660,"stop":1727660123082,"duration":23422}},{"uid":"1a67edec4bf29592","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/1a67edec4bf29592","status":"passed","time":{"start":1727572984372,"stop":1727573006300,"duration":21928}},{"uid":"9268a8ea84c3a541","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/9268a8ea84c3a541","status":"passed","time":{"start":1727550456576,"stop":1727550482926,"duration":26350}},{"uid":"1d3d109cd9e518cb","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/1d3d109cd9e518cb","status":"passed","time":{"start":1727549290702,"stop":1727549313580,"duration":22878}},{"uid":"be7e916784208162","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/be7e916784208162","status":"passed","time":{"start":1727549329196,"stop":1727549371756,"duration":42560}},{"uid":"f5ea4242f270b284","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/f5ea4242f270b284","status":"passed","time":{"start":1727486915641,"stop":1727486943035,"duration":27394}},{"uid":"8b6566c37e072103","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/8b6566c37e072103","status":"passed","time":{"start":1727479390834,"stop":1727479428223,"duration":37389}},{"uid":"778396f9cf10548","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/778396f9cf10548","status":"passed","time":{"start":1727463438942,"stop":1727463466103,"duration":27161}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"966eb6eebb60e6cd.json","parameterValues":["'nrf9160dk'","'zephyr'"]}