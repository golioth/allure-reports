{"uid":"83c30f467581c97c","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1727980687430,"stop":1727980710915,"duration":23485},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb66d5d50>\ndevice = <golioth.golioth.Device object at 0xffffb66f4810>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727980669720,"stop":1727980669720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727980669721,"stop":1727980669722,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727980669721,"stop":1727980669721,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727980669722,"stop":1727980669722,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727980669723,"stop":1727980669725,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727980669723,"stop":1727980669723,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727980669726,"stop":1727980669726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727980669727,"stop":1727980669727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727980669727,"stop":1727980670142,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727980670143,"stop":1727980671049,"duration":906},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727980671050,"stop":1727980686412,"duration":15362},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727980686412,"stop":1727980687427,"duration":1015},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb66d5d50>\ndevice = <golioth.golioth.Device object at 0xffffb66f4810>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c5e05ed2c3858761","name":"log","source":"c5e05ed2c3858761.txt","type":"text/plain","size":19995}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727980711261,"stop":1727980711278,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727980711280,"stop":1727980711672,"duration":392},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727980711674,"stop":1727980711676,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727980711681,"stop":1727980711681,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"7757b4ed6299"},{"name":"thread","value":"441-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":67,"unknown":0,"total":76},"items":[{"uid":"682579d67081e7a0","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/682579d67081e7a0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727977422861,"stop":1727977446184,"duration":23323}},{"uid":"738d25d8b19d4e93","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/738d25d8b19d4e93","status":"passed","time":{"start":1727975263140,"stop":1727975277374,"duration":14234}},{"uid":"f28f8164a11f589b","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/f28f8164a11f589b","status":"passed","time":{"start":1727972731445,"stop":1727972747832,"duration":16387}},{"uid":"993db6d87ab4ab28","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/993db6d87ab4ab28","status":"passed","time":{"start":1727970927396,"stop":1727970939788,"duration":12392}},{"uid":"d66649f201d3ad87","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/d66649f201d3ad87","status":"passed","time":{"start":1727966538114,"stop":1727966554395,"duration":16281}},{"uid":"e2c607bf9851f1b4","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/e2c607bf9851f1b4","status":"passed","time":{"start":1727964429738,"stop":1727964442070,"duration":12332}},{"uid":"f8ccfc38e9b1d510","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/f8ccfc38e9b1d510","status":"passed","time":{"start":1727957962342,"stop":1727957975575,"duration":13233}},{"uid":"80a8da3f59254a19","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/80a8da3f59254a19","status":"passed","time":{"start":1727956880860,"stop":1727956896082,"duration":15222}},{"uid":"dea844af2448935b","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/dea844af2448935b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727956261263,"stop":1727956354810,"duration":93547}},{"uid":"bffb89921cf26ab3","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/bffb89921cf26ab3","status":"passed","time":{"start":1727952244854,"stop":1727952259596,"duration":14742}},{"uid":"4c6aad2ad8d18ef0","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/4c6aad2ad8d18ef0","status":"passed","time":{"start":1727950484481,"stop":1727950498811,"duration":14330}},{"uid":"abc17837d6ae9164","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/abc17837d6ae9164","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727948237145,"stop":1727948260467,"duration":23322}},{"uid":"d90d979b8efaac02","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/d90d979b8efaac02","status":"passed","time":{"start":1727948389158,"stop":1727948405366,"duration":16208}},{"uid":"6af415325fb87ad7","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/6af415325fb87ad7","status":"passed","time":{"start":1727946434295,"stop":1727946449550,"duration":15255}},{"uid":"b089afc02efe4737","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/b089afc02efe4737","status":"passed","time":{"start":1727933009453,"stop":1727933024614,"duration":15161}},{"uid":"40a64f32554deb21","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/40a64f32554deb21","status":"passed","time":{"start":1727928361327,"stop":1727928377754,"duration":16427}},{"uid":"7dca3cf286f43a1","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/7dca3cf286f43a1","status":"passed","time":{"start":1727917643888,"stop":1727917659332,"duration":15444}},{"uid":"7f3c9c7284ce8b6c","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/7f3c9c7284ce8b6c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727908791400,"stop":1727908814822,"duration":23422}},{"uid":"2aa38831d069c44a","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2aa38831d069c44a","status":"passed","time":{"start":1727833520976,"stop":1727833534147,"duration":13171}},{"uid":"bc84ebdc735f734e","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/bc84ebdc735f734e","status":"passed","time":{"start":1727830756473,"stop":1727830769713,"duration":13240}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"83c30f467581c97c.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}