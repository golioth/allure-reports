{"uid":"6f0387c17b7ab7f","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1728612378766,"stop":1728612401553,"duration":22787},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8ad5d50>\ndevice = <golioth.golioth.Device object at 0xffffa8ae8f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728612360554,"stop":1728612360554,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728612360554,"stop":1728612360555,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728612360555,"stop":1728612360555,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728612360555,"stop":1728612360556,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728612360556,"stop":1728612360559,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728612360556,"stop":1728612360556,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728612360559,"stop":1728612360560,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728612360560,"stop":1728612360560,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728612360560,"stop":1728612360980,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728612360981,"stop":1728612361834,"duration":853},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728612361835,"stop":1728612377729,"duration":15894},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728612377729,"stop":1728612378763,"duration":1034},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8ad5d50>\ndevice = <golioth.golioth.Device object at 0xffffa8ae8f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"190b26e8210cb845","name":"log","source":"190b26e8210cb845.txt","type":"text/plain","size":13908}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728612401863,"stop":1728612401871,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728612401872,"stop":1728612402280,"duration":408},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728612402282,"stop":1728612402285,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728612402290,"stop":1728612402290,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"12e9a66dff91"},{"name":"thread","value":"393-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":45,"skipped":0,"passed":85,"unknown":0,"total":130},"items":[{"uid":"9341ffe68fee2369","reportUrl":"https://golioth.github.io/allure-reports/1629//#testresult/9341ffe68fee2369","status":"passed","time":{"start":1728608816588,"stop":1728608839283,"duration":22695}},{"uid":"581b3c6da0be1aed","reportUrl":"https://golioth.github.io/allure-reports/1626//#testresult/581b3c6da0be1aed","status":"passed","time":{"start":1728584098708,"stop":1728584118650,"duration":19942}},{"uid":"edf799fd999bc08","reportUrl":"https://golioth.github.io/allure-reports/1624//#testresult/edf799fd999bc08","status":"passed","time":{"start":1728579189824,"stop":1728579207370,"duration":17546}},{"uid":"359622d6c452d4fb","reportUrl":"https://golioth.github.io/allure-reports/1623//#testresult/359622d6c452d4fb","status":"passed","time":{"start":1728573834091,"stop":1728573853326,"duration":19235}},{"uid":"2e2272c604bee8ae","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/2e2272c604bee8ae","status":"passed","time":{"start":1728537497963,"stop":1728537516477,"duration":18514}},{"uid":"437c94e87f1874d7","reportUrl":"https://golioth.github.io/allure-reports/1622//#testresult/437c94e87f1874d7","status":"passed","time":{"start":1728522104079,"stop":1728522128917,"duration":24838}},{"uid":"d4b95eaf724216a8","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/d4b95eaf724216a8","status":"passed","time":{"start":1728495072406,"stop":1728495087993,"duration":15587}},{"uid":"79daf32ff0dbe0df","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/79daf32ff0dbe0df","status":"passed","time":{"start":1728494209087,"stop":1728494228556,"duration":19469}},{"uid":"7622df70daf90387","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/7622df70daf90387","status":"passed","time":{"start":1728485099372,"stop":1728485120652,"duration":21280}},{"uid":"390929ff6b9e5fc6","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/390929ff6b9e5fc6","status":"passed","time":{"start":1728435840717,"stop":1728435864120,"duration":23403}},{"uid":"2fe1e8183b90e1ce","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/2fe1e8183b90e1ce","status":"passed","time":{"start":1728426539892,"stop":1728426564382,"duration":24490}},{"uid":"f3dff0cd92263f34","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/f3dff0cd92263f34","status":"passed","time":{"start":1728342868270,"stop":1728342889690,"duration":21420}},{"uid":"2ef6e24dc3e1587c","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/2ef6e24dc3e1587c","status":"passed","time":{"start":1728401217215,"stop":1728401239525,"duration":22310}},{"uid":"aafb232e8a5b389","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/aafb232e8a5b389","status":"passed","time":{"start":1728342868270,"stop":1728342889690,"duration":21420}},{"uid":"1e8d28db6cc84dec","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/1e8d28db6cc84dec","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728349311798,"stop":1728349334433,"duration":22635}},{"uid":"fefa97b8169a2c93","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/fefa97b8169a2c93","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728344490764,"stop":1728344513391,"duration":22627}},{"uid":"acf12f8df98c226f","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/acf12f8df98c226f","status":"passed","time":{"start":1728342868270,"stop":1728342889690,"duration":21420}},{"uid":"964b7f658e83f361","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/964b7f658e83f361","status":"passed","time":{"start":1728337661379,"stop":1728337687277,"duration":25898}},{"uid":"b2db423ffdaf7fb1","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/b2db423ffdaf7fb1","status":"passed","time":{"start":1728328365660,"stop":1728328385397,"duration":19737}},{"uid":"9e58052575bd41a","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/9e58052575bd41a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728327675861,"stop":1728327698491,"duration":22630}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6f0387c17b7ab7f.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}