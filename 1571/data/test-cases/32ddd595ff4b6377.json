{"uid":"32ddd595ff4b6377","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"9dfded31f8d05ecc85884d5776ac41cc","time":{"start":1728023078333,"stop":1728023171982,"duration":93649},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92119890>\ndevice = <golioth.golioth.Device object at 0xffff9212cb50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728023050972,"stop":1728023050973,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728023050972,"stop":1728023050972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728023050973,"stop":1728023050973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728023050974,"stop":1728023050974,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728023050974,"stop":1728023050974,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728023050975,"stop":1728023050977,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728023050978,"stop":1728023050978,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728023050978,"stop":1728023050978,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728023050979,"stop":1728023051431,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728023051432,"stop":1728023052339,"duration":907},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728023052340,"stop":1728023075126,"duration":22786},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728023075126,"stop":1728023078326,"duration":3200},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff92119890>\ndevice = <golioth.golioth.Device object at 0xffff9212cb50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c299dac80e517218","name":"log","source":"c299dac80e517218.txt","type":"text/plain","size":18290}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728023172344,"stop":1728023172498,"duration":154},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728023172500,"stop":1728023172922,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728023172924,"stop":1728023172926,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728023172931,"stop":1728023172931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2619700fc020"},{"name":"thread","value":"537-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":80,"unknown":0,"total":82},"items":[{"uid":"534f7f8230812eef","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/534f7f8230812eef","status":"passed","time":{"start":1728003395098,"stop":1728003410677,"duration":15579}},{"uid":"f138a7a493044887","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/f138a7a493044887","status":"passed","time":{"start":1727992874977,"stop":1727992890769,"duration":15792}},{"uid":"c00da69e0b9d6516","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/c00da69e0b9d6516","status":"passed","time":{"start":1727992447826,"stop":1727992463372,"duration":15546}},{"uid":"27a542e6af763930","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/27a542e6af763930","status":"passed","time":{"start":1727988234566,"stop":1727988250106,"duration":15540}},{"uid":"617cfed5255c3667","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/617cfed5255c3667","status":"passed","time":{"start":1727985292817,"stop":1727985308376,"duration":15559}},{"uid":"f440fbf2afeac485","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/f440fbf2afeac485","status":"passed","time":{"start":1727979685734,"stop":1727979701265,"duration":15531}},{"uid":"416835ba31d51fd5","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/416835ba31d51fd5","status":"passed","time":{"start":1727977066795,"stop":1727977082380,"duration":15585}},{"uid":"2476b63cfa3e013b","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/2476b63cfa3e013b","status":"passed","time":{"start":1727974791271,"stop":1727974807858,"duration":16587}},{"uid":"c16a25092aa71f9e","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/c16a25092aa71f9e","status":"passed","time":{"start":1727971405367,"stop":1727971420639,"duration":15272}},{"uid":"6ad47da5ab720e4e","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/6ad47da5ab720e4e","status":"passed","time":{"start":1727969715827,"stop":1727969732425,"duration":16598}},{"uid":"65fe4864e2945b4c","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/65fe4864e2945b4c","status":"passed","time":{"start":1727966151665,"stop":1727966167311,"duration":15646}},{"uid":"7f9e394cca9be962","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/7f9e394cca9be962","status":"passed","time":{"start":1727961258846,"stop":1727961281595,"duration":22749}},{"uid":"f3dda6a330a3ce4","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/f3dda6a330a3ce4","status":"passed","time":{"start":1727956734165,"stop":1727956751283,"duration":17118}},{"uid":"9fb8350181e7d0fd","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/9fb8350181e7d0fd","status":"passed","time":{"start":1727955051358,"stop":1727955067020,"duration":15662}},{"uid":"bb5cdc7a013998c9","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/bb5cdc7a013998c9","status":"passed","time":{"start":1727953206571,"stop":1727953222155,"duration":15584}},{"uid":"f2f7ac78025ab09c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/f2f7ac78025ab09c","status":"passed","time":{"start":1727951297966,"stop":1727951313574,"duration":15608}},{"uid":"df60f713e93d5cc","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/df60f713e93d5cc","status":"passed","time":{"start":1727949485881,"stop":1727949501490,"duration":15609}},{"uid":"8b532f251d61fef8","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/8b532f251d61fef8","status":"passed","time":{"start":1727947006659,"stop":1727947021797,"duration":15138}},{"uid":"bff24971dc83ce1c","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/bff24971dc83ce1c","status":"passed","time":{"start":1727946416016,"stop":1727946432066,"duration":16050}},{"uid":"f67ecc28781887b2","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/f67ecc28781887b2","status":"passed","time":{"start":1727942183634,"stop":1727942199285,"duration":15651}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"32ddd595ff4b6377.json","parameterValues":["'nrf52840dk'","'zephyr'"]}