{"uid":"db25e555921e0b1a","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"9264ad7eba3d9af4a110d911e2f13903","time":{"start":1728020370929,"stop":1728020463339,"duration":92410},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f5acc122810>\ndevice = <golioth.golioth.Device object at 0x7f5acc127950>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"device_name","time":{"start":1728020369651,"stop":1728020369651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728020369651,"stop":1728020369651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728020369651,"stop":1728020369651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728020369651,"stop":1728020369651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728020369651,"stop":1728020369651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728020369652,"stop":1728020369652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728020369652,"stop":1728020369652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728020369652,"stop":1728020369653,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728020369653,"stop":1728020370084,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728020370084,"stop":1728020370797,"duration":713},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728020370797,"stop":1728020370798,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728020370798,"stop":1728020370928,"duration":130},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f5acc122810>\ndevice = <golioth.golioth.Device object at 0x7f5acc127950>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7e7c29aa93990690","name":"log","source":"7e7c29aa93990690.txt","type":"text/plain","size":12607}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728020463393,"stop":1728020463894,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728020463895,"stop":1728020464081,"duration":186},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728020464081,"stop":1728020464082,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728020464082,"stop":1728020464082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 28"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a8a4182a1248"},{"name":"thread","value":"26179-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2530e4d71459e9c8","status":"passed","time":{"start":1728020367762,"stop":1728020427295,"duration":59533}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":19,"unknown":0,"total":20},"items":[{"uid":"2437ce005674acbc","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/2437ce005674acbc","status":"passed","time":{"start":1728001557837,"stop":1728001574331,"duration":16494}},{"uid":"8278eea89035be0d","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/8278eea89035be0d","status":"passed","time":{"start":1727986082370,"stop":1727986099116,"duration":16746}},{"uid":"c1d954f9b049ffa9","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/c1d954f9b049ffa9","status":"passed","time":{"start":1727986070334,"stop":1727986087055,"duration":16721}},{"uid":"8c1b7683099551e6","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/8c1b7683099551e6","status":"passed","time":{"start":1727984572574,"stop":1727984589418,"duration":16844}},{"uid":"f91e39c1862f884d","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/f91e39c1862f884d","status":"passed","time":{"start":1727975267748,"stop":1727975284116,"duration":16368}},{"uid":"5cc943f23c234d75","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/5cc943f23c234d75","status":"passed","time":{"start":1727969970374,"stop":1727969987118,"duration":16744}},{"uid":"e160611e2d2a3522","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/e160611e2d2a3522","status":"passed","time":{"start":1727965027370,"stop":1727965043792,"duration":16422}},{"uid":"dfb3c71d42802159","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/dfb3c71d42802159","status":"passed","time":{"start":1727942374713,"stop":1727942391063,"duration":16350}},{"uid":"13517efed205f3cc","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/13517efed205f3cc","status":"passed","time":{"start":1727943075201,"stop":1727943091814,"duration":16613}},{"uid":"511eea310c2ab835","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/511eea310c2ab835","status":"passed","time":{"start":1727942374713,"stop":1727942391063,"duration":16350}},{"uid":"64b1cffff914042","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/64b1cffff914042","status":"passed","time":{"start":1727942145442,"stop":1727942161846,"duration":16404}},{"uid":"b31ab1c8363e21d9","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/b31ab1c8363e21d9","status":"passed","time":{"start":1727794894935,"stop":1727794911688,"duration":16753}},{"uid":"1d8196249e65a31b","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/1d8196249e65a31b","status":"passed","time":{"start":1727800602404,"stop":1727800618742,"duration":16338}},{"uid":"8399b5d3bcfa51c6","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/8399b5d3bcfa51c6","status":"passed","time":{"start":1727797838735,"stop":1727797855538,"duration":16803}},{"uid":"f121923993ba4c7c","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/f121923993ba4c7c","status":"passed","time":{"start":1727781634666,"stop":1727781651059,"duration":16393}},{"uid":"2eff23ce03cf904f","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/2eff23ce03cf904f","status":"passed","time":{"start":1727776926417,"stop":1727776943098,"duration":16681}},{"uid":"55f92dbb5b710961","reportUrl":"https://golioth.github.io/allure-reports/1504//#testresult/55f92dbb5b710961","status":"passed","time":{"start":1727768801342,"stop":1727768818220,"duration":16878}},{"uid":"37c348b2169933d2","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/37c348b2169933d2","status":"passed","time":{"start":1727761234124,"stop":1727761250940,"duration":16816}},{"uid":"d4aeea598b0b47fb","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/d4aeea598b0b47fb","status":"passed","time":{"start":1727373903183,"stop":1727373919974,"duration":16791}}]},"tags":["GitHub Actions 28","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"db25e555921e0b1a.json","parameterValues":["''","'zephyr'"]}