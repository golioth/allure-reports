{"uid":"272f7e44312b10ed","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1728024411239,"stop":1728024433909,"duration":22670},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1b4fa10>\ndevice = <golioth.golioth.Device object at 0xffffb1b6ea90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728024393429,"stop":1728024393429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728024393430,"stop":1728024393431,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728024393430,"stop":1728024393430,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728024393431,"stop":1728024393431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728024393432,"stop":1728024393432,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728024393432,"stop":1728024393435,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728024393436,"stop":1728024393436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728024393436,"stop":1728024393436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728024393437,"stop":1728024393888,"duration":451},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728024393889,"stop":1728024394959,"duration":1070},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728024394960,"stop":1728024410307,"duration":15347},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728024410307,"stop":1728024411236,"duration":929},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb1b4fa10>\ndevice = <golioth.golioth.Device object at 0xffffb1b6ea90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"fb7ac3860e12a880","name":"log","source":"fb7ac3860e12a880.txt","type":"text/plain","size":12904}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728024434187,"stop":1728024434221,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728024434223,"stop":1728024434651,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728024434653,"stop":1728024434655,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728024434660,"stop":1728024434661,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b142f20e4dd1"},{"name":"thread","value":"532-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7114619330cc8942","status":"passed","time":{"start":1728023892525,"stop":1728023952994,"duration":60469}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":27,"skipped":0,"passed":55,"unknown":0,"total":82},"items":[{"uid":"c4a1d9f23bf62c44","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/c4a1d9f23bf62c44","status":"passed","time":{"start":1728004379886,"stop":1728004402699,"duration":22813}},{"uid":"e81766425acc6946","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/e81766425acc6946","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727995008379,"stop":1727995031059,"duration":22680}},{"uid":"31abbf3c953d7a1f","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/31abbf3c953d7a1f","status":"passed","time":{"start":1727994791760,"stop":1727994812172,"duration":20412}},{"uid":"7ac6faa69749b374","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/7ac6faa69749b374","status":"passed","time":{"start":1727988991233,"stop":1727989011165,"duration":19932}},{"uid":"b608e7fe61bc0ef8","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/b608e7fe61bc0ef8","status":"passed","time":{"start":1727987286713,"stop":1727987307349,"duration":20636}},{"uid":"99ec178e830b5ce4","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/99ec178e830b5ce4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727981600431,"stop":1727981623056,"duration":22625}},{"uid":"1a7a2aa199e99793","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/1a7a2aa199e99793","status":"passed","time":{"start":1727977689671,"stop":1727977715221,"duration":25550}},{"uid":"159d969b0e76be23","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/159d969b0e76be23","status":"passed","time":{"start":1727975381113,"stop":1727975400697,"duration":19584}},{"uid":"2f5ac9381c0dad5a","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/2f5ac9381c0dad5a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727973001141,"stop":1727973114015,"duration":112874}},{"uid":"37b8e7e2236a1bcf","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/37b8e7e2236a1bcf","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727971525296,"stop":1727971638170,"duration":112874}},{"uid":"cf83d39dee7e3ff8","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/cf83d39dee7e3ff8","status":"passed","time":{"start":1727966857852,"stop":1727966883284,"duration":25432}},{"uid":"576b9d41a9d92d5a","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/576b9d41a9d92d5a","status":"passed","time":{"start":1727964783926,"stop":1727964804525,"duration":20599}},{"uid":"69b2eaa8f0ef43a0","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/69b2eaa8f0ef43a0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727958285958,"stop":1727958308588,"duration":22630}},{"uid":"4ff877ee09b24c34","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/4ff877ee09b24c34","status":"passed","time":{"start":1727957262509,"stop":1727957288079,"duration":25570}},{"uid":"bc48c0dfa998d5d5","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/bc48c0dfa998d5d5","status":"passed","time":{"start":1727956668600,"stop":1727956691380,"duration":22780}},{"uid":"dd24f112b5f655fd","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/dd24f112b5f655fd","status":"passed","time":{"start":1727952627530,"stop":1727952650230,"duration":22700}},{"uid":"a41460000f349470","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/a41460000f349470","status":"passed","time":{"start":1727950864410,"stop":1727950887273,"duration":22863}},{"uid":"c92da254816ce3eb","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/c92da254816ce3eb","status":"passed","time":{"start":1727948540857,"stop":1727948563192,"duration":22335}},{"uid":"23cda8f606b973a0","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/23cda8f606b973a0","status":"passed","time":{"start":1727948779506,"stop":1727948804956,"duration":25450}},{"uid":"86596858984d4d6b","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/86596858984d4d6b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727946792023,"stop":1727946814646,"duration":22623}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"272f7e44312b10ed.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}