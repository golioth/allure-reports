{"uid":"20ec2d13bc48d027","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"81df5c8b47896d9914743c5dbee29611","time":{"start":1728023203842,"stop":1728023298150,"duration":94308},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99c43890>\nproject = <golioth.golioth.Project object at 0xffff99de1a10>\ndevice = <golioth.golioth.Device object at 0xffff99c66550>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728023176207,"stop":1728023176207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728023176207,"stop":1728023176207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728023176208,"stop":1728023176208,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728023176208,"stop":1728023176208,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728023176209,"stop":1728023176210,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728023176209,"stop":1728023176209,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728023176211,"stop":1728023176213,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728023176211,"stop":1728023176211,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728023176214,"stop":1728023176660,"duration":446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728023176661,"stop":1728023177547,"duration":886},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728023177548,"stop":1728023200594,"duration":23046},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728023200594,"stop":1728023203835,"duration":3241},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99c43890>\nproject = <golioth.golioth.Project object at 0xffff99de1a10>\ndevice = <golioth.golioth.Device object at 0xffff99c66550>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9d1588278bc6a0e7","name":"log","source":"9d1588278bc6a0e7.txt","type":"text/plain","size":20361}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728023298439,"stop":1728023298464,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728023298466,"stop":1728023298872,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728023298874,"stop":1728023298876,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728023298878,"stop":1728023298879,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2619700fc020"},{"name":"thread","value":"596-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":79,"unknown":0,"total":82},"items":[{"uid":"a8b5970e0728ebaa","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/a8b5970e0728ebaa","status":"passed","time":{"start":1728003443186,"stop":1728003457262,"duration":14076}},{"uid":"ae0b0c07160a81a","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/ae0b0c07160a81a","status":"passed","time":{"start":1727992923722,"stop":1727992934553,"duration":10831}},{"uid":"6a2fa975280736b5","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/6a2fa975280736b5","status":"passed","time":{"start":1727992495103,"stop":1727992507840,"duration":12737}},{"uid":"76500b7f1b722b6d","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/76500b7f1b722b6d","status":"passed","time":{"start":1727988281647,"stop":1727988293366,"duration":11719}},{"uid":"99546752b50a739e","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/99546752b50a739e","status":"passed","time":{"start":1727985339904,"stop":1727985351731,"duration":11827}},{"uid":"cf987c022475d454","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/cf987c022475d454","status":"passed","time":{"start":1727979732863,"stop":1727979744997,"duration":12134}},{"uid":"58b669085ba56e87","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/58b669085ba56e87","status":"passed","time":{"start":1727977113892,"stop":1727977125456,"duration":11564}},{"uid":"d935eb970b6b079","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/d935eb970b6b079","status":"passed","time":{"start":1727974840891,"stop":1727974851774,"duration":10883}},{"uid":"c36841faa694ef12","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/c36841faa694ef12","status":"passed","time":{"start":1727971453637,"stop":1727971466155,"duration":12518}},{"uid":"87a03f57f1f47aad","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/87a03f57f1f47aad","status":"passed","time":{"start":1727969765543,"stop":1727969778872,"duration":13329}},{"uid":"8e8ed5692bd1af1b","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/8e8ed5692bd1af1b","status":"passed","time":{"start":1727966198800,"stop":1727966210285,"duration":11485}},{"uid":"50d19e6f15a7595e","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/50d19e6f15a7595e","status":"passed","time":{"start":1727961315226,"stop":1727961328304,"duration":13078}},{"uid":"911161234c3cbcbb","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/911161234c3cbcbb","status":"passed","time":{"start":1727956784053,"stop":1727956795938,"duration":11885}},{"uid":"75d073fcdfef6b5f","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/75d073fcdfef6b5f","status":"passed","time":{"start":1727955098592,"stop":1727955110368,"duration":11776}},{"uid":"9f8b9b4949347e5d","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/9f8b9b4949347e5d","status":"passed","time":{"start":1727953253690,"stop":1727953265688,"duration":11998}},{"uid":"930f1d88bbab1dbc","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/930f1d88bbab1dbc","status":"passed","time":{"start":1727951344859,"stop":1727951356279,"duration":11420}},{"uid":"56c9c0ac6b80d4b8","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/56c9c0ac6b80d4b8","status":"passed","time":{"start":1727949532887,"stop":1727949544218,"duration":11331}},{"uid":"f6821e41e452206d","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/f6821e41e452206d","status":"passed","time":{"start":1727947054388,"stop":1727947066319,"duration":11931}},{"uid":"a1f506921a9a00bb","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/a1f506921a9a00bb","status":"passed","time":{"start":1727946463560,"stop":1727946475384,"duration":11824}},{"uid":"fa46f792bcaa90ce","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/fa46f792bcaa90ce","status":"passed","time":{"start":1727942231176,"stop":1727942249361,"duration":18185}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"20ec2d13bc48d027.json","parameterValues":["'nrf52840dk'","'zephyr'"]}