{"uid":"343e6ca2b920ad52","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"ef6d28ec57b580743b30ddcaad29dbe3","time":{"start":1728022953560,"stop":1728023046901,"duration":93341},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8c12390>\ndevice = <golioth.golioth.Device object at 0xffffa8c293d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728022926312,"stop":1728022926312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728022926313,"stop":1728022926313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728022926313,"stop":1728022926314,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728022926314,"stop":1728022926314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728022926315,"stop":1728022926317,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728022926315,"stop":1728022926315,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728022926318,"stop":1728022926318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728022926319,"stop":1728022926775,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728022926319,"stop":1728022926319,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728022926775,"stop":1728022927669,"duration":894},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728022927670,"stop":1728022950333,"duration":22663},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728022950333,"stop":1728022953553,"duration":3220},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8c12390>\ndevice = <golioth.golioth.Device object at 0xffffa8c293d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"bbe3300393fce392","name":"log","source":"bbe3300393fce392.txt","type":"text/plain","size":16132}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728023047187,"stop":1728023047215,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728023047216,"stop":1728023047666,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728023047668,"stop":1728023047670,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728023047675,"stop":1728023047675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2619700fc020"},{"name":"thread","value":"478-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":80,"unknown":0,"total":82},"items":[{"uid":"b0a9bd5b7faeb8e7","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/b0a9bd5b7faeb8e7","status":"passed","time":{"start":1728003353130,"stop":1728003363245,"duration":10115}},{"uid":"b15791e85db0df80","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/b15791e85db0df80","status":"passed","time":{"start":1727993387297,"stop":1727993417076,"duration":29779}},{"uid":"82042067ae8b21b9","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/82042067ae8b21b9","status":"passed","time":{"start":1727992406834,"stop":1727992416695,"duration":9861}},{"uid":"175b877b7a666bc2","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/175b877b7a666bc2","status":"passed","time":{"start":1727988193051,"stop":1727988203316,"duration":10265}},{"uid":"631edb4ed36fed9d","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/631edb4ed36fed9d","status":"passed","time":{"start":1727985251207,"stop":1727985261521,"duration":10314}},{"uid":"97d950e4c9fc6de4","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/97d950e4c9fc6de4","status":"passed","time":{"start":1727979644627,"stop":1727979654528,"duration":9901}},{"uid":"c2e465236650e4fe","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/c2e465236650e4fe","status":"passed","time":{"start":1727977025601,"stop":1727977035663,"duration":10062}},{"uid":"64c9f598f07e160d","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/64c9f598f07e160d","status":"passed","time":{"start":1727974748087,"stop":1727974758299,"duration":10212}},{"uid":"42802227bbd39a01","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/42802227bbd39a01","status":"passed","time":{"start":1727971362782,"stop":1727971372434,"duration":9652}},{"uid":"3527da07cf959192","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/3527da07cf959192","status":"passed","time":{"start":1727969673238,"stop":1727969683001,"duration":9763}},{"uid":"a3dbbf556f5c6e50","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/a3dbbf556f5c6e50","status":"passed","time":{"start":1727966110534,"stop":1727966120492,"duration":9958}},{"uid":"cba58f50419c6eb6","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/cba58f50419c6eb6","status":"passed","time":{"start":1727961216253,"stop":1727961226059,"duration":9806}},{"uid":"8aefb7bf39082d2f","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/8aefb7bf39082d2f","status":"passed","time":{"start":1727956688989,"stop":1727956701613,"duration":12624}},{"uid":"aac9985d27fae6c4","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/aac9985d27fae6c4","status":"passed","time":{"start":1727955010244,"stop":1727955020248,"duration":10004}},{"uid":"b745445bd5c2013b","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/b745445bd5c2013b","status":"passed","time":{"start":1727953165227,"stop":1727953175392,"duration":10165}},{"uid":"13947c9aff17eff0","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/13947c9aff17eff0","status":"passed","time":{"start":1727951256599,"stop":1727951266808,"duration":10209}},{"uid":"45ac83cb7b7b2420","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/45ac83cb7b7b2420","status":"passed","time":{"start":1727949444312,"stop":1727949454523,"duration":10211}},{"uid":"cf6f32153a6d8a5d","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/cf6f32153a6d8a5d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727946958166,"stop":1727946973167,"duration":15001}},{"uid":"d40573ca78b1941e","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/d40573ca78b1941e","status":"passed","time":{"start":1727946375049,"stop":1727946384966,"duration":9917}},{"uid":"127a95276f7d2555","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/127a95276f7d2555","status":"passed","time":{"start":1727942141900,"stop":1727942152513,"duration":10613}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"343e6ca2b920ad52.json","parameterValues":["'nrf52840dk'","'zephyr'"]}