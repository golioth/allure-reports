{"uid":"529f6bba2e19351e","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"5ac19b44a52374fb0266a196a0a023e6","time":{"start":1728020420422,"stop":1728020512913,"duration":92491},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f79fa2332d0>\ndevice = <golioth.golioth.Device object at 0x7f79fa229810>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728020419420,"stop":1728020419421,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728020419421,"stop":1728020419421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728020419421,"stop":1728020419421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728020419421,"stop":1728020419421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728020419421,"stop":1728020419421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728020419421,"stop":1728020419421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728020419421,"stop":1728020419421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728020419422,"stop":1728020419795,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728020419422,"stop":1728020419422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728020419795,"stop":1728020420416,"duration":621},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728020420416,"stop":1728020420417,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728020420417,"stop":1728020420421,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f79fa2332d0>\ndevice = <golioth.golioth.Device object at 0x7f79fa229810>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"154575ed95201e41","name":"log","source":"154575ed95201e41.txt","type":"text/plain","size":14772}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728020513051,"stop":1728020513562,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728020513562,"stop":1728020513864,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728020513868,"stop":1728020513869,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728020513870,"stop":1728020513870,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 28"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a8a4182a1248"},{"name":"thread","value":"37923-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e1ee6a5473364bf6","status":"passed","time":{"start":1728020415935,"stop":1728020488273,"duration":72338}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":19,"unknown":0,"total":20},"items":[{"uid":"a706137fe6fb0861","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/a706137fe6fb0861","status":"passed","time":{"start":1728001620819,"stop":1728001645938,"duration":25119}},{"uid":"55132a1c20c19b65","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/55132a1c20c19b65","status":"passed","time":{"start":1727986143481,"stop":1727986169031,"duration":25550}},{"uid":"10eb4de07eb125d2","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/10eb4de07eb125d2","status":"passed","time":{"start":1727986129540,"stop":1727986154833,"duration":25293}},{"uid":"634e48594138b38a","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/634e48594138b38a","status":"passed","time":{"start":1727984630369,"stop":1727984655815,"duration":25446}},{"uid":"c4af2b2e043d0013","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/c4af2b2e043d0013","status":"passed","time":{"start":1727975326332,"stop":1727975351569,"duration":25237}},{"uid":"af862d2c5b37004e","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/af862d2c5b37004e","status":"passed","time":{"start":1727970029830,"stop":1727970055239,"duration":25409}},{"uid":"9f927dd40a15db1b","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/9f927dd40a15db1b","status":"passed","time":{"start":1727965088927,"stop":1727965114070,"duration":25143}},{"uid":"fc9b2d4492defbf3","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/fc9b2d4492defbf3","status":"passed","time":{"start":1727942432878,"stop":1727942459769,"duration":26891}},{"uid":"37f17877c5d84f9d","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/37f17877c5d84f9d","status":"passed","time":{"start":1727943136643,"stop":1727943161989,"duration":25346}},{"uid":"9e0b0a4ebe17294e","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/9e0b0a4ebe17294e","status":"passed","time":{"start":1727942432878,"stop":1727942459769,"duration":26891}},{"uid":"d68b015cf6cc1094","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/d68b015cf6cc1094","status":"passed","time":{"start":1727942204536,"stop":1727942229618,"duration":25082}},{"uid":"48ea84aae00368da","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/48ea84aae00368da","status":"passed","time":{"start":1727794954208,"stop":1727794979624,"duration":25416}},{"uid":"c804c8109d97e64c","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/c804c8109d97e64c","status":"passed","time":{"start":1727800662734,"stop":1727800687929,"duration":25195}},{"uid":"2583fdf79f20d35a","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/2583fdf79f20d35a","status":"passed","time":{"start":1727797893328,"stop":1727797918986,"duration":25658}},{"uid":"a5d35be2055130d6","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/a5d35be2055130d6","status":"passed","time":{"start":1727781694865,"stop":1727781720005,"duration":25140}},{"uid":"791ccc9fd66c7821","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/791ccc9fd66c7821","status":"passed","time":{"start":1727776987905,"stop":1727777013424,"duration":25519}},{"uid":"d7ad20df9c09f3a3","reportUrl":"https://golioth.github.io/allure-reports/1504//#testresult/d7ad20df9c09f3a3","status":"passed","time":{"start":1727768858427,"stop":1727768884049,"duration":25622}},{"uid":"8a86223810c225dc","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/8a86223810c225dc","status":"passed","time":{"start":1727761291765,"stop":1727761320438,"duration":28673}},{"uid":"62b4157c99157955","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/62b4157c99157955","status":"passed","time":{"start":1727373964843,"stop":1727373990153,"duration":25310}}]},"tags":["GitHub Actions 28","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"529f6bba2e19351e.json","parameterValues":["''","'zephyr'"]}