{"uid":"92a72c6031a7949a","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"590f0375d3da0823de2fcad609f6b87b","time":{"start":1728023322883,"stop":1728023417200,"duration":94317},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87ff5c90>\nproject = <golioth.golioth.Project object at 0xffff8953acd0>\ndevice = <golioth.golioth.Device object at 0xffff87fd5910>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728023313229,"stop":1728023313229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728023313229,"stop":1728023313229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728023313230,"stop":1728023313230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728023313230,"stop":1728023313230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728023313231,"stop":1728023313232,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728023313231,"stop":1728023313231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728023313233,"stop":1728023313235,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728023313233,"stop":1728023313233,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728023313236,"stop":1728023313680,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728023313681,"stop":1728023314552,"duration":871},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728023314553,"stop":1728023322365,"duration":7812},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728023322365,"stop":1728023322880,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87ff5c90>\nproject = <golioth.golioth.Project object at 0xffff8953acd0>\ndevice = <golioth.golioth.Device object at 0xffff87fd5910>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2010f72a249607b4","name":"log","source":"2010f72a249607b4.txt","type":"text/plain","size":21150}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728023417460,"stop":1728023417487,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728023417489,"stop":1728023417895,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728023417897,"stop":1728023417899,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728023417901,"stop":1728023417901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5ba6c6e0e96f"},{"name":"thread","value":"439-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":77,"unknown":0,"total":82},"items":[{"uid":"8c820097b25648d0","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/8c820097b25648d0","status":"passed","time":{"start":1728003338902,"stop":1728003350126,"duration":11224}},{"uid":"8f47bb630af1331b","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/8f47bb630af1331b","status":"passed","time":{"start":1727993851011,"stop":1727993862606,"duration":11595}},{"uid":"e9a88fd71fe2e91","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/e9a88fd71fe2e91","status":"passed","time":{"start":1727993506122,"stop":1727993518711,"duration":12589}},{"uid":"ea88a0713299474e","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/ea88a0713299474e","status":"passed","time":{"start":1727988606266,"stop":1727988617849,"duration":11583}},{"uid":"f1fa8ee7c654a799","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/f1fa8ee7c654a799","status":"passed","time":{"start":1727984748070,"stop":1727984761058,"duration":12988}},{"uid":"b7fe04d970a2a62d","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/b7fe04d970a2a62d","status":"passed","time":{"start":1727979544281,"stop":1727979557852,"duration":13571}},{"uid":"9337ee5f87641d30","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/9337ee5f87641d30","status":"passed","time":{"start":1727966382223,"stop":1727966394854,"duration":12631}},{"uid":"bb38f5cf36da6fbf","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/bb38f5cf36da6fbf","status":"passed","time":{"start":1727974804301,"stop":1727974816573,"duration":12272}},{"uid":"dacc4c059a457a9d","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/dacc4c059a457a9d","status":"passed","time":{"start":1727971996874,"stop":1727972008839,"duration":11965}},{"uid":"919b42a81c36e852","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/919b42a81c36e852","status":"passed","time":{"start":1727970699331,"stop":1727970712912,"duration":13581}},{"uid":"a0ed609b5ca3ac16","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/a0ed609b5ca3ac16","status":"passed","time":{"start":1727966382223,"stop":1727966394854,"duration":12631}},{"uid":"1810c43798b6d111","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/1810c43798b6d111","status":"passed","time":{"start":1727959230553,"stop":1727959244421,"duration":13868}},{"uid":"58e9a7211fb2cbcb","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/58e9a7211fb2cbcb","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1727957756002,"stop":1727957756002,"duration":0}},{"uid":"869191d02ae52bd5","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/869191d02ae52bd5","status":"passed","time":{"start":1727954644266,"stop":1727954656829,"duration":12563}},{"uid":"6e78432eddb87b9b","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/6e78432eddb87b9b","status":"passed","time":{"start":1727908106292,"stop":1727908117230,"duration":10938}},{"uid":"999b1c8e17fe85a8","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/999b1c8e17fe85a8","status":"passed","time":{"start":1727932331423,"stop":1727932346297,"duration":14874}},{"uid":"75f4587d2e951f90","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/75f4587d2e951f90","status":"passed","time":{"start":1727949595053,"stop":1727949607177,"duration":12124}},{"uid":"f12f064a75e5298","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/f12f064a75e5298","status":"passed","time":{"start":1727947525770,"stop":1727947539217,"duration":13447}},{"uid":"22995fc514b42468","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/22995fc514b42468","status":"passed","time":{"start":1727947390294,"stop":1727947402388,"duration":12094}},{"uid":"14ab7544320fb489","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/14ab7544320fb489","status":"passed","time":{"start":1727833874426,"stop":1727833885665,"duration":11239}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"92a72c6031a7949a.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}