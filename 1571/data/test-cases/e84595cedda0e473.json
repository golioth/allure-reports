{"uid":"e84595cedda0e473","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"06bdea1fe9aeb3c2a119fdf487f964e7","time":{"start":1728020420200,"stop":1728020532461,"duration":112261},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f198faf4f10>\ndevice = <golioth.golioth.Device object at 0x7f198fad6690>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Sending hello! 3'\nnum_of_lines = None, timeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728020419115,"stop":1728020419115,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728020419115,"stop":1728020419115,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728020419116,"stop":1728020419116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728020419116,"stop":1728020419116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728020419116,"stop":1728020419116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728020419116,"stop":1728020419116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728020419116,"stop":1728020419116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728020419117,"stop":1728020419491,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728020419117,"stop":1728020419117,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728020419491,"stop":1728020420184,"duration":693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728020420184,"stop":1728020420185,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728020420186,"stop":1728020420199,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f198faf4f10>\ndevice = <golioth.golioth.Device object at 0x7f198fad6690>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Sending hello! 3'\nnum_of_lines = None, timeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"effc87c3eed90eb4","name":"log","source":"effc87c3eed90eb4.txt","type":"text/plain","size":12602}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728020532550,"stop":1728020533056,"duration":506},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728020533057,"stop":1728020533490,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728020533491,"stop":1728020533494,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728020533495,"stop":1728020533495,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 28"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a8a4182a1248"},{"name":"thread","value":"37920-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d60cd267a863e1e6","status":"passed","time":{"start":1728020415946,"stop":1728020477052,"duration":61106}},{"uid":"dcfa0ec8b2daa891","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728020371163,"stop":1728020483600,"duration":112437}},{"uid":"7c53d442e92009ac","status":"passed","time":{"start":1728020367687,"stop":1728020438723,"duration":71036}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":19,"unknown":0,"total":20},"items":[{"uid":"daa75bbc40b25c53","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/daa75bbc40b25c53","status":"passed","time":{"start":1728001618262,"stop":1728001639689,"duration":21427}},{"uid":"419e9cfa2bc36f2a","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/419e9cfa2bc36f2a","status":"passed","time":{"start":1727986142478,"stop":1727986164168,"duration":21690}},{"uid":"6ba62cf083a8085a","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/6ba62cf083a8085a","status":"passed","time":{"start":1727986130062,"stop":1727986151607,"duration":21545}},{"uid":"a6f637da5f227dcd","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/a6f637da5f227dcd","status":"passed","time":{"start":1727984631107,"stop":1727984652855,"duration":21748}},{"uid":"2fc78ac9f647c273","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/2fc78ac9f647c273","status":"passed","time":{"start":1727975325306,"stop":1727975346754,"duration":21448}},{"uid":"c33c80438ae3c83a","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/c33c80438ae3c83a","status":"passed","time":{"start":1727970031074,"stop":1727970052806,"duration":21732}},{"uid":"5c2965187b79cf0e","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/5c2965187b79cf0e","status":"passed","time":{"start":1727965087411,"stop":1727965109256,"duration":21845}},{"uid":"bafa43e4e10c70d0","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/bafa43e4e10c70d0","status":"passed","time":{"start":1727942435973,"stop":1727942457451,"duration":21478}},{"uid":"42f138c9fb3782a3","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/42f138c9fb3782a3","status":"passed","time":{"start":1727943135602,"stop":1727943157061,"duration":21459}},{"uid":"98f61d8e5e3f4790","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/98f61d8e5e3f4790","status":"passed","time":{"start":1727942435973,"stop":1727942457451,"duration":21478}},{"uid":"17599f59c3493039","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/17599f59c3493039","status":"passed","time":{"start":1727942204215,"stop":1727942225559,"duration":21344}},{"uid":"827761f3208b3d78","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/827761f3208b3d78","status":"passed","time":{"start":1727794954547,"stop":1727794976213,"duration":21666}},{"uid":"1d7f2d00879c668e","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/1d7f2d00879c668e","status":"passed","time":{"start":1727800659502,"stop":1727800680902,"duration":21400}},{"uid":"ced287b3ef8c8b3b","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/ced287b3ef8c8b3b","status":"passed","time":{"start":1727797894497,"stop":1727797916203,"duration":21706}},{"uid":"8c3f1142278d89ae","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/8c3f1142278d89ae","status":"passed","time":{"start":1727781692295,"stop":1727781713807,"duration":21512}},{"uid":"1568f81d442c6bc9","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/1568f81d442c6bc9","status":"passed","time":{"start":1727776989142,"stop":1727777010894,"duration":21752}},{"uid":"5df05dccb0023648","reportUrl":"https://golioth.github.io/allure-reports/1504//#testresult/5df05dccb0023648","status":"passed","time":{"start":1727768857871,"stop":1727768879625,"duration":21754}},{"uid":"22bc9359525813c1","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/22bc9359525813c1","status":"passed","time":{"start":1727761291080,"stop":1727761313068,"duration":21988}},{"uid":"9859096d208b4a43","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/9859096d208b4a43","status":"passed","time":{"start":1727373964774,"stop":1727373986369,"duration":21595}}]},"tags":["GitHub Actions 28","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e84595cedda0e473.json","parameterValues":["''","'zephyr'"]}