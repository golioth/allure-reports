{"uid":"d6ded6fd4a5d7cfc","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"466fcb31cd63d28758a28daeb9320ffb","time":{"start":1728023108721,"stop":1728023201897,"duration":93176},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9f907b50>\ndevice = <golioth.golioth.Device object at 0xffff9f8f8ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728023099034,"stop":1728023099034,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728023099034,"stop":1728023099034,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728023099035,"stop":1728023099035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728023099035,"stop":1728023099036,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728023099036,"stop":1728023099036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728023099036,"stop":1728023099039,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728023099039,"stop":1728023099040,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728023099040,"stop":1728023099482,"duration":442},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728023099040,"stop":1728023099040,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728023099482,"stop":1728023100391,"duration":909},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728023100392,"stop":1728023108177,"duration":7785},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728023108178,"stop":1728023108718,"duration":540},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9f907b50>\ndevice = <golioth.golioth.Device object at 0xffff9f8f8ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b61552de1417dbe9","name":"log","source":"b61552de1417dbe9.txt","type":"text/plain","size":16921}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728023202259,"stop":1728023202306,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728023202308,"stop":1728023202725,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728023202728,"stop":1728023202730,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728023202735,"stop":1728023202735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5ba6c6e0e96f"},{"name":"thread","value":"401-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":79,"unknown":0,"total":82},"items":[{"uid":"931bf1f5cdd6a305","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/931bf1f5cdd6a305","status":"passed","time":{"start":1728003286641,"stop":1728003297460,"duration":10819}},{"uid":"2468ec749a272344","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/2468ec749a272344","status":"passed","time":{"start":1727993797618,"stop":1727993808288,"duration":10670}},{"uid":"ff34d2d318d29be","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/ff34d2d318d29be","status":"passed","time":{"start":1727993453359,"stop":1727993463019,"duration":9660}},{"uid":"c9612a5aa9cc50e1","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/c9612a5aa9cc50e1","status":"passed","time":{"start":1727988555532,"stop":1727988562076,"duration":6544}},{"uid":"19b972bedf621cd4","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/19b972bedf621cd4","status":"passed","time":{"start":1727984695388,"stop":1727984705417,"duration":10029}},{"uid":"2799b7a11c0f0df1","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/2799b7a11c0f0df1","status":"passed","time":{"start":1727979487764,"stop":1727979498579,"duration":10815}},{"uid":"846be50ad29248ab","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/846be50ad29248ab","status":"passed","time":{"start":1727966326158,"stop":1727966336774,"duration":10616}},{"uid":"246b46b312ca5599","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/246b46b312ca5599","status":"passed","time":{"start":1727974752173,"stop":1727974762703,"duration":10530}},{"uid":"f3fe0d3b11aca28","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/f3fe0d3b11aca28","status":"passed","time":{"start":1727971944477,"stop":1727971955190,"duration":10713}},{"uid":"93de50915357c387","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/93de50915357c387","status":"passed","time":{"start":1727970648134,"stop":1727970654776,"duration":6642}},{"uid":"f0cb1f573999c33c","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/f0cb1f573999c33c","status":"passed","time":{"start":1727966326158,"stop":1727966336774,"duration":10616}},{"uid":"cf4135f6858738d2","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/cf4135f6858738d2","status":"passed","time":{"start":1727959175907,"stop":1727959186671,"duration":10764}},{"uid":"77fd562389a1b07b","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/77fd562389a1b07b","status":"passed","time":{"start":1727957710042,"stop":1727957720654,"duration":10612}},{"uid":"8f08c068b809edcf","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/8f08c068b809edcf","status":"passed","time":{"start":1727954591320,"stop":1727954601938,"duration":10618}},{"uid":"654d4f3b36c41424","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/654d4f3b36c41424","status":"passed","time":{"start":1727908327637,"stop":1727908338272,"duration":10635}},{"uid":"c6bdda6aad95b692","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c6bdda6aad95b692","status":"passed","time":{"start":1727932275300,"stop":1727932285974,"duration":10674}},{"uid":"90acae7b9a481164","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/90acae7b9a481164","status":"passed","time":{"start":1727949540851,"stop":1727949551632,"duration":10781}},{"uid":"3f03ed9a979aca1b","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/3f03ed9a979aca1b","status":"passed","time":{"start":1727947474524,"stop":1727947484334,"duration":9810}},{"uid":"84d6e13e56d5e047","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/84d6e13e56d5e047","status":"passed","time":{"start":1727947338217,"stop":1727947347779,"duration":9562}},{"uid":"e849d56882a26842","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/e849d56882a26842","status":"passed","time":{"start":1727833820834,"stop":1727833831450,"duration":10616}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"d6ded6fd4a5d7cfc.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}