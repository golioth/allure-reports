{"uid":"55016d4b2552dd7","name":"test_connect","fullName":"tests.hil.tests.connection.test_connection#test_connect","historyId":"0c74076b268e43310c1372e33d1629bf","time":{"start":1728020582369,"stop":1728020817016,"duration":234647},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 105877.7898937681\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <rak5010.RAK5010 object at 0xffff991c0cd0>\ndevice = <golioth.golioth.Device object at 0xffff991dab10>\n\n    async def test_connect(board, device):\n        # Set Golioth credentials\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Confirm connection to Golioth\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_stop();\n        assert None != await board.wait_for_regex_in_line('Stopping client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_destroy();\n        assert None != await board.wait_for_regex_in_line('Destroying client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n>       assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n\ntests/hil/tests/connection/test_connection.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 105877.7898937681\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728020540085,"stop":1728020540085,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728020540086,"stop":1728020540086,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728020540087,"stop":1728020540087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728020540088,"stop":1728020540088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728020540088,"stop":1728020540089,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728020540089,"stop":1728020540089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728020540090,"stop":1728020540090,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728020540090,"stop":1728020540090,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728020540091,"stop":1728020540091,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728020540091,"stop":1728020540091,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728020540092,"stop":1728020540092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728020540092,"stop":1728020540092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728020540093,"stop":1728020580960,"duration":40867},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728020580962,"stop":1728020581492,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728020581493,"stop":1728020582366,"duration":873},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 105877.7898937681\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <rak5010.RAK5010 object at 0xffff991c0cd0>\ndevice = <golioth.golioth.Device object at 0xffff991dab10>\n\n    async def test_connect(board, device):\n        # Set Golioth credentials\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Confirm connection to Golioth\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_stop();\n        assert None != await board.wait_for_regex_in_line('Stopping client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_destroy();\n        assert None != await board.wait_for_regex_in_line('Destroying client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n>       assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n\ntests/hil/tests/connection/test_connection.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 105877.7898937681\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"90fbaa934a1d76e2","name":"stdout","source":"90fbaa934a1d76e2.txt","type":"text/plain","size":4808},{"uid":"10896b74e41d5339","name":"stderr","source":"10896b74e41d5339.txt","type":"text/plain","size":252}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1728020817645,"stop":1728020818055,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728020818057,"stop":1728020818058,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728020818059,"stop":1728020818063,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_connection"},{"name":"host","value":"4c81523b1c76"},{"name":"thread","value":"240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.connection.test_connection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":72,"unknown":0,"total":80},"items":[{"uid":"22b30f3804b88df5","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/22b30f3804b88df5","status":"passed","time":{"start":1728001766268,"stop":1728001801938,"duration":35670}},{"uid":"b2078e862571a5e5","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/b2078e862571a5e5","status":"passed","time":{"start":1727990069430,"stop":1727990106563,"duration":37133}},{"uid":"9197bb57b9157c81","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/9197bb57b9157c81","status":"passed","time":{"start":1727991061658,"stop":1727991095292,"duration":33634}},{"uid":"5b4df75e08d008d1","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/5b4df75e08d008d1","status":"passed","time":{"start":1727987108988,"stop":1727987144321,"duration":35333}},{"uid":"dba40557fe1eb517","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/dba40557fe1eb517","status":"passed","time":{"start":1727985224055,"stop":1727985258859,"duration":34804}},{"uid":"2a9b8b6f7d92b03a","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/2a9b8b6f7d92b03a","status":"passed","time":{"start":1727978641249,"stop":1727978675356,"duration":34107}},{"uid":"47a724413e512821","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/47a724413e512821","status":"passed","time":{"start":1727976722020,"stop":1727976755670,"duration":33650}},{"uid":"e51b9de85c47daac","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/e51b9de85c47daac","status":"passed","time":{"start":1727974130164,"stop":1727974164704,"duration":34540}},{"uid":"1c7e2307cf721426","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/1c7e2307cf721426","status":"passed","time":{"start":1727969978412,"stop":1727970012655,"duration":34243}},{"uid":"2bf9a6f224d69746","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/2bf9a6f224d69746","status":"broken","statusDetails":"FileNotFoundError: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'","time":{"start":1727967059267,"stop":1727967059267,"duration":0}},{"uid":"3ae66d6cc60c6000","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/3ae66d6cc60c6000","status":"passed","time":{"start":1727965030491,"stop":1727965065121,"duration":34630}},{"uid":"d5b38915cdf99e05","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/d5b38915cdf99e05","status":"passed","time":{"start":1727959182061,"stop":1727959216492,"duration":34431}},{"uid":"e840379def32a8a3","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/e840379def32a8a3","status":"passed","time":{"start":1727956996859,"stop":1727957032097,"duration":35238}},{"uid":"a3a603f7a54708d8","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/a3a603f7a54708d8","status":"passed","time":{"start":1727955130347,"stop":1727955164337,"duration":33990}},{"uid":"a7a2267062f626b2","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/a7a2267062f626b2","status":"passed","time":{"start":1727952128684,"stop":1727952162965,"duration":34281}},{"uid":"83dd8c117fbdc77b","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/83dd8c117fbdc77b","status":"passed","time":{"start":1727951416294,"stop":1727951451085,"duration":34791}},{"uid":"db0b84cc7356a6b0","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/db0b84cc7356a6b0","status":"passed","time":{"start":1727947169822,"stop":1727947202866,"duration":33044}},{"uid":"44bad5b1afed5af3","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/44bad5b1afed5af3","status":"passed","time":{"start":1727944476744,"stop":1727944511293,"duration":34549}},{"uid":"57115d330d43bf13","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/57115d330d43bf13","status":"passed","time":{"start":1727944373753,"stop":1727944408246,"duration":34493}},{"uid":"cd9ee365bbf3900e","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/cd9ee365bbf3900e","status":"passed","time":{"start":1727942996818,"stop":1727943031444,"duration":34626}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"55016d4b2552dd7.json","parameterValues":["'rak5010'","'zephyr'"]}