{"uid":"1d9b55535d5ffb00","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"ddc2f31d085089b8b5f25dfb44556fd5","time":{"start":1728022895614,"stop":1728022988258,"duration":92644},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa95c8dd0>\ndevice = <golioth.golioth.Device object at 0xffffa982cad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728022885409,"stop":1728022885410,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728022885410,"stop":1728022885410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728022885411,"stop":1728022885412,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728022885411,"stop":1728022885411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728022885412,"stop":1728022885412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728022885412,"stop":1728022885414,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728022885415,"stop":1728022885415,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728022885416,"stop":1728022885964,"duration":548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728022885416,"stop":1728022885416,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728022885964,"stop":1728022886830,"duration":866},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728022886831,"stop":1728022895090,"duration":8259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728022895091,"stop":1728022895611,"duration":520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa95c8dd0>\ndevice = <golioth.golioth.Device object at 0xffffa982cad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"46de9bf891d7c046","name":"log","source":"46de9bf891d7c046.txt","type":"text/plain","size":14527}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728022988530,"stop":1728022988575,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728022988577,"stop":1728022988983,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728022988985,"stop":1728022988987,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728022988992,"stop":1728022988992,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5ba6c6e0e96f"},{"name":"thread","value":"361-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":78,"unknown":0,"total":82},"items":[{"uid":"e576169bd5882749","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/e576169bd5882749","status":"passed","time":{"start":1728003217124,"stop":1728003235549,"duration":18425}},{"uid":"1ebd1d3b4478227c","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/1ebd1d3b4478227c","status":"passed","time":{"start":1727993730731,"stop":1727993746371,"duration":15640}},{"uid":"412234231681b2ea","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/412234231681b2ea","status":"passed","time":{"start":1727993318580,"stop":1727993333142,"duration":14562}},{"uid":"cfa2c55a4558abd3","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/cfa2c55a4558abd3","status":"passed","time":{"start":1727988483313,"stop":1727988502341,"duration":19028}},{"uid":"1e45f93fed9fe2d1","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/1e45f93fed9fe2d1","status":"passed","time":{"start":1727984625209,"stop":1727984643818,"duration":18609}},{"uid":"4d27eda1a36fee68","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/4d27eda1a36fee68","status":"passed","time":{"start":1727979420573,"stop":1727979435490,"duration":14917}},{"uid":"fe7079456dbd8d94","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/fe7079456dbd8d94","status":"passed","time":{"start":1727966253305,"stop":1727966273102,"duration":19797}},{"uid":"c233369f6493e4d1","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/c233369f6493e4d1","status":"passed","time":{"start":1727974683500,"stop":1727974701828,"duration":18328}},{"uid":"66b2471ead7b707","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/66b2471ead7b707","status":"passed","time":{"start":1727971874769,"stop":1727971893204,"duration":18435}},{"uid":"590f04ff5f83e28e","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/590f04ff5f83e28e","status":"passed","time":{"start":1727970575821,"stop":1727970595779,"duration":19958}},{"uid":"4715522a28008711","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/4715522a28008711","status":"passed","time":{"start":1727966253305,"stop":1727966273102,"duration":19797}},{"uid":"444e7f39bdb0e2a4","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/444e7f39bdb0e2a4","status":"passed","time":{"start":1727959104314,"stop":1727959123560,"duration":19246}},{"uid":"6edcd8179cdbdf4b","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/6edcd8179cdbdf4b","status":"passed","time":{"start":1727957641326,"stop":1727957657779,"duration":16453}},{"uid":"1eb09b16fd90a528","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/1eb09b16fd90a528","status":"passed","time":{"start":1727954522991,"stop":1727954539525,"duration":16534}},{"uid":"46da72825d7bf461","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/46da72825d7bf461","status":"passed","time":{"start":1727907973818,"stop":1727907990902,"duration":17084}},{"uid":"3515704325d59f48","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/3515704325d59f48","status":"passed","time":{"start":1727932206706,"stop":1727932222041,"duration":15335}},{"uid":"34601819bcd774b8","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/34601819bcd774b8","status":"passed","time":{"start":1727949476848,"stop":1727949491201,"duration":14353}},{"uid":"9f94687211cb55b4","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/9f94687211cb55b4","status":"passed","time":{"start":1727947405594,"stop":1727947422952,"duration":17358}},{"uid":"5fd90cdc5038f4b4","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/5fd90cdc5038f4b4","status":"passed","time":{"start":1727947269875,"stop":1727947288187,"duration":18312}},{"uid":"2db23090243a7e8f","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2db23090243a7e8f","status":"passed","time":{"start":1727833752795,"stop":1727833771393,"duration":18598}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"1d9b55535d5ffb00.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}