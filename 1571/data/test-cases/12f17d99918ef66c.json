{"uid":"12f17d99918ef66c","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"2b4f77a845f74df4344be1595c411e9d","time":{"start":1728020647496,"stop":1728020739886,"duration":92390},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fe82cd671d0>\ndevice = <golioth.golioth.Device object at 0x7fe82cd55710>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_psk","time":{"start":1728020646887,"stop":1728020646887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728020646887,"stop":1728020646888,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728020646887,"stop":1728020646887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728020646887,"stop":1728020646887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728020646887,"stop":1728020646887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728020646887,"stop":1728020646887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728020646888,"stop":1728020647071,"duration":183},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728020646888,"stop":1728020646888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728020646888,"stop":1728020646888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728020647071,"stop":1728020647488,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728020647489,"stop":1728020647490,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728020647490,"stop":1728020647495,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fe82cd671d0>\ndevice = <golioth.golioth.Device object at 0x7fe82cd55710>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a6c2f48210dc5d98","name":"log","source":"a6c2f48210dc5d98.txt","type":"text/plain","size":12598}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728020739926,"stop":1728020740427,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728020740428,"stop":1728020740625,"duration":197},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728020740625,"stop":1728020740626,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728020740626,"stop":1728020740626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 28"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a8a4182a1248"},{"name":"thread","value":"73251-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"719e827c60c82799","status":"passed","time":{"start":1728020613492,"stop":1728020658126,"duration":44634}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":19,"unknown":0,"total":20},"items":[{"uid":"d3f8b57ad75acb63","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/d3f8b57ad75acb63","status":"passed","time":{"start":1728001766321,"stop":1728001772560,"duration":6239}},{"uid":"4b7d02665ab2cfd3","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/4b7d02665ab2cfd3","status":"passed","time":{"start":1727986285232,"stop":1727986292143,"duration":6911}},{"uid":"f5f30eee30c39a68","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/f5f30eee30c39a68","status":"passed","time":{"start":1727986284802,"stop":1727986291363,"duration":6561}},{"uid":"a64a4f4ab9e19466","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/a64a4f4ab9e19466","status":"passed","time":{"start":1727984772708,"stop":1727984779863,"duration":7155}},{"uid":"99585b40f2d3d3a7","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/99585b40f2d3d3a7","status":"passed","time":{"start":1727975468439,"stop":1727975475012,"duration":6573}},{"uid":"180aa7ded431ebb3","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/180aa7ded431ebb3","status":"passed","time":{"start":1727970176029,"stop":1727970183090,"duration":7061}},{"uid":"ed2bcfa4080e3626","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/ed2bcfa4080e3626","status":"passed","time":{"start":1727965233679,"stop":1727965244418,"duration":10739}},{"uid":"405a8914909a914a","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/405a8914909a914a","status":"passed","time":{"start":1727942575553,"stop":1727942582368,"duration":6815}},{"uid":"a3cd9455e3d683f6","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/a3cd9455e3d683f6","status":"passed","time":{"start":1727943281326,"stop":1727943287898,"duration":6572}},{"uid":"c1ccdaf7ef16ad42","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/c1ccdaf7ef16ad42","status":"passed","time":{"start":1727942575553,"stop":1727942582368,"duration":6815}},{"uid":"c945692e02e8206f","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/c945692e02e8206f","status":"passed","time":{"start":1727942345659,"stop":1727942351759,"duration":6100}},{"uid":"2e9ea5c9b7318a0d","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/2e9ea5c9b7318a0d","status":"passed","time":{"start":1727795096892,"stop":1727795103815,"duration":6923}},{"uid":"42027cc9f73f563d","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/42027cc9f73f563d","status":"passed","time":{"start":1727800811767,"stop":1727800818110,"duration":6343}},{"uid":"6a921a60f8399edd","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/6a921a60f8399edd","status":"passed","time":{"start":1727798037501,"stop":1727798044878,"duration":7377}},{"uid":"f53af016fda5f0f","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/f53af016fda5f0f","status":"passed","time":{"start":1727781836150,"stop":1727781842762,"duration":6612}},{"uid":"93829cb77ff20872","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/93829cb77ff20872","status":"passed","time":{"start":1727777138095,"stop":1727777145319,"duration":7224}},{"uid":"82af746102a5f068","reportUrl":"https://golioth.github.io/allure-reports/1504//#testresult/82af746102a5f068","status":"passed","time":{"start":1727769006739,"stop":1727769014044,"duration":7305}},{"uid":"632af170d9223a3b","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/632af170d9223a3b","status":"passed","time":{"start":1727761430171,"stop":1727761437112,"duration":6941}},{"uid":"a94fb0872054160","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/a94fb0872054160","status":"passed","time":{"start":1727374110313,"stop":1727374117001,"duration":6688}}]},"tags":["GitHub Actions 28","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"12f17d99918ef66c.json","parameterValues":["''","'zephyr'"]}