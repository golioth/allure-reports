{"uid":"b63507bbd668c88","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1728023974431,"stop":1728024067628,"duration":93197},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9685e10>\ndevice = <golioth.golioth.Device object at 0xffffa969cf90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728023956757,"stop":1728023956757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728023956758,"stop":1728023956758,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728023956758,"stop":1728023956758,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728023956759,"stop":1728023956759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728023956759,"stop":1728023956760,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728023956760,"stop":1728023956762,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728023956763,"stop":1728023956763,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728023956763,"stop":1728023956763,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728023956764,"stop":1728023957214,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728023957215,"stop":1728023958103,"duration":888},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728023958104,"stop":1728023973520,"duration":15416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728023973521,"stop":1728023974428,"duration":907},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9685e10>\ndevice = <golioth.golioth.Device object at 0xffffa969cf90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"76c05bdf0d92ae39","name":"log","source":"76c05bdf0d92ae39.txt","type":"text/plain","size":18263}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728024067982,"stop":1728024067995,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728024067997,"stop":1728024068419,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728024068421,"stop":1728024068423,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728024068428,"stop":1728024068428,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b142f20e4dd1"},{"name":"thread","value":"432-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":76,"unknown":0,"total":82},"items":[{"uid":"b9e8ba8652538358","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/b9e8ba8652538358","status":"passed","time":{"start":1728003966324,"stop":1728003977852,"duration":11528}},{"uid":"22bc391404f63d52","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/22bc391404f63d52","status":"passed","time":{"start":1727994131069,"stop":1727994142504,"duration":11435}},{"uid":"c4e608149b311668","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/c4e608149b311668","status":"passed","time":{"start":1727994335788,"stop":1727994345555,"duration":9767}},{"uid":"cd52dfacafa1106d","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/cd52dfacafa1106d","status":"passed","time":{"start":1727988553029,"stop":1727988560541,"duration":7512}},{"uid":"7fe317a0abe2fff1","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/7fe317a0abe2fff1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727986272604,"stop":1727986365708,"duration":93104}},{"uid":"34853eeccacecec6","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/34853eeccacecec6","status":"passed","time":{"start":1727980656349,"stop":1727980665912,"duration":9563}},{"uid":"51c0a14d1b05939e","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/51c0a14d1b05939e","status":"passed","time":{"start":1727977390053,"stop":1727977402548,"duration":12495}},{"uid":"f5fe174df97d65b7","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/f5fe174df97d65b7","status":"passed","time":{"start":1727975231580,"stop":1727975242598,"duration":11018}},{"uid":"380f4593bc95cc13","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/380f4593bc95cc13","status":"passed","time":{"start":1727972696924,"stop":1727972708363,"duration":11439}},{"uid":"149888f1a387046","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/149888f1a387046","status":"passed","time":{"start":1727970894695,"stop":1727970905483,"duration":10788}},{"uid":"e85b60883c214f85","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/e85b60883c214f85","status":"passed","time":{"start":1727966507843,"stop":1727966517904,"duration":10061}},{"uid":"694550d2cf802031","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/694550d2cf802031","status":"passed","time":{"start":1727964826915,"stop":1727964833408,"duration":6493}},{"uid":"9d3ee64acc2a721a","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/9d3ee64acc2a721a","status":"passed","time":{"start":1727957931689,"stop":1727957940401,"duration":8712}},{"uid":"c440108d7ddd470c","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/c440108d7ddd470c","status":"passed","time":{"start":1727956850231,"stop":1727956859111,"duration":8880}},{"uid":"1facc19482fed415","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/1facc19482fed415","status":"passed","time":{"start":1727956221731,"stop":1727956239008,"duration":17277}},{"uid":"90a84f109f36ecdf","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/90a84f109f36ecdf","status":"passed","time":{"start":1727952214213,"stop":1727952223209,"duration":8996}},{"uid":"d5e0b02e0c2f7b5f","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/d5e0b02e0c2f7b5f","status":"passed","time":{"start":1727950453947,"stop":1727950463155,"duration":9208}},{"uid":"853c9f4e6306e440","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/853c9f4e6306e440","status":"passed","time":{"start":1727948209923,"stop":1727948217433,"duration":7510}},{"uid":"da94a9f7a6ab7fcf","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/da94a9f7a6ab7fcf","status":"passed","time":{"start":1727948359130,"stop":1727948367537,"duration":8407}},{"uid":"a07a38703b17d362","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/a07a38703b17d362","status":"passed","time":{"start":1727946402859,"stop":1727946412541,"duration":9682}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b63507bbd668c88.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}