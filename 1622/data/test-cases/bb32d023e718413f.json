{"uid":"bb32d023e718413f","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"c2044a44affa44a6054bb6d6ddcfd33a","time":{"start":1728520600929,"stop":1728520613844,"duration":12915},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8f413550>\ndevice = <golioth.golioth.Device object at 0xffff8f488f90>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8f488f90>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728520473645,"stop":1728520473645,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1728520473646,"stop":1728520473646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1728520473647,"stop":1728520473647,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1728520473648,"stop":1728520473648,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728520473649,"stop":1728520473650,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728520473649,"stop":1728520473649,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1728520473650,"stop":1728520473650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1728520473651,"stop":1728520473651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1728520473651,"stop":1728520473651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728520473652,"stop":1728520473652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728520473652,"stop":1728520473652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728520473653,"stop":1728520473653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728520473653,"stop":1728520474063,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1728520474064,"stop":1728520525765,"duration":51701},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728520525767,"stop":1728520526735,"duration":968},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1728520526736,"stop":1728520548037,"duration":21301},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8f413550>\ndevice = <golioth.golioth.Device object at 0xffff8f488f90>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff8f488f90>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"cc0e3fd6b7dc7a59","name":"stdout","source":"cc0e3fd6b7dc7a59.txt","type":"text/plain","size":800}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1728520715036,"stop":1728520715036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728520715038,"stop":1728520715538,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1728520715540,"stop":1728520715541,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728520715543,"stop":1728520715546,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"ae2e4c244479"},{"name":"thread","value":"253-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":3,"skipped":0,"passed":114,"unknown":0,"total":124},"items":[{"uid":"106677706f33fc02","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/106677706f33fc02","status":"passed","time":{"start":1728320010940,"stop":1728320024025,"duration":13085}},{"uid":"c693ca1aad5cf5c1","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/c693ca1aad5cf5c1","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1728491716169,"stop":1728491716169,"duration":0}},{"uid":"8a79f887b89963e0","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/8a79f887b89963e0","status":"passed","time":{"start":1728483542213,"stop":1728483555548,"duration":13335}},{"uid":"b14a5a2054661ac","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/b14a5a2054661ac","status":"passed","time":{"start":1728434262473,"stop":1728434276491,"duration":14018}},{"uid":"4b368834ef142608","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/4b368834ef142608","status":"passed","time":{"start":1728424886137,"stop":1728424899746,"duration":13609}},{"uid":"ca37fa40b24554fc","reportUrl":"https://golioth.github.io/allure-reports/1606//#testresult/ca37fa40b24554fc","status":"passed","time":{"start":1728330477546,"stop":1728330491230,"duration":13684}},{"uid":"8a640ae196c5c38b","reportUrl":"https://golioth.github.io/allure-reports/1604//#testresult/8a640ae196c5c38b","status":"passed","time":{"start":1728327472239,"stop":1728327485243,"duration":13004}},{"uid":"bcbd25e45d94ccf0","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/bcbd25e45d94ccf0","status":"passed","time":{"start":1728339056085,"stop":1728339069043,"duration":12958}},{"uid":"abe02a7e568652d8","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/abe02a7e568652d8","status":"passed","time":{"start":1728399379918,"stop":1728399393368,"duration":13450}},{"uid":"df57f7cbf3620be6","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/df57f7cbf3620be6","status":"passed","time":{"start":1728339056085,"stop":1728339069043,"duration":12958}},{"uid":"2a282b6a7b1f6693","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/2a282b6a7b1f6693","status":"passed","time":{"start":1728347972798,"stop":1728347986406,"duration":13608}},{"uid":"e60f412d2f4c1dd1","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/e60f412d2f4c1dd1","status":"passed","time":{"start":1728339859145,"stop":1728339871924,"duration":12779}},{"uid":"1c6fdf62ab3c4872","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/1c6fdf62ab3c4872","status":"passed","time":{"start":1728339056085,"stop":1728339069043,"duration":12958}},{"uid":"c633a1eb3fc6d735","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/c633a1eb3fc6d735","status":"passed","time":{"start":1728335937656,"stop":1728335951060,"duration":13404}},{"uid":"571e6815b03020e4","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/571e6815b03020e4","status":"passed","time":{"start":1728328278228,"stop":1728328291701,"duration":13473}},{"uid":"76f165c8422e9ddb","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/76f165c8422e9ddb","status":"passed","time":{"start":1728320010940,"stop":1728320024025,"duration":13085}},{"uid":"cc28cf2042d45ae5","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/cc28cf2042d45ae5","status":"passed","time":{"start":1728320010940,"stop":1728320024025,"duration":13085}},{"uid":"a0e7dde6e25416cc","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/a0e7dde6e25416cc","status":"passed","time":{"start":1728316520135,"stop":1728316533794,"duration":13659}},{"uid":"4038e7eb2c19def7","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/4038e7eb2c19def7","status":"passed","time":{"start":1728312603104,"stop":1728312616252,"duration":13148}},{"uid":"153d604154c8c8d9","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/153d604154c8c8d9","status":"passed","time":{"start":1728125611820,"stop":1728125624779,"duration":12959}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"bb32d023e718413f.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}