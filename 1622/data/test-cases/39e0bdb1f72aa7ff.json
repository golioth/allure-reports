{"uid":"39e0bdb1f72aa7ff","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1728522242565,"stop":1728522265943,"duration":23378},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffabeaa710>\ndevice = <golioth.golioth.Device object at 0xffffabec5b10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728522223377,"stop":1728522223377,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728522223378,"stop":1728522223378,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728522223379,"stop":1728522223379,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728522223379,"stop":1728522223379,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728522223380,"stop":1728522223382,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728522223380,"stop":1728522223380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728522223383,"stop":1728522223383,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728522223384,"stop":1728522223828,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728522223384,"stop":1728522223384,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728522223829,"stop":1728522224684,"duration":855},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728522224685,"stop":1728522241648,"duration":16963},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728522241649,"stop":1728522242563,"duration":914},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffabeaa710>\ndevice = <golioth.golioth.Device object at 0xffffabec5b10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"eed2f97abb1427ab","name":"log","source":"eed2f97abb1427ab.txt","type":"text/plain","size":17236}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728522266283,"stop":1728522266307,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728522266309,"stop":1728522266692,"duration":383},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728522266694,"stop":1728522266696,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728522266701,"stop":1728522266701,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"95ce9c48a75f"},{"name":"thread","value":"462-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":114,"unknown":0,"total":124},"items":[{"uid":"77bdd2ff6473d8c5","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/77bdd2ff6473d8c5","status":"passed","time":{"start":1728495325459,"stop":1728495338895,"duration":13436}},{"uid":"e281ee1b0c30f7bf","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/e281ee1b0c30f7bf","status":"passed","time":{"start":1728494338492,"stop":1728494355952,"duration":17460}},{"uid":"f853418c35a87914","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/f853418c35a87914","status":"passed","time":{"start":1728485232743,"stop":1728485249253,"duration":16510}},{"uid":"e03ba21bbe24ff63","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/e03ba21bbe24ff63","status":"passed","time":{"start":1728435962687,"stop":1728435977285,"duration":14598}},{"uid":"62ee1fab6456973c","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/62ee1fab6456973c","status":"passed","time":{"start":1728426674583,"stop":1728426689368,"duration":14785}},{"uid":"a473e98634d39095","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/a473e98634d39095","status":"passed","time":{"start":1728342984216,"stop":1728342996493,"duration":12277}},{"uid":"5a01cd467d53dbc2","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/5a01cd467d53dbc2","status":"passed","time":{"start":1728401334897,"stop":1728401349400,"duration":14503}},{"uid":"588ade43c65ca09d","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/588ade43c65ca09d","status":"passed","time":{"start":1728342984216,"stop":1728342996493,"duration":12277}},{"uid":"ef9c165f6606d6a","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/ef9c165f6606d6a","status":"passed","time":{"start":1728349439481,"stop":1728349454892,"duration":15411}},{"uid":"98738707b948eef0","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/98738707b948eef0","status":"passed","time":{"start":1728344619174,"stop":1728344635519,"duration":16345}},{"uid":"5424f3d26533a0c4","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/5424f3d26533a0c4","status":"passed","time":{"start":1728342984216,"stop":1728342996493,"duration":12277}},{"uid":"44576417913a85b","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/44576417913a85b","status":"passed","time":{"start":1728337782531,"stop":1728337797174,"duration":14643}},{"uid":"c05ce674cc163a8b","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/c05ce674cc163a8b","status":"passed","time":{"start":1728328481233,"stop":1728328496676,"duration":15443}},{"uid":"b4deef66e4545816","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/b4deef66e4545816","status":"passed","time":{"start":1728327796110,"stop":1728327808516,"duration":12406}},{"uid":"23b09fbc268f120b","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/23b09fbc268f120b","status":"passed","time":{"start":1728321034826,"stop":1728321051278,"duration":16452}},{"uid":"7713296cc8e674c2","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/7713296cc8e674c2","status":"passed","time":{"start":1728318048952,"stop":1728318064650,"duration":15698}},{"uid":"5d0b67f3f897bd50","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/5d0b67f3f897bd50","status":"passed","time":{"start":1728314741758,"stop":1728314757401,"duration":15643}},{"uid":"faba3055d7c7bda7","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/faba3055d7c7bda7","status":"passed","time":{"start":1728308376765,"stop":1728308393072,"duration":16307}},{"uid":"23bdb4db1ee62b33","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/23bdb4db1ee62b33","status":"passed","time":{"start":1728308129924,"stop":1728308147209,"duration":17285}},{"uid":"cc2489dfc31e4da5","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/cc2489dfc31e4da5","status":"passed","time":{"start":1728262972486,"stop":1728262988949,"duration":16463}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"39e0bdb1f72aa7ff.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}