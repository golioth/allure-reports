{"uid":"c4bc8983a2bb75f9","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1728523574959,"stop":1728523669579,"duration":94620},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff974edc90>\nproject = <golioth.golioth.Project object at 0xffff97691a50>\ndevice = <golioth.golioth.Device object at 0xffff97501210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728523545490,"stop":1728523545490,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728523545490,"stop":1728523545490,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728523545491,"stop":1728523545491,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728523545491,"stop":1728523545492,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728523545492,"stop":1728523545492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728523545492,"stop":1728523545493,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728523545493,"stop":1728523545493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728523545493,"stop":1728523545496,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728523545496,"stop":1728523545931,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728523545932,"stop":1728523546865,"duration":933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728523546865,"stop":1728523573847,"duration":26982},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728523573848,"stop":1728523574954,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff974edc90>\nproject = <golioth.golioth.Project object at 0xffff97691a50>\ndevice = <golioth.golioth.Device object at 0xffff97501210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"450874a9032bc919","name":"log","source":"450874a9032bc919.txt","type":"text/plain","size":20578}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728523669820,"stop":1728523669853,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728523669855,"stop":1728523670257,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728523670259,"stop":1728523670261,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728523670263,"stop":1728523670263,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"920b51901339"},{"name":"thread","value":"748-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":33,"skipped":0,"passed":85,"unknown":0,"total":118},"items":[{"uid":"24713dc63981164d","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/24713dc63981164d","status":"passed","time":{"start":1728321941663,"stop":1728321954737,"duration":13074}},{"uid":"6285c34cdeaeb361","reportUrl":"https://golioth.github.io/allure-reports/1621//#testresult/6285c34cdeaeb361","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728494757028,"stop":1728494776689,"duration":19661}},{"uid":"be7580223298636e","reportUrl":"https://golioth.github.io/allure-reports/1619//#testresult/be7580223298636e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728486379117,"stop":1728486473247,"duration":94130}},{"uid":"593787dc18b59f14","reportUrl":"https://golioth.github.io/allure-reports/1618//#testresult/593787dc18b59f14","status":"passed","time":{"start":1728436954310,"stop":1728436966648,"duration":12338}},{"uid":"10d0012444ecf770","reportUrl":"https://golioth.github.io/allure-reports/1617//#testresult/10d0012444ecf770","status":"passed","time":{"start":1728428224816,"stop":1728428246845,"duration":22029}},{"uid":"b5ec1474a49f50a0","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/b5ec1474a49f50a0","status":"passed","time":{"start":1728402308601,"stop":1728402332439,"duration":23838}},{"uid":"bab4a78a18cc9141","reportUrl":"https://golioth.github.io/allure-reports/1616//#testresult/bab4a78a18cc9141","status":"passed","time":{"start":1728402034753,"stop":1728402046568,"duration":11815}},{"uid":"bd51e33f2eae7782","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/bd51e33f2eae7782","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728398968331,"stop":1728398968331,"duration":0}},{"uid":"578a470de632bd7","reportUrl":"https://golioth.github.io/allure-reports/1614//#testresult/578a470de632bd7","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00'","time":{"start":1728349903623,"stop":1728349903623,"duration":0}},{"uid":"cd56b80ca1bafabc","reportUrl":"https://golioth.github.io/allure-reports/1613//#testresult/cd56b80ca1bafabc","status":"passed","time":{"start":1728346321728,"stop":1728346350357,"duration":28629}},{"uid":"50246c54187a3139","reportUrl":"https://golioth.github.io/allure-reports/1611//#testresult/50246c54187a3139","status":"passed","time":{"start":1728345239532,"stop":1728345264668,"duration":25136}},{"uid":"e354b82c4bf6d579","reportUrl":"https://golioth.github.io/allure-reports/1609//#testresult/e354b82c4bf6d579","status":"passed","time":{"start":1728338130257,"stop":1728338148114,"duration":17857}},{"uid":"c601d094e7e4a345","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/c601d094e7e4a345","status":"passed","time":{"start":1728319899804,"stop":1728319916063,"duration":16259}},{"uid":"29fb3d9e99dd1af0","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/29fb3d9e99dd1af0","status":"passed","time":{"start":1728321941663,"stop":1728321954737,"duration":13074}},{"uid":"b08ee76bc1110704","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/b08ee76bc1110704","status":"passed","time":{"start":1728321941663,"stop":1728321954737,"duration":13074}},{"uid":"897fefbbde5b7f4f","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/897fefbbde5b7f4f","status":"passed","time":{"start":1728319899804,"stop":1728319916063,"duration":16259}},{"uid":"eaf74c52d1e25b4c","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/eaf74c52d1e25b4c","status":"passed","time":{"start":1728315331843,"stop":1728315343634,"duration":11791}},{"uid":"1f9111a05a494cda","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/1f9111a05a494cda","status":"passed","time":{"start":1728307274899,"stop":1728307299601,"duration":24702}},{"uid":"3e29ee509966fee1","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/3e29ee509966fee1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728305926717,"stop":1728306021182,"duration":94465}},{"uid":"528312740fbc828e","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/528312740fbc828e","status":"passed","time":{"start":1728263875160,"stop":1728263893234,"duration":18074}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c4bc8983a2bb75f9.json","parameterValues":["'nrf9160dk'","'zephyr'"]}