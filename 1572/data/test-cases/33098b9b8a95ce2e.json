{"uid":"33098b9b8a95ce2e","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"2c3f5e142a6b2bf2bea42e08dd0a3f69","time":{"start":1728021121643,"stop":1728021214199,"duration":92556},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fd374d13250>\ndevice = <golioth.golioth.Device object at 0x7fd374d09610>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728021120673,"stop":1728021120673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728021120673,"stop":1728021120673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728021120673,"stop":1728021120673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728021120674,"stop":1728021120674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728021120674,"stop":1728021120674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728021120674,"stop":1728021120674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728021120674,"stop":1728021120674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728021120675,"stop":1728021120675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728021120675,"stop":1728021120943,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728021120943,"stop":1728021121541,"duration":598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728021121541,"stop":1728021121542,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728021121542,"stop":1728021121642,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fd374d13250>\ndevice = <golioth.golioth.Device object at 0x7fd374d09610>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"efbc7ca65956b0b3","name":"log","source":"efbc7ca65956b0b3.txt","type":"text/plain","size":14780}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728021214357,"stop":1728021214867,"duration":510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728021214868,"stop":1728021215196,"duration":328},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728021215197,"stop":1728021215197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728021215199,"stop":1728021215199,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 19"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8c21f838a51d"},{"name":"thread","value":"61370-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c2748bd42d6d0231","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728021078981,"stop":1728021171333,"duration":92352}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":19,"unknown":0,"total":21},"items":[{"uid":"b5e554b4878e6120","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/b5e554b4878e6120","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728020522417,"stop":1728020614892,"duration":92475}},{"uid":"6a9c5e069356f2c","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/6a9c5e069356f2c","status":"passed","time":{"start":1728001659402,"stop":1728001665213,"duration":5811}},{"uid":"f938c893ceedbd50","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/f938c893ceedbd50","status":"passed","time":{"start":1727986184244,"stop":1727986190296,"duration":6052}},{"uid":"1f7f6324f33454d9","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/1f7f6324f33454d9","status":"passed","time":{"start":1727986181591,"stop":1727986187746,"duration":6155}},{"uid":"e2e268871fa04561","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/e2e268871fa04561","status":"passed","time":{"start":1727984671693,"stop":1727984677986,"duration":6293}},{"uid":"19b3761e8e9fd591","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/19b3761e8e9fd591","status":"passed","time":{"start":1727975366652,"stop":1727975372246,"duration":5594}},{"uid":"ba2011065f8b2bf0","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/ba2011065f8b2bf0","status":"passed","time":{"start":1727970074494,"stop":1727970080367,"duration":5873}},{"uid":"1f5210a23ffcd615","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/1f5210a23ffcd615","status":"passed","time":{"start":1727965128343,"stop":1727965133803,"duration":5460}},{"uid":"b60d4ff1092d9029","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b60d4ff1092d9029","status":"passed","time":{"start":1727942475480,"stop":1727942481051,"duration":5571}},{"uid":"597d22f1d2399dc9","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/597d22f1d2399dc9","status":"passed","time":{"start":1727943175094,"stop":1727943180794,"duration":5700}},{"uid":"dcff170eb6b221b5","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/dcff170eb6b221b5","status":"passed","time":{"start":1727942475480,"stop":1727942481051,"duration":5571}},{"uid":"e5a8bc90cc88ac1a","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/e5a8bc90cc88ac1a","status":"passed","time":{"start":1727942245589,"stop":1727942251133,"duration":5544}},{"uid":"ea646dd1b07d52c4","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/ea646dd1b07d52c4","status":"passed","time":{"start":1727794995448,"stop":1727795001344,"duration":5896}},{"uid":"90589fde6fe34035","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/90589fde6fe34035","status":"passed","time":{"start":1727800704062,"stop":1727800709667,"duration":5605}},{"uid":"46a2730b6b3369a8","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/46a2730b6b3369a8","status":"passed","time":{"start":1727797935664,"stop":1727797941490,"duration":5826}},{"uid":"aaec913a79ef0240","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/aaec913a79ef0240","status":"passed","time":{"start":1727781735495,"stop":1727781741099,"duration":5604}},{"uid":"16b96e2d71e74e19","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/16b96e2d71e74e19","status":"passed","time":{"start":1727777032660,"stop":1727777040450,"duration":7790}},{"uid":"f5442cdc3ae7681d","reportUrl":"https://golioth.github.io/allure-reports/1504//#testresult/f5442cdc3ae7681d","status":"passed","time":{"start":1727768901740,"stop":1727768907663,"duration":5923}},{"uid":"76ae29999305857b","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/76ae29999305857b","status":"passed","time":{"start":1727761333165,"stop":1727761339103,"duration":5938}},{"uid":"669fd4870cedad71","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/669fd4870cedad71","status":"passed","time":{"start":1727374005375,"stop":1727374011922,"duration":6547}}]},"tags":["anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr","GitHub Actions 19"]},"source":"33098b9b8a95ce2e.json","parameterValues":["''","'zephyr'"]}