{"uid":"770629ef31793055","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1728125583671,"stop":1728125677956,"duration":94285},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaef6b4d0>\nproject = <golioth.golioth.Project object at 0xffffb08bc8d0>\ndevice = <golioth.golioth.Device object at 0xffffaef8a010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728125566900,"stop":1728125566900,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728125566900,"stop":1728125566900,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728125566901,"stop":1728125566901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728125566901,"stop":1728125566901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728125566902,"stop":1728125566902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728125566902,"stop":1728125566903,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728125566904,"stop":1728125566904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728125566905,"stop":1728125566907,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728125566907,"stop":1728125567357,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728125567357,"stop":1728125568294,"duration":937},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728125568294,"stop":1728125582729,"duration":14435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728125582729,"stop":1728125583668,"duration":939},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaef6b4d0>\nproject = <golioth.golioth.Project object at 0xffffb08bc8d0>\ndevice = <golioth.golioth.Device object at 0xffffaef8a010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e8c805ad7b403c2a","name":"log","source":"e8c805ad7b403c2a.txt","type":"text/plain","size":20680}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728125678216,"stop":1728125678243,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728125678245,"stop":1728125678618,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728125678621,"stop":1728125678623,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728125678625,"stop":1728125678625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"0aa307e8ec8e"},{"name":"thread","value":"461-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"719e6ab0eb14b89","status":"passed","time":{"start":1728070774699,"stop":1728070785621,"duration":10922}},{"uid":"7afad8c3a209e545","status":"passed","time":{"start":1728027868041,"stop":1728027882524,"duration":14483}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":88,"unknown":0,"total":98},"items":[{"uid":"689f693421cfd621","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/689f693421cfd621","status":"passed","time":{"start":1728121799890,"stop":1728121812652,"duration":12762}},{"uid":"145679c8877726cc","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/145679c8877726cc","status":"passed","time":{"start":1728090131301,"stop":1728090142391,"duration":11090}},{"uid":"39ceba72a9adef79","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/39ceba72a9adef79","status":"passed","time":{"start":1728082474442,"stop":1728082487667,"duration":13225}},{"uid":"31f15830bd74850d","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/31f15830bd74850d","status":"passed","time":{"start":1728075333417,"stop":1728075347699,"duration":14282}},{"uid":"9ff8f703cec02a84","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/9ff8f703cec02a84","status":"passed","time":{"start":1728072635467,"stop":1728072648286,"duration":12819}},{"uid":"b96134230ea97d9a","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/b96134230ea97d9a","status":"passed","time":{"start":1728069531391,"stop":1728069542938,"duration":11547}},{"uid":"8252b382a640cce3","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/8252b382a640cce3","status":"passed","time":{"start":1728070774699,"stop":1728070785621,"duration":10922}},{"uid":"52fb40364557c5c2","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/52fb40364557c5c2","status":"passed","time":{"start":1728070006747,"stop":1728070020277,"duration":13530}},{"uid":"c09665a917d5f7be","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/c09665a917d5f7be","status":"passed","time":{"start":1728070470050,"stop":1728070483581,"duration":13531}},{"uid":"7c0c55c3621ef93","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/7c0c55c3621ef93","status":"passed","time":{"start":1728058607665,"stop":1728058619678,"duration":12013}},{"uid":"e5114fe1cfddf334","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/e5114fe1cfddf334","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728057983311,"stop":1728058007639,"duration":24328}},{"uid":"607ac7819163cef3","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/607ac7819163cef3","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1728050663714,"stop":1728050696006,"duration":32292}},{"uid":"2ecc713d904f84c5","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/2ecc713d904f84c5","status":"passed","time":{"start":1728036580565,"stop":1728036590020,"duration":9455}},{"uid":"8649f78f63b4a02a","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/8649f78f63b4a02a","status":"passed","time":{"start":1728030714476,"stop":1728030725544,"duration":11068}},{"uid":"c705a0426930f980","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/c705a0426930f980","status":"passed","time":{"start":1728027868041,"stop":1728027882524,"duration":14483}},{"uid":"3510f6c53c3ac0e","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/3510f6c53c3ac0e","status":"passed","time":{"start":1728024142567,"stop":1728024167153,"duration":24586}},{"uid":"9b74d8e435fe9dd7","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/9b74d8e435fe9dd7","status":"passed","time":{"start":1728004033927,"stop":1728004044529,"duration":10602}},{"uid":"3135f0acb02d0b8a","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/3135f0acb02d0b8a","status":"passed","time":{"start":1727994201201,"stop":1727994211974,"duration":10773}},{"uid":"dccb96fe45c8ce11","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/dccb96fe45c8ce11","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727994408056,"stop":1727994502884,"duration":94828}},{"uid":"4dc50bd586b36a15","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/4dc50bd586b36a15","status":"passed","time":{"start":1727988621638,"stop":1727988634068,"duration":12430}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"770629ef31793055.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}