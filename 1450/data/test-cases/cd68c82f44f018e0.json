{"uid":"cd68c82f44f018e0","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1727394693311,"stop":1727394719832,"duration":26521},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf46d990>\ndevice = <golioth.golioth.Device object at 0xffffaf488910>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727394663069,"stop":1727394663069,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727394663070,"stop":1727394663070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727394663070,"stop":1727394663070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727394663071,"stop":1727394663071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727394663071,"stop":1727394663071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727394663072,"stop":1727394663074,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727394663075,"stop":1727394663075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727394663075,"stop":1727394663075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727394663076,"stop":1727394663531,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727394663532,"stop":1727394664664,"duration":1132},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727394664665,"stop":1727394692240,"duration":27575},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727394692241,"stop":1727394693308,"duration":1067},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf46d990>\ndevice = <golioth.golioth.Device object at 0xffffaf488910>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"be6d0a2e8809ed84","name":"log","source":"be6d0a2e8809ed84.txt","type":"text/plain","size":24744}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727394720011,"stop":1727394720252,"duration":241},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727394720254,"stop":1727394720819,"duration":565},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727394720821,"stop":1727394720824,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727394720829,"stop":1727394720829,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"829b685f5a67"},{"name":"thread","value":"408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":6,"skipped":0,"passed":12,"unknown":0,"total":19},"items":[{"uid":"f79ee21a49e17dce","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/f79ee21a49e17dce","status":"passed","time":{"start":1727393389812,"stop":1727393414961,"duration":25149}},{"uid":"e73b226c61f78b72","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/e73b226c61f78b72","status":"passed","time":{"start":1727391888074,"stop":1727391917034,"duration":28960}},{"uid":"7519f3eedc5dc40a","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/7519f3eedc5dc40a","status":"passed","time":{"start":1727386154512,"stop":1727386181248,"duration":26736}},{"uid":"9497dc8e0b8bd08f","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/9497dc8e0b8bd08f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727383749526,"stop":1727383842816,"duration":93290}},{"uid":"54f2781f5e590f4","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/54f2781f5e590f4","status":"passed","time":{"start":1727380856041,"stop":1727380883942,"duration":27901}},{"uid":"5a85d6617da8a38a","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/5a85d6617da8a38a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727374844482,"stop":1727374937818,"duration":93336}},{"uid":"a1cf1f5006b9265c","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/a1cf1f5006b9265c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727373221325,"stop":1727373314403,"duration":93078}},{"uid":"879b26a0e29a9646","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/879b26a0e29a9646","status":"passed","time":{"start":1727370590528,"stop":1727370617381,"duration":26853}},{"uid":"87a3b2e53e5e6e44","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/87a3b2e53e5e6e44","status":"passed","time":{"start":1727368077557,"stop":1727368104570,"duration":27013}},{"uid":"5d191de8d285c15f","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/5d191de8d285c15f","status":"passed","time":{"start":1727361618309,"stop":1727361645541,"duration":27232}},{"uid":"fbb14cddd3255eb7","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/fbb14cddd3255eb7","status":"passed","time":{"start":1727315927199,"stop":1727315957521,"duration":30322}},{"uid":"f3fd3c0c6759deff","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/f3fd3c0c6759deff","status":"passed","time":{"start":1727312990040,"stop":1727313020029,"duration":29989}},{"uid":"836e9656e27bab59","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/836e9656e27bab59","status":"passed","time":{"start":1727306791607,"stop":1727306816982,"duration":25375}},{"uid":"74b0e0805478d3c6","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/74b0e0805478d3c6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727302183421,"stop":1727302276701,"duration":93280}},{"uid":"944b0d59033c7755","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/944b0d59033c7755","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727295829883,"stop":1727295923790,"duration":93907}},{"uid":"d9a93e28f6730ce8","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/d9a93e28f6730ce8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727289676930,"stop":1727289710873,"duration":33943}},{"uid":"fa840c2adc4a1b29","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/fa840c2adc4a1b29","status":"passed","time":{"start":1727285636365,"stop":1727285658732,"duration":22367}},{"uid":"3cae2c9a8306c018","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/3cae2c9a8306c018","status":"passed","time":{"start":1727283500617,"stop":1727283522966,"duration":22349}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"cd68c82f44f018e0.json","parameterValues":["'nrf9160dk'","'zephyr'"]}