{"uid":"1c6715c1b20aa314","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1727395333415,"stop":1727395356040,"duration":22625},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8ca6f810>\ndevice = <golioth.golioth.Device object at 0xffff8ca8e4d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727395315327,"stop":1727395315327,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727395315328,"stop":1727395315328,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727395315328,"stop":1727395315328,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727395315329,"stop":1727395315329,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727395315329,"stop":1727395315330,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727395315330,"stop":1727395315333,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727395315334,"stop":1727395315334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727395315334,"stop":1727395315334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727395315335,"stop":1727395315761,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727395315762,"stop":1727395316685,"duration":923},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727395316686,"stop":1727395332517,"duration":15831},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727395332517,"stop":1727395333412,"duration":895},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8ca6f810>\ndevice = <golioth.golioth.Device object at 0xffff8ca8e4d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"dd1177b45e2e2572","name":"log","source":"dd1177b45e2e2572.txt","type":"text/plain","size":12524}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727395356306,"stop":1727395356352,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727395356354,"stop":1727395356760,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727395356762,"stop":1727395356764,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727395356769,"stop":1727395356769,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cba419833f6d"},{"name":"thread","value":"536-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"50d8d7f0dc3b7e07","status":"passed","time":{"start":1727395287049,"stop":1727395310721,"duration":23672}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":12,"unknown":0,"total":21},"items":[{"uid":"a1e2a154fcd35bae","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/a1e2a154fcd35bae","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727391428996,"stop":1727391451527,"duration":22531}},{"uid":"b1d581f1d4c8acd8","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/b1d581f1d4c8acd8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727392295927,"stop":1727392318460,"duration":22533}},{"uid":"ba785fe4cd1c1b62","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/ba785fe4cd1c1b62","status":"passed","time":{"start":1727386172988,"stop":1727386197575,"duration":24587}},{"uid":"dcc2227b1a018045","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/dcc2227b1a018045","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727383679511,"stop":1727383679511,"duration":0}},{"uid":"28ecca8f4883fa90","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/28ecca8f4883fa90","status":"passed","time":{"start":1727380832679,"stop":1727380858234,"duration":25555}},{"uid":"37f018217a1e7f7b","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/37f018217a1e7f7b","status":"passed","time":{"start":1727378957638,"stop":1727378980197,"duration":22559}},{"uid":"d7e9c7bb9c5e0135","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/d7e9c7bb9c5e0135","status":"passed","time":{"start":1727373430711,"stop":1727373452467,"duration":21756}},{"uid":"1bde1b7bc20e9a37","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/1bde1b7bc20e9a37","status":"passed","time":{"start":1727370204153,"stop":1727370224668,"duration":20515}},{"uid":"4204e24e08023e61","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/4204e24e08023e61","status":"passed","time":{"start":1727366706606,"stop":1727366727902,"duration":21296}},{"uid":"b0d2a66b7d340960","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/b0d2a66b7d340960","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727367412266,"stop":1727367434845,"duration":22579}},{"uid":"f47b27f76bcfd431","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/f47b27f76bcfd431","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727361361107,"stop":1727361383733,"duration":22626}},{"uid":"29753529a1ce61bf","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/29753529a1ce61bf","status":"passed","time":{"start":1727315551733,"stop":1727315575242,"duration":23509}},{"uid":"b8b705e9caa0fb41","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/b8b705e9caa0fb41","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727312955736,"stop":1727312978364,"duration":22628}},{"uid":"2db135072e59fafc","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/2db135072e59fafc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727309488160,"stop":1727309510792,"duration":22632}},{"uid":"22a03df0cc4114bf","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/22a03df0cc4114bf","status":"passed","time":{"start":1727306411345,"stop":1727306433950,"duration":22605}},{"uid":"5687c4d2970a46a2","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/5687c4d2970a46a2","status":"passed","time":{"start":1727301645809,"stop":1727301669282,"duration":23473}},{"uid":"60ea0399306cf635","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/60ea0399306cf635","status":"passed","time":{"start":1727295616440,"stop":1727295637909,"duration":21469}},{"uid":"c661b61987a3e1b7","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/c661b61987a3e1b7","status":"passed","time":{"start":1727289251121,"stop":1727289270438,"duration":19317}},{"uid":"9d39e48f983272e1","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/9d39e48f983272e1","status":"passed","time":{"start":1727285814621,"stop":1727285837432,"duration":22811}},{"uid":"711f242e98d5d10d","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/711f242e98d5d10d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727283102324,"stop":1727283124890,"duration":22566}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1c6715c1b20aa314.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}