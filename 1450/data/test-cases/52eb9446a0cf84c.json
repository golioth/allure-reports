{"uid":"52eb9446a0cf84c","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1727394633997,"stop":1727394658613,"duration":24616},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 2 == 0\n +  where 2 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70090>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70110>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8f19e90>\ndevice = <golioth.golioth.Device object at 0xffffa9003110>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [LogEntry <[2024-09-26 23:50:50.471578+00:00] <INF> \"Counter hexdump\">, LogEntry <[2024-09-26 23:50:50.472942+00:00] <...F> \"Entering CoAP I/O loop\">, LogEntry <[2024-09-26 23:50:50.952923+00:00] <INF> \"Golioth CoAP client connected\">, ...]\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 2 == 0\nE        +  where 2 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70090>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70110>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727394603964,"stop":1727394603965,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727394603965,"stop":1727394603965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727394603966,"stop":1727394603966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727394603966,"stop":1727394603966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727394603967,"stop":1727394603969,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727394603967,"stop":1727394603967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727394603970,"stop":1727394603970,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727394603971,"stop":1727394603971,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727394603971,"stop":1727394604548,"duration":577},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727394604549,"stop":1727394605955,"duration":1406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727394605956,"stop":1727394632918,"duration":26962},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727394632918,"stop":1727394633994,"duration":1076},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 2 == 0\n +  where 2 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70090>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70110>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa8f19e90>\ndevice = <golioth.golioth.Device object at 0xffffa9003110>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [LogEntry <[2024-09-26 23:50:50.471578+00:00] <INF> \"Counter hexdump\">, LogEntry <[2024-09-26 23:50:50.472942+00:00] <...F> \"Entering CoAP I/O loop\">, LogEntry <[2024-09-26 23:50:50.952923+00:00] <INF> \"Golioth CoAP client connected\">, ...]\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 2 == 0\nE        +  where 2 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70090>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa8d70110>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"13a87d8f8b6fd75b","name":"log","source":"13a87d8f8b6fd75b.txt","type":"text/plain","size":20759}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727394658805,"stop":1727394659152,"duration":347},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727394659154,"stop":1727394659741,"duration":587},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727394659743,"stop":1727394659745,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727394659751,"stop":1727394659751,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"829b685f5a67"},{"name":"thread","value":"361-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":14,"unknown":0,"total":19},"items":[{"uid":"662f316d10e92521","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/662f316d10e92521","status":"passed","time":{"start":1727392635647,"stop":1727392655061,"duration":19414}},{"uid":"49beeb71c2bb34f4","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/49beeb71c2bb34f4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727391757412,"stop":1727391850224,"duration":92812}},{"uid":"51f53bdd45784ae8","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/51f53bdd45784ae8","status":"passed","time":{"start":1727386097736,"stop":1727386120068,"duration":22332}},{"uid":"73a5f399eaa9e29b","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/73a5f399eaa9e29b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727383622000,"stop":1727383714858,"duration":92858}},{"uid":"1dde43b49754459","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/1dde43b49754459","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727380729017,"stop":1727380821931,"duration":92914}},{"uid":"488a54b0652ba2ab","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/488a54b0652ba2ab","status":"passed","time":{"start":1727374787781,"stop":1727374810081,"duration":22300}},{"uid":"113c5ff21c95e2c8","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/113c5ff21c95e2c8","status":"passed","time":{"start":1727373157765,"stop":1727373188440,"duration":30675}},{"uid":"8e7fce72432f8d96","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/8e7fce72432f8d96","status":"passed","time":{"start":1727370534692,"stop":1727370556157,"duration":21465}},{"uid":"598611a5347df54f","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/598611a5347df54f","status":"passed","time":{"start":1727368021498,"stop":1727368043590,"duration":22092}},{"uid":"3f5c5ee9877bb7fc","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/3f5c5ee9877bb7fc","status":"passed","time":{"start":1727361561662,"stop":1727361583836,"duration":22174}},{"uid":"2910afdc1095a5f8","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/2910afdc1095a5f8","status":"passed","time":{"start":1727315876027,"stop":1727315894609,"duration":18582}},{"uid":"13f70fc8b21da4bc","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/13f70fc8b21da4bc","status":"passed","time":{"start":1727312933620,"stop":1727312955978,"duration":22358}},{"uid":"af295f3ee9e1079c","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/af295f3ee9e1079c","status":"passed","time":{"start":1727306740262,"stop":1727306759089,"duration":18827}},{"uid":"44de04f980d789b2","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/44de04f980d789b2","status":"passed","time":{"start":1727302125221,"stop":1727302149125,"duration":23904}},{"uid":"95e5f337a5e571f2","reportUrl":"https://golioth.github.io/allure-reports/1421//#testresult/95e5f337a5e571f2","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727295785472,"stop":1727295785472,"duration":0}},{"uid":"77c270c699179cc1","reportUrl":"https://golioth.github.io/allure-reports/1420//#testresult/77c270c699179cc1","status":"passed","time":{"start":1727289624998,"stop":1727289644416,"duration":19418}},{"uid":"24fde598c97c2641","reportUrl":"https://golioth.github.io/allure-reports/1419//#testresult/24fde598c97c2641","status":"passed","time":{"start":1727285585513,"stop":1727285602237,"duration":16724}},{"uid":"8f7bb982fd9ead77","reportUrl":"https://golioth.github.io/allure-reports/1417//#testresult/8f7bb982fd9ead77","status":"passed","time":{"start":1727283448965,"stop":1727283466288,"duration":17323}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"52eb9446a0cf84c.json","parameterValues":["'nrf9160dk'","'zephyr'"]}