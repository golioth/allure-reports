{"uid":"bf969a5f876cc8b8","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1727454984234,"stop":1727454997208,"duration":12974},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff82c741d0>\ndevice = <golioth.golioth.Device object at 0xffff82bf1b90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff82bf1b90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727454937794,"stop":1727454937794,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727454937795,"stop":1727454937795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727454937796,"stop":1727454937797,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727454937798,"stop":1727454937798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727454937799,"stop":1727454937799,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727454937800,"stop":1727454937800,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727454937801,"stop":1727454937801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727454937802,"stop":1727454937802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727454937803,"stop":1727454937803,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727454937804,"stop":1727454937804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727454937805,"stop":1727454937805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727454937806,"stop":1727454938231,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727454937806,"stop":1727454937806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727454938232,"stop":1727454963691,"duration":25459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727454963692,"stop":1727454964800,"duration":1108},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727454964801,"stop":1727454978680,"duration":13879},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff82c741d0>\ndevice = <golioth.golioth.Device object at 0xffff82bf1b90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff82bf1b90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"d0e1c2d3ca96bb0a","name":"stdout","source":"d0e1c2d3ca96bb0a.txt","type":"text/plain","size":3265}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727455129107,"stop":1727455129107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727455129111,"stop":1727455129620,"duration":509},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727455129622,"stop":1727455129630,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727455129632,"stop":1727455129634,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"341f5b745aba"},{"name":"thread","value":"258-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3cab8c3edcc2a91d","status":"passed","time":{"start":1727394340311,"stop":1727394353354,"duration":13043}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":15,"unknown":0,"total":25},"items":[{"uid":"6baeac08f99e98","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6baeac08f99e98","status":"passed","time":{"start":1727387867480,"stop":1727387880849,"duration":13369}},{"uid":"e6598508e8c96665","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/e6598508e8c96665","status":"passed","time":{"start":1727363054880,"stop":1727363068045,"duration":13165}},{"uid":"e7c66ed043d634a1","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/e7c66ed043d634a1","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727397370461,"stop":1727397383224,"duration":12763}},{"uid":"525fff2194a9643a","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/525fff2194a9643a","status":"passed","time":{"start":1727394340311,"stop":1727394353354,"duration":13043}},{"uid":"f0d56533c06250e","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/f0d56533c06250e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727387738468,"stop":1727387751272,"duration":12804}},{"uid":"12d4a5d9393e702a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/12d4a5d9393e702a","status":"passed","time":{"start":1727387867480,"stop":1727387880849,"duration":13369}},{"uid":"50e3d43a2e751e88","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/50e3d43a2e751e88","status":"passed","time":{"start":1727384211128,"stop":1727384223835,"duration":12707}},{"uid":"3987820b742306a0","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/3987820b742306a0","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727381481784,"stop":1727381494433,"duration":12649}},{"uid":"66fa72fe8cc5e079","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/66fa72fe8cc5e079","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727378780868,"stop":1727378794977,"duration":14109}},{"uid":"71c98584d58e6eeb","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/71c98584d58e6eeb","status":"passed","time":{"start":1727374088037,"stop":1727374101013,"duration":12976}},{"uid":"2c14e69abc0caa43","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/2c14e69abc0caa43","status":"passed","time":{"start":1727370910364,"stop":1727370923321,"duration":12957}},{"uid":"3b0955187a236ac2","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/3b0955187a236ac2","status":"passed","time":{"start":1727364089651,"stop":1727364102650,"duration":12999}},{"uid":"dc3b1edfc1dbac7","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/dc3b1edfc1dbac7","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727362145677,"stop":1727362158908,"duration":13231}},{"uid":"ac23e2ce9529094","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/ac23e2ce9529094","status":"passed","time":{"start":1727363054880,"stop":1727363068045,"duration":13165}},{"uid":"2f1c50e0552fc055","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/2f1c50e0552fc055","status":"passed","time":{"start":1727359427598,"stop":1727359441031,"duration":13433}},{"uid":"fcb4a70d66583a46","reportUrl":"https://golioth.github.io/allure-reports/1432//#testresult/fcb4a70d66583a46","status":"passed","time":{"start":1727313570352,"stop":1727313583024,"duration":12672}},{"uid":"2f76c3b5ff5ced22","reportUrl":"https://golioth.github.io/allure-reports/1429//#testresult/2f76c3b5ff5ced22","status":"passed","time":{"start":1727310967560,"stop":1727310980724,"duration":13164}},{"uid":"6072eaf90fe89615","reportUrl":"https://golioth.github.io/allure-reports/1428//#testresult/6072eaf90fe89615","status":"passed","time":{"start":1727307134741,"stop":1727307147995,"duration":13254}},{"uid":"65e7fa91a3f86b71","reportUrl":"https://golioth.github.io/allure-reports/1424//#testresult/65e7fa91a3f86b71","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727304756251,"stop":1727304769158,"duration":12907}},{"uid":"6310b9dbc433c8eb","reportUrl":"https://golioth.github.io/allure-reports/1422//#testresult/6310b9dbc433c8eb","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727299890511,"stop":1727299904344,"duration":13833}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","jons_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')"]},"source":"bf969a5f876cc8b8.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}