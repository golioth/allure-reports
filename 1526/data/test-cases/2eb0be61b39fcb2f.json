{"uid":"2eb0be61b39fcb2f","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1727917681742,"stop":1727917776190,"duration":94448},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0167790>\nproject = <golioth.golioth.Project object at 0xffffa19719d0>\ndevice = <golioth.golioth.Device object at 0xffffa0186190>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727917663073,"stop":1727917663073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727917663074,"stop":1727917663074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727917663074,"stop":1727917663075,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727917663075,"stop":1727917663075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727917663076,"stop":1727917663076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727917663076,"stop":1727917663077,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727917663077,"stop":1727917663078,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727917663078,"stop":1727917663080,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727917663081,"stop":1727917663494,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727917663495,"stop":1727917664360,"duration":865},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727917664361,"stop":1727917680795,"duration":16434},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727917680796,"stop":1727917681739,"duration":943},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0167790>\nproject = <golioth.golioth.Project object at 0xffffa19719d0>\ndevice = <golioth.golioth.Device object at 0xffffa0186190>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"882be5c6846b24fd","name":"log","source":"882be5c6846b24fd.txt","type":"text/plain","size":20649}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727917776483,"stop":1727917776509,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727917776511,"stop":1727917776891,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727917776893,"stop":1727917776896,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727917776898,"stop":1727917776898,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"977f0861fff8"},{"name":"thread","value":"459-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":54,"unknown":0,"total":59},"items":[{"uid":"58ac572bd137c04f","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/58ac572bd137c04f","status":"passed","time":{"start":1727908837921,"stop":1727908850941,"duration":13020}},{"uid":"cd9a0418cdcf10f3","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/cd9a0418cdcf10f3","status":"passed","time":{"start":1727833556845,"stop":1727833568724,"duration":11879}},{"uid":"d780572342c7e2d4","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/d780572342c7e2d4","status":"passed","time":{"start":1727830792472,"stop":1727830806789,"duration":14317}},{"uid":"97574b40c8ceebe","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/97574b40c8ceebe","status":"passed","time":{"start":1727816521024,"stop":1727816531048,"duration":10024}},{"uid":"893443e0c48c432e","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/893443e0c48c432e","status":"passed","time":{"start":1727816040817,"stop":1727816054008,"duration":13191}},{"uid":"5fdeeb0cd906259c","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/5fdeeb0cd906259c","status":"passed","time":{"start":1727815372154,"stop":1727815381573,"duration":9419}},{"uid":"90cc58f41eab0fa7","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/90cc58f41eab0fa7","status":"passed","time":{"start":1727810468825,"stop":1727810478282,"duration":9457}},{"uid":"1538c027b2610c61","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/1538c027b2610c61","status":"passed","time":{"start":1727807134392,"stop":1727807146632,"duration":12240}},{"uid":"2183544d7dd91482","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/2183544d7dd91482","status":"passed","time":{"start":1727798961432,"stop":1727798972717,"duration":11285}},{"uid":"fe5a1c0a444d8e7d","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/fe5a1c0a444d8e7d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727797649365,"stop":1727797663941,"duration":14576}},{"uid":"51caf18ef71bef51","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/51caf18ef71bef51","status":"passed","time":{"start":1727788901182,"stop":1727788910308,"duration":9126}},{"uid":"d5bc11c687fafe70","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/d5bc11c687fafe70","status":"passed","time":{"start":1727786135312,"stop":1727786149267,"duration":13955}},{"uid":"674d1c400bcfd597","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/674d1c400bcfd597","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727784706018,"stop":1727784706018,"duration":0}},{"uid":"8d842d5a892ed2f6","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/8d842d5a892ed2f6","status":"passed","time":{"start":1727781089613,"stop":1727781101700,"duration":12087}},{"uid":"a7c663f7dbdb56e9","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/a7c663f7dbdb56e9","status":"passed","time":{"start":1727777644895,"stop":1727777657532,"duration":12637}},{"uid":"a4dfb21d705aa08e","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/a4dfb21d705aa08e","status":"passed","time":{"start":1727775625051,"stop":1727775634514,"duration":9463}},{"uid":"35df9cca969442ce","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/35df9cca969442ce","status":"passed","time":{"start":1727771855498,"stop":1727771868939,"duration":13441}},{"uid":"bede4c5075187254","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/bede4c5075187254","status":"passed","time":{"start":1727770822497,"stop":1727770834021,"duration":11524}},{"uid":"9c786149a11a10b8","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/9c786149a11a10b8","status":"passed","time":{"start":1727765957894,"stop":1727765970659,"duration":12765}},{"uid":"a4c98503f4ded577","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/a4c98503f4ded577","status":"passed","time":{"start":1727766005593,"stop":1727766018819,"duration":13226}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"2eb0be61b39fcb2f.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}