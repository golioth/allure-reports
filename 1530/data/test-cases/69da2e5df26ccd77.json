{"uid":"69da2e5df26ccd77","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1727956351778,"stop":1727956365537,"duration":13759},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa4f1ae50>\ndevice = <golioth.golioth.Device object at 0xffffa4ef2f90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa4ef2f90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727956305784,"stop":1727956305784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727956305785,"stop":1727956305786,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727956305787,"stop":1727956305787,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727956305788,"stop":1727956305788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727956305789,"stop":1727956305789,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727956305790,"stop":1727956305791,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727956305792,"stop":1727956305792,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727956305793,"stop":1727956305793,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727956305794,"stop":1727956305795,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727956305795,"stop":1727956305796,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727956305796,"stop":1727956305796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727956305797,"stop":1727956305797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727956305798,"stop":1727956306249,"duration":451},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727956306250,"stop":1727956331671,"duration":25421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727956331673,"stop":1727956332589,"duration":916},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727956332590,"stop":1727956345821,"duration":13231},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffa4f1ae50>\ndevice = <golioth.golioth.Device object at 0xffffa4ef2f90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffa4ef2f90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"728947494d454b2","name":"stdout","source":"728947494d454b2.txt","type":"text/plain","size":3810}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727956510002,"stop":1727956510003,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727956510007,"stop":1727956510578,"duration":571},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727956510580,"stop":1727956510585,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727956510587,"stop":1727956510589,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"6bb4af397338"},{"name":"thread","value":"258-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c0b59d312d326dad","status":"passed","time":{"start":1727945207044,"stop":1727945220570,"duration":13526}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":1,"skipped":0,"passed":44,"unknown":0,"total":66},"items":[{"uid":"929ddb82d4f3d0aa","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/929ddb82d4f3d0aa","status":"passed","time":{"start":1727955319069,"stop":1727955332439,"duration":13370}},{"uid":"59ac5a6f56b746ca","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/59ac5a6f56b746ca","status":"passed","time":{"start":1727951617829,"stop":1727951630834,"duration":13005}},{"uid":"a4b7cf4d41bbe57","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/a4b7cf4d41bbe57","status":"passed","time":{"start":1727926164691,"stop":1727926178981,"duration":14290}},{"uid":"dc5d71c221a98b30","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/dc5d71c221a98b30","status":"passed","time":{"start":1727945207044,"stop":1727945220570,"duration":13526}},{"uid":"984f072d3a9b3874","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/984f072d3a9b3874","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727944362434,"stop":1727944375585,"duration":13151}},{"uid":"f831b47dc50dc9b6","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/f831b47dc50dc9b6","status":"passed","time":{"start":1727943625587,"stop":1727943638963,"duration":13376}},{"uid":"a1c7202dd9d22b18","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/a1c7202dd9d22b18","status":"passed","time":{"start":1727831792122,"stop":1727831805284,"duration":13162}},{"uid":"710162e5fdd4d971","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/710162e5fdd4d971","status":"passed","time":{"start":1727926164691,"stop":1727926178981,"duration":14290}},{"uid":"c801f1d14e385a45","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/c801f1d14e385a45","status":"passed","time":{"start":1727926164691,"stop":1727926178981,"duration":14290}},{"uid":"edd6016a578983a9","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/edd6016a578983a9","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1727915820960,"stop":1727915820960,"duration":0}},{"uid":"b683009cf6d7bc7d","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/b683009cf6d7bc7d","status":"passed","time":{"start":1727907077041,"stop":1727907090922,"duration":13881}},{"uid":"8bd33682101c49e2","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/8bd33682101c49e2","status":"passed","time":{"start":1727831792122,"stop":1727831805284,"duration":13162}},{"uid":"17f5b9869e8eecba","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/17f5b9869e8eecba","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727829341361,"stop":1727829354636,"duration":13275}},{"uid":"2568940566a9ea1c","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/2568940566a9ea1c","status":"passed","time":{"start":1727801789552,"stop":1727801802422,"duration":12870}},{"uid":"feaa5bc70ee2b1b3","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/feaa5bc70ee2b1b3","status":"passed","time":{"start":1727813353939,"stop":1727813366932,"duration":12993}},{"uid":"c666eb30e8da17b7","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/c666eb30e8da17b7","status":"passed","time":{"start":1727795638262,"stop":1727795652452,"duration":14190}},{"uid":"97ce49def3350b8b","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/97ce49def3350b8b","status":"passed","time":{"start":1727809535429,"stop":1727809548894,"duration":13465}},{"uid":"f99e3025c1d84c7b","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/f99e3025c1d84c7b","status":"passed","time":{"start":1727805648180,"stop":1727805663085,"duration":14905}},{"uid":"f1dbcff4c05decd2","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/f1dbcff4c05decd2","status":"passed","time":{"start":1727795638262,"stop":1727795652452,"duration":14190}},{"uid":"41d809a0671a7ea1","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/41d809a0671a7ea1","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727794752113,"stop":1727794768520,"duration":16407}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","jons_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')"]},"source":"69da2e5df26ccd77.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}