{"uid":"69b2eaa8f0ef43a0","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1727958285958,"stop":1727958308588,"duration":22630},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8185fd50>\ndevice = <golioth.golioth.Device object at 0xffff8187eb90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727958268112,"stop":1727958268112,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727958268113,"stop":1727958268113,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727958268113,"stop":1727958268114,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727958268114,"stop":1727958268114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727958268115,"stop":1727958268118,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727958268115,"stop":1727958268115,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727958268119,"stop":1727958268119,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727958268119,"stop":1727958268119,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727958268120,"stop":1727958268570,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727958268571,"stop":1727958269478,"duration":907},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727958269478,"stop":1727958284933,"duration":15455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727958284933,"stop":1727958285955,"duration":1022},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8185fd50>\ndevice = <golioth.golioth.Device object at 0xffff8187eb90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7c62f272ebe3768e","name":"log","source":"7c62f272ebe3768e.txt","type":"text/plain","size":12524}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727958308928,"stop":1727958308947,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727958308948,"stop":1727958309334,"duration":386},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727958309336,"stop":1727958309338,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727958309343,"stop":1727958309343,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"09655102c319"},{"name":"thread","value":"534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"df35cde87b7e0196","status":"passed","time":{"start":1727958241947,"stop":1727958263837,"duration":21890}},{"uid":"77614c71d32ea818","status":"passed","time":{"start":1727950864410,"stop":1727950887273,"duration":22863}},{"uid":"333d19a74201d11f","status":"passed","time":{"start":1727950818884,"stop":1727950841636,"duration":22752}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":22,"skipped":0,"passed":47,"unknown":0,"total":69},"items":[{"uid":"4ff877ee09b24c34","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/4ff877ee09b24c34","status":"passed","time":{"start":1727957262509,"stop":1727957288079,"duration":25570}},{"uid":"bc48c0dfa998d5d5","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/bc48c0dfa998d5d5","status":"passed","time":{"start":1727956668600,"stop":1727956691380,"duration":22780}},{"uid":"dd24f112b5f655fd","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/dd24f112b5f655fd","status":"passed","time":{"start":1727952627530,"stop":1727952650230,"duration":22700}},{"uid":"a41460000f349470","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/a41460000f349470","status":"passed","time":{"start":1727950864410,"stop":1727950887273,"duration":22863}},{"uid":"c92da254816ce3eb","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/c92da254816ce3eb","status":"passed","time":{"start":1727948540857,"stop":1727948563192,"duration":22335}},{"uid":"23cda8f606b973a0","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/23cda8f606b973a0","status":"passed","time":{"start":1727948779506,"stop":1727948804956,"duration":25450}},{"uid":"86596858984d4d6b","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/86596858984d4d6b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727946792023,"stop":1727946814646,"duration":22623}},{"uid":"f48b858c9409a865","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/f48b858c9409a865","status":"passed","time":{"start":1727933480254,"stop":1727933502332,"duration":22078}},{"uid":"7a19a0a51e2f0744","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/7a19a0a51e2f0744","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727928399096,"stop":1727928421761,"duration":22665}},{"uid":"ba2a2a6fe8e180c8","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/ba2a2a6fe8e180c8","status":"passed","time":{"start":1727918610350,"stop":1727918631772,"duration":21422}},{"uid":"639a294506bfa6f1","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/639a294506bfa6f1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727909117283,"stop":1727909139859,"duration":22576}},{"uid":"55ce0f8b5bdc6cdf","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/55ce0f8b5bdc6cdf","status":"passed","time":{"start":1727833859081,"stop":1727833879345,"duration":20264}},{"uid":"93810873ecf370a4","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/93810873ecf370a4","status":"passed","time":{"start":1727831104469,"stop":1727831125175,"duration":20706}},{"uid":"64fc17194025966","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/64fc17194025966","status":"passed","time":{"start":1727816783037,"stop":1727816803467,"duration":20430}},{"uid":"45e92d7ba99628e4","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/45e92d7ba99628e4","status":"passed","time":{"start":1727816400195,"stop":1727816425884,"duration":25689}},{"uid":"5099f27bf5bff0d1","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/5099f27bf5bff0d1","status":"passed","time":{"start":1727816219396,"stop":1727816243310,"duration":23914}},{"uid":"671e27dc8260c048","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/671e27dc8260c048","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727810755961,"stop":1727810778584,"duration":22623}},{"uid":"aac50b7117711758","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/aac50b7117711758","status":"passed","time":{"start":1727807485952,"stop":1727807510429,"duration":24477}},{"uid":"68a1655ca93c8f1d","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/68a1655ca93c8f1d","status":"passed","time":{"start":1727799810111,"stop":1727799830483,"duration":20372}},{"uid":"2fa94a9794a89d68","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/2fa94a9794a89d68","status":"passed","time":{"start":1727798508563,"stop":1727798532331,"duration":23768}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"69b2eaa8f0ef43a0.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}