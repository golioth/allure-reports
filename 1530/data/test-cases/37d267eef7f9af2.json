{"uid":"37d267eef7f9af2","name":"test_connect","fullName":"tests.hil.tests.connection.test_connection#test_connect","historyId":"34bc724c3511479d946422a2d0e89fa6","time":{"start":1727947841614,"stop":1727947991765,"duration":150151},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 156555.17689944175\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <mimxrt1024evk.MIMXRT1024EVK object at 0xffff7cef2e90>\ndevice = <golioth.golioth.Device object at 0xffff7cf0bfd0>\n\n    async def test_connect(board, device):\n        # Set Golioth credentials\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Confirm connection to Golioth\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_stop();\n        assert None != await board.wait_for_regex_in_line('Stopping client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_destroy();\n        assert None != await board.wait_for_regex_in_line('Destroying client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n>       assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n\ntests/hil/tests/connection/test_connection.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 156555.17689944175\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727947820619,"stop":1727947820619,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727947820620,"stop":1727947820620,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727947820621,"stop":1727947820622,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727947820621,"stop":1727947820621,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727947820622,"stop":1727947820623,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727947820623,"stop":1727947820623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727947820624,"stop":1727947820624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727947820624,"stop":1727947820624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727947820625,"stop":1727947820625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727947820625,"stop":1727947820625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727947820626,"stop":1727947820626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727947820626,"stop":1727947820626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727947820627,"stop":1727947840343,"duration":19716},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727947840345,"stop":1727947840794,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727947840795,"stop":1727947841611,"duration":816},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 156555.17689944175\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <mimxrt1024evk.MIMXRT1024EVK object at 0xffff7cef2e90>\ndevice = <golioth.golioth.Device object at 0xffff7cf0bfd0>\n\n    async def test_connect(board, device):\n        # Set Golioth credentials\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Confirm connection to Golioth\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_stop();\n        assert None != await board.wait_for_regex_in_line('Stopping client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n        assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n    \n        # Wait for reconnection after golioth_client_destroy();\n        assert None != await board.wait_for_regex_in_line('Destroying client', timeout_s=15)\n        assert None != await board.wait_for_regex_in_line('Starting client', timeout_s=120)\n>       assert None != await board.wait_for_regex_in_line('Golioth CoAP client connected', timeout_s=120)\n\ntests/hil/tests/connection/test_connection.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 156555.17689944175\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"88024d9ed3540036","name":"stdout","source":"88024d9ed3540036.txt","type":"text/plain","size":3825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1727947992487,"stop":1727947992914,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727947992916,"stop":1727947992916,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727947992918,"stop":1727947992921,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_connection"},{"name":"host","value":"1c44a2f1a406"},{"name":"thread","value":"236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.connection.test_connection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":55,"unknown":0,"total":62},"items":[{"uid":"854e5606d237d70f","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/854e5606d237d70f","status":"passed","time":{"start":1727944757300,"stop":1727944788229,"duration":30929}},{"uid":"89ae4d47f753bb27","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/89ae4d47f753bb27","status":"passed","time":{"start":1727944778305,"stop":1727944811810,"duration":33505}},{"uid":"d8b222dece775d2d","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/d8b222dece775d2d","status":"passed","time":{"start":1727832326811,"stop":1727832359466,"duration":32655}},{"uid":"d32cd6c517c49925","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/d32cd6c517c49925","status":"passed","time":{"start":1727926366166,"stop":1727926395357,"duration":29191}},{"uid":"fde973f1a18d0023","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/fde973f1a18d0023","status":"passed","time":{"start":1727926366166,"stop":1727926395357,"duration":29191}},{"uid":"4ca89586d82b37b6","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/4ca89586d82b37b6","status":"passed","time":{"start":1727916027924,"stop":1727916058400,"duration":30476}},{"uid":"7f8162513ed54cab","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/7f8162513ed54cab","status":"passed","time":{"start":1727907060790,"stop":1727907091601,"duration":30811}},{"uid":"fbff6e6a493dd2ea","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/fbff6e6a493dd2ea","status":"passed","time":{"start":1727832326811,"stop":1727832359466,"duration":32655}},{"uid":"7993c7a4715b4e84","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/7993c7a4715b4e84","status":"passed","time":{"start":1727828956764,"stop":1727828984818,"duration":28054}},{"uid":"dea316e605dc7148","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/dea316e605dc7148","status":"passed","time":{"start":1727801724658,"stop":1727801756655,"duration":31997}},{"uid":"f59384e6a7d4bbf9","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/f59384e6a7d4bbf9","status":"passed","time":{"start":1727800808193,"stop":1727800838928,"duration":30735}},{"uid":"b62ab95f20896a80","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/b62ab95f20896a80","status":"passed","time":{"start":1727795717018,"stop":1727795744751,"duration":27733}},{"uid":"64acd1659726e72a","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/64acd1659726e72a","status":"passed","time":{"start":1727809961477,"stop":1727809991402,"duration":29925}},{"uid":"a5e8a34c4cf19bf6","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/a5e8a34c4cf19bf6","status":"passed","time":{"start":1727805834305,"stop":1727805860716,"duration":26411}},{"uid":"21c874a62be28534","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/21c874a62be28534","status":"passed","time":{"start":1727795717018,"stop":1727795744751,"duration":27733}},{"uid":"e6158f530def2312","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/e6158f530def2312","status":"passed","time":{"start":1727794254769,"stop":1727794317050,"duration":62281}},{"uid":"1a6b9ccb7796de24","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/1a6b9ccb7796de24","status":"passed","time":{"start":1727787950364,"stop":1727787984574,"duration":34210}},{"uid":"ccab9055dcdcc530","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/ccab9055dcdcc530","status":"passed","time":{"start":1727783639867,"stop":1727783668276,"duration":28409}},{"uid":"dcb02cd24d20bc20","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/dcb02cd24d20bc20","status":"passed","time":{"start":1727774049806,"stop":1727774083207,"duration":33401}},{"uid":"b1bda35a2f9e10ef","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/b1bda35a2f9e10ef","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1727778286241,"stop":1727778306759,"duration":20518}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"37d267eef7f9af2.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}