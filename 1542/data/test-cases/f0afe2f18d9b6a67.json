{"uid":"f0afe2f18d9b6a67","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1727977068137,"stop":1727977160989,"duration":92852},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84eb4c50>\ndevice = <golioth.golioth.Device object at 0xffff84db5b50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727977038332,"stop":1727977038332,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727977038333,"stop":1727977038333,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727977038333,"stop":1727977038333,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727977038334,"stop":1727977038335,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727977038334,"stop":1727977038334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727977038335,"stop":1727977038337,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727977038338,"stop":1727977038338,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727977038338,"stop":1727977038338,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727977038339,"stop":1727977038910,"duration":571},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727977038911,"stop":1727977039838,"duration":927},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727977039839,"stop":1727977067044,"duration":27205},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727977067044,"stop":1727977068132,"duration":1088},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84eb4c50>\ndevice = <golioth.golioth.Device object at 0xffff84db5b50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"5a002a650d2881b0","name":"log","source":"5a002a650d2881b0.txt","type":"text/plain","size":14168}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727977161333,"stop":1727977161492,"duration":159},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727977161494,"stop":1727977162035,"duration":541},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727977162037,"stop":1727977162040,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727977162045,"stop":1727977162045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cdcfcc8b8b03"},{"name":"thread","value":"389-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"426c867db5745b9d","status":"passed","time":{"start":1727966966833,"stop":1727966984073,"duration":17240}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":11,"skipped":0,"passed":57,"unknown":0,"total":69},"items":[{"uid":"5b4eebe1409de26d","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/5b4eebe1409de26d","status":"passed","time":{"start":1727975690884,"stop":1727975708375,"duration":17491}},{"uid":"f2681941d23948ab","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/f2681941d23948ab","status":"passed","time":{"start":1727973492047,"stop":1727973511180,"duration":19133}},{"uid":"59712171e6b3e7c2","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/59712171e6b3e7c2","status":"passed","time":{"start":1727972295579,"stop":1727972321169,"duration":25590}},{"uid":"ab2d4e729d4ebca2","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/ab2d4e729d4ebca2","status":"passed","time":{"start":1727966966833,"stop":1727966984073,"duration":17240}},{"uid":"eb9461a596f8e3e8","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/eb9461a596f8e3e8","status":"passed","time":{"start":1727961119463,"stop":1727961138803,"duration":19340}},{"uid":"755e5fbe7300740d","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/755e5fbe7300740d","status":"passed","time":{"start":1727950620304,"stop":1727950637240,"duration":16936}},{"uid":"5462b120cc46ca4c","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/5462b120cc46ca4c","status":"passed","time":{"start":1727954943901,"stop":1727954962747,"duration":18846}},{"uid":"62701675b723e23e","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/62701675b723e23e","status":"passed","time":{"start":1727953096353,"stop":1727953130917,"duration":34564}},{"uid":"613d2ce1b4a26828","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/613d2ce1b4a26828","status":"passed","time":{"start":1727927505131,"stop":1727927522917,"duration":17786}},{"uid":"899373d13101d5d","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/899373d13101d5d","status":"passed","time":{"start":1727950620304,"stop":1727950637240,"duration":16936}},{"uid":"be3e1634060cb7ef","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/be3e1634060cb7ef","status":"passed","time":{"start":1727950342805,"stop":1727950362388,"duration":19583}},{"uid":"66be57a27e7228d4","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/66be57a27e7228d4","status":"passed","time":{"start":1727949458663,"stop":1727949475949,"duration":17286}},{"uid":"dc71e8a7a100438","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/dc71e8a7a100438","status":"passed","time":{"start":1727942033028,"stop":1727942050558,"duration":17530}},{"uid":"552a86c380d50e8f","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/552a86c380d50e8f","status":"passed","time":{"start":1727927505131,"stop":1727927522917,"duration":17786}},{"uid":"e726382352bdb5c5","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/e726382352bdb5c5","status":"passed","time":{"start":1727927505131,"stop":1727927522917,"duration":17786}},{"uid":"e0a1052f159e93e7","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/e0a1052f159e93e7","status":"passed","time":{"start":1727917964403,"stop":1727917991316,"duration":26913}},{"uid":"8edd5b29f7195ac9","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/8edd5b29f7195ac9","status":"passed","time":{"start":1727909029336,"stop":1727909058760,"duration":29424}},{"uid":"58458ba5f3f08850","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/58458ba5f3f08850","status":"passed","time":{"start":1727833801246,"stop":1727833835902,"duration":34656}},{"uid":"519d6d0a623c7326","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/519d6d0a623c7326","status":"passed","time":{"start":1727831148111,"stop":1727831182756,"duration":34645}},{"uid":"16df8a8ed3ef598d","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/16df8a8ed3ef598d","status":"passed","time":{"start":1727812466662,"stop":1727812487406,"duration":20744}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f0afe2f18d9b6a67.json","parameterValues":["'nrf9160dk'","'zephyr'"]}