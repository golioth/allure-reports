{"uid":"50f293f54fcc4708","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1727978111914,"stop":1727978205266,"duration":93352},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa6152350>\ndevice = <golioth.golioth.Device object at 0xffffa6168dd0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727978081971,"stop":1727978081971,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727978081972,"stop":1727978081972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727978081972,"stop":1727978081972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727978081973,"stop":1727978081973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727978081973,"stop":1727978081973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727978081974,"stop":1727978081976,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727978081976,"stop":1727978081977,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727978081977,"stop":1727978081977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727978081978,"stop":1727978082604,"duration":626},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727978082604,"stop":1727978083567,"duration":963},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727978083568,"stop":1727978110829,"duration":27261},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727978110830,"stop":1727978111909,"duration":1079},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa6152350>\ndevice = <golioth.golioth.Device object at 0xffffa6168dd0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d1c297352c052c3a","name":"log","source":"d1c297352c052c3a.txt","type":"text/plain","size":18511}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727978205588,"stop":1727978205634,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727978205636,"stop":1727978206179,"duration":543},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727978206181,"stop":1727978206184,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727978206189,"stop":1727978206189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"cdcfcc8b8b03"},{"name":"thread","value":"874-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"82c55915dbf0bb1c","status":"passed","time":{"start":1727967875728,"stop":1727967905829,"duration":30101}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":16,"skipped":0,"passed":48,"unknown":0,"total":65},"items":[{"uid":"ab4531e0865860a","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/ab4531e0865860a","status":"passed","time":{"start":1727976774465,"stop":1727976805502,"duration":31037}},{"uid":"9de4c022ce64a083","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/9de4c022ce64a083","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1727974408697,"stop":1727974408697,"duration":0}},{"uid":"68452dfb3afb1293","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/68452dfb3afb1293","status":"passed","time":{"start":1727973345166,"stop":1727973376764,"duration":31598}},{"uid":"ad2a4fa479960f17","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/ad2a4fa479960f17","status":"passed","time":{"start":1727967875728,"stop":1727967905829,"duration":30101}},{"uid":"cd4b2ccb22ff50f1","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/cd4b2ccb22ff50f1","status":"passed","time":{"start":1727961861878,"stop":1727961891689,"duration":29811}},{"uid":"7bad5bbb660960a5","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/7bad5bbb660960a5","status":"passed","time":{"start":1727951398536,"stop":1727951425425,"duration":26889}},{"uid":"790661022b9e04d7","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/790661022b9e04d7","status":"passed","time":{"start":1727955753956,"stop":1727955783450,"duration":29494}},{"uid":"6c17401fb0288442","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/6c17401fb0288442","status":"passed","time":{"start":1727954070363,"stop":1727954109883,"duration":39520}},{"uid":"7f463401062227e3","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/7f463401062227e3","status":"passed","time":{"start":1727928388572,"stop":1727928418034,"duration":29462}},{"uid":"b6e5b05ea6ad74a0","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/b6e5b05ea6ad74a0","status":"passed","time":{"start":1727951398536,"stop":1727951425425,"duration":26889}},{"uid":"a6c60a294d30ea20","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/a6c60a294d30ea20","status":"passed","time":{"start":1727951202993,"stop":1727951235526,"duration":32533}},{"uid":"f5c7fc8a5645354a","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/f5c7fc8a5645354a","status":"passed","time":{"start":1727950212948,"stop":1727950243664,"duration":30716}},{"uid":"2f75cdb745555800","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2f75cdb745555800","status":"passed","time":{"start":1727942868009,"stop":1727942894859,"duration":26850}},{"uid":"70d25646eb6c27e1","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/70d25646eb6c27e1","status":"passed","time":{"start":1727928388572,"stop":1727928418034,"duration":29462}},{"uid":"da2387c9f0c8bab6","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/da2387c9f0c8bab6","status":"passed","time":{"start":1727928388572,"stop":1727928418034,"duration":29462}},{"uid":"62813a91439970e9","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/62813a91439970e9","status":"passed","time":{"start":1727919216571,"stop":1727919249502,"duration":32931}},{"uid":"d15fde5573c2eda6","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/d15fde5573c2eda6","status":"passed","time":{"start":1727910112298,"stop":1727910158974,"duration":46676}},{"uid":"1bb3a5ed09fa5a75","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/1bb3a5ed09fa5a75","status":"passed","time":{"start":1727835150016,"stop":1727835176759,"duration":26743}},{"uid":"caa7c43653c97fd8","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/caa7c43653c97fd8","status":"passed","time":{"start":1727831968385,"stop":1727832017710,"duration":49325}},{"uid":"7fad5c94c20b16b2","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/7fad5c94c20b16b2","status":"passed","time":{"start":1727813641673,"stop":1727813670924,"duration":29251}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"50f293f54fcc4708.json","parameterValues":["'nrf9160dk'","'zephyr'"]}