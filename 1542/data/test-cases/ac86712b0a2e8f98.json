{"uid":"ac86712b0a2e8f98","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1727977621822,"stop":1727977734572,"duration":112750},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8efc3a90>\ndevice = <golioth.golioth.Device object at 0xffff8efe4210>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727977594449,"stop":1727977594450,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727977594450,"stop":1727977594450,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727977594451,"stop":1727977594451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727977594451,"stop":1727977594452,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727977594452,"stop":1727977594452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727977594452,"stop":1727977594455,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727977594456,"stop":1727977594456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727977594457,"stop":1727977594457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727977594457,"stop":1727977594866,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727977594866,"stop":1727977595728,"duration":862},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727977595729,"stop":1727977618616,"duration":22887},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727977618616,"stop":1727977621815,"duration":3199},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8efc3a90>\ndevice = <golioth.golioth.Device object at 0xffff8efe4210>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"fa77493fff65a038","name":"log","source":"fa77493fff65a038.txt","type":"text/plain","size":13954}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727977734912,"stop":1727977734930,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727977734932,"stop":1727977735314,"duration":382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727977735317,"stop":1727977735319,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727977735324,"stop":1727977735324,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"c5134fd058d7"},{"name":"thread","value":"984-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5e511ec0b2dbbcad","status":"passed","time":{"start":1727977562788,"stop":1727977590421,"duration":27633}},{"uid":"150a06fde1a703bf","status":"passed","time":{"start":1727966758830,"stop":1727966782672,"duration":23842}},{"uid":"62bd80ba3bc12a08","status":"passed","time":{"start":1727966702879,"stop":1727966726928,"duration":24049}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":71,"unknown":0,"total":75},"items":[{"uid":"28ec9d19b1bbb149","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/28ec9d19b1bbb149","status":"passed","time":{"start":1727975413837,"stop":1727975437161,"duration":23324}},{"uid":"d9d053a98d22a8f2","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/d9d053a98d22a8f2","status":"passed","time":{"start":1727972033870,"stop":1727972057386,"duration":23516}},{"uid":"e7d4d8720c1212e1","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/e7d4d8720c1212e1","status":"passed","time":{"start":1727970346857,"stop":1727970370182,"duration":23325}},{"uid":"a5ee20a5bb67ce80","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/a5ee20a5bb67ce80","status":"passed","time":{"start":1727966758830,"stop":1727966782672,"duration":23842}},{"uid":"bb74f9cefbfc67b2","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/bb74f9cefbfc67b2","status":"passed","time":{"start":1727961902306,"stop":1727961925992,"duration":23686}},{"uid":"a66aed79d269951a","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/a66aed79d269951a","status":"passed","time":{"start":1727957309671,"stop":1727957341798,"duration":32127}},{"uid":"a2bf6e630e75bcc1","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/a2bf6e630e75bcc1","status":"passed","time":{"start":1727955662913,"stop":1727955686712,"duration":23799}},{"uid":"1f0b829846904b62","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/1f0b829846904b62","status":"passed","time":{"start":1727953813855,"stop":1727953837745,"duration":23890}},{"uid":"f2552c777df3757c","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/f2552c777df3757c","status":"passed","time":{"start":1727951868982,"stop":1727951892716,"duration":23734}},{"uid":"dd59da11d6bd496d","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/dd59da11d6bd496d","status":"passed","time":{"start":1727950092146,"stop":1727950116079,"duration":23933}},{"uid":"a619fc5b6f5ef190","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/a619fc5b6f5ef190","status":"passed","time":{"start":1727947627724,"stop":1727947651060,"duration":23336}},{"uid":"93bd37f0ac70bdcb","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/93bd37f0ac70bdcb","status":"passed","time":{"start":1727946965321,"stop":1727946989097,"duration":23776}},{"uid":"2febd72749f304fe","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/2febd72749f304fe","status":"passed","time":{"start":1727942821397,"stop":1727942845302,"duration":23905}},{"uid":"eb325f9564f56fe5","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/eb325f9564f56fe5","status":"passed","time":{"start":1727932916784,"stop":1727932940491,"duration":23707}},{"uid":"6316a966bde533b8","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/6316a966bde533b8","status":"passed","time":{"start":1727927941637,"stop":1727927965464,"duration":23827}},{"uid":"7f77d7cc6612e2aa","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/7f77d7cc6612e2aa","status":"passed","time":{"start":1727917647124,"stop":1727917670813,"duration":23689}},{"uid":"e0a8647c43a6d51","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/e0a8647c43a6d51","status":"passed","time":{"start":1727909001411,"stop":1727909024893,"duration":23482}},{"uid":"4e31424653f7caa1","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/4e31424653f7caa1","status":"passed","time":{"start":1727833845879,"stop":1727833869684,"duration":23805}},{"uid":"4199a552a5d2bc30","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/4199a552a5d2bc30","status":"passed","time":{"start":1727830569163,"stop":1727830592861,"duration":23698}},{"uid":"d78d7e3f832a701b","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/d78d7e3f832a701b","status":"passed","time":{"start":1727812959049,"stop":1727812982827,"duration":23778}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"ac86712b0a2e8f98.json","parameterValues":["'nrf52840dk'","'zephyr'"]}