{"uid":"96c99202a25b5469","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1727967661269,"stop":1727967779544,"duration":118275},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7f7766d0>\ndevice = <golioth.golioth.Device object at 0xffff7f657550>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff7f7c0fd0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727967631420,"stop":1727967631420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1727967631421,"stop":1727967631436,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727967631437,"stop":1727967631437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727967631438,"stop":1727967631438,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727967631438,"stop":1727967631440,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727967631441,"stop":1727967631441,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727967631442,"stop":1727967631945,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727967631442,"stop":1727967631442,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727967631946,"stop":1727967633275,"duration":1329},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727967633276,"stop":1727967660155,"duration":26879},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727967660156,"stop":1727967661266,"duration":1110},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7f7766d0>\ndevice = <golioth.golioth.Device object at 0xffff7f657550>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff7f7c0fd0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7899e03939c84282","name":"log","source":"7899e03939c84282.txt","type":"text/plain","size":16359}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727967779833,"stop":1727967779858,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727967779860,"stop":1727967780328,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727967780330,"stop":1727967780332,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727967780337,"stop":1727967780337,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"7c36a95735c8"},{"name":"thread","value":"825-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":10,"skipped":0,"passed":49,"unknown":0,"total":64},"items":[{"uid":"a72ab02e8b05acaf","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/a72ab02e8b05acaf","status":"passed","time":{"start":1727961797653,"stop":1727961828730,"duration":31077}},{"uid":"7ac47b978dff5afb","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/7ac47b978dff5afb","status":"passed","time":{"start":1727951305581,"stop":1727951363529,"duration":57948}},{"uid":"1629e2bd11458e66","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/1629e2bd11458e66","status":"passed","time":{"start":1727955631437,"stop":1727955663080,"duration":31643}},{"uid":"2dac0888caa43e42","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/2dac0888caa43e42","status":"passed","time":{"start":1727953992925,"stop":1727954036766,"duration":43841}},{"uid":"aa561de966b4767f","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/aa561de966b4767f","status":"passed","time":{"start":1727928208399,"stop":1727928239758,"duration":31359}},{"uid":"3ecc9e3a1620f507","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/3ecc9e3a1620f507","status":"passed","time":{"start":1727951305581,"stop":1727951363529,"duration":57948}},{"uid":"f2cfce19e8941222","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/f2cfce19e8941222","status":"passed","time":{"start":1727951026908,"stop":1727951056081,"duration":29173}},{"uid":"c2bf108142b2165d","reportUrl":"https://golioth.github.io/allure-reports/1528//#testresult/c2bf108142b2165d","status":"passed","time":{"start":1727950145262,"stop":1727950178033,"duration":32771}},{"uid":"53b8fcdfa7019297","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/53b8fcdfa7019297","status":"passed","time":{"start":1727942749530,"stop":1727942776606,"duration":27076}},{"uid":"57999530988b8015","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/57999530988b8015","status":"passed","time":{"start":1727928208399,"stop":1727928239758,"duration":31359}},{"uid":"775fd7fcad65adb1","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/775fd7fcad65adb1","status":"passed","time":{"start":1727928208399,"stop":1727928239758,"duration":31359}},{"uid":"9605ede0ceaf6520","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/9605ede0ceaf6520","status":"passed","time":{"start":1727919130842,"stop":1727919181841,"duration":50999}},{"uid":"48509586c25f9705","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/48509586c25f9705","status":"passed","time":{"start":1727909959967,"stop":1727910000496,"duration":40529}},{"uid":"cc783743b996de7d","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/cc783743b996de7d","status":"passed","time":{"start":1727834936630,"stop":1727834969684,"duration":33054}},{"uid":"42c0e90091956b05","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/42c0e90091956b05","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727831821236,"stop":1727831934364,"duration":113128}},{"uid":"65b44ed66619df68","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/65b44ed66619df68","status":"passed","time":{"start":1727813575356,"stop":1727813606895,"duration":31539}},{"uid":"e4f2509fc0559778","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/e4f2509fc0559778","status":"passed","time":{"start":1727815139113,"stop":1727815172621,"duration":33508}},{"uid":"6227558addb3701b","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/6227558addb3701b","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1727811952981,"stop":1727812012398,"duration":59417}},{"uid":"a618bc6a892fa39c","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/a618bc6a892fa39c","status":"passed","time":{"start":1727809437853,"stop":1727809478876,"duration":41023}},{"uid":"7b1f213fd2f5d38b","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/7b1f213fd2f5d38b","status":"passed","time":{"start":1727808617365,"stop":1727808675348,"duration":57983}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"96c99202a25b5469.json","parameterValues":["'nrf9160dk'","'zephyr'"]}