{"uid":"fffe8f9499e68737","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1731708495053,"stop":1731708588239,"duration":93186},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffacbe2b10>\ndevice = <golioth.golioth.Device object at 0xffffacbfdcd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731708477297,"stop":1731708477297,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731708477297,"stop":1731708477297,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731708477298,"stop":1731708477298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731708477298,"stop":1731708477299,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731708477299,"stop":1731708477302,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731708477299,"stop":1731708477299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731708477302,"stop":1731708477302,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731708477303,"stop":1731708477715,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731708477303,"stop":1731708477303,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731708477715,"stop":1731708478573,"duration":858},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731708478574,"stop":1731708494116,"duration":15542},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731708494116,"stop":1731708495050,"duration":934},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffacbe2b10>\ndevice = <golioth.golioth.Device object at 0xffffacbfdcd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"911b82222ed31744","name":"log","source":"911b82222ed31744.txt","type":"text/plain","size":18257}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731708588563,"stop":1731708588609,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731708588611,"stop":1731708589009,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731708589011,"stop":1731708589013,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731708589018,"stop":1731708589018,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a69566b2c6df"},{"name":"thread","value":"470-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":3,"skipped":0,"passed":16,"unknown":0,"total":22},"items":[{"uid":"852569de608f34b7","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/852569de608f34b7","status":"passed","time":{"start":1731695866933,"stop":1731695875689,"duration":8756}},{"uid":"5a54e31b4192b716","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/5a54e31b4192b716","status":"passed","time":{"start":1731690191946,"stop":1731690207293,"duration":15347}},{"uid":"31c8b0a1df884ef6","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/31c8b0a1df884ef6","status":"passed","time":{"start":1731624802508,"stop":1731624812818,"duration":10310}},{"uid":"1992811095182b73","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/1992811095182b73","status":"passed","time":{"start":1731623003542,"stop":1731623012369,"duration":8827}},{"uid":"4e20aad5545306f6","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/4e20aad5545306f6","status":"passed","time":{"start":1731616572617,"stop":1731616583335,"duration":10718}},{"uid":"f7dda399df4208ad","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/f7dda399df4208ad","status":"passed","time":{"start":1731614323647,"stop":1731614334114,"duration":10467}},{"uid":"667691135e43642b","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/667691135e43642b","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731611332837,"stop":1731611332837,"duration":0}},{"uid":"7b275f1f6c63350","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/7b275f1f6c63350","status":"passed","time":{"start":1731598572712,"stop":1731598584226,"duration":11514}},{"uid":"4870e5c6987603ac","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/4870e5c6987603ac","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731549090755,"stop":1731549183892,"duration":93137}},{"uid":"ed1480530f0458f2","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/ed1480530f0458f2","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731567058911,"stop":1731567058911,"duration":0}},{"uid":"801d39a3077c32dd","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/801d39a3077c32dd","status":"passed","time":{"start":1731543516250,"stop":1731543526715,"duration":10465}},{"uid":"1be9b544d7f03d55","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/1be9b544d7f03d55","status":"passed","time":{"start":1731540493734,"stop":1731540500283,"duration":6549}},{"uid":"eb98310f7740ca4e","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/eb98310f7740ca4e","status":"passed","time":{"start":1731537962130,"stop":1731537971397,"duration":9267}},{"uid":"c23a4c46d5276633","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/c23a4c46d5276633","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731537813236,"stop":1731537813236,"duration":0}},{"uid":"ac5b04846b794158","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/ac5b04846b794158","status":"passed","time":{"start":1731523935516,"stop":1731523944921,"duration":9405}},{"uid":"9401c4e7d52cee01","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/9401c4e7d52cee01","status":"passed","time":{"start":1731523935516,"stop":1731523944921,"duration":9405}},{"uid":"4b98901ac0d4459a","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/4b98901ac0d4459a","status":"passed","time":{"start":1731523935516,"stop":1731523944921,"duration":9405}},{"uid":"e57e18f9dff16bac","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/e57e18f9dff16bac","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731521096576,"stop":1731521189669,"duration":93093}},{"uid":"8cecbbc7960c6c2d","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/8cecbbc7960c6c2d","status":"passed","time":{"start":1731428367865,"stop":1731428377921,"duration":10056}},{"uid":"3e33632edc2f2c18","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/3e33632edc2f2c18","status":"passed","time":{"start":1731105087303,"stop":1731105095973,"duration":8670}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"fffe8f9499e68737.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}