{"uid":"a4cb073118b8570f","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"b97b1b0ab58c7d7afa3114dbec351998","time":{"start":1731710064819,"stop":1731710066650,"duration":1831},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbaa0eb50>\nproject = <golioth.golioth.Project object at 0xffffbabd3a90>\ndevice_name = 'certificate-yQvieuuKjHBCBNVn'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960093367-if00,baud=115200']\ncertificate_cred = '6737cc52991409ec59c69381', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731710033637,"stop":1731710033637,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731710033638,"stop":1731710033638,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731710033638,"stop":1731710033638,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731710033639,"stop":1731710033640,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731710033639,"stop":1731710033639,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731710033640,"stop":1731710033642,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731710033640,"stop":1731710033640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731710033643,"stop":1731710034087,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731710034088,"stop":1731710034089,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1731710034089,"stop":1731710034568,"duration":479},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731710034569,"stop":1731710063728,"duration":29159},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731710063728,"stop":1731710064815,"duration":1087},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1731710064816,"stop":1731710064816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbaa0eb50>\nproject = <golioth.golioth.Project object at 0xffffbabd3a90>\ndevice_name = 'certificate-yQvieuuKjHBCBNVn'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960093367-if00,baud=115200']\ncertificate_cred = '6737cc52991409ec59c69381', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"54d661db2c92d263","name":"log","source":"54d661db2c92d263.txt","type":"text/plain","size":14627}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731710066989,"stop":1731710067013,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1731710067015,"stop":1731710067385,"duration":370},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1731710067387,"stop":1731710068024,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731710068026,"stop":1731710068028,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731710068030,"stop":1731710068030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2fc0aefbd56b"},{"name":"thread","value":"919-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":11,"unknown":0,"total":15},"items":[{"uid":"8d7dd762c3483e1c","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/8d7dd762c3483e1c","status":"passed","time":{"start":1731698418641,"stop":1731698462991,"duration":44350}},{"uid":"8474014916c50369","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/8474014916c50369","status":"passed","time":{"start":1731615241681,"stop":1731615270259,"duration":28578}},{"uid":"d031a175249cc9a6","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/d031a175249cc9a6","status":"passed","time":{"start":1731597870951,"stop":1731597913315,"duration":42364}},{"uid":"704e846baadd152d","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/704e846baadd152d","status":"passed","time":{"start":1731550162197,"stop":1731550203215,"duration":41018}},{"uid":"cbc752237486f4bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/cbc752237486f4bd","status":"passed","time":{"start":1731545168650,"stop":1731545198120,"duration":29470}},{"uid":"b7759c62a3b8718b","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/b7759c62a3b8718b","status":"passed","time":{"start":1731542220347,"stop":1731542249076,"duration":28729}},{"uid":"73ad3eb9bb6cb927","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/73ad3eb9bb6cb927","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731541222976,"stop":1731541225062,"duration":2086}},{"uid":"6c31825fd6b9a898","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/6c31825fd6b9a898","status":"passed","time":{"start":1731529204751,"stop":1731529251977,"duration":47226}},{"uid":"abeaa5ca492572bc","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/abeaa5ca492572bc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731524004137,"stop":1731524006123,"duration":1986}},{"uid":"c2cfc4961f6caf89","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/c2cfc4961f6caf89","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731524004137,"stop":1731524006123,"duration":1986}},{"uid":"f139b44929110893","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/f139b44929110893","status":"passed","time":{"start":1731522026968,"stop":1731522063545,"duration":36577}},{"uid":"c7d757529ff11d2e","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/c7d757529ff11d2e","status":"passed","time":{"start":1731429772145,"stop":1731429800417,"duration":28272}},{"uid":"2d3679c545aece9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/2d3679c545aece9b","status":"passed","time":{"start":1731105916874,"stop":1731105944194,"duration":27320}},{"uid":"c275c0f5f012ed3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/c275c0f5f012ed3a","status":"passed","time":{"start":1731100511616,"stop":1731100556237,"duration":44621}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"a4cb073118b8570f.json","parameterValues":["'nrf9160dk'","'zephyr'"]}