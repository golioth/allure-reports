{"uid":"328681629030e3ee","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"d863d307dfacb440b83f8a44acfa67f4","time":{"start":1732549557543,"stop":1732549650690,"duration":93147},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff98b18290>\ndevice = <golioth.golioth.Device object at 0xffff98ac7110>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732549543095,"stop":1732549543096,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732549543096,"stop":1732549543096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732549543097,"stop":1732549543097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732549543097,"stop":1732549543097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732549543098,"stop":1732549543100,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732549543098,"stop":1732549543098,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732549543101,"stop":1732549543101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732549543102,"stop":1732549543546,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732549543102,"stop":1732549543102,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732549543547,"stop":1732549544370,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732549544370,"stop":1732549556910,"duration":12540},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732549556911,"stop":1732549557540,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff98b18290>\ndevice = <golioth.golioth.Device object at 0xffff98ac7110>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"730c6ee067506eb2","name":"log","source":"730c6ee067506eb2.txt","type":"text/plain","size":22154}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732549650956,"stop":1732549651002,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732549651004,"stop":1732549651456,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732549651458,"stop":1732549651461,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732549651465,"stop":1732549651466,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d480ee00283e"},{"name":"thread","value":"415-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c92448ae86fa15b4","status":"passed","time":{"start":1732508977918,"stop":1732509037462,"duration":59544}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":16,"skipped":0,"passed":75,"unknown":0,"total":91},"items":[{"uid":"c34ff65e1bd52560","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/c34ff65e1bd52560","status":"passed","time":{"start":1732508977918,"stop":1732509037462,"duration":59544}},{"uid":"f5095a07c1e8cc4f","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/f5095a07c1e8cc4f","status":"passed","time":{"start":1732408184305,"stop":1732408244585,"duration":60280}},{"uid":"475a7eaba9e565de","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/475a7eaba9e565de","status":"passed","time":{"start":1732408184305,"stop":1732408244585,"duration":60280}},{"uid":"28695ff1f259feba","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/28695ff1f259feba","status":"passed","time":{"start":1732316823234,"stop":1732316882518,"duration":59284}},{"uid":"73bf2e10b8f5de28","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/73bf2e10b8f5de28","status":"passed","time":{"start":1732312720989,"stop":1732312781516,"duration":60527}},{"uid":"2ba4461a01799e99","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/2ba4461a01799e99","status":"passed","time":{"start":1732301994609,"stop":1732302053698,"duration":59089}},{"uid":"e6af5de7147119f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/e6af5de7147119f5","status":"passed","time":{"start":1732301994609,"stop":1732302053698,"duration":59089}},{"uid":"a7258d21e68bb4d5","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/a7258d21e68bb4d5","status":"passed","time":{"start":1732301994609,"stop":1732302053698,"duration":59089}},{"uid":"fa25b34279cb595a","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/fa25b34279cb595a","status":"passed","time":{"start":1732292473657,"stop":1732292533034,"duration":59377}},{"uid":"8cc0df54bb87769d","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/8cc0df54bb87769d","status":"passed","time":{"start":1732225351803,"stop":1732225411073,"duration":59270}},{"uid":"cce21d108d6789d","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/cce21d108d6789d","status":"passed","time":{"start":1732292473657,"stop":1732292533034,"duration":59377}},{"uid":"dac24411354a5b4c","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/dac24411354a5b4c","status":"passed","time":{"start":1732227664957,"stop":1732227724046,"duration":59089}},{"uid":"af01ecab73ded9ca","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/af01ecab73ded9ca","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732290400240,"stop":1732290493314,"duration":93074}},{"uid":"d22a162667a7778f","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d22a162667a7778f","status":"passed","time":{"start":1732289282577,"stop":1732289342283,"duration":59706}},{"uid":"a431da70b06b57f1","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/a431da70b06b57f1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732287067067,"stop":1732287160241,"duration":93174}},{"uid":"95e30cc1486af3f1","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/95e30cc1486af3f1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732283756466,"stop":1732283849761,"duration":93295}},{"uid":"4f34765ba6d030e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/4f34765ba6d030e3","status":"passed","time":{"start":1732280246994,"stop":1732280306460,"duration":59466}},{"uid":"7ca407e645918d4d","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/7ca407e645918d4d","status":"passed","time":{"start":1732274593236,"stop":1732274652669,"duration":59433}},{"uid":"cdc6f8d41ed5b18a","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/cdc6f8d41ed5b18a","status":"passed","time":{"start":1732273365914,"stop":1732273425206,"duration":59292}},{"uid":"51206931a2c67d83","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/51206931a2c67d83","status":"passed","time":{"start":1732232212906,"stop":1732232274746,"duration":61840}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"328681629030e3ee.json","parameterValues":["'rak5010'","'zephyr'"]}