{"uid":"976be38461e8a984","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"c3c56fd394e8a51c6a7b951f90915fb9","time":{"start":1732549669150,"stop":1732549762461,"duration":93311},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb808f1d0>\ndevice = <golioth.golioth.Device object at 0xffffb8069bd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732549654762,"stop":1732549654763,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732549654763,"stop":1732549654764,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732549654764,"stop":1732549654765,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732549654764,"stop":1732549654764,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732549654765,"stop":1732549654765,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732549654766,"stop":1732549654768,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732549654768,"stop":1732549654769,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732549654769,"stop":1732549655228,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732549654769,"stop":1732549654769,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732549655229,"stop":1732549656025,"duration":796},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732549656026,"stop":1732549668543,"duration":12517},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732549668544,"stop":1732549669147,"duration":603},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb808f1d0>\ndevice = <golioth.golioth.Device object at 0xffffb8069bd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ea5b4722580d039","name":"log","source":"ea5b4722580d039.txt","type":"text/plain","size":22976}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732549762801,"stop":1732549763100,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732549763102,"stop":1732549763536,"duration":434},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732549763538,"stop":1732549763540,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732549763545,"stop":1732549763545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d480ee00283e"},{"name":"thread","value":"435-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ffce83fa4291f744","status":"passed","time":{"start":1732509078363,"stop":1732509133410,"duration":55047}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":74,"unknown":0,"total":91},"items":[{"uid":"1e3922bdf8a761c7","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/1e3922bdf8a761c7","status":"passed","time":{"start":1732509078363,"stop":1732509133410,"duration":55047}},{"uid":"a1c1f91d591f5e84","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/a1c1f91d591f5e84","status":"passed","time":{"start":1732408285145,"stop":1732408340649,"duration":55504}},{"uid":"841bfba29802daf8","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/841bfba29802daf8","status":"passed","time":{"start":1732408285145,"stop":1732408340649,"duration":55504}},{"uid":"eb84d7b24d932505","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/eb84d7b24d932505","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732316923298,"stop":1732316996416,"duration":73118}},{"uid":"8a59b171c3561b50","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/8a59b171c3561b50","status":"passed","time":{"start":1732312822448,"stop":1732312913272,"duration":90824}},{"uid":"7f425a291c207be4","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/7f425a291c207be4","status":"passed","time":{"start":1732302094667,"stop":1732302149320,"duration":54653}},{"uid":"862aac31cc598b69","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/862aac31cc598b69","status":"passed","time":{"start":1732302094667,"stop":1732302149320,"duration":54653}},{"uid":"a5a84c496f4f015","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/a5a84c496f4f015","status":"passed","time":{"start":1732302094667,"stop":1732302149320,"duration":54653}},{"uid":"788035b8630c456","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/788035b8630c456","status":"passed","time":{"start":1732292574019,"stop":1732292627637,"duration":53618}},{"uid":"6ff0559890f6091f","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/6ff0559890f6091f","status":"passed","time":{"start":1732225451826,"stop":1732225507255,"duration":55429}},{"uid":"1c87b7f4ec8f96c6","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/1c87b7f4ec8f96c6","status":"passed","time":{"start":1732292574019,"stop":1732292627637,"duration":53618}},{"uid":"f0feca32daabf90a","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/f0feca32daabf90a","status":"passed","time":{"start":1732227765090,"stop":1732227818786,"duration":53696}},{"uid":"b78f6bd491431641","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/b78f6bd491431641","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732290511892,"stop":1732290605124,"duration":93232}},{"uid":"a015f9f0249c76a3","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/a015f9f0249c76a3","status":"passed","time":{"start":1732289382944,"stop":1732289437133,"duration":54189}},{"uid":"e39bee90266a88b0","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/e39bee90266a88b0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732287178911,"stop":1732287272098,"duration":93187}},{"uid":"3f7fa1cb3857677d","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/3f7fa1cb3857677d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732283868346,"stop":1732283961484,"duration":93138}},{"uid":"1e43a05b578afa0f","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/1e43a05b578afa0f","status":"passed","time":{"start":1732280347351,"stop":1732280401830,"duration":54479}},{"uid":"7a1142e5631a48b6","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/7a1142e5631a48b6","status":"passed","time":{"start":1732274693333,"stop":1732274747458,"duration":54125}},{"uid":"8e9345238b58d421","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/8e9345238b58d421","status":"passed","time":{"start":1732273466078,"stop":1732273519926,"duration":53848}},{"uid":"2ee5abe507b6a668","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/2ee5abe507b6a668","status":"passed","time":{"start":1732232315768,"stop":1732232369147,"duration":53379}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"976be38461e8a984.json","parameterValues":["'rak5010'","'zephyr'"]}