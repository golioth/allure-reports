{"uid":"631402387d296b26","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1732549446423,"stop":1732549539111,"duration":92688},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8278ba50>\ndevice = <golioth.golioth.Device object at 0xffff82766050>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1732549431937,"stop":1732549431938,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1732549431937,"stop":1732549431937,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732549431938,"stop":1732549431939,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732549431938,"stop":1732549431938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732549431939,"stop":1732549431939,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732549431940,"stop":1732549431942,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732549431942,"stop":1732549431943,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732549431943,"stop":1732549431943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732549431944,"stop":1732549432368,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732549432369,"stop":1732549433199,"duration":830},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732549433200,"stop":1732549445804,"duration":12604},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732549445805,"stop":1732549446420,"duration":615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8278ba50>\ndevice = <golioth.golioth.Device object at 0xffff82766050>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"33b59e793df5298c","name":"log","source":"33b59e793df5298c.txt","type":"text/plain","size":22260}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732549539361,"stop":1732549539385,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732549539387,"stop":1732549539809,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732549539811,"stop":1732549539813,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732549539818,"stop":1732549539818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d480ee00283e"},{"name":"thread","value":"395-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"378bf8d417d1147a","status":"passed","time":{"start":1732508889063,"stop":1732508937186,"duration":48123}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":15,"skipped":0,"passed":73,"unknown":0,"total":91},"items":[{"uid":"a916fe154c8a8c60","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/a916fe154c8a8c60","status":"passed","time":{"start":1732508889063,"stop":1732508937186,"duration":48123}},{"uid":"693b34cde61cc4c6","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/693b34cde61cc4c6","status":"passed","time":{"start":1732408723727,"stop":1732408772095,"duration":48368}},{"uid":"f9b6a1e0f22d849","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/f9b6a1e0f22d849","status":"passed","time":{"start":1732408723727,"stop":1732408772095,"duration":48368}},{"uid":"4b792759fa136c51","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/4b792759fa136c51","status":"passed","time":{"start":1732316730791,"stop":1732316782230,"duration":51439}},{"uid":"f3240996ff9d067e","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/f3240996ff9d067e","status":"passed","time":{"start":1732312620738,"stop":1732312680284,"duration":59546}},{"uid":"8d57af030ead8aed","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/8d57af030ead8aed","status":"passed","time":{"start":1732301905490,"stop":1732301953631,"duration":48141}},{"uid":"343ee464cf9d3b73","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/343ee464cf9d3b73","status":"passed","time":{"start":1732301905490,"stop":1732301953631,"duration":48141}},{"uid":"63c4ee9444a428bb","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/63c4ee9444a428bb","status":"passed","time":{"start":1732301905490,"stop":1732301953631,"duration":48141}},{"uid":"3d0d10a3239744bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/3d0d10a3239744bd","status":"passed","time":{"start":1732292384265,"stop":1732292432726,"duration":48461}},{"uid":"a766eb5f11d12eb1","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/a766eb5f11d12eb1","status":"passed","time":{"start":1732225262415,"stop":1732225310913,"duration":48498}},{"uid":"8237b0ba0e2b2fe3","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/8237b0ba0e2b2fe3","status":"passed","time":{"start":1732292384265,"stop":1732292432726,"duration":48461}},{"uid":"ac4a0e85b875403e","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/ac4a0e85b875403e","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eec6610>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a450>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7ee77f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f045950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eea72d0>])","time":{"start":1732227575588,"stop":1732227623922,"duration":48334}},{"uid":"ae1a82250890f2e","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/ae1a82250890f2e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732290288828,"stop":1732290381674,"duration":92846}},{"uid":"1d0dfb685ce5a800","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/1d0dfb685ce5a800","status":"passed","time":{"start":1732289194255,"stop":1732289241695,"duration":47440}},{"uid":"c5d7140539a545f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/c5d7140539a545f5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732286955237,"stop":1732287048043,"duration":92806}},{"uid":"d586d88120438f43","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d586d88120438f43","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732283644843,"stop":1732283737650,"duration":92807}},{"uid":"541eb781936d5c55","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/541eb781936d5c55","status":"passed","time":{"start":1732280157709,"stop":1732280206238,"duration":48529}},{"uid":"dc21202ad644bd07","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/dc21202ad644bd07","status":"passed","time":{"start":1732274504596,"stop":1732274552446,"duration":47850}},{"uid":"6c7f904136bf0871","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/6c7f904136bf0871","status":"passed","time":{"start":1732273276286,"stop":1732273324986,"duration":48700}},{"uid":"8d19ab11b98166cd","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/8d19ab11b98166cd","status":"passed","time":{"start":1732232122518,"stop":1732232171954,"duration":49436}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"631402387d296b26.json","parameterValues":["'rak5010'","'zephyr'"]}