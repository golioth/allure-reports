{"uid":"6f67210cc7324e70","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6de3eafb2765c88fcbba2d44b75da8e7","time":{"start":1732549781233,"stop":1732549874781,"duration":93548},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa35bbf90>\ndevice = <golioth.golioth.Device object at 0xffffa35a2a10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732549766849,"stop":1732549766849,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732549766849,"stop":1732549766849,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732549766850,"stop":1732549766850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732549766850,"stop":1732549766851,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732549766851,"stop":1732549766851,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732549766852,"stop":1732549766854,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732549766854,"stop":1732549766855,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732549766855,"stop":1732549766855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732549766856,"stop":1732549767283,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732549767284,"stop":1732549768109,"duration":825},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732549768109,"stop":1732549780621,"duration":12512},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732549780622,"stop":1732549781230,"duration":608},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa35bbf90>\ndevice = <golioth.golioth.Device object at 0xffffa35a2a10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"4b9aeec0533c312a","name":"log","source":"4b9aeec0533c312a.txt","type":"text/plain","size":27102}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732549875150,"stop":1732549875281,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732549875283,"stop":1732549875667,"duration":384},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732549875669,"stop":1732549875672,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732549875677,"stop":1732549875677,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d480ee00283e"},{"name":"thread","value":"455-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"87876a60d5900ff6","status":"passed","time":{"start":1732509173814,"stop":1732509219683,"duration":45869}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":74,"unknown":0,"total":91},"items":[{"uid":"906b3e43f58c6d1f","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/906b3e43f58c6d1f","status":"passed","time":{"start":1732509173814,"stop":1732509219683,"duration":45869}},{"uid":"5b590690843c400c","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/5b590690843c400c","status":"passed","time":{"start":1732408380830,"stop":1732408426834,"duration":46004}},{"uid":"2384849d20a02d4d","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/2384849d20a02d4d","status":"passed","time":{"start":1732408380830,"stop":1732408426834,"duration":46004}},{"uid":"efb6a6b1fdfaa95d","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/efb6a6b1fdfaa95d","status":"passed","time":{"start":1732317036980,"stop":1732317082924,"duration":45944}},{"uid":"3bb9adeb2f596836","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/3bb9adeb2f596836","status":"passed","time":{"start":1732312953777,"stop":1732312999239,"duration":45462}},{"uid":"e5bbe84be2cad0ba","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/e5bbe84be2cad0ba","status":"passed","time":{"start":1732302189951,"stop":1732302234599,"duration":44648}},{"uid":"195c4d3488de51df","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/195c4d3488de51df","status":"passed","time":{"start":1732302189951,"stop":1732302234599,"duration":44648}},{"uid":"f38a1dd6bedb1a2f","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/f38a1dd6bedb1a2f","status":"passed","time":{"start":1732302189951,"stop":1732302234599,"duration":44648}},{"uid":"a9503f6c162a4710","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/a9503f6c162a4710","status":"passed","time":{"start":1732292668128,"stop":1732292713893,"duration":45765}},{"uid":"b971f55af1e9e7b1","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/b971f55af1e9e7b1","status":"passed","time":{"start":1732225547635,"stop":1732225593389,"duration":45754}},{"uid":"2b2699f01df87b7c","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/2b2699f01df87b7c","status":"passed","time":{"start":1732292668128,"stop":1732292713893,"duration":45765}},{"uid":"571aabdf99f4c348","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/571aabdf99f4c348","status":"passed","time":{"start":1732227859569,"stop":1732227905974,"duration":46405}},{"uid":"a5f0352ef5eb54e4","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/a5f0352ef5eb54e4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732290623519,"stop":1732290717116,"duration":93597}},{"uid":"68739d20b3f418ec","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/68739d20b3f418ec","status":"passed","time":{"start":1732289477672,"stop":1732289522629,"duration":44957}},{"uid":"b2eca74747ab0c19","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/b2eca74747ab0c19","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732287290862,"stop":1732287384468,"duration":93606}},{"uid":"2208466fac14f362","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/2208466fac14f362","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732283980492,"stop":1732284074180,"duration":93688}},{"uid":"5d73b55f54c0f605","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/5d73b55f54c0f605","status":"passed","time":{"start":1732280442364,"stop":1732280487667,"duration":45303}},{"uid":"56d428edde576db2","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/56d428edde576db2","status":"passed","time":{"start":1732274787765,"stop":1732274833781,"duration":46016}},{"uid":"94a795545e296a62","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/94a795545e296a62","status":"passed","time":{"start":1732273560253,"stop":1732273606005,"duration":45752}},{"uid":"b9345aedd4f3af9c","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/b9345aedd4f3af9c","status":"passed","time":{"start":1732232409993,"stop":1732232455644,"duration":45651}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"6f67210cc7324e70.json","parameterValues":["'rak5010'","'zephyr'"]}