{"uid":"e692f7c3d29c7ce6","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"c9ae6dc826a01d1d44d52fc2bf414310","time":{"start":1732549893349,"stop":1732549986566,"duration":93217},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5978710>\ndevice = <golioth.golioth.Device object at 0xffffb5926c50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732549878950,"stop":1732549878950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732549878951,"stop":1732549878951,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732549878951,"stop":1732549878951,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732549878952,"stop":1732549878953,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732549878952,"stop":1732549878952,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732549878953,"stop":1732549878955,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732549878956,"stop":1732549878956,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732549878957,"stop":1732549879367,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732549878957,"stop":1732549878957,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732549879367,"stop":1732549880225,"duration":858},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732549880226,"stop":1732549892722,"duration":12496},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732549892723,"stop":1732549893346,"duration":623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb5978710>\ndevice = <golioth.golioth.Device object at 0xffffb5926c50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e288e87d59b303a0","name":"log","source":"e288e87d59b303a0.txt","type":"text/plain","size":24115}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732549986838,"stop":1732549987071,"duration":233},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732549987073,"stop":1732549987468,"duration":395},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732549987470,"stop":1732549987472,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732549987477,"stop":1732549987477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d480ee00283e"},{"name":"thread","value":"475-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"65f212767d228012","status":"passed","time":{"start":1732509260041,"stop":1732509299693,"duration":39652}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":74,"unknown":0,"total":91},"items":[{"uid":"901f036665c97cad","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/901f036665c97cad","status":"passed","time":{"start":1732509260041,"stop":1732509299693,"duration":39652}},{"uid":"c5977cacd1b0d8a9","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/c5977cacd1b0d8a9","status":"passed","time":{"start":1732408467198,"stop":1732408507562,"duration":40364}},{"uid":"640422d5fb97287f","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/640422d5fb97287f","status":"passed","time":{"start":1732408467198,"stop":1732408507562,"duration":40364}},{"uid":"83eab3b13f1e36f0","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/83eab3b13f1e36f0","status":"passed","time":{"start":1732317123245,"stop":1732317162796,"duration":39551}},{"uid":"b45ba4940b802667","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/b45ba4940b802667","status":"passed","time":{"start":1732313039523,"stop":1732313089848,"duration":50325}},{"uid":"3a6a8009041c657d","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/3a6a8009041c657d","status":"passed","time":{"start":1732302279037,"stop":1732302319470,"duration":40433}},{"uid":"e8d89d07a14360","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/e8d89d07a14360","status":"passed","time":{"start":1732302279037,"stop":1732302319470,"duration":40433}},{"uid":"bb7b447eb9c356ff","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/bb7b447eb9c356ff","status":"passed","time":{"start":1732302279037,"stop":1732302319470,"duration":40433}},{"uid":"d378fcbba2947ffc","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/d378fcbba2947ffc","status":"passed","time":{"start":1732292754489,"stop":1732292794392,"duration":39903}},{"uid":"59e5ad69cd48f766","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/59e5ad69cd48f766","status":"passed","time":{"start":1732225633842,"stop":1732225673737,"duration":39895}},{"uid":"ebff993c65f034d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/ebff993c65f034d3","status":"passed","time":{"start":1732292754489,"stop":1732292794392,"duration":39903}},{"uid":"440f2097c9b0fa73","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/440f2097c9b0fa73","status":"passed","time":{"start":1732227946627,"stop":1732227990232,"duration":43605}},{"uid":"fdc2d32d46c106f6","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/fdc2d32d46c106f6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732290735649,"stop":1732290828644,"duration":92995}},{"uid":"814d38aa8a2fc5f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/814d38aa8a2fc5f4","status":"passed","time":{"start":1732289563215,"stop":1732289603061,"duration":39846}},{"uid":"b97521d5306ea1f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/b97521d5306ea1f5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732287402986,"stop":1732287496190,"duration":93204}},{"uid":"cc3fd6e6d424891e","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/cc3fd6e6d424891e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732284092826,"stop":1732284185920,"duration":93094}},{"uid":"29e23af77e1b9f4e","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/29e23af77e1b9f4e","status":"passed","time":{"start":1732280528142,"stop":1732280567833,"duration":39691}},{"uid":"574ae0b5e6176a54","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/574ae0b5e6176a54","status":"passed","time":{"start":1732274874313,"stop":1732274913658,"duration":39345}},{"uid":"f7c105917dff62b3","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/f7c105917dff62b3","status":"passed","time":{"start":1732273646277,"stop":1732273690046,"duration":43769}},{"uid":"c23efbe5d88a64a2","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/c23efbe5d88a64a2","status":"passed","time":{"start":1732232496233,"stop":1732232548414,"duration":52181}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"e692f7c3d29c7ce6.json","parameterValues":["'rak5010'","'zephyr'"]}