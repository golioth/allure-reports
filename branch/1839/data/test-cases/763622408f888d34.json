{"uid":"763622408f888d34","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"467e555cbdae75d46aefa9c64cb6440a","time":{"start":1732550612476,"stop":1732550725187,"duration":112711},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa4e4ead0>\ndevice = <golioth.golioth.Device object at 0xffffa4e22690>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732550598102,"stop":1732550598103,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732550598103,"stop":1732550598103,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732550598104,"stop":1732550598104,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732550598104,"stop":1732550598104,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732550598105,"stop":1732550598105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732550598105,"stop":1732550598107,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732550598108,"stop":1732550598108,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732550598109,"stop":1732550598541,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732550598109,"stop":1732550598109,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732550598541,"stop":1732550599350,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732550599351,"stop":1732550611869,"duration":12518},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732550611870,"stop":1732550612473,"duration":603},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa4e4ead0>\ndevice = <golioth.golioth.Device object at 0xffffa4e22690>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b1f78544831a45d7","name":"log","source":"b1f78544831a45d7.txt","type":"text/plain","size":21168}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732550725536,"stop":1732550725739,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732550725741,"stop":1732550726130,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732550726132,"stop":1732550726135,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732550726140,"stop":1732550726140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d480ee00283e"},{"name":"thread","value":"589-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5fe1276e8f6497a1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732550299399,"stop":1732550412161,"duration":112762}},{"uid":"1478fe082b86ce18","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1732509734192,"stop":1732509741508,"duration":7316}},{"uid":"5d80c547f0aa35c6","status":"passed","time":{"start":1732509639194,"stop":1732509693002,"duration":53808}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":74,"unknown":0,"total":91},"items":[{"uid":"abd1839e839dad81","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/abd1839e839dad81","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1732509734192,"stop":1732509741508,"duration":7316}},{"uid":"f2135a02456638f9","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/f2135a02456638f9","status":"passed","time":{"start":1732408812791,"stop":1732408866606,"duration":53815}},{"uid":"6d300a7df237f7d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/6d300a7df237f7d7","status":"passed","time":{"start":1732408812791,"stop":1732408866606,"duration":53815}},{"uid":"40a394e73a69c5ae","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/40a394e73a69c5ae","status":"passed","time":{"start":1732317475998,"stop":1732317529688,"duration":53690}},{"uid":"e20ad1c67c2aec69","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/e20ad1c67c2aec69","status":"passed","time":{"start":1732313402066,"stop":1732313457126,"duration":55060}},{"uid":"4fd8304a237bf286","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/4fd8304a237bf286","status":"passed","time":{"start":1732302633858,"stop":1732302687450,"duration":53592}},{"uid":"7be194279bbe12c9","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/7be194279bbe12c9","status":"passed","time":{"start":1732302633858,"stop":1732302687450,"duration":53592}},{"uid":"6526df8d5fde607b","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/6526df8d5fde607b","status":"passed","time":{"start":1732302633858,"stop":1732302687450,"duration":53592}},{"uid":"b4f25d745600a45d","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/b4f25d745600a45d","status":"passed","time":{"start":1732293107048,"stop":1732293172032,"duration":64984}},{"uid":"b119b56473b55f74","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/b119b56473b55f74","status":"passed","time":{"start":1732226119225,"stop":1732226172654,"duration":53429}},{"uid":"f043ab94856c1497","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/f043ab94856c1497","status":"passed","time":{"start":1732293107048,"stop":1732293172032,"duration":64984}},{"uid":"4ee8a84b5d717cc2","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/4ee8a84b5d717cc2","status":"passed","time":{"start":1732228305028,"stop":1732228359117,"duration":54089}},{"uid":"ab80c29fa831d592","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/ab80c29fa831d592","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732291455167,"stop":1732291567811,"duration":112644}},{"uid":"5a4435a3eab64d94","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/5a4435a3eab64d94","status":"passed","time":{"start":1732290053942,"stop":1732290106893,"duration":52951}},{"uid":"669bd352d9992085","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/669bd352d9992085","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732287940493,"stop":1732288053250,"duration":112757}},{"uid":"c8833c2d855f2cbe","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/c8833c2d855f2cbe","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732284811248,"stop":1732284923945,"duration":112697}},{"uid":"c7d96fa6655c5f5f","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/c7d96fa6655c5f5f","status":"passed","time":{"start":1732281000642,"stop":1732281055025,"duration":54383}},{"uid":"80c74c508008390e","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/80c74c508008390e","status":"passed","time":{"start":1732275348639,"stop":1732275403402,"duration":54763}},{"uid":"b15f3c4821a785eb","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/b15f3c4821a785eb","status":"passed","time":{"start":1732274000265,"stop":1732274054119,"duration":53854}},{"uid":"885583ed9706b8f1","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/885583ed9706b8f1","status":"passed","time":{"start":1732232985738,"stop":1732233039438,"duration":53700}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"763622408f888d34.json","parameterValues":["'rak5010'","'zephyr'"]}