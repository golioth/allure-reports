{"uid":"7b5908c6a5b7c656","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"ddbd6781d4488af4f57eae6c3dca1e27","time":{"start":1732550005779,"stop":1732550099789,"duration":94010},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff982db4d0>\nproject = <golioth.golioth.Project object at 0xffff99043790>\ndevice = <golioth.golioth.Device object at 0xffff982b9850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732549990754,"stop":1732549990755,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732549990755,"stop":1732549990755,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732549990756,"stop":1732549990756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732549990756,"stop":1732549990756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732549990757,"stop":1732549990757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732549990757,"stop":1732549990757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732549990758,"stop":1732549990760,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732549990758,"stop":1732549990758,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732549990761,"stop":1732549991188,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732549991188,"stop":1732549992253,"duration":1065},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732549992254,"stop":1732550005157,"duration":12903},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732550005157,"stop":1732550005776,"duration":619},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff982db4d0>\nproject = <golioth.golioth.Project object at 0xffff99043790>\ndevice = <golioth.golioth.Device object at 0xffff982b9850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"69a810eb042566cb","name":"log","source":"69a810eb042566cb.txt","type":"text/plain","size":30297}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732550100079,"stop":1732550100245,"duration":166},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732550100247,"stop":1732550100637,"duration":390},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732550100640,"stop":1732550100642,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732550100644,"stop":1732550100644,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d480ee00283e"},{"name":"thread","value":"495-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3cb6d81d9278ba65","status":"passed","time":{"start":1732509340976,"stop":1732509381049,"duration":40073}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":74,"unknown":0,"total":91},"items":[{"uid":"e0901ba42d255458","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/e0901ba42d255458","status":"passed","time":{"start":1732509340976,"stop":1732509381049,"duration":40073}},{"uid":"ed580404be1ce6ad","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/ed580404be1ce6ad","status":"passed","time":{"start":1732408548820,"stop":1732408588677,"duration":39857}},{"uid":"bc89f26402650a85","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/bc89f26402650a85","status":"passed","time":{"start":1732408548820,"stop":1732408588677,"duration":39857}},{"uid":"26ae4f8dfeabaa18","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/26ae4f8dfeabaa18","status":"passed","time":{"start":1732317204199,"stop":1732317244354,"duration":40155}},{"uid":"a97ecef3c88f8d71","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/a97ecef3c88f8d71","status":"passed","time":{"start":1732313131469,"stop":1732313171277,"duration":39808}},{"uid":"db997717f44a3bf1","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/db997717f44a3bf1","status":"passed","time":{"start":1732302361218,"stop":1732302402495,"duration":41277}},{"uid":"919ede05964edc8a","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/919ede05964edc8a","status":"passed","time":{"start":1732302361218,"stop":1732302402495,"duration":41277}},{"uid":"cc8a4f8e6dda5282","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/cc8a4f8e6dda5282","status":"passed","time":{"start":1732302361218,"stop":1732302402495,"duration":41277}},{"uid":"b2c5fc6175382554","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/b2c5fc6175382554","status":"passed","time":{"start":1732292835612,"stop":1732292875376,"duration":39764}},{"uid":"6d34e4e3111802f1","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/6d34e4e3111802f1","status":"passed","time":{"start":1732225715087,"stop":1732225755653,"duration":40566}},{"uid":"16319f7a2ea5e9a","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/16319f7a2ea5e9a","status":"passed","time":{"start":1732292835612,"stop":1732292875376,"duration":39764}},{"uid":"21442f7a0da91f79","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/21442f7a0da91f79","status":"passed","time":{"start":1732228031627,"stop":1732228072562,"duration":40935}},{"uid":"4b651c7af9411d6c","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/4b651c7af9411d6c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732290848017,"stop":1732290942013,"duration":93996}},{"uid":"d1bc3934e63dd1b5","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d1bc3934e63dd1b5","status":"passed","time":{"start":1732289644614,"stop":1732289696463,"duration":51849}},{"uid":"1be7e1d5d976cb89","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/1be7e1d5d976cb89","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732287514819,"stop":1732287608774,"duration":93955}},{"uid":"4c4b59d0dc48f949","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/4c4b59d0dc48f949","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732284204761,"stop":1732284298753,"duration":93992}},{"uid":"db34be4e844d6a61","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/db34be4e844d6a61","status":"passed","time":{"start":1732280609205,"stop":1732280648772,"duration":39567}},{"uid":"447d6eaf3d68b0ba","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/447d6eaf3d68b0ba","status":"passed","time":{"start":1732274954972,"stop":1732274995045,"duration":40073}},{"uid":"3c2524b5ad61c33b","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/3c2524b5ad61c33b","status":"passed","time":{"start":1732273731283,"stop":1732273771596,"duration":40313}},{"uid":"c33ca206739aa173","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/c33ca206739aa173","status":"passed","time":{"start":1732232590001,"stop":1732232631470,"duration":41469}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"7b5908c6a5b7c656.json","parameterValues":["'rak5010'","'zephyr'"]}