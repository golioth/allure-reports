{"uid":"dc2aa99cbb432001","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"03352d708656e4accf49c2f80b0063e1","time":{"start":1732125076116,"stop":1732125098799,"duration":22683},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff90b237d0>\ndevice = <golioth.golioth.Device object at 0xffff90e19c10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732125054527,"stop":1732125054527,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732125054528,"stop":1732125054528,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732125054529,"stop":1732125054529,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732125054530,"stop":1732125054530,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732125054531,"stop":1732125054531,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732125054532,"stop":1732125054535,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732125054536,"stop":1732125054536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732125054537,"stop":1732125054537,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732125054538,"stop":1732125055223,"duration":685},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732125055224,"stop":1732125056280,"duration":1056},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732125056281,"stop":1732125075090,"duration":18809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732125075090,"stop":1732125076113,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff90b237d0>\ndevice = <golioth.golioth.Device object at 0xffff90e19c10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2ff164a7a726ee3b","name":"log","source":"2ff164a7a726ee3b.txt","type":"text/plain","size":12408}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732125099276,"stop":1732125099468,"duration":192},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732125099470,"stop":1732125099903,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732125099905,"stop":1732125099908,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732125099912,"stop":1732125099913,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"584b1b01a204"},{"name":"thread","value":"342-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":20,"skipped":0,"passed":19,"unknown":0,"total":44},"items":[{"uid":"ea3f79b2826a2468","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/ea3f79b2826a2468","status":"passed","time":{"start":1732093751615,"stop":1732093766319,"duration":14704}},{"uid":"c1942652aa992525","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/c1942652aa992525","status":"passed","time":{"start":1732056020157,"stop":1732056033633,"duration":13476}},{"uid":"5bc37fc9422c8534","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/5bc37fc9422c8534","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732053270762,"stop":1732053293598,"duration":22836}},{"uid":"ef8d664b1accade0","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/ef8d664b1accade0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732048379399,"stop":1732048402012,"duration":22613}},{"uid":"6e3fa5d464c95012","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/6e3fa5d464c95012","status":"passed","time":{"start":1732043992442,"stop":1732044006775,"duration":14333}},{"uid":"ecefc6a5c9763215","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/ecefc6a5c9763215","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732031951200,"stop":1732031973826,"duration":22626}},{"uid":"175325950bc6b522","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/175325950bc6b522","status":"passed","time":{"start":1732029217637,"stop":1732029232256,"duration":14619}},{"uid":"b31f2e7faf1329ef","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/b31f2e7faf1329ef","status":"passed","time":{"start":1732027900265,"stop":1732027916870,"duration":16605}},{"uid":"dc1a7760c4655658","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/dc1a7760c4655658","status":"passed","time":{"start":1732014723789,"stop":1732014741988,"duration":18199}},{"uid":"83331c5e3e90446a","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/83331c5e3e90446a","status":"passed","time":{"start":1732001378179,"stop":1732001392396,"duration":14217}},{"uid":"5cbbd404ffa01bbf","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/5cbbd404ffa01bbf","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731970748535,"stop":1731970771167,"duration":22632}},{"uid":"7689be4c391a4b0b","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/7689be4c391a4b0b","status":"passed","time":{"start":1731968386352,"stop":1731968402152,"duration":15800}},{"uid":"6759cd5fce0d6e48","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/6759cd5fce0d6e48","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731962788549,"stop":1731962811379,"duration":22830}},{"uid":"2c9fcbca0420f724","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/2c9fcbca0420f724","status":"passed","time":{"start":1731958474728,"stop":1731958485510,"duration":10782}},{"uid":"deb4b833f7f07e64","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/deb4b833f7f07e64","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731955030810,"stop":1731955053494,"duration":22684}},{"uid":"9709837106970a3d","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/9709837106970a3d","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934142507,"stop":1731934142507,"duration":0}},{"uid":"ab27bd807d375b5c","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/ab27bd807d375b5c","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923077033,"stop":1731923077033,"duration":0}},{"uid":"2f3790b2f0d632dd","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/2f3790b2f0d632dd","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731906263524,"stop":1731906286044,"duration":22520}},{"uid":"50cf6a2c71ad1cc0","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/50cf6a2c71ad1cc0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731714727741,"stop":1731714750377,"duration":22636}},{"uid":"3ff25d859774c3f9","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/3ff25d859774c3f9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731711287237,"stop":1731711309819,"duration":22582}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"dc2aa99cbb432001.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}