{"uid":"78e3477576b4888","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"e35d87be40a3f24a162aaab8c9432c62","time":{"start":1732289987645,"stop":1732289987645,"duration":0},"status":"failed","statusMessage":"AssertionError: assert None != None","statusTrace":"item = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproject = <golioth.golioth.Project object at 0xffffa5c66810>\nblueprint_id = None\n\n    @pytest.fixture(scope=\"module\")\n    async def artifact(project, blueprint_id):\n        # Find Artifact that matches this device and desired update version\n    \n        artifact = None\n        all_artifacts = await project.artifacts.get_all()\n        for a in all_artifacts:\n            if (\n                a.blueprint == blueprint_id\n                and a.version == UPDATE_VERSION\n                and a.package == UPDATE_PACKAGE\n            ):\n                artifact = a\n    \n>       assert artifact != None\nE       assert None != None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py:59: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732289987648,"stop":1732289987649,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732289987649,"stop":1732289987649,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732289987650,"stop":1732289987650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1732289987650,"stop":1732289987678,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732289987679,"stop":1732289987679,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732289987679,"stop":1732289987679,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732289987680,"stop":1732289987680,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732289987680,"stop":1732289987681,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732289987681,"stop":1732289987684,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732289987684,"stop":1732289988119,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732289988120,"stop":1732289989027,"duration":907},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1732289989028,"stop":1732289989417,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1732289989418,"stop":1732289989809,"duration":391},"status":"failed","statusMessage":"AssertionError: assert None != None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py\", line 81, in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 929, in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 921, in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/outcome/_impl.py\", line 213, in unwrap\n    raise captured_error\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 891, in _run_tests_and_fixtures\n    retval = await coro\n             ^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/modules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py\", line 59, in artifact\n    assert artifact != None\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert None != None","statusTrace":"item = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproject = <golioth.golioth.Project object at 0xffffa5c66810>\nblueprint_id = None\n\n    @pytest.fixture(scope=\"module\")\n    async def artifact(project, blueprint_id):\n        # Find Artifact that matches this device and desired update version\n    \n        artifact = None\n        all_artifacts = await project.artifacts.get_all()\n        for a in all_artifacts:\n            if (\n                a.blueprint == blueprint_id\n                and a.version == UPDATE_VERSION\n                and a.package == UPDATE_PACKAGE\n            ):\n                artifact = a\n    \n>       assert artifact != None\nE       assert None != None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py:59: AssertionError","steps":[],"attachments":[{"uid":"408b90ad53145368","name":"log","source":"408b90ad53145368.txt","type":"text/plain","size":13295}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"blueprint_id::0","time":{"start":1732289990244,"stop":1732289990245,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732289990246,"stop":1732289990641,"duration":395},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732289990643,"stop":1732289990643,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732289990645,"stop":1732289990645,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1732289990653,"stop":1732289990655,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"6e0f939056b2"},{"name":"thread","value":"500-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":48,"skipped":0,"passed":23,"unknown":0,"total":76},"items":[{"uid":"f5abc35cc9d6f97","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/f5abc35cc9d6f97","status":"passed","time":{"start":1732197014799,"stop":1732197154780,"duration":139981}},{"uid":"f4ca95a8fddc8138","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/f4ca95a8fddc8138","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732287557366,"stop":1732287754109,"duration":196743}},{"uid":"76a37f11d4f40996","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/76a37f11d4f40996","status":"passed","time":{"start":1732197014799,"stop":1732197154780,"duration":139981}},{"uid":"5d20562bf3f46446","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/5d20562bf3f46446","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732280468936,"stop":1732280468936,"duration":0}},{"uid":"2f12cfc602bf3f1a","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/2f12cfc602bf3f1a","status":"passed","time":{"start":1732273559973,"stop":1732273659224,"duration":99251}},{"uid":"b32ddcb9cde72f9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/b32ddcb9cde72f9b","status":"passed","time":{"start":1732210111798,"stop":1732210237093,"duration":125295}},{"uid":"549e2e4b7b76b38d","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/549e2e4b7b76b38d","status":"passed","time":{"start":1732232667236,"stop":1732232784023,"duration":116787}},{"uid":"957cdc164221c7e9","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/957cdc164221c7e9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732228994190,"stop":1732229093872,"duration":99682}},{"uid":"67f6359a69c6cdc1","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/67f6359a69c6cdc1","status":"passed","time":{"start":1732227622266,"stop":1732227721264,"duration":98998}},{"uid":"e35e6dd21d45e789","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/e35e6dd21d45e789","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732226072595,"stop":1732226176640,"duration":104045}},{"uid":"f34efbc1c64e875","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/f34efbc1c64e875","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221431962,"stop":1732221431962,"duration":0}},{"uid":"fa49ef940a6c018d","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/fa49ef940a6c018d","status":"passed","time":{"start":1732216973269,"stop":1732217085414,"duration":112145}},{"uid":"d57c250a459308d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d57c250a459308d3","status":"passed","time":{"start":1732197014799,"stop":1732197154780,"duration":139981}},{"uid":"7bab907086e8da30","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/7bab907086e8da30","status":"passed","time":{"start":1732210111798,"stop":1732210237093,"duration":125295}},{"uid":"8006ba079f39e0ac","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/8006ba079f39e0ac","status":"passed","time":{"start":1732209419484,"stop":1732209511279,"duration":91795}},{"uid":"451f077f0c1323ff","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/451f077f0c1323ff","status":"passed","time":{"start":1732147823124,"stop":1732147925415,"duration":102291}},{"uid":"50740a8646eb2218","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/50740a8646eb2218","status":"passed","time":{"start":1732197014799,"stop":1732197154780,"duration":139981}},{"uid":"927336208deda6b1","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/927336208deda6b1","status":"passed","time":{"start":1732148630214,"stop":1732148782540,"duration":152326}},{"uid":"14462c65643307af","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/14462c65643307af","status":"passed","time":{"start":1732147823124,"stop":1732147925415,"duration":102291}},{"uid":"aeeed5f15a2b92b9","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/aeeed5f15a2b92b9","status":"passed","time":{"start":1732197014799,"stop":1732197154780,"duration":139981}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"78e3477576b4888.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}