{
  "uid" : "1e8c7ee630db7700",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "934caf5f97c3bf444d136e05890d35c9",
  "time" : {
    "start" : 1734048149580,
    "stop" : 1734048172793,
    "duration" : 23213
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa7ccf550>\ndevice = <golioth.golioth.Device object at 0xffffa7cea790>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dut",
    "time" : {
      "start" : 1734048122334,
      "stop" : 1734048146467,
      "duration" : 24133
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734048120770,
      "stop" : 1734048120770,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734048120774,
      "stop" : 1734048120774,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734048120775,
      "stop" : 1734048120775,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734048120769,
      "stop" : 1734048120769,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734048121265,
      "stop" : 1734048122333,
      "duration" : 1068
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734048120771,
      "stop" : 1734048120773,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734048120775,
      "stop" : 1734048121264,
      "duration" : 489
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734048146467,
      "stop" : 1734048149573,
      "duration" : 3106
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734048120771,
      "stop" : 1734048120771,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734048120770,
      "stop" : 1734048120770,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734048120768,
      "stop" : 1734048120768,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa7ccf550>\ndevice = <golioth.golioth.Device object at 0xffffa7cea790>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "54eb4539776111bd",
      "name" : "log",
      "source" : "54eb4539776111bd.txt",
      "type" : "text/plain",
      "size" : 21106
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1734048173103,
      "stop" : 1734048173387,
      "duration" : 284
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734048173389,
      "stop" : 1734048173990,
      "duration" : 601
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734048174000,
      "stop" : 1734048174000,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734048173993,
      "stop" : 1734048173995,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf52840dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf52840dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "038e24e7f0f1"
  }, {
    "name" : "thread",
    "value" : "538-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf52840dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 23
      },
      "items" : [ {
        "uid" : "ca1ac074a86ef655",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/ca1ac074a86ef655",
        "status" : "passed",
        "time" : {
          "start" : 1734044587449,
          "stop" : 1734044615896,
          "duration" : 28447
        }
      }, {
        "uid" : "bf863657da54dda8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/bf863657da54dda8",
        "status" : "passed",
        "time" : {
          "start" : 1734033336055,
          "stop" : 1734033364482,
          "duration" : 28427
        }
      }, {
        "uid" : "22e2dd15b7308020",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/22e2dd15b7308020",
        "status" : "passed",
        "time" : {
          "start" : 1734028811806,
          "stop" : 1734028840178,
          "duration" : 28372
        }
      }, {
        "uid" : "b018731e34e996ae",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/b018731e34e996ae",
        "status" : "passed",
        "time" : {
          "start" : 1734025221665,
          "stop" : 1734025250296,
          "duration" : 28631
        }
      }, {
        "uid" : "e77de9a5be12c5fe",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/e77de9a5be12c5fe",
        "status" : "passed",
        "time" : {
          "start" : 1734022810952,
          "stop" : 1734022839180,
          "duration" : 28228
        }
      }, {
        "uid" : "a33a3c58685f0c74",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/a33a3c58685f0c74",
        "status" : "passed",
        "time" : {
          "start" : 1733940061286,
          "stop" : 1733940089566,
          "duration" : 28280
        }
      }, {
        "uid" : "19bceb009cc9538e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/19bceb009cc9538e",
        "status" : "passed",
        "time" : {
          "start" : 1733960904205,
          "stop" : 1733960932497,
          "duration" : 28292
        }
      }, {
        "uid" : "66c8e38edc7dbdd1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/66c8e38edc7dbdd1",
        "status" : "passed",
        "time" : {
          "start" : 1733957226202,
          "stop" : 1733957254446,
          "duration" : 28244
        }
      }, {
        "uid" : "a88f720d0a907ce0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/a88f720d0a907ce0",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733951643336,
          "stop" : 1733951643336,
          "duration" : 0
        }
      }, {
        "uid" : "dd6a5eb4fb922429",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/dd6a5eb4fb922429",
        "status" : "passed",
        "time" : {
          "start" : 1733948764178,
          "stop" : 1733948792461,
          "duration" : 28283
        }
      }, {
        "uid" : "f9254c9a9f899a9b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/f9254c9a9f899a9b",
        "status" : "passed",
        "time" : {
          "start" : 1733946925127,
          "stop" : 1733946953552,
          "duration" : 28425
        }
      }, {
        "uid" : "4321ad96186b4952",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/4321ad96186b4952",
        "status" : "passed",
        "time" : {
          "start" : 1733941032076,
          "stop" : 1733941060316,
          "duration" : 28240
        }
      }, {
        "uid" : "d069f1db86a317d0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/d069f1db86a317d0",
        "status" : "passed",
        "time" : {
          "start" : 1733940061286,
          "stop" : 1733940089566,
          "duration" : 28280
        }
      }, {
        "uid" : "11f878b51a44f85d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/11f878b51a44f85d",
        "status" : "passed",
        "time" : {
          "start" : 1733889505422,
          "stop" : 1733889533716,
          "duration" : 28294
        }
      }, {
        "uid" : "13e82f32df6eb10a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/13e82f32df6eb10a",
        "status" : "passed",
        "time" : {
          "start" : 1733886880389,
          "stop" : 1733886908672,
          "duration" : 28283
        }
      }, {
        "uid" : "ff0ae4c80b52397a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/ff0ae4c80b52397a",
        "status" : "passed",
        "time" : {
          "start" : 1733889505422,
          "stop" : 1733889533716,
          "duration" : 28294
        }
      }, {
        "uid" : "822e748f497dc81d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/822e748f497dc81d",
        "status" : "passed",
        "time" : {
          "start" : 1733886880389,
          "stop" : 1733886908672,
          "duration" : 28283
        }
      }, {
        "uid" : "3154c61f1c396d64",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/3154c61f1c396d64",
        "status" : "passed",
        "time" : {
          "start" : 1733875725288,
          "stop" : 1733875753624,
          "duration" : 28336
        }
      }, {
        "uid" : "dc6cc360326562b1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/dc6cc360326562b1",
        "status" : "passed",
        "time" : {
          "start" : 1733874739548,
          "stop" : 1733874767893,
          "duration" : 28345
        }
      }, {
        "uid" : "fa04c6a45228f879",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/fa04c6a45228f879",
        "status" : "passed",
        "time" : {
          "start" : 1733864937063,
          "stop" : 1733864965458,
          "duration" : 28395
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf52840dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "1e8c7ee630db7700.json",
  "parameterValues" : [ "'nrf52840dk'", "'zephyr'" ]
}