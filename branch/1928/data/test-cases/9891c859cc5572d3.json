{
  "uid" : "9891c859cc5572d3",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "bb4a636b6b2082650c724d1259211759",
  "time" : {
    "start" : 1734048159820,
    "stop" : 1734048182104,
    "duration" : 22284
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff958f1950>\ndevice = <golioth.golioth.Device object at 0xffff958d6ed0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_name",
    "time" : {
      "start" : 1734048150244,
      "stop" : 1734048150244,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734048150245,
      "stop" : 1734048150247,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734048159300,
      "stop" : 1734048159817,
      "duration" : 517
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734048150244,
      "stop" : 1734048150245,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734048150249,
      "stop" : 1734048150668,
      "duration" : 419
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734048150248,
      "stop" : 1734048150248,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734048150243,
      "stop" : 1734048150243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734048150243,
      "stop" : 1734048150243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734048150242,
      "stop" : 1734048150242,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734048150669,
      "stop" : 1734048151488,
      "duration" : 819
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734048151489,
      "stop" : 1734048159299,
      "duration" : 7810
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734048150248,
      "stop" : 1734048150248,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff958f1950>\ndevice = <golioth.golioth.Device object at 0xffff958d6ed0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(sync\\\\): 13'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6be267f2ea179426",
      "name" : "log",
      "source" : "6be267f2ea179426.txt",
      "type" : "text/plain",
      "size" : 20934
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734048183052,
      "stop" : 1734048183052,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734048183045,
      "stop" : 1734048183047,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734048182422,
      "stop" : 1734048183043,
      "duration" : 621
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734048182378,
      "stop" : 1734048182421,
      "duration" : 43
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "tims_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "67a7ba22df2b"
  }, {
    "name" : "thread",
    "value" : "407-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'mimxrt1024_evk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 22,
        "unknown" : 0,
        "total" : 23
      },
      "items" : [ {
        "uid" : "3fed4a0e4f021fb2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/3fed4a0e4f021fb2",
        "status" : "passed",
        "time" : {
          "start" : 1734045391301,
          "stop" : 1734045419226,
          "duration" : 27925
        }
      }, {
        "uid" : "5f0443a132e6fd06",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/5f0443a132e6fd06",
        "status" : "passed",
        "time" : {
          "start" : 1734034009427,
          "stop" : 1734034037343,
          "duration" : 27916
        }
      }, {
        "uid" : "655826aa823c7b39",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/655826aa823c7b39",
        "status" : "passed",
        "time" : {
          "start" : 1734029619606,
          "stop" : 1734029647505,
          "duration" : 27899
        }
      }, {
        "uid" : "8a1d25505adeaced",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/8a1d25505adeaced",
        "status" : "passed",
        "time" : {
          "start" : 1734026035106,
          "stop" : 1734026064096,
          "duration" : 28990
        }
      }, {
        "uid" : "38c5c8a9f07fde92",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/38c5c8a9f07fde92",
        "status" : "passed",
        "time" : {
          "start" : 1734023620566,
          "stop" : 1734023648518,
          "duration" : 27952
        }
      }, {
        "uid" : "912b742fe6a57bfd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/912b742fe6a57bfd",
        "status" : "passed",
        "time" : {
          "start" : 1733941831131,
          "stop" : 1733941860150,
          "duration" : 29019
        }
      }, {
        "uid" : "1f50f41702d11224",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/1f50f41702d11224",
        "status" : "passed",
        "time" : {
          "start" : 1733961863538,
          "stop" : 1733961891458,
          "duration" : 27920
        }
      }, {
        "uid" : "f0a02219ae531224",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/f0a02219ae531224",
        "status" : "passed",
        "time" : {
          "start" : 1733958135541,
          "stop" : 1733958163461,
          "duration" : 27920
        }
      }, {
        "uid" : "f29de5ca822b1220",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/f29de5ca822b1220",
        "status" : "passed",
        "time" : {
          "start" : 1733952225692,
          "stop" : 1733952253635,
          "duration" : 27943
        }
      }, {
        "uid" : "1f20a24069cb93bc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/1f20a24069cb93bc",
        "status" : "passed",
        "time" : {
          "start" : 1733949565145,
          "stop" : 1733949594083,
          "duration" : 28938
        }
      }, {
        "uid" : "8bed305f8eedf0cc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/8bed305f8eedf0cc",
        "status" : "passed",
        "time" : {
          "start" : 1733947612500,
          "stop" : 1733947641436,
          "duration" : 28936
        }
      }, {
        "uid" : "56b35bb1ab12a9a4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/56b35bb1ab12a9a4",
        "status" : "passed",
        "time" : {
          "start" : 1733943707293,
          "stop" : 1733943736209,
          "duration" : 28916
        }
      }, {
        "uid" : "c6d069b0f23e2d38",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/c6d069b0f23e2d38",
        "status" : "passed",
        "time" : {
          "start" : 1733941831131,
          "stop" : 1733941860150,
          "duration" : 29019
        }
      }, {
        "uid" : "3422abed98007034",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/3422abed98007034",
        "status" : "passed",
        "time" : {
          "start" : 1733889562352,
          "stop" : 1733889591305,
          "duration" : 28953
        }
      }, {
        "uid" : "72c89a5286a54387",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/72c89a5286a54387",
        "status" : "passed",
        "time" : {
          "start" : 1733887957001,
          "stop" : 1733887984942,
          "duration" : 27941
        }
      }, {
        "uid" : "2a5231394bab48c0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/2a5231394bab48c0",
        "status" : "passed",
        "time" : {
          "start" : 1733889562352,
          "stop" : 1733889591305,
          "duration" : 28953
        }
      }, {
        "uid" : "3d7cae0d76010b79",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/3d7cae0d76010b79",
        "status" : "passed",
        "time" : {
          "start" : 1733887957001,
          "stop" : 1733887984942,
          "duration" : 27941
        }
      }, {
        "uid" : "7c975369224ef19b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/7c975369224ef19b",
        "status" : "passed",
        "time" : {
          "start" : 1733877116876,
          "stop" : 1733877145846,
          "duration" : 28970
        }
      }, {
        "uid" : "f4557c53db8bdc8f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/f4557c53db8bdc8f",
        "status" : "passed",
        "time" : {
          "start" : 1733877455685,
          "stop" : 1733877483670,
          "duration" : 27985
        }
      }, {
        "uid" : "bb791aabcd97b67e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/bb791aabcd97b67e",
        "status" : "passed",
        "time" : {
          "start" : 1733866966502,
          "stop" : 1733866994452,
          "duration" : 27950
        }
      } ]
    },
    "tags" : [ "anyio", "tims_orange_pi", "@pytest.mark.usefixtures('anyio_backend')", "mimxrt1024_evk", "zephyr" ]
  },
  "source" : "9891c859cc5572d3.json",
  "parameterValues" : [ "'mimxrt1024_evk'", "'zephyr'" ]
}