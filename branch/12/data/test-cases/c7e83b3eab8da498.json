{
  "uid" : "c7e83b3eab8da498",
  "name" : "test_settings",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings",
  "historyId" : "d6d167c5ecb927d8d413dac5f1f3452a",
  "time" : {
    "start" : 1735932698009,
    "stop" : 1735932792115,
    "duration" : 94106
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa996ab10>\nproject = <golioth.golioth.Project object at 0xffffa9ae0750>\ndevice = <golioth.golioth.Device object at 0xffffa9985b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_object",
    "time" : {
      "start" : 1735932668774,
      "stop" : 1735932668776,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1735932696929,
      "stop" : 1735932698006,
      "duration" : 1077
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1735932668773,
      "stop" : 1735932668773,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1735932669194,
      "stop" : 1735932670071,
      "duration" : 877
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1735932668772,
      "stop" : 1735932668772,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1735932668773,
      "stop" : 1735932668773,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1735932668774,
      "stop" : 1735932668774,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1735932668772,
      "stop" : 1735932668772,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1735932668771,
      "stop" : 1735932668771,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1735932668777,
      "stop" : 1735932669194,
      "duration" : 417
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1735932668770,
      "stop" : 1735932668771,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1735932670071,
      "stop" : 1735932696929,
      "duration" : 26858
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa996ab10>\nproject = <golioth.golioth.Project object at 0xffffa9ae0750>\ndevice = <golioth.golioth.Device object at 0xffffa9985b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "feaa664146fc6fed",
      "name" : "log",
      "source" : "feaa664146fc6fed.txt",
      "type" : "text/plain",
      "size" : 20683
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1735932792762,
      "stop" : 1735932792762,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1735932792366,
      "stop" : 1735932792756,
      "duration" : 390
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1735932792758,
      "stop" : 1735932792760,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1735932792356,
      "stop" : 1735932792365,
      "duration" : 9
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "d45da95482b1"
  }, {
    "name" : "thread",
    "value" : "830-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 15,
        "unknown" : 0,
        "total" : 17
      },
      "items" : [ {
        "uid" : "2a50220e23a76b70",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/2a50220e23a76b70",
        "status" : "passed",
        "time" : {
          "start" : 1735928334339,
          "stop" : 1735928346092,
          "duration" : 11753
        }
      }, {
        "uid" : "ebf599ebf06a05f2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/ebf599ebf06a05f2",
        "status" : "passed",
        "time" : {
          "start" : 1735924191488,
          "stop" : 1735924221471,
          "duration" : 29983
        }
      }, {
        "uid" : "c950dcf750d41d13",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/c950dcf750d41d13",
        "status" : "passed",
        "time" : {
          "start" : 1735864929533,
          "stop" : 1735864943114,
          "duration" : 13581
        }
      }, {
        "uid" : "7ca5e3abf09a276d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/7ca5e3abf09a276d",
        "status" : "passed",
        "time" : {
          "start" : 1735863734769,
          "stop" : 1735863775201,
          "duration" : 40432
        }
      }, {
        "uid" : "892723e6d468b4e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/892723e6d468b4e",
        "status" : "passed",
        "time" : {
          "start" : 1735853358128,
          "stop" : 1735853372117,
          "duration" : 13989
        }
      }, {
        "uid" : "c6d3ede3280c4375",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/c6d3ede3280c4375",
        "status" : "passed",
        "time" : {
          "start" : 1735849537524,
          "stop" : 1735849566958,
          "duration" : 29434
        }
      }, {
        "uid" : "619b7d5ad5aeca5d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/619b7d5ad5aeca5d",
        "status" : "passed",
        "time" : {
          "start" : 1735848428164,
          "stop" : 1735848442821,
          "duration" : 14657
        }
      }, {
        "uid" : "3033550fda6e1abf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/3033550fda6e1abf",
        "status" : "passed",
        "time" : {
          "start" : 1735838167090,
          "stop" : 1735838179598,
          "duration" : 12508
        }
      }, {
        "uid" : "c237c6f8ed76caa5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/c237c6f8ed76caa5",
        "status" : "passed",
        "time" : {
          "start" : 1735834130095,
          "stop" : 1735834143788,
          "duration" : 13693
        }
      }, {
        "uid" : "ae9eb37262929ad8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/ae9eb37262929ad8",
        "status" : "passed",
        "time" : {
          "start" : 1735829197630,
          "stop" : 1735829211376,
          "duration" : 13746
        }
      }, {
        "uid" : "89ee8e2d34455c01",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/89ee8e2d34455c01",
        "status" : "passed",
        "time" : {
          "start" : 1735679746446,
          "stop" : 1735679783333,
          "duration" : 36887
        }
      }, {
        "uid" : "2b468fc3d0279ce4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/2b468fc3d0279ce4",
        "status" : "passed",
        "time" : {
          "start" : 1735679875581,
          "stop" : 1735679888442,
          "duration" : 12861
        }
      }, {
        "uid" : "47b303719d47a48c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/47b303719d47a48c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735670124978,
          "stop" : 1735670218810,
          "duration" : 93832
        }
      }, {
        "uid" : "deea479b9daf61c1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/deea479b9daf61c1",
        "status" : "passed",
        "time" : {
          "start" : 1735665839341,
          "stop" : 1735665852401,
          "duration" : 13060
        }
      }, {
        "uid" : "efdb295b6c9a592d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/efdb295b6c9a592d",
        "status" : "passed",
        "time" : {
          "start" : 1735576848433,
          "stop" : 1735576860348,
          "duration" : 11915
        }
      }, {
        "uid" : "c82a54295d405a41",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1971/#testresult/c82a54295d405a41",
        "status" : "passed",
        "time" : {
          "start" : 1734762275032,
          "stop" : 1734762299808,
          "duration" : 24776
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "c7e83b3eab8da498.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}