{
  "uid" : "7238a0526c55282",
  "name" : "test_fw_update",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update",
  "historyId" : "ae1c7e14b29d468f72319f0a6ff27eb0",
  "time" : {
    "start" : 1736225099249,
    "stop" : 1736225220229,
    "duration" : 120980
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa8cb5e50>\nproject = <golioth.golioth.Project object at 0xffffa89c3150>\ndevice = <golioth.golioth.Device object at 0xffffa8cb6c10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <677cb12d6c6d6aa9b9bec3c8, release_tags=[], device_tags=['677cb12c6c6d6aa9b9bec3c7'], artifact_ids=['674e19a8509873c6f7445232'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n>       shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Received block.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_name",
    "time" : {
      "start" : 1736225065708,
      "stop" : 1736225065708,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736225065709,
      "stop" : 1736225065709,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "artifact",
    "time" : {
      "start" : 1736225067520,
      "stop" : 1736225067899,
      "duration" : 379
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736225065579,
      "stop" : 1736225065579,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736225098147,
      "stop" : 1736225099245,
      "duration" : 1098
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "release",
    "time" : {
      "start" : 1736225069133,
      "stop" : 1736225069565,
      "duration" : 432
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736225065707,
      "stop" : 1736225065707,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736225069565,
      "stop" : 1736225098147,
      "duration" : 28582
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "blueprint_id",
    "time" : {
      "start" : 1736225067128,
      "stop" : 1736225067519,
      "duration" : 391
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736225065709,
      "stop" : 1736225065712,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736225065578,
      "stop" : 1736225065578,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tag",
    "time" : {
      "start" : 1736225067899,
      "stop" : 1736225069132,
      "duration" : 1233
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736225065578,
      "stop" : 1736225065578,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736225066153,
      "stop" : 1736225067127,
      "duration" : 974
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736225065713,
      "stop" : 1736225066152,
      "duration" : 439
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736225065707,
      "stop" : 1736225065708,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fw_info",
    "time" : {
      "start" : 1736225065579,
      "stop" : 1736225065706,
      "duration" : 127
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa8cb5e50>\nproject = <golioth.golioth.Project object at 0xffffa89c3150>\ndevice = <golioth.golioth.Device object at 0xffffa8cb6c10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <677cb12d6c6d6aa9b9bec3c8, release_tags=[], device_tags=['677cb12c6c6d6aa9b9bec3c7'], artifact_ids=['674e19a8509873c6f7445232'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n>       shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Received block.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9330a40cfd58cc71",
      "name" : "log",
      "source" : "9330a40cfd58cc71.txt",
      "type" : "text/plain",
      "size" : 41070
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "artifact::0",
    "time" : {
      "start" : 1736225221959,
      "stop" : 1736225221960,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "release::0",
    "time" : {
      "start" : 1736225220766,
      "stop" : 1736225221166,
      "duration" : 400
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736225220715,
      "stop" : 1736225220764,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "blueprint_id::0",
    "time" : {
      "start" : 1736225221962,
      "stop" : 1736225221962,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736225222368,
      "stop" : 1736225222368,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tag::0",
    "time" : {
      "start" : 1736225221168,
      "stop" : 1736225221957,
      "duration" : 789
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736225221964,
      "stop" : 1736225222363,
      "duration" : 399
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736225222366,
      "stop" : 1736225222366,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fw_info::0",
    "time" : {
      "start" : 1736225222375,
      "stop" : 1736225222377,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "a40847bf2754"
  }, {
    "name" : "thread",
    "value" : "451-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "20de58937cc91c66",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/20de58937cc91c66",
        "status" : "passed",
        "time" : {
          "start" : 1736208441472,
          "stop" : 1736208735095,
          "duration" : 293623
        }
      }, {
        "uid" : "c2438d2a305a9ee6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/c2438d2a305a9ee6",
        "status" : "passed",
        "time" : {
          "start" : 1736208441472,
          "stop" : 1736208735095,
          "duration" : 293623
        }
      }, {
        "uid" : "32fdf730d8f8d78b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/32fdf730d8f8d78b",
        "status" : "passed",
        "time" : {
          "start" : 1735949317213,
          "stop" : 1735949697323,
          "duration" : 380110
        }
      }, {
        "uid" : "6ecb880469c0157d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/6ecb880469c0157d",
        "status" : "passed",
        "time" : {
          "start" : 1735927501614,
          "stop" : 1735927787419,
          "duration" : 285805
        }
      }, {
        "uid" : "1804d2fcd0706e71",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/1804d2fcd0706e71",
        "status" : "passed",
        "time" : {
          "start" : 1735932101044,
          "stop" : 1735932396545,
          "duration" : 295501
        }
      }, {
        "uid" : "cc00595e4fb054da",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/cc00595e4fb054da",
        "status" : "passed",
        "time" : {
          "start" : 1735927501614,
          "stop" : 1735927787419,
          "duration" : 285805
        }
      }, {
        "uid" : "1b5ce4ca03b3b4ab",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/1b5ce4ca03b3b4ab",
        "status" : "passed",
        "time" : {
          "start" : 1735923456600,
          "stop" : 1735923756090,
          "duration" : 299490
        }
      }, {
        "uid" : "9e7a2df25a03903f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/9e7a2df25a03903f",
        "status" : "passed",
        "time" : {
          "start" : 1735864345666,
          "stop" : 1735864614768,
          "duration" : 269102
        }
      }, {
        "uid" : "bba6fc39c80cd4fa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/bba6fc39c80cd4fa",
        "status" : "passed",
        "time" : {
          "start" : 1735863035572,
          "stop" : 1735863346703,
          "duration" : 311131
        }
      }, {
        "uid" : "eaca3c4d41321891",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/eaca3c4d41321891",
        "status" : "passed",
        "time" : {
          "start" : 1735852708240,
          "stop" : 1735852985928,
          "duration" : 277688
        }
      }, {
        "uid" : "f24d7fc1fb3d6078",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/f24d7fc1fb3d6078",
        "status" : "passed",
        "time" : {
          "start" : 1735848863062,
          "stop" : 1735849155877,
          "duration" : 292815
        }
      }, {
        "uid" : "e4038262ceeac1df",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/e4038262ceeac1df",
        "status" : "passed",
        "time" : {
          "start" : 1735847853924,
          "stop" : 1735848121723,
          "duration" : 267799
        }
      }, {
        "uid" : "59acf5d2214af125",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/59acf5d2214af125",
        "status" : "passed",
        "time" : {
          "start" : 1735837514769,
          "stop" : 1735837761593,
          "duration" : 246824
        }
      }, {
        "uid" : "fab4bc2461c5cd74",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/fab4bc2461c5cd74",
        "status" : "passed",
        "time" : {
          "start" : 1735833568523,
          "stop" : 1735833829452,
          "duration" : 260929
        }
      }, {
        "uid" : "8edf3265c2595f0b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/8edf3265c2595f0b",
        "status" : "passed",
        "time" : {
          "start" : 1735828638292,
          "stop" : 1735828895965,
          "duration" : 257673
        }
      }, {
        "uid" : "e4b63eb10dd2edf1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/e4b63eb10dd2edf1",
        "status" : "passed",
        "time" : {
          "start" : 1735679061915,
          "stop" : 1735679369656,
          "duration" : 307741
        }
      }, {
        "uid" : "18c05b7bccf1aee7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/18c05b7bccf1aee7",
        "status" : "passed",
        "time" : {
          "start" : 1735679342321,
          "stop" : 1735679574835,
          "duration" : 232514
        }
      }, {
        "uid" : "fe2a088ccea75673",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/fe2a088ccea75673",
        "status" : "passed",
        "time" : {
          "start" : 1735669475571,
          "stop" : 1735669754581,
          "duration" : 279010
        }
      }, {
        "uid" : "d8bce91cf0522420",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/d8bce91cf0522420",
        "status" : "passed",
        "time" : {
          "start" : 1735665280670,
          "stop" : 1735665537228,
          "duration" : 256558
        }
      }, {
        "uid" : "40cdfa84b80540ac",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/40cdfa84b80540ac",
        "status" : "passed",
        "time" : {
          "start" : 1735576231474,
          "stop" : 1735576463449,
          "duration" : 231975
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "7238a0526c55282.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}