{
  "uid" : "b962f0df81258456",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello",
  "historyId" : "728c1ad8cfe5fc9c60fb1445998f2048",
  "time" : {
    "start" : 1736225941013,
    "stop" : 1736226053749,
    "duration" : 112736
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb9507f10>\ndevice = <golioth.golioth.Device object at 0xffffb9522b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736225912194,
      "stop" : 1736225912194,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736225912193,
      "stop" : 1736225912193,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736225912198,
      "stop" : 1736225912198,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736225912193,
      "stop" : 1736225912193,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736225939920,
      "stop" : 1736225941010,
      "duration" : 1090
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736225912191,
      "stop" : 1736225912192,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736225912192,
      "stop" : 1736225912192,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736225912198,
      "stop" : 1736225912621,
      "duration" : 423
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736225912621,
      "stop" : 1736225913578,
      "duration" : 957
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736225912194,
      "stop" : 1736225912196,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736225912197,
      "stop" : 1736225912197,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736225913579,
      "stop" : 1736225939919,
      "duration" : 26340
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb9507f10>\ndevice = <golioth.golioth.Device object at 0xffffb9522b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "50063fdf6ab90997",
      "name" : "log",
      "source" : "50063fdf6ab90997.txt",
      "type" : "text/plain",
      "size" : 17057
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1736226054508,
      "stop" : 1736226054510,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736226054104,
      "stop" : 1736226054506,
      "duration" : 402
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736226054515,
      "stop" : 1736226054515,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736226054095,
      "stop" : 1736226054102,
      "duration" : 7
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "a40847bf2754"
  }, {
    "name" : "thread",
    "value" : "997-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "64d27238bddad199",
      "status" : "broken",
      "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
      "time" : {
        "start" : 1736225255113,
        "stop" : 1736225367901,
        "duration" : 112788
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 18,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "2d9e5c1ba5f710c5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/2d9e5c1ba5f710c5",
        "status" : "passed",
        "time" : {
          "start" : 1736209441581,
          "stop" : 1736209466316,
          "duration" : 24735
        }
      }, {
        "uid" : "14671c7204ff34e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/14671c7204ff34e",
        "status" : "passed",
        "time" : {
          "start" : 1736209441581,
          "stop" : 1736209466316,
          "duration" : 24735
        }
      }, {
        "uid" : "a5fcce4d29c5c791",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/a5fcce4d29c5c791",
        "status" : "passed",
        "time" : {
          "start" : 1735950348019,
          "stop" : 1735950396121,
          "duration" : 48102
        }
      }, {
        "uid" : "f436692ab7ab2b48",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/f436692ab7ab2b48",
        "status" : "passed",
        "time" : {
          "start" : 1735928496853,
          "stop" : 1735928521526,
          "duration" : 24673
        }
      }, {
        "uid" : "fad542478cf0a62c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/fad542478cf0a62c",
        "status" : "passed",
        "time" : {
          "start" : 1735933005841,
          "stop" : 1735933030884,
          "duration" : 25043
        }
      }, {
        "uid" : "791f10c1c7e53b9c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/791f10c1c7e53b9c",
        "status" : "passed",
        "time" : {
          "start" : 1735928496853,
          "stop" : 1735928521526,
          "duration" : 24673
        }
      }, {
        "uid" : "feaea8a9a967af60",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/feaea8a9a967af60",
        "status" : "passed",
        "time" : {
          "start" : 1735924456477,
          "stop" : 1735924492042,
          "duration" : 35565
        }
      }, {
        "uid" : "908471edc8fc5208",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/908471edc8fc5208",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735865147113,
          "stop" : 1735865259838,
          "duration" : 112725
        }
      }, {
        "uid" : "a63891a47579ed6b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/a63891a47579ed6b",
        "status" : "passed",
        "time" : {
          "start" : 1735864055561,
          "stop" : 1735864093926,
          "duration" : 38365
        }
      }, {
        "uid" : "d7fc1a30315963cb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/d7fc1a30315963cb",
        "status" : "passed",
        "time" : {
          "start" : 1735853527791,
          "stop" : 1735853552692,
          "duration" : 24901
        }
      }, {
        "uid" : "14948550bc0ae4cf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/14948550bc0ae4cf",
        "status" : "passed",
        "time" : {
          "start" : 1735849854295,
          "stop" : 1735849896263,
          "duration" : 41968
        }
      }, {
        "uid" : "89fb8f046f4c27ba",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/89fb8f046f4c27ba",
        "status" : "passed",
        "time" : {
          "start" : 1735848655079,
          "stop" : 1735848680874,
          "duration" : 25795
        }
      }, {
        "uid" : "946f88c6496d0248",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/946f88c6496d0248",
        "status" : "passed",
        "time" : {
          "start" : 1735838271474,
          "stop" : 1735838296240,
          "duration" : 24766
        }
      }, {
        "uid" : "1d2a1e4b97f9efdc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/1d2a1e4b97f9efdc",
        "status" : "passed",
        "time" : {
          "start" : 1735834294020,
          "stop" : 1735834319163,
          "duration" : 25143
        }
      }, {
        "uid" : "fa360f8cc3cc7d97",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/fa360f8cc3cc7d97",
        "status" : "passed",
        "time" : {
          "start" : 1735829360631,
          "stop" : 1735829385495,
          "duration" : 24864
        }
      }, {
        "uid" : "15c14759c0785456",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/15c14759c0785456",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735679972175,
          "stop" : 1735680084989,
          "duration" : 112814
        }
      }, {
        "uid" : "889ae37ae51e3b6c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/889ae37ae51e3b6c",
        "status" : "passed",
        "time" : {
          "start" : 1735680105476,
          "stop" : 1735680129956,
          "duration" : 24480
        }
      }, {
        "uid" : "ee75bf4d4c016d30",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/ee75bf4d4c016d30",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1735670367573,
          "stop" : 1735670480284,
          "duration" : 112711
        }
      }, {
        "uid" : "801bbad93f594b0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/801bbad93f594b0",
        "status" : "passed",
        "time" : {
          "start" : 1735666197365,
          "stop" : 1735666222268,
          "duration" : 24903
        }
      }, {
        "uid" : "a1fa9214db3f3a17",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/a1fa9214db3f3a17",
        "status" : "passed",
        "time" : {
          "start" : 1735577009713,
          "stop" : 1735577034856,
          "duration" : 25143
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "b962f0df81258456.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}