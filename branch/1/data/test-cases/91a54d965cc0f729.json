{
  "uid" : "91a54d965cc0f729",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "a7312cf31d6314ecf7ffd5a0a0af0ddc",
  "time" : {
    "start" : 1736224932205,
    "stop" : 1736224950371,
    "duration" : 18166
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff94f63810>\ndevice = <golioth.golioth.Device object at 0xffff94f7a690>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device",
    "time" : {
      "start" : 1736224913334,
      "stop" : 1736224914224,
      "duration" : 890
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736224912919,
      "stop" : 1736224912919,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736224912926,
      "stop" : 1736224913333,
      "duration" : 407
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736224912925,
      "stop" : 1736224912925,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736224912922,
      "stop" : 1736224912924,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736224912922,
      "stop" : 1736224912922,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736224912920,
      "stop" : 1736224912920,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736224912920,
      "stop" : 1736224912920,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736224931375,
      "stop" : 1736224932203,
      "duration" : 828
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736224912925,
      "stop" : 1736224912926,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736224912921,
      "stop" : 1736224912921,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736224914225,
      "stop" : 1736224931374,
      "duration" : 17149
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff94f63810>\ndevice = <golioth.golioth.Device object at 0xffff94f7a690>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "80d42ce268b5a00",
      "name" : "log",
      "source" : "80d42ce268b5a00.txt",
      "type" : "text/plain",
      "size" : 21690
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1736224950684,
      "stop" : 1736224951061,
      "duration" : 377
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736224951063,
      "stop" : 1736224951065,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736224951070,
      "stop" : 1736224951070,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736224950638,
      "stop" : 1736224950683,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "tims_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "bea1d9f1fcf3"
  }, {
    "name" : "thread",
    "value" : "419-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "83a9f646264e2590",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/83a9f646264e2590",
        "status" : "passed",
        "time" : {
          "start" : 1736218706429,
          "stop" : 1736218736469,
          "duration" : 30040
        }
      }, {
        "uid" : "950ba2ddbc5b986b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/950ba2ddbc5b986b",
        "status" : "passed",
        "time" : {
          "start" : 1736207813421,
          "stop" : 1736207838464,
          "duration" : 25043
        }
      }, {
        "uid" : "1b92ad13b772072",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/1b92ad13b772072",
        "status" : "passed",
        "time" : {
          "start" : 1735947501477,
          "stop" : 1735947526489,
          "duration" : 25012
        }
      }, {
        "uid" : "e5ba1857ded4d8e8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/e5ba1857ded4d8e8",
        "status" : "passed",
        "time" : {
          "start" : 1735927346189,
          "stop" : 1735927372267,
          "duration" : 26078
        }
      }, {
        "uid" : "f64d1c9cdee4db9d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/f64d1c9cdee4db9d",
        "status" : "passed",
        "time" : {
          "start" : 1735931893647,
          "stop" : 1735931918743,
          "duration" : 25096
        }
      }, {
        "uid" : "cbacc46433294bab",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/cbacc46433294bab",
        "status" : "passed",
        "time" : {
          "start" : 1735927346189,
          "stop" : 1735927372267,
          "duration" : 26078
        }
      }, {
        "uid" : "c8ac4935997aba62",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/c8ac4935997aba62",
        "status" : "passed",
        "time" : {
          "start" : 1735922574896,
          "stop" : 1735922605094,
          "duration" : 30198
        }
      }, {
        "uid" : "e45bacc8c1ba8595",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/e45bacc8c1ba8595",
        "status" : "passed",
        "time" : {
          "start" : 1735862539819,
          "stop" : 1735862566920,
          "duration" : 27101
        }
      }, {
        "uid" : "7c532a3cc195c51b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/7c532a3cc195c51b",
        "status" : "passed",
        "time" : {
          "start" : 1735860116052,
          "stop" : 1735860143042,
          "duration" : 26990
        }
      }, {
        "uid" : "46e1d743ed268374",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/46e1d743ed268374",
        "status" : "passed",
        "time" : {
          "start" : 1735852082949,
          "stop" : 1735852112997,
          "duration" : 30048
        }
      }, {
        "uid" : "a9060ca7eb73988",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/a9060ca7eb73988",
        "status" : "passed",
        "time" : {
          "start" : 1735846635594,
          "stop" : 1735846661712,
          "duration" : 26118
        }
      }, {
        "uid" : "189262bf30f8cc52",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/189262bf30f8cc52",
        "status" : "passed",
        "time" : {
          "start" : 1735845638415,
          "stop" : 1735845665410,
          "duration" : 26995
        }
      }, {
        "uid" : "eff7e7feb04253d4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/eff7e7feb04253d4",
        "status" : "passed",
        "time" : {
          "start" : 1735836546367,
          "stop" : 1735836576416,
          "duration" : 30049
        }
      }, {
        "uid" : "4d60a93a5b5f422c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/4d60a93a5b5f422c",
        "status" : "passed",
        "time" : {
          "start" : 1735832984616,
          "stop" : 1735833009665,
          "duration" : 25049
        }
      }, {
        "uid" : "49b114bfe71a3a71",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/49b114bfe71a3a71",
        "status" : "passed",
        "time" : {
          "start" : 1735827849011,
          "stop" : 1735827878109,
          "duration" : 29098
        }
      }, {
        "uid" : "39ee396a941c3dbb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/39ee396a941c3dbb",
        "status" : "passed",
        "time" : {
          "start" : 1735677537068,
          "stop" : 1735677566301,
          "duration" : 29233
        }
      }, {
        "uid" : "4f24b66c51a3d3e6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/4f24b66c51a3d3e6",
        "status" : "passed",
        "time" : {
          "start" : 1735677491998,
          "stop" : 1735677518180,
          "duration" : 26182
        }
      }, {
        "uid" : "b8919264fa333915",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/b8919264fa333915",
        "status" : "passed",
        "time" : {
          "start" : 1735668313733,
          "stop" : 1735668342737,
          "duration" : 29004
        }
      }, {
        "uid" : "d005f8a70aa21f72",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/d005f8a70aa21f72",
        "status" : "passed",
        "time" : {
          "start" : 1735664324071,
          "stop" : 1735664352287,
          "duration" : 28216
        }
      }, {
        "uid" : "3c50c82e18e04bc3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/3c50c82e18e04bc3",
        "status" : "passed",
        "time" : {
          "start" : 1735575623116,
          "stop" : 1735575651451,
          "duration" : 28335
        }
      } ]
    },
    "tags" : [ "anyio", "tims_orange_pi", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "91a54d965cc0f729.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}