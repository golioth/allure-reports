{
  "uid" : "79de5c6da60045f4",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "a8632ecd3cd3b3c347c26a5269c4b5ab",
  "time" : {
    "start" : 1736225503029,
    "stop" : 1736225521992,
    "duration" : 18963
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff93c2b710>\ndevice = <golioth.golioth.Device object at 0xffff93c469d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dut",
    "time" : {
      "start" : 1736225475093,
      "stop" : 1736225501948,
      "duration" : 26855
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736225474248,
      "stop" : 1736225475092,
      "duration" : 844
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736225473795,
      "stop" : 1736225473795,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736225473789,
      "stop" : 1736225473789,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736225473791,
      "stop" : 1736225473791,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736225473790,
      "stop" : 1736225473790,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736225473795,
      "stop" : 1736225473795,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736225473796,
      "stop" : 1736225474248,
      "duration" : 452
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736225473789,
      "stop" : 1736225473790,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736225473792,
      "stop" : 1736225473794,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736225501949,
      "stop" : 1736225503026,
      "duration" : 1077
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736225473791,
      "stop" : 1736225473791,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff93c2b710>\ndevice = <golioth.golioth.Device object at 0xffff93c469d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b93cccfb427be8e1",
      "name" : "log",
      "source" : "b93cccfb427be8e1.txt",
      "type" : "text/plain",
      "size" : 20200
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1736225522292,
      "stop" : 1736225522299,
      "duration" : 7
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736225522301,
      "stop" : 1736225522761,
      "duration" : 460
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736225522763,
      "stop" : 1736225522765,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736225522770,
      "stop" : 1736225522770,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "a40847bf2754"
  }, {
    "name" : "thread",
    "value" : "647-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "f03646962f3a0416",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/f03646962f3a0416",
        "status" : "passed",
        "time" : {
          "start" : 1736208929698,
          "stop" : 1736208960583,
          "duration" : 30885
        }
      }, {
        "uid" : "4644f0e821e0903e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/4644f0e821e0903e",
        "status" : "passed",
        "time" : {
          "start" : 1736208929698,
          "stop" : 1736208960583,
          "duration" : 30885
        }
      }, {
        "uid" : "c7706f5d27838efb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/c7706f5d27838efb",
        "status" : "passed",
        "time" : {
          "start" : 1735949808449,
          "stop" : 1735949891523,
          "duration" : 83074
        }
      }, {
        "uid" : "867160e8f6163bc9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/867160e8f6163bc9",
        "status" : "passed",
        "time" : {
          "start" : 1735927981917,
          "stop" : 1735928012485,
          "duration" : 30568
        }
      }, {
        "uid" : "3941382df10df73f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/3941382df10df73f",
        "status" : "passed",
        "time" : {
          "start" : 1735932482861,
          "stop" : 1735932513338,
          "duration" : 30477
        }
      }, {
        "uid" : "f898b542c89d7256",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/f898b542c89d7256",
        "status" : "passed",
        "time" : {
          "start" : 1735927981917,
          "stop" : 1735928012485,
          "duration" : 30568
        }
      }, {
        "uid" : "c6c6c8ae54242835",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/c6c6c8ae54242835",
        "status" : "passed",
        "time" : {
          "start" : 1735923899807,
          "stop" : 1735923942195,
          "duration" : 42388
        }
      }, {
        "uid" : "56cac29f6a29ac41",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/56cac29f6a29ac41",
        "status" : "passed",
        "time" : {
          "start" : 1735864712071,
          "stop" : 1735864742743,
          "duration" : 30672
        }
      }, {
        "uid" : "b34297fbcd8b8f55",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/b34297fbcd8b8f55",
        "status" : "passed",
        "time" : {
          "start" : 1735863447562,
          "stop" : 1735863510381,
          "duration" : 62819
        }
      }, {
        "uid" : "174bcda182e234c2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/174bcda182e234c2",
        "status" : "passed",
        "time" : {
          "start" : 1735853463617,
          "stop" : 1735853494223,
          "duration" : 30606
        }
      }, {
        "uid" : "c2e61f0d5f1f906f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/c2e61f0d5f1f906f",
        "status" : "passed",
        "time" : {
          "start" : 1735849258933,
          "stop" : 1735849298986,
          "duration" : 40053
        }
      }, {
        "uid" : "1dd8166879a06fd2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/1dd8166879a06fd2",
        "status" : "passed",
        "time" : {
          "start" : 1735848208553,
          "stop" : 1735848240452,
          "duration" : 31899
        }
      }, {
        "uid" : "15e8d7160857bf5e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/15e8d7160857bf5e",
        "status" : "passed",
        "time" : {
          "start" : 1735837849746,
          "stop" : 1735837880604,
          "duration" : 30858
        }
      }, {
        "uid" : "a7ce716fcb7df337",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/a7ce716fcb7df337",
        "status" : "passed",
        "time" : {
          "start" : 1735833915620,
          "stop" : 1735833945701,
          "duration" : 30081
        }
      }, {
        "uid" : "726cf89177871996",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/726cf89177871996",
        "status" : "passed",
        "time" : {
          "start" : 1735828982544,
          "stop" : 1735829013394,
          "duration" : 30850
        }
      }, {
        "uid" : "fdf862914eca1300",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/fdf862914eca1300",
        "status" : "passed",
        "time" : {
          "start" : 1735679466921,
          "stop" : 1735679518499,
          "duration" : 51578
        }
      }, {
        "uid" : "92a7a3e767e4110",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/92a7a3e767e4110",
        "status" : "passed",
        "time" : {
          "start" : 1735679662764,
          "stop" : 1735679692569,
          "duration" : 29805
        }
      }, {
        "uid" : "b058b13ffd4a6afc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/b058b13ffd4a6afc",
        "status" : "passed",
        "time" : {
          "start" : 1735669840229,
          "stop" : 1735669870029,
          "duration" : 29800
        }
      }, {
        "uid" : "451dc04bb41c4b76",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/451dc04bb41c4b76",
        "status" : "passed",
        "time" : {
          "start" : 1735665624619,
          "stop" : 1735665654699,
          "duration" : 30080
        }
      }, {
        "uid" : "ea432ca64e8ed902",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/ea432ca64e8ed902",
        "status" : "passed",
        "time" : {
          "start" : 1735576549905,
          "stop" : 1735576580645,
          "duration" : 30740
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "79de5c6da60045f4.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}