{
  "uid" : "adc568420f4c806",
  "name" : "test_cert_provisioning",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning",
  "historyId" : "458eb174ce44d77bb1e837d47827844b",
  "time" : {
    "start" : 1736221591807,
    "stop" : 1736221597598,
    "duration" : 5791
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
  "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f56037c8f50>\nproject = <golioth.golioth.Project object at 0x7f560386b3d0>\ndevice_name = 'certificate-qUQQfyzcENgEnnbu'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '677ca3976c6d6aa9b9bec21b', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_name",
    "time" : {
      "start" : 1736221591634,
      "stop" : 1736221591634,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736221591473,
      "stop" : 1736221591473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mcumgr_conn_args",
    "time" : {
      "start" : 1736221591807,
      "stop" : 1736221591807,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736221591473,
      "stop" : 1736221591473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736221591800,
      "stop" : 1736221591807,
      "duration" : 7
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736221591473,
      "stop" : 1736221591473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736221591473,
      "stop" : 1736221591474,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736221591474,
      "stop" : 1736221591634,
      "duration" : 160
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736221591473,
      "stop" : 1736221591473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736221591799,
      "stop" : 1736221591800,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736221591473,
      "stop" : 1736221591473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736221591473,
      "stop" : 1736221591473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred",
    "time" : {
      "start" : 1736221591634,
      "stop" : 1736221591799,
      "duration" : 165
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
    "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f56037c8f50>\nproject = <golioth.golioth.Project object at 0x7f560386b3d0>\ndevice_name = 'certificate-qUQQfyzcENgEnnbu'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '677ca3976c6d6aa9b9bec21b', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e8b23a535e1fd3a4",
      "name" : "log",
      "source" : "e8b23a535e1fd3a4.txt",
      "type" : "text/plain",
      "size" : 16553
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_name::0",
    "time" : {
      "start" : 1736221597842,
      "stop" : 1736221598173,
      "duration" : 331
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736221598175,
      "stop" : 1736221598175,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736221598174,
      "stop" : 1736221598175,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736221597644,
      "stop" : 1736221597644,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred::0",
    "time" : {
      "start" : 1736221597644,
      "stop" : 1736221597842,
      "duration" : 198
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "native_sim_64"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.native_sim_64"
  }, {
    "name" : "tag",
    "value" : "GitHub Actions 53"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "896b56fa772f"
  }, {
    "name" : "thread",
    "value" : "87096-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'native_sim_64'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 22,
        "unknown" : 0,
        "total" : 23
      },
      "items" : [ {
        "uid" : "814857c55920b5c2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/814857c55920b5c2",
        "status" : "passed",
        "time" : {
          "start" : 1736204860959,
          "stop" : 1736204877392,
          "duration" : 16433
        }
      }, {
        "uid" : "a3205cb4940a4d88",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/a3205cb4940a4d88",
        "status" : "passed",
        "time" : {
          "start" : 1736204860959,
          "stop" : 1736204877392,
          "duration" : 16433
        }
      }, {
        "uid" : "de8f80c79a70a35f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/de8f80c79a70a35f",
        "status" : "passed",
        "time" : {
          "start" : 1735943912830,
          "stop" : 1735943929751,
          "duration" : 16921
        }
      }, {
        "uid" : "dcde48ee02e05917",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/dcde48ee02e05917",
        "status" : "passed",
        "time" : {
          "start" : 1735922107636,
          "stop" : 1735922124157,
          "duration" : 16521
        }
      }, {
        "uid" : "24070f5d8c76b8dd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/24070f5d8c76b8dd",
        "status" : "passed",
        "time" : {
          "start" : 1735928524634,
          "stop" : 1735928541349,
          "duration" : 16715
        }
      }, {
        "uid" : "9796a4edeadb492d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/9796a4edeadb492d",
        "status" : "passed",
        "time" : {
          "start" : 1735922107636,
          "stop" : 1735922124157,
          "duration" : 16521
        }
      }, {
        "uid" : "12ba47e4512a746e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/12ba47e4512a746e",
        "status" : "passed",
        "time" : {
          "start" : 1735919776966,
          "stop" : 1735919793596,
          "duration" : 16630
        }
      }, {
        "uid" : "d76878e793ff737",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/d76878e793ff737",
        "status" : "passed",
        "time" : {
          "start" : 1735853864329,
          "stop" : 1735853881055,
          "duration" : 16726
        }
      }, {
        "uid" : "fbfaca9555dc9cd0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/fbfaca9555dc9cd0",
        "status" : "passed",
        "time" : {
          "start" : 1735853725783,
          "stop" : 1735853742584,
          "duration" : 16801
        }
      }, {
        "uid" : "7fa55468c21785",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/7fa55468c21785",
        "status" : "passed",
        "time" : {
          "start" : 1735847719379,
          "stop" : 1735847735995,
          "duration" : 16616
        }
      }, {
        "uid" : "69f2215e7fa2a826",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/69f2215e7fa2a826",
        "status" : "passed",
        "time" : {
          "start" : 1735840885881,
          "stop" : 1735840902685,
          "duration" : 16804
        }
      }, {
        "uid" : "fc87c4e149c3e802",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/fc87c4e149c3e802",
        "status" : "passed",
        "time" : {
          "start" : 1735840746897,
          "stop" : 1735840763592,
          "duration" : 16695
        }
      }, {
        "uid" : "be8beeadce4cb5ac",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/be8beeadce4cb5ac",
        "status" : "passed",
        "time" : {
          "start" : 1735831777423,
          "stop" : 1735831802418,
          "duration" : 24995
        }
      }, {
        "uid" : "e288d4f416ec4457",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/e288d4f416ec4457",
        "status" : "passed",
        "time" : {
          "start" : 1735830250070,
          "stop" : 1735830266870,
          "duration" : 16800
        }
      }, {
        "uid" : "358bbf8b04991424",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/358bbf8b04991424",
        "status" : "passed",
        "time" : {
          "start" : 1735824698370,
          "stop" : 1735824715002,
          "duration" : 16632
        }
      }, {
        "uid" : "f2ee7eb67d7c03e3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/f2ee7eb67d7c03e3",
        "status" : "passed",
        "time" : {
          "start" : 1735671249617,
          "stop" : 1735671266428,
          "duration" : 16811
        }
      }, {
        "uid" : "c300e6d716dac09b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/c300e6d716dac09b",
        "status" : "passed",
        "time" : {
          "start" : 1735671250881,
          "stop" : 1735671267697,
          "duration" : 16816
        }
      }, {
        "uid" : "51cbdea561052426",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/51cbdea561052426",
        "status" : "passed",
        "time" : {
          "start" : 1735665048739,
          "stop" : 1735665065465,
          "duration" : 16726
        }
      }, {
        "uid" : "cb0d9e09ee67f231",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/cb0d9e09ee67f231",
        "status" : "passed",
        "time" : {
          "start" : 1735661550165,
          "stop" : 1735661566898,
          "duration" : 16733
        }
      }, {
        "uid" : "da81613c8f30d38d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/da81613c8f30d38d",
        "status" : "passed",
        "time" : {
          "start" : 1735572044630,
          "stop" : 1735572061223,
          "duration" : 16593
        }
      } ]
    },
    "tags" : [ "native_sim_64", "anyio", "GitHub Actions 53", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "adc568420f4c806.json",
  "parameterValues" : [ "'native_sim_64'", "'zephyr'" ]
}