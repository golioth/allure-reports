{
  "uid" : "96e0316a422fa8ee",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "21098cf9f3128d3d03f8900d527065d2",
  "time" : {
    "start" : 1736224816041,
    "stop" : 1736224908861,
    "duration" : 92820
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff98dcead0>\ndevice = <golioth.golioth.Device object at 0xffff98de9990>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dut",
    "time" : {
      "start" : 1736224798061,
      "stop" : 1736224815194,
      "duration" : 17133
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736224796813,
      "stop" : 1736224796813,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736224796818,
      "stop" : 1736224796819,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736224815195,
      "stop" : 1736224816038,
      "duration" : 843
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736224796815,
      "stop" : 1736224796817,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736224797242,
      "stop" : 1736224798061,
      "duration" : 819
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736224796818,
      "stop" : 1736224796818,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736224796813,
      "stop" : 1736224796813,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736224796812,
      "stop" : 1736224796812,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736224796815,
      "stop" : 1736224796815,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736224796814,
      "stop" : 1736224796814,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736224796819,
      "stop" : 1736224797241,
      "duration" : 422
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff98dcead0>\ndevice = <golioth.golioth.Device object at 0xffff98de9990>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "645484a764b98ed5",
      "name" : "log",
      "source" : "645484a764b98ed5.txt",
      "type" : "text/plain",
      "size" : 20295
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1736224909118,
      "stop" : 1736224909146,
      "duration" : 28
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736224909629,
      "stop" : 1736224909629,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736224909147,
      "stop" : 1736224909620,
      "duration" : 473
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736224909622,
      "stop" : 1736224909624,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "tims_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "bea1d9f1fcf3"
  }, {
    "name" : "thread",
    "value" : "404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "8b68a076c25e293c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/8b68a076c25e293c",
        "status" : "passed",
        "time" : {
          "start" : 1736218908041,
          "stop" : 1736218926222,
          "duration" : 18181
        }
      }, {
        "uid" : "7234f8b175c27f33",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/7234f8b175c27f33",
        "status" : "passed",
        "time" : {
          "start" : 1736208061184,
          "stop" : 1736208077807,
          "duration" : 16623
        }
      }, {
        "uid" : "eb92ea6e7d5fa7c9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/eb92ea6e7d5fa7c9",
        "status" : "passed",
        "time" : {
          "start" : 1735947465894,
          "stop" : 1735947480356,
          "duration" : 14462
        }
      }, {
        "uid" : "744e19a9b93899e5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/744e19a9b93899e5",
        "status" : "passed",
        "time" : {
          "start" : 1735927604778,
          "stop" : 1735927631909,
          "duration" : 27131
        }
      }, {
        "uid" : "125a9cddda2d8614",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/125a9cddda2d8614",
        "status" : "passed",
        "time" : {
          "start" : 1735931857495,
          "stop" : 1735931873129,
          "duration" : 15634
        }
      }, {
        "uid" : "e16156474bf7b1a7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/e16156474bf7b1a7",
        "status" : "passed",
        "time" : {
          "start" : 1735927604778,
          "stop" : 1735927631909,
          "duration" : 27131
        }
      }, {
        "uid" : "d93a063d17a33481",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/d93a063d17a33481",
        "status" : "passed",
        "time" : {
          "start" : 1735922537255,
          "stop" : 1735922552915,
          "duration" : 15660
        }
      }, {
        "uid" : "c9be9d8505e6c586",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/c9be9d8505e6c586",
        "status" : "passed",
        "time" : {
          "start" : 1735862497792,
          "stop" : 1735862515657,
          "duration" : 17865
        }
      }, {
        "uid" : "e32a817b8304db75",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/e32a817b8304db75",
        "status" : "passed",
        "time" : {
          "start" : 1735860079993,
          "stop" : 1735860095426,
          "duration" : 15433
        }
      }, {
        "uid" : "c72aeb7080a06e8a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/c72aeb7080a06e8a",
        "status" : "passed",
        "time" : {
          "start" : 1735852041272,
          "stop" : 1735852060227,
          "duration" : 18955
        }
      }, {
        "uid" : "1593b39019ee9baa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/1593b39019ee9baa",
        "status" : "passed",
        "time" : {
          "start" : 1735846591968,
          "stop" : 1735846612597,
          "duration" : 20629
        }
      }, {
        "uid" : "b80addea1fda3a13",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/b80addea1fda3a13",
        "status" : "passed",
        "time" : {
          "start" : 1735845597965,
          "stop" : 1735845615553,
          "duration" : 17588
        }
      }, {
        "uid" : "38edadb2b8dcb58b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/38edadb2b8dcb58b",
        "status" : "passed",
        "time" : {
          "start" : 1735836508162,
          "stop" : 1735836522933,
          "duration" : 14771
        }
      }, {
        "uid" : "458d6127689840f1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/458d6127689840f1",
        "status" : "passed",
        "time" : {
          "start" : 1735832944933,
          "stop" : 1735832961476,
          "duration" : 16543
        }
      }, {
        "uid" : "312103ea0a8aa406",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/312103ea0a8aa406",
        "status" : "passed",
        "time" : {
          "start" : 1735827808082,
          "stop" : 1735827825678,
          "duration" : 17596
        }
      }, {
        "uid" : "d7b5c366dedf9141",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/d7b5c366dedf9141",
        "status" : "passed",
        "time" : {
          "start" : 1735677495411,
          "stop" : 1735677513983,
          "duration" : 18572
        }
      }, {
        "uid" : "a78dced42dfb57dd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/a78dced42dfb57dd",
        "status" : "passed",
        "time" : {
          "start" : 1735677448306,
          "stop" : 1735677469057,
          "duration" : 20751
        }
      }, {
        "uid" : "5ef5bb477c197f96",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/5ef5bb477c197f96",
        "status" : "passed",
        "time" : {
          "start" : 1735668270733,
          "stop" : 1735668290510,
          "duration" : 19777
        }
      }, {
        "uid" : "928b2cf3e45f904e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/928b2cf3e45f904e",
        "status" : "passed",
        "time" : {
          "start" : 1735664282807,
          "stop" : 1735664300791,
          "duration" : 17984
        }
      }, {
        "uid" : "89c1ed98600f744a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/89c1ed98600f744a",
        "status" : "passed",
        "time" : {
          "start" : 1735575582774,
          "stop" : 1735575602394,
          "duration" : 19620
        }
      } ]
    },
    "tags" : [ "anyio", "tims_orange_pi", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "96e0316a422fa8ee.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}