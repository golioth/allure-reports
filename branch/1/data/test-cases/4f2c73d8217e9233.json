{
  "uid" : "4f2c73d8217e9233",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello",
  "historyId" : "e124f10389952e3c52fb82b67fe5598b",
  "time" : {
    "start" : 1736225793273,
    "stop" : 1736225907798,
    "duration" : 114525
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffae79a990>\ndevice = <golioth.golioth.Device object at 0xffffae7b1650>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffae912d10>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "shell",
    "time" : {
      "start" : 1736225792184,
      "stop" : 1736225793270,
      "duration" : 1086
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736225764684,
      "stop" : 1736225764684,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736225764688,
      "stop" : 1736225764689,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "build_conf",
    "time" : {
      "start" : 1736225764667,
      "stop" : 1736225764683,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736225764666,
      "stop" : 1736225764666,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736225764689,
      "stop" : 1736225765161,
      "duration" : 472
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736225764684,
      "stop" : 1736225764684,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736225765162,
      "stop" : 1736225766085,
      "duration" : 923
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736225766086,
      "stop" : 1736225792184,
      "duration" : 26098
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736225764685,
      "stop" : 1736225764687,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736225764688,
      "stop" : 1736225764688,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffae79a990>\ndevice = <golioth.golioth.Device object at 0xffffae7b1650>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffae912d10>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c5ce20889ab74524",
      "name" : "log",
      "source" : "c5ce20889ab74524.txt",
      "type" : "text/plain",
      "size" : 19243
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1736225908559,
      "stop" : 1736225908562,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736225908172,
      "stop" : 1736225908557,
      "duration" : 385
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736225908121,
      "stop" : 1736225908170,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736225908567,
      "stop" : 1736225908567,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "a40847bf2754"
  }, {
    "name" : "thread",
    "value" : "946-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "b43e9ef1ae3e7bcb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/b43e9ef1ae3e7bcb",
        "status" : "passed",
        "time" : {
          "start" : 1736209325451,
          "stop" : 1736209354949,
          "duration" : 29498
        }
      }, {
        "uid" : "59adbc679a028772",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/59adbc679a028772",
        "status" : "passed",
        "time" : {
          "start" : 1736209325451,
          "stop" : 1736209354949,
          "duration" : 29498
        }
      }, {
        "uid" : "ee8d149a159d9dc6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/ee8d149a159d9dc6",
        "status" : "passed",
        "time" : {
          "start" : 1735949239981,
          "stop" : 1735949281178,
          "duration" : 41197
        }
      }, {
        "uid" : "cbb73f58ac0a8f08",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/cbb73f58ac0a8f08",
        "status" : "passed",
        "time" : {
          "start" : 1735928380118,
          "stop" : 1735928410512,
          "duration" : 30394
        }
      }, {
        "uid" : "ea7735c09b3472e8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/ea7735c09b3472e8",
        "status" : "passed",
        "time" : {
          "start" : 1735932035561,
          "stop" : 1735932064777,
          "duration" : 29216
        }
      }, {
        "uid" : "a4c9d648d5bd0c55",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/a4c9d648d5bd0c55",
        "status" : "passed",
        "time" : {
          "start" : 1735928380118,
          "stop" : 1735928410512,
          "duration" : 30394
        }
      }, {
        "uid" : "5f2c3422872e9119",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/5f2c3422872e9119",
        "status" : "passed",
        "time" : {
          "start" : 1735923373318,
          "stop" : 1735923420280,
          "duration" : 46962
        }
      }, {
        "uid" : "2cc90dd91f2fd489",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/2cc90dd91f2fd489",
        "status" : "passed",
        "time" : {
          "start" : 1735864278768,
          "stop" : 1735864309739,
          "duration" : 30971
        }
      }, {
        "uid" : "5afb0ec3bd19eea4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/5afb0ec3bd19eea4",
        "status" : "passed",
        "time" : {
          "start" : 1735862933248,
          "stop" : 1735862999404,
          "duration" : 66156
        }
      }, {
        "uid" : "b6f16525426b2024",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/b6f16525426b2024",
        "status" : "passed",
        "time" : {
          "start" : 1735852642294,
          "stop" : 1735852672165,
          "duration" : 29871
        }
      }, {
        "uid" : "660b16cbc03976e2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/660b16cbc03976e2",
        "status" : "passed",
        "time" : {
          "start" : 1735848780929,
          "stop" : 1735848826014,
          "duration" : 45085
        }
      }, {
        "uid" : "bcd741cc46feb7b3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/bcd741cc46feb7b3",
        "status" : "passed",
        "time" : {
          "start" : 1735847787485,
          "stop" : 1735847818155,
          "duration" : 30670
        }
      }, {
        "uid" : "1b20ba736064a8b9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/1b20ba736064a8b9",
        "status" : "passed",
        "time" : {
          "start" : 1735837447257,
          "stop" : 1735837478377,
          "duration" : 31120
        }
      }, {
        "uid" : "2b3c27da1b8bece",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/2b3c27da1b8bece",
        "status" : "passed",
        "time" : {
          "start" : 1735833502847,
          "stop" : 1735833532322,
          "duration" : 29475
        }
      }, {
        "uid" : "d99baacb5b81185b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/d99baacb5b81185b",
        "status" : "passed",
        "time" : {
          "start" : 1735828572191,
          "stop" : 1735828602243,
          "duration" : 30052
        }
      }, {
        "uid" : "5e6f0a2b425e1101",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/5e6f0a2b425e1101",
        "status" : "passed",
        "time" : {
          "start" : 1735678980553,
          "stop" : 1735679025505,
          "duration" : 44952
        }
      }, {
        "uid" : "f7fbaf982b6504ae",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/f7fbaf982b6504ae",
        "status" : "passed",
        "time" : {
          "start" : 1735679274845,
          "stop" : 1735679306563,
          "duration" : 31718
        }
      }, {
        "uid" : "f13c74d979e6493c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/f13c74d979e6493c",
        "status" : "passed",
        "time" : {
          "start" : 1735669393221,
          "stop" : 1735669439296,
          "duration" : 46075
        }
      }, {
        "uid" : "d476756d04d220a2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1986/#testresult/d476756d04d220a2",
        "status" : "passed",
        "time" : {
          "start" : 1735665210948,
          "stop" : 1735665244697,
          "duration" : 33749
        }
      }, {
        "uid" : "d88155e21c7091a1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/d88155e21c7091a1",
        "status" : "passed",
        "time" : {
          "start" : 1735576165402,
          "stop" : 1735576195136,
          "duration" : 29734
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "4f2c73d8217e9233.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}