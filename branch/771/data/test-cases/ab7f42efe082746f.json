{"uid":"ab7f42efe082746f","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"467e555cbdae75d46aefa9c64cb6440a","time":{"start":1760650382797,"stop":1760650440826,"duration":58029},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa166b0e0>\ndevice = <golioth.golioth.Device object at 0xffffa1574ad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.now(datetime.UTC)\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:52: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1760650367674,"stop":1760650367674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760650367675,"stop":1760650367675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760650367675,"stop":1760650367676,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760650367676,"stop":1760650367676,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760650367677,"stop":1760650367681,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760650367677,"stop":1760650367677,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760650367682,"stop":1760650367682,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760650367682,"stop":1760650367682,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760650367683,"stop":1760650368151,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760650368152,"stop":1760650368820,"duration":668},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760650368821,"stop":1760650382148,"duration":13327},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760650382148,"stop":1760650382794,"duration":646},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa166b0e0>\ndevice = <golioth.golioth.Device object at 0xffffa1574ad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.now(datetime.UTC)\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:52: AssertionError","steps":[],"attachments":[{"uid":"61753a7724995122","name":"log","source":"61753a7724995122.txt","type":"text/plain","size":24869}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760650441096,"stop":1760650441139,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760650441141,"stop":1760650441542,"duration":401},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760650441545,"stop":1760650441547,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760650441552,"stop":1760650441552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d27acbf87066"},{"name":"thread","value":"590-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3eb0c98c3417c226","status":"passed","time":{"start":1760650292428,"stop":1760650362746,"duration":70318}},{"uid":"6c4d57a19323ac60","status":"passed","time":{"start":1760650203079,"stop":1760650271677,"duration":68598}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":4,"skipped":0,"passed":10,"unknown":0,"total":16},"items":[{"uid":"d511488aabcb8544","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/d511488aabcb8544","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759785288618,"stop":1759785401351,"duration":112733}},{"uid":"d4a83e75e40e3f6e","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/d4a83e75e40e3f6e","status":"passed","time":{"start":1759798341166,"stop":1759798397088,"duration":55922}},{"uid":"2cfa3c5f879439d5","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/2cfa3c5f879439d5","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1759785868493,"stop":1759785926058,"duration":57565}},{"uid":"95ac1b866abecd71","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/95ac1b866abecd71","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759785288618,"stop":1759785401351,"duration":112733}},{"uid":"d0609c5d1914aec2","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/d0609c5d1914aec2","status":"passed","time":{"start":1759773922405,"stop":1759773977694,"duration":55289}},{"uid":"13c5b0aef34f87c4","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/13c5b0aef34f87c4","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1759767334095,"stop":1759767433457,"duration":99362}},{"uid":"8a51538d1057bbee","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/8a51538d1057bbee","status":"passed","time":{"start":1759769007919,"stop":1759769062192,"duration":54273}},{"uid":"539e47482db3a6aa","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/539e47482db3a6aa","status":"passed","time":{"start":1759720134324,"stop":1759720187805,"duration":53481}},{"uid":"99f907980fc20d2d","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/99f907980fc20d2d","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1759719508207,"stop":1759719569777,"duration":61570}},{"uid":"e8fbec8e95b8edc5","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/e8fbec8e95b8edc5","status":"passed","time":{"start":1759516561899,"stop":1759516615697,"duration":53798}},{"uid":"323c1789c70bee83","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/323c1789c70bee83","status":"passed","time":{"start":1759516561899,"stop":1759516615697,"duration":53798}},{"uid":"6ea9317489c5226a","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/6ea9317489c5226a","status":"passed","time":{"start":1759369523802,"stop":1759369576944,"duration":53142}},{"uid":"c4ac53cc81368c74","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/c4ac53cc81368c74","status":"passed","time":{"start":1759270793267,"stop":1759270847600,"duration":54333}},{"uid":"5a312728836842ff","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/5a312728836842ff","status":"passed","time":{"start":1759161227398,"stop":1759161280011,"duration":52613}},{"uid":"986a9daa71348c5a","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/986a9daa71348c5a","status":"passed","time":{"start":1758915300335,"stop":1758915354481,"duration":54146}}]},"tags":["mikes_orange_pi","anyio","rak5010","zephyr"]},"source":"ab7f42efe082746f.json","parameterValues":["'rak5010'","'zephyr'"]}