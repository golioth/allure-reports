{"uid":"5e3674f6c1089190","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1732293715443,"stop":1732293808370,"duration":92927},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffacc07310>\ndevice = <golioth.golioth.Device object at 0xffffacc264d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732293686384,"stop":1732293686384,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732293686385,"stop":1732293686385,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732293686385,"stop":1732293686385,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732293686386,"stop":1732293686387,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732293686386,"stop":1732293686386,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732293686387,"stop":1732293686389,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732293686390,"stop":1732293686390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732293686390,"stop":1732293686390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732293686391,"stop":1732293686837,"duration":446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732293686837,"stop":1732293687750,"duration":913},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732293687750,"stop":1732293714379,"duration":26629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732293714380,"stop":1732293715435,"duration":1055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffacc07310>\ndevice = <golioth.golioth.Device object at 0xffffacc264d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"1e14d6ed5d58363d","name":"log","source":"1e14d6ed5d58363d.txt","type":"text/plain","size":14282}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732293808697,"stop":1732293808743,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732293808745,"stop":1732293809157,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732293809159,"stop":1732293809161,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732293809166,"stop":1732293809166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"422c956c78dd"},{"name":"thread","value":"575-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":3,"skipped":0,"passed":23,"unknown":0,"total":32},"items":[{"uid":"86f2406a347abf08","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/86f2406a347abf08","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221658874,"stop":1732221658874,"duration":0}},{"uid":"661878f9823648c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/661878f9823648c4","status":"passed","time":{"start":1732136286219,"stop":1732136305529,"duration":19310}},{"uid":"1fcfab8d1f359e2d","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/1fcfab8d1f359e2d","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1732128063124,"stop":1732128063124,"duration":0}},{"uid":"a0cd6bc06e26b0b8","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/a0cd6bc06e26b0b8","status":"passed","time":{"start":1732126734336,"stop":1732126780509,"duration":46173}},{"uid":"ea3aa485a9e27639","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/ea3aa485a9e27639","status":"passed","time":{"start":1732049905007,"stop":1732049941176,"duration":36169}},{"uid":"312b27e2fb4c8fb8","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/312b27e2fb4c8fb8","status":"passed","time":{"start":1732049905007,"stop":1732049941176,"duration":36169}},{"uid":"cab4f8e78a6e0277","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/cab4f8e78a6e0277","status":"passed","time":{"start":1732049905007,"stop":1732049941176,"duration":36169}},{"uid":"50d53dcec6825638","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/50d53dcec6825638","status":"passed","time":{"start":1732033641801,"stop":1732033678834,"duration":37033}},{"uid":"5d08401596dffe33","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/5d08401596dffe33","status":"passed","time":{"start":1731972255946,"stop":1731972276372,"duration":20426}},{"uid":"9e13635c572c574a","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/9e13635c572c574a","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731964486798,"stop":1731964486798,"duration":0}},{"uid":"fe58fab1750d66ac","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/fe58fab1750d66ac","status":"passed","time":{"start":1731959455561,"stop":1731959500364,"duration":44803}},{"uid":"b5f0a3b57a1bffdc","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/b5f0a3b57a1bffdc","status":"passed","time":{"start":1731956454269,"stop":1731956489533,"duration":35264}},{"uid":"4a68af99ed6777db","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/4a68af99ed6777db","status":"passed","time":{"start":1731907783062,"stop":1731907822330,"duration":39268}},{"uid":"6b446cefd971373c","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/6b446cefd971373c","status":"passed","time":{"start":1731716408302,"stop":1731716447298,"duration":38996}},{"uid":"21da2a3dde052a16","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/21da2a3dde052a16","status":"passed","time":{"start":1731712516588,"stop":1731712556090,"duration":39502}},{"uid":"f980ada89a7a7e06","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/f980ada89a7a7e06","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731710045317,"stop":1731710138115,"duration":92798}},{"uid":"dbca66e3c245b75","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/dbca66e3c245b75","status":"passed","time":{"start":1731709509500,"stop":1731709529206,"duration":19706}},{"uid":"ddec3ca811ae21f1","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/ddec3ca811ae21f1","status":"passed","time":{"start":1731697489348,"stop":1731697530067,"duration":40719}},{"uid":"e4da2978a49265e0","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/e4da2978a49265e0","status":"passed","time":{"start":1731614804398,"stop":1731614824646,"duration":20248}},{"uid":"6aaf3c566088295","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/6aaf3c566088295","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731597222869,"stop":1731597222869,"duration":0}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"5e3674f6c1089190.json","parameterValues":["'nrf9160dk'","'zephyr'"]}