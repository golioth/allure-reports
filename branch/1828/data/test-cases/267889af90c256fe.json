{"uid":"267889af90c256fe","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1732293921151,"stop":1732294014381,"duration":93230},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb7e1f7d0>\ndevice = <golioth.golioth.Device object at 0xffffb7e36110>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732293891541,"stop":1732293891541,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732293891541,"stop":1732293891542,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732293891542,"stop":1732293891543,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732293891542,"stop":1732293891542,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732293891543,"stop":1732293891543,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732293891544,"stop":1732293891546,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732293891546,"stop":1732293891547,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732293891547,"stop":1732293891547,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732293891548,"stop":1732293891969,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732293891969,"stop":1732293892805,"duration":836},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732293892805,"stop":1732293920062,"duration":27257},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732293920063,"stop":1732293921145,"duration":1082},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb7e1f7d0>\ndevice = <golioth.golioth.Device object at 0xffffb7e36110>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d4220fc88e9c9975","name":"log","source":"d4220fc88e9c9975.txt","type":"text/plain","size":17194}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732294014666,"stop":1732294014708,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732294014710,"stop":1732294015089,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732294015091,"stop":1732294015093,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732294015098,"stop":1732294015098,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"422c956c78dd"},{"name":"thread","value":"673-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":24,"unknown":0,"total":32},"items":[{"uid":"a0eceb93c1f0803c","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/a0eceb93c1f0803c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221673962,"stop":1732221673962,"duration":0}},{"uid":"fe2b372dda11c350","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/fe2b372dda11c350","status":"passed","time":{"start":1732136465784,"stop":1732136490173,"duration":24389}},{"uid":"6462acc874b13712","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/6462acc874b13712","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732128196732,"stop":1732128289925,"duration":93193}},{"uid":"a35bad19d108d2df","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/a35bad19d108d2df","status":"passed","time":{"start":1732126888721,"stop":1732126922094,"duration":33373}},{"uid":"dafb0d0dbaf10054","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/dafb0d0dbaf10054","status":"passed","time":{"start":1732050056360,"stop":1732050093685,"duration":37325}},{"uid":"486a9e9829645ec9","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/486a9e9829645ec9","status":"passed","time":{"start":1732050056360,"stop":1732050093685,"duration":37325}},{"uid":"638f930206902383","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/638f930206902383","status":"passed","time":{"start":1732050056360,"stop":1732050093685,"duration":37325}},{"uid":"a3850ebca1e46526","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/a3850ebca1e46526","status":"passed","time":{"start":1732033793487,"stop":1732033832352,"duration":38865}},{"uid":"482361957d5c208a","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/482361957d5c208a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731972372607,"stop":1731972410164,"duration":37557}},{"uid":"6213c3ce526ef79f","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/6213c3ce526ef79f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731965011429,"stop":1731965049048,"duration":37619}},{"uid":"82fc5316c31c6df9","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/82fc5316c31c6df9","status":"passed","time":{"start":1731959621756,"stop":1731959658913,"duration":37157}},{"uid":"86484d738cbab822","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/86484d738cbab822","status":"passed","time":{"start":1731956601874,"stop":1731956643585,"duration":41711}},{"uid":"fdc8e0a63ea88054","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/fdc8e0a63ea88054","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731907928450,"stop":1731908021701,"duration":93251}},{"uid":"fed09180ef6e0d24","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/fed09180ef6e0d24","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731716562951,"stop":1731716656142,"duration":93191}},{"uid":"32912dd42c909f09","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/32912dd42c909f09","status":"passed","time":{"start":1731712667818,"stop":1731712702152,"duration":34334}},{"uid":"1068096f3eeb9ec0","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/1068096f3eeb9ec0","status":"passed","time":{"start":1731710256427,"stop":1731710299755,"duration":43328}},{"uid":"d2ad06de4f7815cc","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/d2ad06de4f7815cc","status":"passed","time":{"start":1731709623552,"stop":1731709717777,"duration":94225}},{"uid":"9947911a8a97d23d","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/9947911a8a97d23d","status":"passed","time":{"start":1731697690164,"stop":1731697730111,"duration":39947}},{"uid":"f1db0b1dee2d83aa","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/f1db0b1dee2d83aa","status":"passed","time":{"start":1731614920286,"stop":1731614946784,"duration":26498}},{"uid":"1d17aafdcb02f80f","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/1d17aafdcb02f80f","status":"passed","time":{"start":1731597356561,"stop":1731597380999,"duration":24438}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"267889af90c256fe.json","parameterValues":["'nrf9160dk'","'zephyr'"]}