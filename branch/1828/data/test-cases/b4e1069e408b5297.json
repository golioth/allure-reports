{"uid":"b4e1069e408b5297","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"c4178e273bd3962d06b411c6f8e74f6b","time":{"start":1732293374101,"stop":1732293466918,"duration":92817},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff959af890>\ndevice = <golioth.golioth.Device object at 0xffff957b2390>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1732293341057,"stop":1732293341057,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1732293341057,"stop":1732293341057,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732293341058,"stop":1732293341059,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732293341058,"stop":1732293341058,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732293341059,"stop":1732293341059,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732293341059,"stop":1732293341062,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732293341062,"stop":1732293341063,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732293341063,"stop":1732293341063,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732293341064,"stop":1732293341582,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732293341583,"stop":1732293342448,"duration":865},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732293342449,"stop":1732293372998,"duration":30549},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732293372998,"stop":1732293374098,"duration":1100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff959af890>\ndevice = <golioth.golioth.Device object at 0xffff957b2390>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"4d41c6c0a0e65c9b","name":"log","source":"4d41c6c0a0e65c9b.txt","type":"text/plain","size":15277}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732293467322,"stop":1732293467586,"duration":264},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732293467587,"stop":1732293468010,"duration":423},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732293468012,"stop":1732293468014,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732293468019,"stop":1732293468019,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"422c956c78dd"},{"name":"thread","value":"426-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":25,"unknown":0,"total":32},"items":[{"uid":"a4b1b5f592169a5d","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/a4b1b5f592169a5d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221639307,"stop":1732221639307,"duration":0}},{"uid":"dee884946152b1a0","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/dee884946152b1a0","status":"passed","time":{"start":1732135892119,"stop":1732135903074,"duration":10955}},{"uid":"a92662ad61775fd8","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/a92662ad61775fd8","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1732127597586,"stop":1732127617541,"duration":19955}},{"uid":"d9e7860f96c18127","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/d9e7860f96c18127","status":"passed","time":{"start":1732126520412,"stop":1732126548145,"duration":27733}},{"uid":"a637323eb903583d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/a637323eb903583d","status":"passed","time":{"start":1732049437774,"stop":1732049467716,"duration":29942}},{"uid":"3cb0e82909b06174","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/3cb0e82909b06174","status":"passed","time":{"start":1732049437774,"stop":1732049467716,"duration":29942}},{"uid":"e97c24ee81076ae0","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/e97c24ee81076ae0","status":"passed","time":{"start":1732049437774,"stop":1732049467716,"duration":29942}},{"uid":"8234587140cf1d8d","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/8234587140cf1d8d","status":"passed","time":{"start":1732033173561,"stop":1732033199917,"duration":26356}},{"uid":"e51870e65788289d","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/e51870e65788289d","status":"passed","time":{"start":1731971656813,"stop":1731971673344,"duration":16531}},{"uid":"266eadbf1897a6ac","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/266eadbf1897a6ac","status":"passed","time":{"start":1731963989296,"stop":1731964001548,"duration":12252}},{"uid":"90be12e04fa03a6b","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/90be12e04fa03a6b","status":"passed","time":{"start":1731958961664,"stop":1731958983009,"duration":21345}},{"uid":"a378407c0cf65137","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/a378407c0cf65137","status":"passed","time":{"start":1731955892684,"stop":1731955920759,"duration":28075}},{"uid":"7df2ce58069c9520","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/7df2ce58069c9520","status":"passed","time":{"start":1731907500951,"stop":1731907529659,"duration":28708}},{"uid":"e44cc7ec4c18f28d","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/e44cc7ec4c18f28d","status":"passed","time":{"start":1731715844793,"stop":1731715873734,"duration":28941}},{"uid":"5c2863509aa8437f","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/5c2863509aa8437f","status":"passed","time":{"start":1731712040393,"stop":1731712072697,"duration":32304}},{"uid":"55c2c382cab237d","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/55c2c382cab237d","status":"passed","time":{"start":1731709570959,"stop":1731709600608,"duration":29649}},{"uid":"c952b8c5cddb27f8","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/c952b8c5cddb27f8","status":"passed","time":{"start":1731709260605,"stop":1731709271889,"duration":11284}},{"uid":"188500fa6dca5642","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/188500fa6dca5642","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731696938840,"stop":1731697031723,"duration":92883}},{"uid":"229748d95d7cf093","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/229748d95d7cf093","status":"passed","time":{"start":1731614345066,"stop":1731614358289,"duration":13223}},{"uid":"3731313dbe1fa829","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/3731313dbe1fa829","status":"passed","time":{"start":1731596724782,"stop":1731596736654,"duration":11872}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b4e1069e408b5297.json","parameterValues":["'nrf9160dk'","'zephyr'"]}