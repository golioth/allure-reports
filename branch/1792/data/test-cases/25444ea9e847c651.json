{"uid":"25444ea9e847c651","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1732134763291,"stop":1732134876036,"duration":112745},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa61a3a10>\ndevice = <golioth.golioth.Device object at 0xffffa6191c10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732134753628,"stop":1732134753628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732134753629,"stop":1732134753629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732134753629,"stop":1732134753629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732134753630,"stop":1732134753630,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732134753630,"stop":1732134753630,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732134753631,"stop":1732134753633,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732134753634,"stop":1732134753634,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732134753634,"stop":1732134753634,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732134753635,"stop":1732134754067,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732134754068,"stop":1732134755011,"duration":943},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732134755011,"stop":1732134762779,"duration":7768},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732134762780,"stop":1732134763288,"duration":508},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa61a3a10>\ndevice = <golioth.golioth.Device object at 0xffffa6191c10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a2bda64a49259b4b","name":"log","source":"a2bda64a49259b4b.txt","type":"text/plain","size":16072}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732134876387,"stop":1732134876395,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732134876397,"stop":1732134876783,"duration":386},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732134876785,"stop":1732134876787,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732134876792,"stop":1732134876792,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"c169ee41399c"},{"name":"thread","value":"591-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8b1f797abd3b6024","status":"passed","time":{"start":1732134729362,"stop":1732134749631,"duration":20269}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":40,"unknown":0,"total":48},"items":[{"uid":"aae7cd6d24cdb699","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/aae7cd6d24cdb699","status":"passed","time":{"start":1732094086105,"stop":1732094109660,"duration":23555}},{"uid":"589b252bb1ed4010","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/589b252bb1ed4010","status":"passed","time":{"start":1732094086105,"stop":1732094109660,"duration":23555}},{"uid":"4b9bb0412fcafb43","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/4b9bb0412fcafb43","status":"passed","time":{"start":1732126129134,"stop":1732126148726,"duration":19592}},{"uid":"134b900c8ca2ec19","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/134b900c8ca2ec19","status":"passed","time":{"start":1732124052238,"stop":1732124078002,"duration":25764}},{"uid":"8844ece699c05945","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/8844ece699c05945","status":"passed","time":{"start":1732094086105,"stop":1732094109660,"duration":23555}},{"uid":"425ab41348be3bbc","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/425ab41348be3bbc","status":"passed","time":{"start":1732052373945,"stop":1732052398696,"duration":24751}},{"uid":"3af6fe35b44e9398","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/3af6fe35b44e9398","status":"passed","time":{"start":1732052373945,"stop":1732052398696,"duration":24751}},{"uid":"3a954226bcbba841","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/3a954226bcbba841","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732048034092,"stop":1732048146818,"duration":112726}},{"uid":"91699c026a0feb9c","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/91699c026a0feb9c","status":"passed","time":{"start":1732043719376,"stop":1732043738766,"duration":19390}},{"uid":"3bb63fc111a0ac4d","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/3bb63fc111a0ac4d","status":"passed","time":{"start":1732032411488,"stop":1732032436087,"duration":24599}},{"uid":"118db497e884ab21","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/118db497e884ab21","status":"passed","time":{"start":1732027628943,"stop":1732027652416,"duration":23473}},{"uid":"1f4a6b91af272f8f","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/1f4a6b91af272f8f","status":"passed","time":{"start":1732027628943,"stop":1732027652416,"duration":23473}},{"uid":"610ae2e733439779","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/610ae2e733439779","status":"passed","time":{"start":1732014843302,"stop":1732014866663,"duration":23361}},{"uid":"88d6e5c40e153beb","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/88d6e5c40e153beb","status":"passed","time":{"start":1732001083824,"stop":1732001107413,"duration":23589}},{"uid":"9b13fa2e09b9e55d","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/9b13fa2e09b9e55d","status":"passed","time":{"start":1731971102534,"stop":1731971126811,"duration":24277}},{"uid":"5c54a02367654a3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/5c54a02367654a3a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731963132425,"stop":1731963132425,"duration":0}},{"uid":"efcd4a33e537167a","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/efcd4a33e537167a","status":"passed","time":{"start":1731962476373,"stop":1731962517012,"duration":40639}},{"uid":"76befe7dc6dc8344","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/76befe7dc6dc8344","status":"passed","time":{"start":1731958313250,"stop":1731958336854,"duration":23604}},{"uid":"d6d6e0454a9f655d","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/d6d6e0454a9f655d","status":"passed","time":{"start":1731956082853,"stop":1731956106414,"duration":23561}},{"uid":"48993b298f33ba50","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/48993b298f33ba50","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731933232910,"stop":1731933232910,"duration":0}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"25444ea9e847c651.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}