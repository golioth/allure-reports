{"uid":"c1930387beb4f03b","name":"test_credentials","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_credentials","historyId":"abc89250cc42bcc27860ba6da8e15ba7","time":{"start":1730236842459,"stop":1730236923281,"duration":80822},"status":"broken","statusMessage":"httpx.ConnectTimeout","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:377: in handle_async_request\n    resp = await self._pool.handle_async_request(req)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:216: in handle_async_request\n    raise exc from None\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:196: in handle_async_request\n    response = await connection.handle_async_request(\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:99: in handle_async_request\n    raise exc\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:76: in handle_async_request\n    stream = await self._connect(request)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:122: in _connect\n    stream = await self._network_backend.connect_tcp(**kwargs)\n/usr/local/lib/python3.11/dist-packages/httpcore/_backends/auto.py:30: in connect_tcp\n    return await self._backend.connect_tcp(\n/usr/local/lib/python3.11/dist-packages/httpcore/_backends/trio.py:130: in connect_tcp\n    with map_exceptions(exc_map):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'trio.TooSlowError'>: <class 'httpcore.ConnectTimeout'>, <class 'trio.BrokenResourceError'>: <class 'httpcore.ConnectError'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ConnectTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpcore/_exceptions.py:14: ConnectTimeout\n\nThe above exception was the direct cause of the following exception:\n\nshell = <twister_harness.helpers.shell.Shell object at 0xffffa4fb9410>\nproject = <golioth.golioth.Project object at 0xffffa50db050>\ndevice_name = 'certificate-kZdMEHxnCrRxXjGw'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00,baud=115200']\ncertificate_cred = '67215180990e7ed8707e2d82', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n        shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n        shell._device.readlines_until(regex=\".*Sending hello! 2\", timeout=20.0)\n    \n        # Check cloud to verify device was created\n>       device = await project.device_by_name(device_name)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:234: in device_by_name\n    devices = await self.get_devices({'deviceName': name})\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:230: in get_devices\n    resp = await self.get('devices', params=params)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:80: in wrapper\n    resp: httpx.Response = await func(*args, **kwargs)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:98: in get\n    return await c.get(*args, **kwargs)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1814: in get\n    return await self.request(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1585: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1674: in send\n    response = await self._send_handling_auth(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1702: in _send_handling_auth\n    response = await self._send_handling_redirects(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1739: in _send_handling_redirects\n    response = await self._send_single_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1776: in _send_single_request\n    response = await transport.handle_async_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:376: in handle_async_request\n    with map_httpcore_exceptions():\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ConnectTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:89: ConnectTimeout","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730236799392,"stop":1730236799392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730236799393,"stop":1730236799393,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730236799393,"stop":1730236799393,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"api_url","time":{"start":1730236799394,"stop":1730236799394,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"api_key","time":{"start":1730236799394,"stop":1730236799394,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"device_object","time":{"start":1730236799395,"stop":1730236799397,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730236799395,"stop":1730236799395,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"project","time":{"start":1730236799398,"stop":1730236799833,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"device_name","time":{"start":1730236799834,"stop":1730236799835,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1730236799835,"stop":1730236800695,"duration":860},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"dut","time":{"start":1730236800696,"stop":1730236841853,"duration":41157},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"shell","time":{"start":1730236841853,"stop":1730236842456,"duration":603},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1730236842456,"stop":1730236842457,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"httpx.ConnectTimeout","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:377: in handle_async_request\n    resp = await self._pool.handle_async_request(req)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:216: in handle_async_request\n    raise exc from None\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:196: in handle_async_request\n    response = await connection.handle_async_request(\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:99: in handle_async_request\n    raise exc\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:76: in handle_async_request\n    stream = await self._connect(request)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:122: in _connect\n    stream = await self._network_backend.connect_tcp(**kwargs)\n/usr/local/lib/python3.11/dist-packages/httpcore/_backends/auto.py:30: in connect_tcp\n    return await self._backend.connect_tcp(\n/usr/local/lib/python3.11/dist-packages/httpcore/_backends/trio.py:130: in connect_tcp\n    with map_exceptions(exc_map):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'trio.TooSlowError'>: <class 'httpcore.ConnectTimeout'>, <class 'trio.BrokenResourceError'>: <class 'httpcore.ConnectError'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ConnectTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpcore/_exceptions.py:14: ConnectTimeout\n\nThe above exception was the direct cause of the following exception:\n\nshell = <twister_harness.helpers.shell.Shell object at 0xffffa4fb9410>\nproject = <golioth.golioth.Project object at 0xffffa50db050>\ndevice_name = 'certificate-kZdMEHxnCrRxXjGw'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00,baud=115200']\ncertificate_cred = '67215180990e7ed8707e2d82', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_credentials(shell, project, device_name, mcumgr_conn_args, certificate_cred, wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name])\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output = True, text = True)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n        shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n        shell._device.readlines_until(regex=\".*Sending hello! 2\", timeout=20.0)\n    \n        # Check cloud to verify device was created\n>       device = await project.device_by_name(device_name)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:234: in device_by_name\n    devices = await self.get_devices({'deviceName': name})\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:230: in get_devices\n    resp = await self.get('devices', params=params)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:80: in wrapper\n    resp: httpx.Response = await func(*args, **kwargs)\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:98: in get\n    return await c.get(*args, **kwargs)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1814: in get\n    return await self.request(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1585: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1674: in send\n    response = await self._send_handling_auth(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1702: in _send_handling_auth\n    response = await self._send_handling_redirects(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1739: in _send_handling_redirects\n    response = await self._send_single_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1776: in _send_single_request\n    response = await transport.handle_async_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:376: in handle_async_request\n    with map_httpcore_exceptions():\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ConnectTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:89: ConnectTimeout","steps":[],"attachments":[{"uid":"4c80349436d7b9f8","name":"log","source":"4c80349436d7b9f8.txt","type":"text/plain","size":41035}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1730236924347,"stop":1730236924391,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1730236924393,"stop":1730236924819,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"device_name::0","time":{"start":1730236924821,"stop":1730236925773,"duration":952},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"project::0","time":{"start":1730236925775,"stop":1730236925778,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730236925780,"stop":1730236925780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"906e0f4c4679"},{"name":"thread","value":"548-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":20,"unknown":0,"total":21},"items":[{"uid":"3cd2d3bdb5ae440d","reportUrl":"https://golioth.github.io/allure-reports/branch/1696//#testresult/3cd2d3bdb5ae440d","status":"passed","time":{"start":1729790067719,"stop":1729790144698,"duration":76979}},{"uid":"4f5fa4b36b528d70","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/4f5fa4b36b528d70","status":"passed","time":{"start":1729724762738,"stop":1729724838205,"duration":75467}},{"uid":"346ccc601c1a5457","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/346ccc601c1a5457","status":"passed","time":{"start":1729724762738,"stop":1729724838205,"duration":75467}},{"uid":"2384d805c084adc6","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/2384d805c084adc6","status":"passed","time":{"start":1729722244752,"stop":1729722321107,"duration":76355}},{"uid":"2ae856d725819269","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/2ae856d725819269","status":"passed","time":{"start":1729719598480,"stop":1729719671862,"duration":73382}},{"uid":"6cc971ada9b4c3c9","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/6cc971ada9b4c3c9","status":"passed","time":{"start":1729530489600,"stop":1729530565616,"duration":76016}},{"uid":"dbeb194a07b8781e","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/dbeb194a07b8781e","status":"passed","time":{"start":1729530489600,"stop":1729530565616,"duration":76016}},{"uid":"5742a09337fc8edf","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/5742a09337fc8edf","status":"passed","time":{"start":1729527868678,"stop":1729527950133,"duration":81455}},{"uid":"7840b041581c23f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/7840b041581c23f5","status":"passed","time":{"start":1729380208382,"stop":1729380283150,"duration":74768}},{"uid":"a48871bfa08e8cab","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/a48871bfa08e8cab","status":"passed","time":{"start":1729380208382,"stop":1729380283150,"duration":74768}},{"uid":"81a815368feb1c73","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/81a815368feb1c73","status":"passed","time":{"start":1729198807673,"stop":1729198885633,"duration":77960}},{"uid":"57da13bfcf2e626a","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/57da13bfcf2e626a","status":"passed","time":{"start":1729117175217,"stop":1729117249965,"duration":74748}},{"uid":"d9767f8d34f5246f","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/d9767f8d34f5246f","status":"passed","time":{"start":1729114611620,"stop":1729114686333,"duration":74713}},{"uid":"9c8b56722b3036a0","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/9c8b56722b3036a0","status":"passed","time":{"start":1729108641673,"stop":1729108715489,"duration":73816}},{"uid":"b9765a7dbb18ef4e","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/b9765a7dbb18ef4e","status":"passed","time":{"start":1729035016271,"stop":1729035089435,"duration":73164}},{"uid":"6e89347cf7d7df2b","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/6e89347cf7d7df2b","status":"passed","time":{"start":1729031672429,"stop":1729031746121,"duration":73692}},{"uid":"7d048965439b9415","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/7d048965439b9415","status":"passed","time":{"start":1729021077812,"stop":1729021151818,"duration":74006}},{"uid":"9c1705b00fc27860","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/9c1705b00fc27860","status":"passed","time":{"start":1729024833022,"stop":1729024906725,"duration":73703}},{"uid":"7d276c59166314e8","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/7d276c59166314e8","status":"passed","time":{"start":1729021077812,"stop":1729021151818,"duration":74006}},{"uid":"f0832aa2577ec437","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/f0832aa2577ec437","status":"passed","time":{"start":1729006353293,"stop":1729006429067,"duration":75774}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"c1930387beb4f03b.json","parameterValues":["'rak5010'","'zephyr'"]}