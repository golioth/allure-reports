{"uid":"ead0eb9db312bde9","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6de3eafb2765c88fcbba2d44b75da8e7","time":{"start":1759718647816,"stop":1759718733193,"duration":85377},"status":"failed","statusMessage":"AssertionError: assert 62 is None","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaeaab230>\ndevice = <golioth.golioth.Device object at 0xffffae9b5550>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb delete (async)\n    \n        shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n        await trio.sleep(2)\n        counter = await device.lightdb.get(\"counter\")\n        assert counter is None\n    \n        # Set and verify counter\n    \n        await counter_set_and_verify(device, 62)\n    \n        # Verify lightdb delete (sync)\n    \n        shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n        await trio.sleep(2)\n        counter = await device.lightdb.get(\"counter\")\n        if counter is not None:\n            # Try again, since previous counter value might get reassigned in counter_set_and_verify()\n            shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n            await trio.sleep(2)\n            counter = await device.lightdb.get(\"counter\")\n    \n>       assert counter is None\nE       assert 62 is None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:68: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1759718632644,"stop":1759718632645,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1759718632644,"stop":1759718632644,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759718632645,"stop":1759718632646,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759718632645,"stop":1759718632645,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759718632646,"stop":1759718632646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759718632647,"stop":1759718632649,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759718632649,"stop":1759718632650,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759718632650,"stop":1759718632650,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759718632651,"stop":1759718633141,"duration":490},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759718633142,"stop":1759718633889,"duration":747},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759718633889,"stop":1759718647203,"duration":13314},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759718647203,"stop":1759718647812,"duration":609},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 62 is None","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaeaab230>\ndevice = <golioth.golioth.Device object at 0xffffae9b5550>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb delete (async)\n    \n        shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n        await trio.sleep(2)\n        counter = await device.lightdb.get(\"counter\")\n        assert counter is None\n    \n        # Set and verify counter\n    \n        await counter_set_and_verify(device, 62)\n    \n        # Verify lightdb delete (sync)\n    \n        shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n        await trio.sleep(2)\n        counter = await device.lightdb.get(\"counter\")\n        if counter is not None:\n            # Try again, since previous counter value might get reassigned in counter_set_and_verify()\n            shell._device.readlines_until(regex=\".*Counter deleted successfully\", timeout=10.0)\n            await trio.sleep(2)\n            counter = await device.lightdb.get(\"counter\")\n    \n>       assert counter is None\nE       assert 62 is None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:68: AssertionError","steps":[],"attachments":[{"uid":"9dffe5ed532eef11","name":"log","source":"9dffe5ed532eef11.txt","type":"text/plain","size":40807}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759718733370,"stop":1759718733418,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759718733420,"stop":1759718733797,"duration":377},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759718733799,"stop":1759718733801,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759718733806,"stop":1759718733806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"12d32b36c7db"},{"name":"thread","value":"369-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ba6448beb0f66f0","status":"passed","time":{"start":1759368639893,"stop":1759368685891,"duration":45998}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":7},"items":[{"uid":"ebbbe7e14f9cbbe5","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/ebbbe7e14f9cbbe5","status":"passed","time":{"start":1759515676634,"stop":1759515721789,"duration":45155}},{"uid":"9fc1b89e06cdcc68","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/9fc1b89e06cdcc68","status":"passed","time":{"start":1759515676634,"stop":1759515721789,"duration":45155}},{"uid":"145a8de78cc55029","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/145a8de78cc55029","status":"passed","time":{"start":1759368639893,"stop":1759368685891,"duration":45998}},{"uid":"b52a707a4b750e0e","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/b52a707a4b750e0e","status":"passed","time":{"start":1759269915485,"stop":1759269960491,"duration":45006}},{"uid":"d5d0bedc266cb307","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/d5d0bedc266cb307","status":"passed","time":{"start":1759160293503,"stop":1759160339151,"duration":45648}},{"uid":"52d5301f5905f9ce","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/52d5301f5905f9ce","status":"passed","time":{"start":1758914407173,"stop":1758914452399,"duration":45226}}]},"tags":["mikes_orange_pi","anyio","rak5010","zephyr"]},"source":"ead0eb9db312bde9.json","parameterValues":["'rak5010'","'zephyr'"]}