{
  "uid" : "1bae2db4bc20d2c",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "bb4a636b6b2082650c724d1259211759",
  "time" : {
    "start" : 1736357003082,
    "stop" : 1736357021888,
    "duration" : 18806
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa7fb4fd0>\ndevice = <golioth.golioth.Device object at 0xffffa7f96650>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "shell",
    "time" : {
      "start" : 1736357002540,
      "stop" : 1736357003079,
      "duration" : 539
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736356993362,
      "stop" : 1736356993363,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736356993785,
      "stop" : 1736356994650,
      "duration" : 865
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736356993364,
      "stop" : 1736356993364,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736356993364,
      "stop" : 1736356993364,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736356993363,
      "stop" : 1736356993363,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736356993369,
      "stop" : 1736356993369,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736356994651,
      "stop" : 1736357002539,
      "duration" : 7888
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736356993369,
      "stop" : 1736356993784,
      "duration" : 415
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736356993365,
      "stop" : 1736356993365,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736356993365,
      "stop" : 1736356993367,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736356993368,
      "stop" : 1736356993368,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa7fb4fd0>\ndevice = <golioth.golioth.Device object at 0xffffa7f96650>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "df3d74f8039ae06b",
      "name" : "log",
      "source" : "df3d74f8039ae06b.txt",
      "type" : "text/plain",
      "size" : 20325
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1736357022267,
      "stop" : 1736357022980,
      "duration" : 713
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736357022224,
      "stop" : 1736357022265,
      "duration" : 41
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736357022982,
      "stop" : 1736357022984,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736357022989,
      "stop" : 1736357022990,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "tims_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "08936261f53f"
  }, {
    "name" : "thread",
    "value" : "440-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'mimxrt1024_evk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 26,
        "unknown" : 0,
        "total" : 29
      },
      "items" : [ {
        "uid" : "5027e7ba9ed5c12e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/5027e7ba9ed5c12e",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1736354590455,
          "stop" : 1736354609360,
          "duration" : 18905
        }
      }, {
        "uid" : "62b2f0f0b851f04b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/29/#testresult/62b2f0f0b851f04b",
        "status" : "passed",
        "time" : {
          "start" : 1736360534953,
          "stop" : 1736360563862,
          "duration" : 28909
        }
      }, {
        "uid" : "6be769d42e66a210",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/27/#testresult/6be769d42e66a210",
        "status" : "passed",
        "time" : {
          "start" : 1736285200077,
          "stop" : 1736285228022,
          "duration" : 27945
        }
      }, {
        "uid" : "652a1bc7e9eaab8b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/26/#testresult/652a1bc7e9eaab8b",
        "status" : "passed",
        "time" : {
          "start" : 1736283584082,
          "stop" : 1736283612996,
          "duration" : 28914
        }
      }, {
        "uid" : "426756781e5d961f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/25//#testresult/426756781e5d961f",
        "status" : "passed",
        "time" : {
          "start" : 1736275729506,
          "stop" : 1736275757422,
          "duration" : 27916
        }
      }, {
        "uid" : "ffe2945f2157606f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/24/#testresult/ffe2945f2157606f",
        "status" : "passed",
        "time" : {
          "start" : 1736270482719,
          "stop" : 1736270511696,
          "duration" : 28977
        }
      }, {
        "uid" : "52a1670cf1330ff0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1/#testresult/52a1670cf1330ff0",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1736224114998,
          "stop" : 1736224129626,
          "duration" : 14628
        }
      }, {
        "uid" : "39f7d313c1ea67b3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/39f7d313c1ea67b3",
        "status" : "passed",
        "time" : {
          "start" : 1736207804242,
          "stop" : 1736207829019,
          "duration" : 24777
        }
      }, {
        "uid" : "7e4cf20df350c64c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/7e4cf20df350c64c",
        "status" : "passed",
        "time" : {
          "start" : 1736207804242,
          "stop" : 1736207829019,
          "duration" : 24777
        }
      }, {
        "uid" : "32f8afd69500e858",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/32f8afd69500e858",
        "status" : "passed",
        "time" : {
          "start" : 1735947113423,
          "stop" : 1735947141363,
          "duration" : 27940
        }
      }, {
        "uid" : "4cf7418f0bb94fff",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/4cf7418f0bb94fff",
        "status" : "passed",
        "time" : {
          "start" : 1735926819260,
          "stop" : 1735926848172,
          "duration" : 28912
        }
      }, {
        "uid" : "998f5e68320c4579",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/998f5e68320c4579",
        "status" : "passed",
        "time" : {
          "start" : 1735931237480,
          "stop" : 1735931265393,
          "duration" : 27913
        }
      }, {
        "uid" : "b9b98189836c839b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/b9b98189836c839b",
        "status" : "passed",
        "time" : {
          "start" : 1735926819260,
          "stop" : 1735926848172,
          "duration" : 28912
        }
      }, {
        "uid" : "4764ffae40314d13",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/4764ffae40314d13",
        "status" : "passed",
        "time" : {
          "start" : 1735922557055,
          "stop" : 1735922584991,
          "duration" : 27936
        }
      }, {
        "uid" : "a18f841afc53c1c5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/a18f841afc53c1c5",
        "status" : "passed",
        "time" : {
          "start" : 1735862288324,
          "stop" : 1735862313103,
          "duration" : 24779
        }
      }, {
        "uid" : "c9248b2784d78661",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/c9248b2784d78661",
        "status" : "passed",
        "time" : {
          "start" : 1735859457862,
          "stop" : 1735859493788,
          "duration" : 35926
        }
      }, {
        "uid" : "92e010b4777b0d6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/92e010b4777b0d6",
        "status" : "passed",
        "time" : {
          "start" : 1735851459126,
          "stop" : 1735851487062,
          "duration" : 27936
        }
      }, {
        "uid" : "3283b5ff27fdb90f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/3283b5ff27fdb90f",
        "status" : "passed",
        "time" : {
          "start" : 1735847498534,
          "stop" : 1735847526515,
          "duration" : 27981
        }
      }, {
        "uid" : "e5e92e634fa7ff8f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/e5e92e634fa7ff8f",
        "status" : "passed",
        "time" : {
          "start" : 1735846016022,
          "stop" : 1735846043913,
          "duration" : 27891
        }
      }, {
        "uid" : "78e5885abfb6b013",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/78e5885abfb6b013",
        "status" : "passed",
        "time" : {
          "start" : 1735837325069,
          "stop" : 1735837353050,
          "duration" : 27981
        }
      } ]
    },
    "tags" : [ "anyio", "tims_orange_pi", "@pytest.mark.usefixtures('anyio_backend')", "mimxrt1024_evk", "zephyr" ]
  },
  "source" : "1bae2db4bc20d2c.json",
  "parameterValues" : [ "'mimxrt1024_evk'", "'zephyr'" ]
}