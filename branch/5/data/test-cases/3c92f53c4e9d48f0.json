{
  "uid" : "3c92f53c4e9d48f0",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "d863d307dfacb440b83f8a44acfa67f4",
  "time" : {
    "start" : 1736356152616,
    "stop" : 1736356200754,
    "duration" : 48138
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffbcca7b90>\ndevice = <golioth.golioth.Device object at 0xffffbcc86890>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736356138188,
      "stop" : 1736356138189,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736356138193,
      "stop" : 1736356138194,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736356138194,
      "stop" : 1736356138194,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736356138190,
      "stop" : 1736356138190,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736356138188,
      "stop" : 1736356138188,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736356138607,
      "stop" : 1736356139441,
      "duration" : 834
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736356139442,
      "stop" : 1736356151966,
      "duration" : 12524
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736356138191,
      "stop" : 1736356138193,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736356138195,
      "stop" : 1736356138607,
      "duration" : 412
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736356138189,
      "stop" : 1736356138189,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736356138189,
      "stop" : 1736356138190,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736356151967,
      "stop" : 1736356152613,
      "duration" : 646
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffbcca7b90>\ndevice = <golioth.golioth.Device object at 0xffffbcc86890>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Failed to get counter \\\\(async\\\\): 0'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e50b7533e05018a6",
      "name" : "log",
      "source" : "e50b7533e05018a6.txt",
      "type" : "text/plain",
      "size" : 25689
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1736356201234,
      "stop" : 1736356201623,
      "duration" : 389
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736356201100,
      "stop" : 1736356201232,
      "duration" : 132
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736356201633,
      "stop" : 1736356201633,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736356201625,
      "stop" : 1736356201627,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "55b9d4386aee"
  }, {
    "name" : "thread",
    "value" : "385-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 26,
        "unknown" : 0,
        "total" : 29
      },
      "items" : [ {
        "uid" : "9fa38735a9b1098d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/9fa38735a9b1098d",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1736353753211,
          "stop" : 1736353800489,
          "duration" : 47278
        }
      }, {
        "uid" : "9584262520fede62",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/29/#testresult/9584262520fede62",
        "status" : "passed",
        "time" : {
          "start" : 1736360607068,
          "stop" : 1736360665795,
          "duration" : 58727
        }
      }, {
        "uid" : "eabf1c496b1bfd9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/27/#testresult/eabf1c496b1bfd9",
        "status" : "passed",
        "time" : {
          "start" : 1736284586600,
          "stop" : 1736284645274,
          "duration" : 58674
        }
      }, {
        "uid" : "83e25b74c4b9da78",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/26/#testresult/83e25b74c4b9da78",
        "status" : "passed",
        "time" : {
          "start" : 1736283578245,
          "stop" : 1736283636735,
          "duration" : 58490
        }
      }, {
        "uid" : "f97260ebbe12a82",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/25//#testresult/f97260ebbe12a82",
        "status" : "passed",
        "time" : {
          "start" : 1736275730240,
          "stop" : 1736275788898,
          "duration" : 58658
        }
      }, {
        "uid" : "ef3d75a9df6dea49",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/24/#testresult/ef3d75a9df6dea49",
        "status" : "passed",
        "time" : {
          "start" : 1736270531891,
          "stop" : 1736270597631,
          "duration" : 65740
        }
      }, {
        "uid" : "aa4c5cb19ca78ba1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1/#testresult/aa4c5cb19ca78ba1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1736224021380,
          "stop" : 1736224068744,
          "duration" : 47364
        }
      }, {
        "uid" : "a9309cd123394ee1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/a9309cd123394ee1",
        "status" : "passed",
        "time" : {
          "start" : 1736206914503,
          "stop" : 1736206973449,
          "duration" : 58946
        }
      }, {
        "uid" : "4995151b1c47215b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/4995151b1c47215b",
        "status" : "passed",
        "time" : {
          "start" : 1736206914503,
          "stop" : 1736206973449,
          "duration" : 58946
        }
      }, {
        "uid" : "8975dbd9166d99f8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/8975dbd9166d99f8",
        "status" : "passed",
        "time" : {
          "start" : 1735946622920,
          "stop" : 1735946682506,
          "duration" : 59586
        }
      }, {
        "uid" : "9341b7d5e9333912",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/9341b7d5e9333912",
        "status" : "passed",
        "time" : {
          "start" : 1735926411852,
          "stop" : 1735926471045,
          "duration" : 59193
        }
      }, {
        "uid" : "c6d53b4570a2360e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/c6d53b4570a2360e",
        "status" : "passed",
        "time" : {
          "start" : 1735931460779,
          "stop" : 1735931519454,
          "duration" : 58675
        }
      }, {
        "uid" : "d52c837d9b0ce731",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/d52c837d9b0ce731",
        "status" : "passed",
        "time" : {
          "start" : 1735926411852,
          "stop" : 1735926471045,
          "duration" : 59193
        }
      }, {
        "uid" : "a5c1a7f92c7d395f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/a5c1a7f92c7d395f",
        "status" : "passed",
        "time" : {
          "start" : 1735922622589,
          "stop" : 1735922680867,
          "duration" : 58278
        }
      }, {
        "uid" : "3bb2a4f304ec79aa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/3bb2a4f304ec79aa",
        "status" : "passed",
        "time" : {
          "start" : 1735861283525,
          "stop" : 1735861342542,
          "duration" : 59017
        }
      }, {
        "uid" : "795f106df4d5dfd3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/795f106df4d5dfd3",
        "status" : "passed",
        "time" : {
          "start" : 1735859022166,
          "stop" : 1735859081511,
          "duration" : 59345
        }
      }, {
        "uid" : "9074efa09e51dbca",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/9074efa09e51dbca",
        "status" : "passed",
        "time" : {
          "start" : 1735851485994,
          "stop" : 1735851545764,
          "duration" : 59770
        }
      }, {
        "uid" : "9b8e3392c290f14f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/9b8e3392c290f14f",
        "status" : "passed",
        "time" : {
          "start" : 1735846629363,
          "stop" : 1735846688938,
          "duration" : 59575
        }
      }, {
        "uid" : "fd28ec805b198686",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/fd28ec805b198686",
        "status" : "passed",
        "time" : {
          "start" : 1735845460005,
          "stop" : 1735845518599,
          "duration" : 58594
        }
      }, {
        "uid" : "779e94ba7034dfe7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/779e94ba7034dfe7",
        "status" : "passed",
        "time" : {
          "start" : 1735836433407,
          "stop" : 1735836492077,
          "duration" : 58670
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "3c92f53c4e9d48f0.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}