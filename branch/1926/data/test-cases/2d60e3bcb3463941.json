{
  "uid" : "2d60e3bcb3463941",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello",
  "historyId" : "f1cf752999d3f3859e1cde5c2a14c34d",
  "time" : {
    "start" : 1734034069451,
    "stop" : 1734034069451,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dut",
    "time" : {
      "start" : 1734034070736,
      "stop" : 1734034073443,
      "duration" : 2707
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734034069457,
      "stop" : 1734034069458,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734034069876,
      "stop" : 1734034070735,
      "duration" : 859
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734034069455,
      "stop" : 1734034069455,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734034069456,
      "stop" : 1734034069456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734034069461,
      "stop" : 1734034069461,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734034069461,
      "stop" : 1734034069462,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734034069456,
      "stop" : 1734034069456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734034069458,
      "stop" : 1734034069460,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734034069462,
      "stop" : 1734034069876,
      "duration" : 414
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734034069457,
      "stop" : 1734034069457,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "fb767c7ee1f631a5",
      "name" : "log",
      "source" : "fb767c7ee1f631a5.txt",
      "type" : "text/plain",
      "size" : 9358
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1734034073706,
      "stop" : 1734034074081,
      "duration" : 375
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734034074090,
      "stop" : 1734034074090,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734034074083,
      "stop" : 1734034074085,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "tims_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "72e0ff9c6e88"
  }, {
    "name" : "thread",
    "value" : "474-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "26d5d7bf9693f82c",
      "status" : "broken",
      "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
      "time" : {
        "start" : 1734034061472,
        "stop" : 1734034061472,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 19,
        "unknown" : 0,
        "total" : 21
      },
      "items" : [ {
        "uid" : "8e1c0d5aff994d92",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/8e1c0d5aff994d92",
        "status" : "passed",
        "time" : {
          "start" : 1734029939167,
          "stop" : 1734029965596,
          "duration" : 26429
        }
      }, {
        "uid" : "513dcecfced33048",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/513dcecfced33048",
        "status" : "passed",
        "time" : {
          "start" : 1734025512918,
          "stop" : 1734025536431,
          "duration" : 23513
        }
      }, {
        "uid" : "4577b405bac8c66a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/4577b405bac8c66a",
        "status" : "passed",
        "time" : {
          "start" : 1734023898633,
          "stop" : 1734023919183,
          "duration" : 20550
        }
      }, {
        "uid" : "31098ec8835d7809",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/31098ec8835d7809",
        "status" : "passed",
        "time" : {
          "start" : 1733982612808,
          "stop" : 1733982635354,
          "duration" : 22546
        }
      }, {
        "uid" : "aa17f67f31933512",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/aa17f67f31933512",
        "status" : "passed",
        "time" : {
          "start" : 1733961928823,
          "stop" : 1733961952636,
          "duration" : 23813
        }
      }, {
        "uid" : "d2909fd3f8ee4f6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/d2909fd3f8ee4f6",
        "status" : "passed",
        "time" : {
          "start" : 1733958560370,
          "stop" : 1733958583062,
          "duration" : 22692
        }
      }, {
        "uid" : "6142ff37c584c75",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/6142ff37c584c75",
        "status" : "passed",
        "time" : {
          "start" : 1733953271821,
          "stop" : 1733953293297,
          "duration" : 21476
        }
      }, {
        "uid" : "6ccdbb702bd51355",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/6ccdbb702bd51355",
        "status" : "passed",
        "time" : {
          "start" : 1733950161922,
          "stop" : 1733950187492,
          "duration" : 25570
        }
      }, {
        "uid" : "a602c44a3e249e56",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/a602c44a3e249e56",
        "status" : "passed",
        "time" : {
          "start" : 1733948005982,
          "stop" : 1733948029028,
          "duration" : 23046
        }
      }, {
        "uid" : "5a4332ee87a81806",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/5a4332ee87a81806",
        "status" : "passed",
        "time" : {
          "start" : 1733942987497,
          "stop" : 1733943013107,
          "duration" : 25610
        }
      }, {
        "uid" : "b3c69a738970f9cf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/b3c69a738970f9cf",
        "status" : "passed",
        "time" : {
          "start" : 1733942739947,
          "stop" : 1733942762663,
          "duration" : 22716
        }
      }, {
        "uid" : "ce7b58ab867eda13",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/ce7b58ab867eda13",
        "status" : "passed",
        "time" : {
          "start" : 1733931115584,
          "stop" : 1733931139976,
          "duration" : 24392
        }
      }, {
        "uid" : "6e2a0278c8ffa151",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/6e2a0278c8ffa151",
        "status" : "passed",
        "time" : {
          "start" : 1733930314454,
          "stop" : 1733930334017,
          "duration" : 19563
        }
      }, {
        "uid" : "de15ffc03f2bdc1d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/de15ffc03f2bdc1d",
        "status" : "passed",
        "time" : {
          "start" : 1733890212592,
          "stop" : 1733890232327,
          "duration" : 19735
        }
      }, {
        "uid" : "69bfc406df513073",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/69bfc406df513073",
        "status" : "passed",
        "time" : {
          "start" : 1733888636244,
          "stop" : 1733888661847,
          "duration" : 25603
        }
      }, {
        "uid" : "ced1078545e173ca",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/ced1078545e173ca",
        "status" : "passed",
        "time" : {
          "start" : 1733877935236,
          "stop" : 1733877955806,
          "duration" : 20570
        }
      }, {
        "uid" : "10508ca346abaa19",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/10508ca346abaa19",
        "status" : "broken",
        "statusDetails" : "httpx.ConnectError: [Errno -5] No address associated with hostname",
        "time" : {
          "start" : 1733876750693,
          "stop" : 1733876750693,
          "duration" : 0
        }
      }, {
        "uid" : "8e15cd6a429730f6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/8e15cd6a429730f6",
        "status" : "passed",
        "time" : {
          "start" : 1733866798584,
          "stop" : 1733866818024,
          "duration" : 19440
        }
      }, {
        "uid" : "d4c64a5ad68b42e4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1888/#testresult/d4c64a5ad68b42e4",
        "status" : "passed",
        "time" : {
          "start" : 1733866016755,
          "stop" : 1733866037518,
          "duration" : 20763
        }
      }, {
        "uid" : "9eb0e0a4fcba1e39",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1884/#testresult/9eb0e0a4fcba1e39",
        "status" : "passed",
        "time" : {
          "start" : 1733854652634,
          "stop" : 1733854675379,
          "duration" : 22745
        }
      } ]
    },
    "tags" : [ "anyio", "tims_orange_pi", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "2d60e3bcb3463941.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}