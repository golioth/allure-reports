{
  "uid" : "db2391e64ca2fb53",
  "name" : "test_lightdb_delete",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete",
  "historyId" : "033bde6843906cfc60e943571f867eee",
  "time" : {
    "start" : 1734034029543,
    "stop" : 1734034029543,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_lightdb_delete>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1734034029552,
      "stop" : 1734034029552,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734034029548,
      "stop" : 1734034029548,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734034030892,
      "stop" : 1734034033599,
      "duration" : 2707
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734034029553,
      "stop" : 1734034029553,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734034029549,
      "stop" : 1734034029551,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734034029553,
      "stop" : 1734034030040,
      "duration" : 487
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734034029547,
      "stop" : 1734034029547,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734034030041,
      "stop" : 1734034030892,
      "duration" : 851
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734034029548,
      "stop" : 1734034029548,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734034029546,
      "stop" : 1734034029546,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734034029549,
      "stop" : 1734034029549,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_lightdb_delete>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "292aa98b684bea45",
      "name" : "log",
      "source" : "292aa98b684bea45.txt",
      "type" : "text/plain",
      "size" : 9377
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734034034291,
      "stop" : 1734034034291,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734034034284,
      "stop" : 1734034034286,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734034033871,
      "stop" : 1734034034282,
      "duration" : 411
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "tims_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "72e0ff9c6e88"
  }, {
    "name" : "thread",
    "value" : "415-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 20,
        "unknown" : 0,
        "total" : 21
      },
      "items" : [ {
        "uid" : "7f54996b68c054ab",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/7f54996b68c054ab",
        "status" : "passed",
        "time" : {
          "start" : 1734029746168,
          "stop" : 1734029761903,
          "duration" : 15735
        }
      }, {
        "uid" : "4f21490ec5928924",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/4f21490ec5928924",
        "status" : "passed",
        "time" : {
          "start" : 1734025322490,
          "stop" : 1734025339877,
          "duration" : 17387
        }
      }, {
        "uid" : "c8c2474ce128c828",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/c8c2474ce128c828",
        "status" : "passed",
        "time" : {
          "start" : 1734023710210,
          "stop" : 1734023723607,
          "duration" : 13397
        }
      }, {
        "uid" : "a547fee627893368",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/a547fee627893368",
        "status" : "passed",
        "time" : {
          "start" : 1733982422236,
          "stop" : 1733982434499,
          "duration" : 12263
        }
      }, {
        "uid" : "8d84e8e22ba63a1c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/8d84e8e22ba63a1c",
        "status" : "passed",
        "time" : {
          "start" : 1733961780637,
          "stop" : 1733961795295,
          "duration" : 14658
        }
      }, {
        "uid" : "7716c8883478cdef",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/7716c8883478cdef",
        "status" : "passed",
        "time" : {
          "start" : 1733958144464,
          "stop" : 1733958157905,
          "duration" : 13441
        }
      }, {
        "uid" : "b0f71ad6ba986945",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/b0f71ad6ba986945",
        "status" : "passed",
        "time" : {
          "start" : 1733952921407,
          "stop" : 1733952933833,
          "duration" : 12426
        }
      }, {
        "uid" : "b6f7d8e418b01508",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/b6f7d8e418b01508",
        "status" : "passed",
        "time" : {
          "start" : 1733949837880,
          "stop" : 1733949852533,
          "duration" : 14653
        }
      }, {
        "uid" : "b3e05199a513c694",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/b3e05199a513c694",
        "status" : "passed",
        "time" : {
          "start" : 1733947815018,
          "stop" : 1733947830637,
          "duration" : 15619
        }
      }, {
        "uid" : "57db318e5ed06821",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/57db318e5ed06821",
        "status" : "passed",
        "time" : {
          "start" : 1733942786490,
          "stop" : 1733942803811,
          "duration" : 17321
        }
      }, {
        "uid" : "933c621055d2fc26",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/933c621055d2fc26",
        "status" : "passed",
        "time" : {
          "start" : 1733942537204,
          "stop" : 1733942554542,
          "duration" : 17338
        }
      }, {
        "uid" : "c6613f4c717e6b11",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/c6613f4c717e6b11",
        "status" : "passed",
        "time" : {
          "start" : 1733930920240,
          "stop" : 1733930935712,
          "duration" : 15472
        }
      }, {
        "uid" : "54405275992a0861",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/54405275992a0861",
        "status" : "passed",
        "time" : {
          "start" : 1733930117354,
          "stop" : 1733930133111,
          "duration" : 15757
        }
      }, {
        "uid" : "3aeef917715477c6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/3aeef917715477c6",
        "status" : "passed",
        "time" : {
          "start" : 1733890010801,
          "stop" : 1733890026524,
          "duration" : 15723
        }
      }, {
        "uid" : "ce8068bfde2123b0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/ce8068bfde2123b0",
        "status" : "passed",
        "time" : {
          "start" : 1733888204740,
          "stop" : 1733888221242,
          "duration" : 16502
        }
      }, {
        "uid" : "c66866b26af14057",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/c66866b26af14057",
        "status" : "passed",
        "time" : {
          "start" : 1733877519777,
          "stop" : 1733877533101,
          "duration" : 13324
        }
      }, {
        "uid" : "dab36c4c856f4802",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/dab36c4c856f4802",
        "status" : "passed",
        "time" : {
          "start" : 1733876608065,
          "stop" : 1733876620474,
          "duration" : 12409
        }
      }, {
        "uid" : "ae3313f571374e5e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/ae3313f571374e5e",
        "status" : "passed",
        "time" : {
          "start" : 1733866604675,
          "stop" : 1733866619406,
          "duration" : 14731
        }
      }, {
        "uid" : "cba4b81bec4a7b40",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1888/#testresult/cba4b81bec4a7b40",
        "status" : "passed",
        "time" : {
          "start" : 1733865820238,
          "stop" : 1733865835819,
          "duration" : 15581
        }
      }, {
        "uid" : "be47b8aee812db5b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1884/#testresult/be47b8aee812db5b",
        "status" : "passed",
        "time" : {
          "start" : 1733854453269,
          "stop" : 1733854469959,
          "duration" : 16690
        }
      } ]
    },
    "tags" : [ "anyio", "tims_orange_pi", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "db2391e64ca2fb53.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}