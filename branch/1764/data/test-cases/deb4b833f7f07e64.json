{"uid":"deb4b833f7f07e64","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"03352d708656e4accf49c2f80b0063e1","time":{"start":1731955030810,"stop":1731955053494,"duration":22684},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff962fc450>\ndevice = <golioth.golioth.Device object at 0xffff9630a050>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731955009152,"stop":1731955009152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731955009153,"stop":1731955009153,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731955009154,"stop":1731955009155,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731955009154,"stop":1731955009154,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731955009155,"stop":1731955009156,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731955009156,"stop":1731955009158,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731955009159,"stop":1731955009159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731955009160,"stop":1731955009160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731955009161,"stop":1731955009926,"duration":765},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731955009926,"stop":1731955011226,"duration":1300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731955011227,"stop":1731955029762,"duration":18535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731955029762,"stop":1731955030807,"duration":1045},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff962fc450>\ndevice = <golioth.golioth.Device object at 0xffff9630a050>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9d5de476bb646894","name":"log","source":"9d5de476bb646894.txt","type":"text/plain","size":13045}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731955053948,"stop":1731955054060,"duration":112},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731955054062,"stop":1731955054520,"duration":458},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731955054522,"stop":1731955054525,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731955054529,"stop":1731955054530,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"785f8d8953d5"},{"name":"thread","value":"341-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":14,"skipped":0,"passed":10,"unknown":0,"total":29},"items":[{"uid":"9709837106970a3d","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/9709837106970a3d","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934142507,"stop":1731934142507,"duration":0}},{"uid":"ab27bd807d375b5c","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/ab27bd807d375b5c","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923077033,"stop":1731923077033,"duration":0}},{"uid":"2f3790b2f0d632dd","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/2f3790b2f0d632dd","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731906263524,"stop":1731906286044,"duration":22520}},{"uid":"50cf6a2c71ad1cc0","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/50cf6a2c71ad1cc0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731714727741,"stop":1731714750377,"duration":22636}},{"uid":"3ff25d859774c3f9","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/3ff25d859774c3f9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731711287237,"stop":1731711309819,"duration":22582}},{"uid":"f3815064c47c8c20","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/f3815064c47c8c20","status":"passed","time":{"start":1731707373511,"stop":1731707383262,"duration":9751}},{"uid":"78b07474ece7dbf3","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/78b07474ece7dbf3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731708217085,"stop":1731708239610,"duration":22525}},{"uid":"5a6e93e8d190e750","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/5a6e93e8d190e750","status":"passed","time":{"start":1731695594888,"stop":1731695606487,"duration":11599}},{"uid":"fb71ea279c4c2329","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/fb71ea279c4c2329","status":"passed","time":{"start":1731689958978,"stop":1731689972658,"duration":13680}},{"uid":"265ced04c6317e11","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/265ced04c6317e11","status":"passed","time":{"start":1731624574545,"stop":1731624587394,"duration":12849}},{"uid":"923348a43ad3ce49","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/923348a43ad3ce49","status":"passed","time":{"start":1731622785599,"stop":1731622796310,"duration":10711}},{"uid":"64673584f642bcd8","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/64673584f642bcd8","status":"passed","time":{"start":1731616344891,"stop":1731616357545,"duration":12654}},{"uid":"2585c515b7954027","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/2585c515b7954027","status":"passed","time":{"start":1731613500645,"stop":1731613513388,"duration":12743}},{"uid":"6bde702e294f582","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/6bde702e294f582","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731611034404,"stop":1731611034404,"duration":0}},{"uid":"f0d8c459c569a618","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/f0d8c459c569a618","status":"passed","time":{"start":1731597717606,"stop":1731597729377,"duration":11771}},{"uid":"d45f4b10013b2643","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/d45f4b10013b2643","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731548735818,"stop":1731548758534,"duration":22716}},{"uid":"98e5ef4e3c76453f","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/98e5ef4e3c76453f","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731566768591,"stop":1731566768591,"duration":0}},{"uid":"cc8f1e04d5f38efe","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/cc8f1e04d5f38efe","status":"passed","time":{"start":1731543184731,"stop":1731543192599,"duration":7868}},{"uid":"47b78d18c834a58","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/47b78d18c834a58","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731540209209,"stop":1731540231778,"duration":22569}},{"uid":"2903b0fb84ca4134","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/2903b0fb84ca4134","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731537597819,"stop":1731537620390,"duration":22571}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"deb4b833f7f07e64.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}