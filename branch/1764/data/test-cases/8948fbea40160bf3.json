{"uid":"8948fbea40160bf3","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"fbdcf5b89e903e4e31b43e980f10a270","time":{"start":1731955228611,"stop":1731955322057,"duration":93446},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbc3c2790>\ndevice = <golioth.golioth.Device object at 0xffffbc3dd7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731955210444,"stop":1731955210445,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731955210445,"stop":1731955210445,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731955210446,"stop":1731955210446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731955210446,"stop":1731955210446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731955210447,"stop":1731955210450,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731955210447,"stop":1731955210447,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731955210450,"stop":1731955210450,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731955210451,"stop":1731955210451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731955210452,"stop":1731955210907,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731955210908,"stop":1731955211931,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731955211932,"stop":1731955227555,"duration":15623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731955227556,"stop":1731955228608,"duration":1052},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbc3c2790>\ndevice = <golioth.golioth.Device object at 0xffffbc3dd7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"edb085e9ff45dc8f","name":"log","source":"edb085e9ff45dc8f.txt","type":"text/plain","size":17442}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731955322340,"stop":1731955322383,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731955322385,"stop":1731955322844,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731955322846,"stop":1731955322849,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731955322853,"stop":1731955322854,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"785f8d8953d5"},{"name":"thread","value":"419-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":8,"skipped":0,"passed":15,"unknown":0,"total":29},"items":[{"uid":"9184c1fe5712819","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/9184c1fe5712819","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934395210,"stop":1731934395210,"duration":0}},{"uid":"76986649150a9ec5","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/76986649150a9ec5","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923320520,"stop":1731923320520,"duration":0}},{"uid":"e9f7afef09825c5c","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/e9f7afef09825c5c","status":"passed","time":{"start":1731906456702,"stop":1731906478075,"duration":21373}},{"uid":"aac669eb41b8ce55","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/aac669eb41b8ce55","status":"passed","time":{"start":1731714924423,"stop":1731714944781,"duration":20358}},{"uid":"b62a57e54b0e592f","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/b62a57e54b0e592f","status":"passed","time":{"start":1731711488279,"stop":1731711513664,"duration":25385}},{"uid":"230825e6d1aadf55","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/230825e6d1aadf55","status":"failed","statusDetails":"AssertionError: assert 1 == 0","time":{"start":1731707615279,"stop":1731707632895,"duration":17616}},{"uid":"32da49d0b73be438","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/32da49d0b73be438","status":"passed","time":{"start":1731708415257,"stop":1731708435600,"duration":20343}},{"uid":"6e02a25c060c045c","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/6e02a25c060c045c","status":"passed","time":{"start":1731695782384,"stop":1731695807923,"duration":25539}},{"uid":"6fc73d3e16f60338","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/6fc73d3e16f60338","status":"passed","time":{"start":1731690104600,"stop":1731690131177,"duration":26577}},{"uid":"fbd20dd4a331d2b","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/fbd20dd4a331d2b","status":"passed","time":{"start":1731624718291,"stop":1731624740764,"duration":22473}},{"uid":"4009dea5dc7250e0","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/4009dea5dc7250e0","status":"passed","time":{"start":1731622928199,"stop":1731622948690,"duration":20491}},{"uid":"8c4d0c5bbe44eced","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/8c4d0c5bbe44eced","status":"passed","time":{"start":1731616489051,"stop":1731616509743,"duration":20692}},{"uid":"89e73dfecc28c1af","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/89e73dfecc28c1af","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731614245531,"stop":1731614268601,"duration":23070}},{"uid":"32c1f9c13406bee9","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/32c1f9c13406bee9","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731611248047,"stop":1731611248047,"duration":0}},{"uid":"a2e9a6bd15e8df40","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/a2e9a6bd15e8df40","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731598490566,"stop":1731598513785,"duration":23219}},{"uid":"e6a2dbfa124aa9b4","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/e6a2dbfa124aa9b4","status":"passed","time":{"start":1731549005108,"stop":1731549028731,"duration":23623}},{"uid":"5c98cc926691f347","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/5c98cc926691f347","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731566977442,"stop":1731566977442,"duration":0}},{"uid":"443a6d1d65cc1163","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/443a6d1d65cc1163","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731543433558,"stop":1731543456635,"duration":23077}},{"uid":"2d1d6972096311c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/2d1d6972096311c5","status":"passed","time":{"start":1731540410804,"stop":1731540433810,"duration":23006}},{"uid":"4022ec9d74c4d292","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/4022ec9d74c4d292","status":"passed","time":{"start":1731537799117,"stop":1731537823721,"duration":24604}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"8948fbea40160bf3.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}