{"uid":"527ce616c5a7b397","name":"test_settings","fullName":"examples.esp_idf.settings.pytest.test_sample#test_settings","historyId":"b668116b49f5cc0312523477e90f082c","time":{"start":1731955006642,"stop":1731955021775,"duration":15133},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 234024.53926488047\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <espidfboard.ESPIDFBoard object at 0xffffaa015a90>\nproject = <golioth.golioth.Project object at 0xffffaa043cd0>\ndevice = <golioth.golioth.Device object at 0xffffaa05a410>\n\n    async def test_settings(board, project, device):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Reset board\n        await board.reset()\n    \n        # Wait for device to reboot and connect\n        await board.wait_for_regex_in_line(r'.*Golioth client connected', timeout_s=30.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       await board.wait_for_regex_in_line(r'.*Setting loop delay to 5 s', timeout_s=5.0)\n\nexamples/esp_idf/settings/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 234024.53926488047\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731954964950,"stop":1731954964950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1731954964951,"stop":1731954964951,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1731954964952,"stop":1731954964953,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1731954964954,"stop":1731954964954,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731954964955,"stop":1731954964956,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731954964957,"stop":1731954964957,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1731954964958,"stop":1731954964958,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1731954964959,"stop":1731954964959,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1731954964960,"stop":1731954964960,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731954964961,"stop":1731954964962,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731954964961,"stop":1731954964961,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731954964962,"stop":1731954964962,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1731954964963,"stop":1731955004770,"duration":39807},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731955004771,"stop":1731955005360,"duration":589},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731955005361,"stop":1731955006639,"duration":1278},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 234024.53926488047\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <espidfboard.ESPIDFBoard object at 0xffffaa015a90>\nproject = <golioth.golioth.Project object at 0xffffaa043cd0>\ndevice = <golioth.golioth.Device object at 0xffffaa05a410>\n\n    async def test_settings(board, project, device):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Reset board\n        await board.reset()\n    \n        # Wait for device to reboot and connect\n        await board.wait_for_regex_in_line(r'.*Golioth client connected', timeout_s=30.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       await board.wait_for_regex_in_line(r'.*Setting loop delay to 5 s', timeout_s=5.0)\n\nexamples/esp_idf/settings/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 234024.53926488047\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"e0d982aece3c92c9","name":"stdout","source":"e0d982aece3c92c9.txt","type":"text/plain","size":11831}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1731955022390,"stop":1731955022833,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731955022835,"stop":1731955022835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1731955022837,"stop":1731955022844,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"7377e4a5b7e4"},{"name":"thread","value":"264-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":27,"unknown":0,"total":29},"items":[{"uid":"f12bf275daf6fe77","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/f12bf275daf6fe77","status":"passed","time":{"start":1731923001546,"stop":1731923010018,"duration":8472}},{"uid":"a3cb781be1fefd5a","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/a3cb781be1fefd5a","status":"passed","time":{"start":1731923001546,"stop":1731923010018,"duration":8472}},{"uid":"165123b42746e2ba","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/165123b42746e2ba","status":"passed","time":{"start":1731905843548,"stop":1731905852824,"duration":9276}},{"uid":"34677b3a5930763a","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/34677b3a5930763a","status":"passed","time":{"start":1731712768807,"stop":1731712778764,"duration":9957}},{"uid":"c1a202d8350635d4","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/c1a202d8350635d4","status":"passed","time":{"start":1731710088032,"stop":1731710096422,"duration":8390}},{"uid":"40540d38b99ef9e2","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/40540d38b99ef9e2","status":"passed","time":{"start":1731707221843,"stop":1731707241875,"duration":20032}},{"uid":"7158779be5dc00ac","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/7158779be5dc00ac","status":"passed","time":{"start":1731707450805,"stop":1731707462390,"duration":11585}},{"uid":"d307100dff8cc9f2","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/d307100dff8cc9f2","status":"passed","time":{"start":1731694976237,"stop":1731694985560,"duration":9323}},{"uid":"dc540c741ac1e786","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/dc540c741ac1e786","status":"passed","time":{"start":1731622030058,"stop":1731622039842,"duration":9784}},{"uid":"e0aadd80a62bc022","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/e0aadd80a62bc022","status":"passed","time":{"start":1731622030058,"stop":1731622039842,"duration":9784}},{"uid":"d73c5055cd7fc47c","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/d73c5055cd7fc47c","status":"passed","time":{"start":1731622030058,"stop":1731622039842,"duration":9784}},{"uid":"b7e044cd68eb3709","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/b7e044cd68eb3709","status":"passed","time":{"start":1731615662020,"stop":1731615671512,"duration":9492}},{"uid":"d2e002b452d6827c","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/d2e002b452d6827c","status":"passed","time":{"start":1731612752112,"stop":1731612776240,"duration":24128}},{"uid":"348677ae7b5021d5","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/348677ae7b5021d5","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731610835933,"stop":1731610849805,"duration":13872}},{"uid":"ffcd6a5b41c08687","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/ffcd6a5b41c08687","status":"passed","time":{"start":1731542598273,"stop":1731542607577,"duration":9304}},{"uid":"7eebf84400a99638","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/7eebf84400a99638","status":"passed","time":{"start":1731547992334,"stop":1731548005102,"duration":12768}},{"uid":"b9897231b53fdab0","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/b9897231b53fdab0","status":"passed","time":{"start":1731537987205,"stop":1731537996483,"duration":9278}},{"uid":"c750ce1e77dbf8b","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/c750ce1e77dbf8b","status":"passed","time":{"start":1731542598273,"stop":1731542607577,"duration":9304}},{"uid":"6bd5afc090b5cdef","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/6bd5afc090b5cdef","status":"passed","time":{"start":1731540142852,"stop":1731540153590,"duration":10738}},{"uid":"f9a4904042a49c3f","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/f9a4904042a49c3f","status":"passed","time":{"start":1731538453983,"stop":1731538464545,"duration":10562}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"527ce616c5a7b397.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}