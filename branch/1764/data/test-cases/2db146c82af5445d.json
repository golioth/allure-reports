{"uid":"2db146c82af5445d","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"466fcb31cd63d28758a28daeb9320ffb","time":{"start":1731955837619,"stop":1731955930918,"duration":93299},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7e4f77d0>\ndevice = <golioth.golioth.Device object at 0xffff7e4e5790>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731955827684,"stop":1731955827684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731955827685,"stop":1731955827685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731955827685,"stop":1731955827686,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731955827686,"stop":1731955827686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731955827687,"stop":1731955827689,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731955827687,"stop":1731955827687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731955827690,"stop":1731955827690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731955827691,"stop":1731955827691,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731955827691,"stop":1731955828306,"duration":615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731955828306,"stop":1731955829286,"duration":980},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731955829287,"stop":1731955837070,"duration":7783},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731955837070,"stop":1731955837616,"duration":546},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7e4f77d0>\ndevice = <golioth.golioth.Device object at 0xffff7e4e5790>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9afd59a920179812","name":"log","source":"9afd59a920179812.txt","type":"text/plain","size":17590}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731955931272,"stop":1731955931280,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731955931282,"stop":1731955931749,"duration":467},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731955931751,"stop":1731955931753,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731955931758,"stop":1731955931758,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8d2d1a96ec0a"},{"name":"thread","value":"488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":23,"unknown":0,"total":29},"items":[{"uid":"eb391b088075aed7","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/eb391b088075aed7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731933193077,"stop":1731933193077,"duration":0}},{"uid":"80773012f324c8c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/80773012f324c8c4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731922882554,"stop":1731922882554,"duration":0}},{"uid":"a4a5c37be551090b","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/a4a5c37be551090b","status":"passed","time":{"start":1731905842296,"stop":1731905852025,"duration":9729}},{"uid":"bb89e235b66e29a9","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/bb89e235b66e29a9","status":"passed","time":{"start":1731714302501,"stop":1731714313077,"duration":10576}},{"uid":"f7e25cc5f4fbec70","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/f7e25cc5f4fbec70","status":"passed","time":{"start":1731711278687,"stop":1731711285186,"duration":6499}},{"uid":"c0be95b3ff22b114","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/c0be95b3ff22b114","status":"passed","time":{"start":1731706965987,"stop":1731706977817,"duration":11830}},{"uid":"443f2bab0c97a0b2","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/443f2bab0c97a0b2","status":"passed","time":{"start":1731706952518,"stop":1731706958852,"duration":6334}},{"uid":"d4aca612d2c4b9d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/d4aca612d2c4b9d7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731695095402,"stop":1731695188550,"duration":93148}},{"uid":"8b9de50b208c71ff","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/8b9de50b208c71ff","status":"passed","time":{"start":1731622407791,"stop":1731622418562,"duration":10771}},{"uid":"36adb33438d495c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/36adb33438d495c5","status":"passed","time":{"start":1731622407791,"stop":1731622418562,"duration":10771}},{"uid":"565952ad95f4634a","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/565952ad95f4634a","status":"passed","time":{"start":1731622407791,"stop":1731622418562,"duration":10771}},{"uid":"96dd058d2889d1b0","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/96dd058d2889d1b0","status":"passed","time":{"start":1731616344180,"stop":1731616356003,"duration":11823}},{"uid":"180fbfdfd315c58c","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/180fbfdfd315c58c","status":"passed","time":{"start":1731613551999,"stop":1731613562629,"duration":10630}},{"uid":"b7bb53c1d9a218cd","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/b7bb53c1d9a218cd","status":"passed","time":{"start":1731610618063,"stop":1731610628735,"duration":10672}},{"uid":"91a5cb33a0c3d510","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/91a5cb33a0c3d510","status":"passed","time":{"start":1731596962573,"stop":1731596972533,"duration":9960}},{"uid":"df5e97f92b69cabd","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/df5e97f92b69cabd","status":"passed","time":{"start":1731548950440,"stop":1731548960974,"duration":10534}},{"uid":"381d9304b223b953","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/381d9304b223b953","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731563680011,"stop":1731563680011,"duration":0}},{"uid":"ae49639861df2daa","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/ae49639861df2daa","status":"passed","time":{"start":1731542670255,"stop":1731542681026,"duration":10771}},{"uid":"400b116c6db3201a","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/400b116c6db3201a","status":"passed","time":{"start":1731539565810,"stop":1731539576813,"duration":11003}},{"uid":"7c87184eb76172e9","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/7c87184eb76172e9","status":"passed","time":{"start":1731536370723,"stop":1731536381337,"duration":10614}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"2db146c82af5445d.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}