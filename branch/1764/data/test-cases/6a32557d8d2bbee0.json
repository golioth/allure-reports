{"uid":"6a32557d8d2bbee0","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a7312cf31d6314ecf7ffd5a0a0af0ddc","time":{"start":1731955183047,"stop":1731955206289,"duration":23242},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8582ecd0>\ndevice = <golioth.golioth.Device object at 0xffff8584dd50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731955165067,"stop":1731955165067,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731955165068,"stop":1731955165068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731955165068,"stop":1731955165068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731955165069,"stop":1731955165070,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731955165069,"stop":1731955165069,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731955165070,"stop":1731955165072,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731955165073,"stop":1731955165073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731955165073,"stop":1731955165073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731955165074,"stop":1731955165505,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731955165506,"stop":1731955166416,"duration":910},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731955166417,"stop":1731955182031,"duration":15614},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731955182031,"stop":1731955183044,"duration":1013},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8582ecd0>\ndevice = <golioth.golioth.Device object at 0xffff8584dd50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"bb29d3d157f4af56","name":"log","source":"bb29d3d157f4af56.txt","type":"text/plain","size":18933}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731955206598,"stop":1731955206609,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731955206611,"stop":1731955207153,"duration":542},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731955207155,"stop":1731955207157,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731955207162,"stop":1731955207162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"785f8d8953d5"},{"name":"thread","value":"404-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":19,"unknown":0,"total":29},"items":[{"uid":"a7471cc6a547b2da","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/a7471cc6a547b2da","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731934298052,"stop":1731934391222,"duration":93170}},{"uid":"6e6b8708ef958184","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/6e6b8708ef958184","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731923223343,"stop":1731923316477,"duration":93134}},{"uid":"63d3e6ba99171847","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/63d3e6ba99171847","status":"passed","time":{"start":1731906407894,"stop":1731906435160,"duration":27266}},{"uid":"bcc4215e323c5e76","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/bcc4215e323c5e76","status":"passed","time":{"start":1731714873063,"stop":1731714902942,"duration":29879}},{"uid":"d15a0fe75b716dc8","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/d15a0fe75b716dc8","status":"passed","time":{"start":1731711438295,"stop":1731711466577,"duration":28282}},{"uid":"dd0c26dc621d8dd2","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/dd0c26dc621d8dd2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731707570184,"stop":1731707593318,"duration":23134}},{"uid":"d6e0ec7b6d14a7b4","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/d6e0ec7b6d14a7b4","status":"passed","time":{"start":1731708366531,"stop":1731708393461,"duration":26930}},{"uid":"aaa684b4e9901db","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/aaa684b4e9901db","status":"passed","time":{"start":1731695731288,"stop":1731695761271,"duration":29983}},{"uid":"5f4ddcc825a71fcd","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/5f4ddcc825a71fcd","status":"passed","time":{"start":1731690051888,"stop":1731690081438,"duration":29550}},{"uid":"5c1ad34a97ee8889","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/5c1ad34a97ee8889","status":"passed","time":{"start":1731624666261,"stop":1731624695512,"duration":29251}},{"uid":"46060a6df3af2001","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/46060a6df3af2001","status":"passed","time":{"start":1731623160940,"stop":1731623189972,"duration":29032}},{"uid":"281b19b303b97ac6","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/281b19b303b97ac6","status":"passed","time":{"start":1731616437470,"stop":1731616465556,"duration":28086}},{"uid":"c1e449f1637c148a","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/c1e449f1637c148a","status":"passed","time":{"start":1731614197902,"stop":1731614225542,"duration":27640}},{"uid":"88e0840b4e485315","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/88e0840b4e485315","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731611150893,"stop":1731611244005,"duration":93112}},{"uid":"1320b4bc615fd35","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/1320b4bc615fd35","status":"passed","time":{"start":1731598439730,"stop":1731598468955,"duration":29225}},{"uid":"50300440abe2034c","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/50300440abe2034c","status":"passed","time":{"start":1731548953769,"stop":1731548983014,"duration":29245}},{"uid":"1c744be81b032b88","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/1c744be81b032b88","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731566880297,"stop":1731566973485,"duration":93188}},{"uid":"309f630f0e6b9edb","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/309f630f0e6b9edb","status":"passed","time":{"start":1731543383887,"stop":1731543411210,"duration":27323}},{"uid":"b9edd51abf2c53ae","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/b9edd51abf2c53ae","status":"passed","time":{"start":1731540360726,"stop":1731540388956,"duration":28230}},{"uid":"7d67587e88112944","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/7d67587e88112944","status":"passed","time":{"start":1731537750802,"stop":1731537777737,"duration":26935}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6a32557d8d2bbee0.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}