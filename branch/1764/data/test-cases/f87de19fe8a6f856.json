{"uid":"f87de19fe8a6f856","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1731955137852,"stop":1731955160883,"duration":23031},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff89b75e90>\ndevice = <golioth.golioth.Device object at 0xffff89b88e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731955118794,"stop":1731955118795,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731955118795,"stop":1731955118795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731955118796,"stop":1731955118796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731955118796,"stop":1731955118796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731955118797,"stop":1731955118797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731955118797,"stop":1731955118799,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731955118800,"stop":1731955118800,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731955118801,"stop":1731955119241,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731955118801,"stop":1731955118801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731955119241,"stop":1731955120773,"duration":1532},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731955120774,"stop":1731955136790,"duration":16016},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731955136791,"stop":1731955137849,"duration":1058},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff89b75e90>\ndevice = <golioth.golioth.Device object at 0xffff89b88e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n>           shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"2f91a24189bca1a3","name":"log","source":"2f91a24189bca1a3.txt","type":"text/plain","size":14033}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731955161265,"stop":1731955161296,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731955161298,"stop":1731955161765,"duration":467},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731955161767,"stop":1731955161769,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731955161783,"stop":1731955161783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"785f8d8953d5"},{"name":"thread","value":"389-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":2,"skipped":0,"passed":22,"unknown":0,"total":29},"items":[{"uid":"caf9adb076f90220","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/caf9adb076f90220","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934235733,"stop":1731934235733,"duration":0}},{"uid":"1665f419ea2b6722","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/1665f419ea2b6722","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923166092,"stop":1731923166092,"duration":0}},{"uid":"81395cf70929a7e4","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/81395cf70929a7e4","status":"passed","time":{"start":1731906369005,"stop":1731906385803,"duration":16798}},{"uid":"ea8af9353701615b","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/ea8af9353701615b","status":"passed","time":{"start":1731714833470,"stop":1731714851059,"duration":17589}},{"uid":"2872578077cdcd8e","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/2872578077cdcd8e","status":"passed","time":{"start":1731711394144,"stop":1731711416062,"duration":21918}},{"uid":"ffa29a22b0b4dcf5","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/ffa29a22b0b4dcf5","status":"passed","time":{"start":1731707532490,"stop":1731707548143,"duration":15653}},{"uid":"c3a0c656adbe341d","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/c3a0c656adbe341d","status":"passed","time":{"start":1731708323203,"stop":1731708344838,"duration":21635}},{"uid":"5f86de4dd9f9dff","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/5f86de4dd9f9dff","status":"passed","time":{"start":1731695688587,"stop":1731695709259,"duration":20672}},{"uid":"4b996c2a5f6d71e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/4b996c2a5f6d71e3","status":"passed","time":{"start":1731690012256,"stop":1731690029075,"duration":16819}},{"uid":"ba58f8d759c6b001","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/ba58f8d759c6b001","status":"passed","time":{"start":1731624621995,"stop":1731624641879,"duration":19884}},{"uid":"e736566e0d0670a","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/e736566e0d0670a","status":"passed","time":{"start":1731622834362,"stop":1731622863361,"duration":28999}},{"uid":"2017764a2758cdbc","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/2017764a2758cdbc","status":"passed","time":{"start":1731616396188,"stop":1731616414792,"duration":18604}},{"uid":"5cdf9abe47301350","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/5cdf9abe47301350","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731614173798,"stop":1731614177525,"duration":3727}},{"uid":"dea18390f8d58077","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/dea18390f8d58077","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731611089513,"stop":1731611089513,"duration":0}},{"uid":"fafae71171f96bae","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/fafae71171f96bae","status":"passed","time":{"start":1731598398449,"stop":1731598418146,"duration":19697}},{"uid":"4e17b02661919ede","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/4e17b02661919ede","status":"passed","time":{"start":1731548911737,"stop":1731548931523,"duration":19786}},{"uid":"aee964bfa590b1bb","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/aee964bfa590b1bb","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731566822273,"stop":1731566822273,"duration":0}},{"uid":"ebd299f7cfcb182a","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/ebd299f7cfcb182a","status":"passed","time":{"start":1731543346894,"stop":1731543361500,"duration":14606}},{"uid":"11f619cfbd263b99","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/11f619cfbd263b99","status":"passed","time":{"start":1731540314841,"stop":1731540339026,"duration":24185}},{"uid":"ab719c4a6571f12e","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/ab719c4a6571f12e","status":"passed","time":{"start":1731537703990,"stop":1731537728480,"duration":24490}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f87de19fe8a6f856.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}