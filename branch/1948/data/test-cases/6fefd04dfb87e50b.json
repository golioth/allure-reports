{
  "uid" : "6fefd04dfb87e50b",
  "name" : "test_settings",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings",
  "historyId" : "d6d167c5ecb927d8d413dac5f1f3452a",
  "time" : {
    "start" : 1734466098445,
    "stop" : 1734466192275,
    "duration" : 93830
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb7e76c10>\nproject = <golioth.golioth.Project object at 0xffffb7e74390>\ndevice = <golioth.golioth.Device object at 0xffffb7e96190>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dut",
    "time" : {
      "start" : 1734466069746,
      "stop" : 1734466097370,
      "duration" : 27624
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734466068469,
      "stop" : 1734466068469,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734466068470,
      "stop" : 1734466068472,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734466068466,
      "stop" : 1734466068467,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734466068467,
      "stop" : 1734466068467,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734466097371,
      "stop" : 1734466098440,
      "duration" : 1069
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734466068473,
      "stop" : 1734466068883,
      "duration" : 410
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734466068468,
      "stop" : 1734466068468,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734466068468,
      "stop" : 1734466068468,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734466068470,
      "stop" : 1734466068470,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734466068884,
      "stop" : 1734466069746,
      "duration" : 862
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734466068469,
      "stop" : 1734466068469,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb7e76c10>\nproject = <golioth.golioth.Project object at 0xffffb7e74390>\ndevice = <golioth.golioth.Device object at 0xffffb7e96190>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7f9e499ba481d031",
      "name" : "log",
      "source" : "7f9e499ba481d031.txt",
      "type" : "text/plain",
      "size" : 22201
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1734466192625,
      "stop" : 1734466192633,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734466193008,
      "stop" : 1734466193008,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734466193003,
      "stop" : 1734466193006,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734466192635,
      "stop" : 1734466193001,
      "duration" : 366
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "f5b40deb32c0"
  }, {
    "name" : "thread",
    "value" : "818-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "d003a36380ce270a",
      "status" : "broken",
      "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
      "time" : {
        "start" : 1734459840941,
        "stop" : 1734459934948,
        "duration" : 94007
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 11,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 32
      },
      "items" : [ {
        "uid" : "c9dff8c0f324e601",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/c9dff8c0f324e601",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734459840941,
          "stop" : 1734459934948,
          "duration" : 94007
        }
      }, {
        "uid" : "d4c942fecca829f3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/d4c942fecca829f3",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734459840941,
          "stop" : 1734459934948,
          "duration" : 94007
        }
      }, {
        "uid" : "fc6985afa9478fd0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1947/#testresult/fc6985afa9478fd0",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734454866678,
          "stop" : 1734454960750,
          "duration" : 94072
        }
      }, {
        "uid" : "670caa07be98b77",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1945/#testresult/670caa07be98b77",
        "status" : "passed",
        "time" : {
          "start" : 1734448972335,
          "stop" : 1734449006342,
          "duration" : 34007
        }
      }, {
        "uid" : "86d1b92bf5e6f1d4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/86d1b92bf5e6f1d4",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734414009264,
          "stop" : 1734414103131,
          "duration" : 93867
        }
      }, {
        "uid" : "3d576dac45745b54",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/3d576dac45745b54",
        "status" : "passed",
        "time" : {
          "start" : 1734380395036,
          "stop" : 1734380406183,
          "duration" : 11147
        }
      }, {
        "uid" : "14e117cc3b365c6a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/40/#testresult/14e117cc3b365c6a",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734238049873,
          "stop" : 1734238049873,
          "duration" : 0
        }
      }, {
        "uid" : "c0e29ffdef869533",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/c0e29ffdef869533",
        "status" : "passed",
        "time" : {
          "start" : 1734130089938,
          "stop" : 1734130106720,
          "duration" : 16782
        }
      }, {
        "uid" : "8d80b9d1cb47cd3c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/8d80b9d1cb47cd3c",
        "status" : "passed",
        "time" : {
          "start" : 1734050390846,
          "stop" : 1734050423427,
          "duration" : 32581
        }
      }, {
        "uid" : "4b2b4a7760381017",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/4b2b4a7760381017",
        "status" : "passed",
        "time" : {
          "start" : 1734046603103,
          "stop" : 1734046628438,
          "duration" : 25335
        }
      }, {
        "uid" : "c6b133423c87f7ee",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/c6b133423c87f7ee",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734035197479,
          "stop" : 1734035197479,
          "duration" : 0
        }
      }, {
        "uid" : "d4118602977103de",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/d4118602977103de",
        "status" : "passed",
        "time" : {
          "start" : 1734031343326,
          "stop" : 1734031365187,
          "duration" : 21861
        }
      }, {
        "uid" : "64c84e6b232f7b35",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/64c84e6b232f7b35",
        "status" : "passed",
        "time" : {
          "start" : 1734027508436,
          "stop" : 1734027539557,
          "duration" : 31121
        }
      }, {
        "uid" : "7d20d0083b34c3a8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/7d20d0083b34c3a8",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734026848885,
          "stop" : 1734026942781,
          "duration" : 93896
        }
      }, {
        "uid" : "5d5975639eeba4f0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/5d5975639eeba4f0",
        "status" : "passed",
        "time" : {
          "start" : 1733948091889,
          "stop" : 1733948102959,
          "duration" : 11070
        }
      }, {
        "uid" : "1523e8f332d88d02",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/1523e8f332d88d02",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733963315605,
          "stop" : 1733963409698,
          "duration" : 94093
        }
      }, {
        "uid" : "af0fdf64023064f7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/af0fdf64023064f7",
        "status" : "passed",
        "time" : {
          "start" : 1733959903278,
          "stop" : 1733959914684,
          "duration" : 11406
        }
      }, {
        "uid" : "b3c0f9847d560b76",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/b3c0f9847d560b76",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733954928535,
          "stop" : 1733954928535,
          "duration" : 0
        }
      }, {
        "uid" : "7b6cf25d4278ebbe",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/7b6cf25d4278ebbe",
        "status" : "passed",
        "time" : {
          "start" : 1733951650226,
          "stop" : 1733951661363,
          "duration" : 11137
        }
      }, {
        "uid" : "a13d974a5e691f91",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/a13d974a5e691f91",
        "status" : "passed",
        "time" : {
          "start" : 1733951398804,
          "stop" : 1733951442921,
          "duration" : 44117
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "6fefd04dfb87e50b.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}