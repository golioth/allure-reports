{"uid":"12ed2b8a46b6b609","name":"test_set_int_range_out_min","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_min","historyId":"c2044a44affa44a6054bb6d6ddcfd33a","time":{"start":1730471446557,"stop":1730471458813,"duration":12256},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff7d84e010>\ndevice = <golioth.golioth.Device object at 0xffff7d7e6050>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff7d7e6050>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1730471342291,"stop":1730471342291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1730471342292,"stop":1730471342292,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1730471342293,"stop":1730471342293,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1730471342294,"stop":1730471342294,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730471342294,"stop":1730471342295,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730471342295,"stop":1730471342295,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1730471342296,"stop":1730471342296,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1730471342296,"stop":1730471342297,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730471342297,"stop":1730471342298,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1730471342297,"stop":1730471342297,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730471342298,"stop":1730471342298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730471342298,"stop":1730471342298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730471342299,"stop":1730471342747,"duration":448},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1730471342748,"stop":1730471394473,"duration":51725},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730471394474,"stop":1730471395544,"duration":1070},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1730471395544,"stop":1730471409208,"duration":13664},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff7d84e010>\ndevice = <golioth.golioth.Device object at 0xffff7d7e6050>\n\n    async def test_set_int_range_out_min(board, device):\n        await device.settings.set('TEST_INT_RANGE', -1)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int_range: -1', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff7d7e6050>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"8032ca5ec84d2e0","name":"stdout","source":"8032ca5ec84d2e0.txt","type":"text/plain","size":785}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1730471543791,"stop":1730471543791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730471543794,"stop":1730471544217,"duration":423},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1730471544219,"stop":1730471544220,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730471544222,"stop":1730471544225,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"eac2b42a45ac"},{"name":"thread","value":"253-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"322bb33e14bb7d8e","status":"passed","time":{"start":1730461241471,"stop":1730461253768,"duration":12297}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":25,"unknown":0,"total":28},"items":[{"uid":"88780aa21798384","reportUrl":"https://golioth.github.io/allure-reports/branch/1710//#testresult/88780aa21798384","status":"passed","time":{"start":1730461241471,"stop":1730461253768,"duration":12297}},{"uid":"793c5e2362ae76d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1708//#testresult/793c5e2362ae76d3","status":"passed","time":{"start":1730408215956,"stop":1730408228176,"duration":12220}},{"uid":"98d28614c531528b","reportUrl":"https://golioth.github.io/allure-reports/branch/1707//#testresult/98d28614c531528b","status":"passed","time":{"start":1730382420133,"stop":1730382432480,"duration":12347}},{"uid":"9d8c3737ac0e6df3","reportUrl":"https://golioth.github.io/allure-reports/branch/1706//#testresult/9d8c3737ac0e6df3","status":"passed","time":{"start":1730361036322,"stop":1730361049122,"duration":12800}},{"uid":"2274b1230a037e98","reportUrl":"https://golioth.github.io/allure-reports/branch/1702//#testresult/2274b1230a037e98","status":"passed","time":{"start":1730234644689,"stop":1730234657009,"duration":12320}},{"uid":"34e186767cc5be63","reportUrl":"https://golioth.github.io/allure-reports/branch/1696//#testresult/34e186767cc5be63","status":"passed","time":{"start":1729787848238,"stop":1729787860513,"duration":12275}},{"uid":"be307cb1a8f97248","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/be307cb1a8f97248","status":"passed","time":{"start":1729780143496,"stop":1729780155756,"duration":12260}},{"uid":"c65db4c8bb48eebe","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/c65db4c8bb48eebe","status":"passed","time":{"start":1729722829580,"stop":1729722842449,"duration":12869}},{"uid":"809cdce022f2761b","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/809cdce022f2761b","status":"passed","time":{"start":1729719542861,"stop":1729719555374,"duration":12513}},{"uid":"b58f6777c36edf57","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/b58f6777c36edf57","status":"passed","time":{"start":1729717533157,"stop":1729717545585,"duration":12428}},{"uid":"a1f524b00566f9a8","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/a1f524b00566f9a8","status":"passed","time":{"start":1729527103198,"stop":1729527115782,"duration":12584}},{"uid":"db3331f526dd766e","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/db3331f526dd766e","status":"passed","time":{"start":1729527103198,"stop":1729527115782,"duration":12584}},{"uid":"d34d184d23204115","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/d34d184d23204115","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729526048457,"stop":1729526060679,"duration":12222}},{"uid":"a5f99e2c0680136d","reportUrl":"https://golioth.github.io/allure-reports/branch/4//#testresult/a5f99e2c0680136d","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729446711047,"stop":1729446723295,"duration":12248}},{"uid":"c5062b289004b8e7","reportUrl":"https://golioth.github.io/allure-reports/branch/4//#testresult/c5062b289004b8e7","status":"passed","time":{"start":1729444889292,"stop":1729444901445,"duration":12153}},{"uid":"577ba3bf93abb86f","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/577ba3bf93abb86f","status":"passed","time":{"start":1729378045199,"stop":1729378057748,"duration":12549}},{"uid":"b26d33bb964379ed","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/b26d33bb964379ed","status":"passed","time":{"start":1729378045199,"stop":1729378057748,"duration":12549}},{"uid":"1a66bfac7438a0bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/1a66bfac7438a0bd","status":"passed","time":{"start":1729196899870,"stop":1729196912190,"duration":12320}},{"uid":"3b914d14f70366fd","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/3b914d14f70366fd","status":"passed","time":{"start":1729114666680,"stop":1729114679254,"duration":12574}},{"uid":"ec21f16baa431213","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/ec21f16baa431213","status":"passed","time":{"start":1729112009003,"stop":1729112021772,"duration":12769}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"12ed2b8a46b6b609.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}