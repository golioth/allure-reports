{"uid":"10f0fd64d3f870bf","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1730461206756,"stop":1730461219128,"duration":12372},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff972d3750>\ndevice = <golioth.golioth.Device object at 0xffff95bc2750>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff95bc2750>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730461135091,"stop":1730461135091,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1730461135092,"stop":1730461135092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1730461135093,"stop":1730461135094,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1730461135093,"stop":1730461135093,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730461135094,"stop":1730461135094,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730461135095,"stop":1730461135095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1730461135096,"stop":1730461135096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1730461135096,"stop":1730461135096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1730461135097,"stop":1730461135097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730461135097,"stop":1730461135097,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730461135097,"stop":1730461135098,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730461135098,"stop":1730461135098,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730461135098,"stop":1730461135579,"duration":481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1730461135580,"stop":1730461187236,"duration":51656},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730461187237,"stop":1730461188159,"duration":922},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1730461188160,"stop":1730461203695,"duration":15535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff972d3750>\ndevice = <golioth.golioth.Device object at 0xffff95bc2750>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff95bc2750>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"299df0f28d87c50f","name":"stdout","source":"299df0f28d87c50f.txt","type":"text/plain","size":3698}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1730461322537,"stop":1730461322538,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1730461322540,"stop":1730461322945,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1730461322947,"stop":1730461322949,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730461322951,"stop":1730461322953,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"5488f53d80d4"},{"name":"thread","value":"254-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":27},"items":[{"uid":"839c6c64f09d6cfb","reportUrl":"https://golioth.github.io/allure-reports/branch/1708//#testresult/839c6c64f09d6cfb","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1730408182167,"stop":1730408194495,"duration":12328}},{"uid":"146a93dea051b42a","reportUrl":"https://golioth.github.io/allure-reports/branch/1707//#testresult/146a93dea051b42a","status":"passed","time":{"start":1730382385715,"stop":1730382397906,"duration":12191}},{"uid":"ae9f1454cc380eef","reportUrl":"https://golioth.github.io/allure-reports/branch/1706//#testresult/ae9f1454cc380eef","status":"passed","time":{"start":1730361000524,"stop":1730361013117,"duration":12593}},{"uid":"d7fb86e42ebffd6f","reportUrl":"https://golioth.github.io/allure-reports/branch/1702//#testresult/d7fb86e42ebffd6f","status":"passed","time":{"start":1730234609942,"stop":1730234622271,"duration":12329}},{"uid":"800ddb3a84fef420","reportUrl":"https://golioth.github.io/allure-reports/branch/1696//#testresult/800ddb3a84fef420","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729787812906,"stop":1729787825416,"duration":12510}},{"uid":"67dddcbd99fb8f0e","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/67dddcbd99fb8f0e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729780109774,"stop":1729780122045,"duration":12271}},{"uid":"c3d7e7321f58f589","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/c3d7e7321f58f589","status":"passed","time":{"start":1729722794774,"stop":1729722807212,"duration":12438}},{"uid":"9e52ad792d504e5b","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/9e52ad792d504e5b","status":"passed","time":{"start":1729719507778,"stop":1729719520323,"duration":12545}},{"uid":"1988534822363db6","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/1988534822363db6","status":"passed","time":{"start":1729717498655,"stop":1729717510919,"duration":12264}},{"uid":"6860c04cbc448e1f","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/6860c04cbc448e1f","status":"passed","time":{"start":1729527067271,"stop":1729527079735,"duration":12464}},{"uid":"99c06b8481e91e5d","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/99c06b8481e91e5d","status":"passed","time":{"start":1729527067271,"stop":1729527079735,"duration":12464}},{"uid":"49a25b8b376a6d95","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/49a25b8b376a6d95","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729526009364,"stop":1729526021545,"duration":12181}},{"uid":"54ae16efe26d66c0","reportUrl":"https://golioth.github.io/allure-reports/branch/4//#testresult/54ae16efe26d66c0","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729446676004,"stop":1729446688149,"duration":12145}},{"uid":"596d06e8d0c79ded","reportUrl":"https://golioth.github.io/allure-reports/branch/4//#testresult/596d06e8d0c79ded","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729444855668,"stop":1729444868033,"duration":12365}},{"uid":"6cb9b2773e48cce1","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/6cb9b2773e48cce1","status":"passed","time":{"start":1729378009908,"stop":1729378022404,"duration":12496}},{"uid":"85e8dca30b5b293f","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/85e8dca30b5b293f","status":"passed","time":{"start":1729378009908,"stop":1729378022404,"duration":12496}},{"uid":"424c6c459e388475","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/424c6c459e388475","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1729196865516,"stop":1729196877636,"duration":12120}},{"uid":"34ecfadc2930367d","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/34ecfadc2930367d","status":"passed","time":{"start":1729114630862,"stop":1729114643615,"duration":12753}},{"uid":"1d8dcc05cc90a95f","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/1d8dcc05cc90a95f","status":"passed","time":{"start":1729111974269,"stop":1729111986824,"duration":12555}},{"uid":"84c7d43418d0a550","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/84c7d43418d0a550","status":"passed","time":{"start":1729106807560,"stop":1729106820095,"duration":12535}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"10f0fd64d3f870bf.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}