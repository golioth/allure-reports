{"uid":"c4d8a9c97f60bbb","name":"test_settings","fullName":"examples.esp_idf.settings.pytest.test_sample#test_settings","historyId":"b668116b49f5cc0312523477e90f082c","time":{"start":1730383445934,"stop":1730383462732,"duration":16798},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 100915.18252476692\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <espidfboard.ESPIDFBoard object at 0xffffb8b95810>\nproject = <golioth.golioth.Project object at 0xffffb8b3f190>\ndevice = <golioth.golioth.Device object at 0xffffb8be1a10>\n\n    async def test_settings(board, project, device):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Reset board\n        await board.reset()\n    \n        # Wait for device to reboot and connect\n        await board.wait_for_regex_in_line(r'.*Golioth client connected', timeout_s=30.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       await board.wait_for_regex_in_line(r'.*Setting loop delay to 5 s', timeout_s=5.0)\n\nexamples/esp_idf/settings/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 100915.18252476692\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730383404470,"stop":1730383404470,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1730383404471,"stop":1730383404471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1730383404472,"stop":1730383404473,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1730383404472,"stop":1730383404472,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730383404473,"stop":1730383404474,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730383404475,"stop":1730383404475,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1730383404476,"stop":1730383404476,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1730383404477,"stop":1730383404478,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1730383404477,"stop":1730383404477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730383404478,"stop":1730383404479,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730383404479,"stop":1730383404479,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730383404480,"stop":1730383404480,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1730383404480,"stop":1730383444196,"duration":39716},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730383444197,"stop":1730383444820,"duration":623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730383444821,"stop":1730383445931,"duration":1110},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 100915.18252476692\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <espidfboard.ESPIDFBoard object at 0xffffb8b95810>\nproject = <golioth.golioth.Project object at 0xffffb8b3f190>\ndevice = <golioth.golioth.Device object at 0xffffb8be1a10>\n\n    async def test_settings(board, project, device):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Reset board\n        await board.reset()\n    \n        # Wait for device to reboot and connect\n        await board.wait_for_regex_in_line(r'.*Golioth client connected', timeout_s=30.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       await board.wait_for_regex_in_line(r'.*Setting loop delay to 5 s', timeout_s=5.0)\n\nexamples/esp_idf/settings/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 100915.18252476692\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"654f77260a2cdc1e","name":"stdout","source":"654f77260a2cdc1e.txt","type":"text/plain","size":11908}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1730383463341,"stop":1730383463758,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730383463760,"stop":1730383463760,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1730383463762,"stop":1730383463769,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b8f8f8a32e36"},{"name":"thread","value":"264-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":22,"unknown":0,"total":23},"items":[{"uid":"af4c066b361aab14","reportUrl":"https://golioth.github.io/allure-reports/branch/1706//#testresult/af4c066b361aab14","status":"passed","time":{"start":1730361992462,"stop":1730362002341,"duration":9879}},{"uid":"737af08b93287ea4","reportUrl":"https://golioth.github.io/allure-reports/branch/1702//#testresult/737af08b93287ea4","status":"passed","time":{"start":1730235987744,"stop":1730235998031,"duration":10287}},{"uid":"4a517b03398c524f","reportUrl":"https://golioth.github.io/allure-reports/branch/1696//#testresult/4a517b03398c524f","status":"passed","time":{"start":1729789110069,"stop":1729789120008,"duration":9939}},{"uid":"ae8d528fac62f42c","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/ae8d528fac62f42c","status":"passed","time":{"start":1729724951452,"stop":1729724960638,"duration":9186}},{"uid":"7fedec14adab9309","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/7fedec14adab9309","status":"passed","time":{"start":1729724951452,"stop":1729724960638,"duration":9186}},{"uid":"65fe2c2e67adc420","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/65fe2c2e67adc420","status":"passed","time":{"start":1729721923781,"stop":1729721932848,"duration":9067}},{"uid":"27080dd574c1b92b","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/27080dd574c1b92b","status":"passed","time":{"start":1729718915674,"stop":1729718925360,"duration":9686}},{"uid":"aed5482d9fff1b91","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/aed5482d9fff1b91","status":"passed","time":{"start":1729529806707,"stop":1729529816396,"duration":9689}},{"uid":"977fbf3f1fe4efce","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/977fbf3f1fe4efce","status":"passed","time":{"start":1729529806707,"stop":1729529816396,"duration":9689}},{"uid":"3367663f64f090f3","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/3367663f64f090f3","status":"passed","time":{"start":1729528616319,"stop":1729528625321,"duration":9002}},{"uid":"3efef603208e6a45","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/3efef603208e6a45","status":"passed","time":{"start":1729379386385,"stop":1729379395958,"duration":9573}},{"uid":"b5885249450e3dec","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/b5885249450e3dec","status":"passed","time":{"start":1729379386385,"stop":1729379395958,"duration":9573}},{"uid":"c5003d8c15c82365","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/c5003d8c15c82365","status":"passed","time":{"start":1729198191061,"stop":1729198200920,"duration":9859}},{"uid":"4f4bdb5161a3afd4","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/4f4bdb5161a3afd4","status":"passed","time":{"start":1729116244471,"stop":1729116253766,"duration":9295}},{"uid":"50b1dc6f728bd3a2","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/50b1dc6f728bd3a2","status":"passed","time":{"start":1729113185870,"stop":1729113195300,"duration":9430}},{"uid":"452f0bfc2c1025c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/452f0bfc2c1025c5","status":"passed","time":{"start":1729108052767,"stop":1729108062197,"duration":9430}},{"uid":"7f2c4a86da3034c","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/7f2c4a86da3034c","status":"passed","time":{"start":1729034644334,"stop":1729034657504,"duration":13170}},{"uid":"3de5236bda5f171f","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/3de5236bda5f171f","status":"passed","time":{"start":1729031369689,"stop":1729031380843,"duration":11154}},{"uid":"1e1bee43711b7fdb","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/1e1bee43711b7fdb","status":"passed","time":{"start":1729020807449,"stop":1729020819061,"duration":11612}},{"uid":"87208706a9d033d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/87208706a9d033d7","status":"passed","time":{"start":1729023823919,"stop":1729023835556,"duration":11637}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"c4d8a9c97f60bbb.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}