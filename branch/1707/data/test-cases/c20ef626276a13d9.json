{"uid":"c20ef626276a13d9","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1730383942763,"stop":1730383942763,"duration":0},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_lightdb_get>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1730383942766,"stop":1730383942766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1730383942767,"stop":1730383942767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730383942767,"stop":1730383942768,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730383942768,"stop":1730383942768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730383942769,"stop":1730383942769,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730383942769,"stop":1730383942771,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730383942772,"stop":1730383942773,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730383942772,"stop":1730383942772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730383942773,"stop":1730383943247,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730383943247,"stop":1730383944128,"duration":881},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730383944128,"stop":1730383946339,"duration":2211},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 90, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_lightdb_get>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","steps":[],"attachments":[{"uid":"fd141db72254f15c","name":"log","source":"fd141db72254f15c.txt","type":"text/plain","size":9433}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1730383946611,"stop":1730383947005,"duration":394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730383947007,"stop":1730383947010,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730383947014,"stop":1730383947015,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8aa976ed1513"},{"name":"thread","value":"405-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":20,"unknown":0,"total":23},"items":[{"uid":"8c1089eded38effd","reportUrl":"https://golioth.github.io/allure-reports/branch/1706//#testresult/8c1089eded38effd","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1730362915088,"stop":1730362915088,"duration":0}},{"uid":"1937bbd12f96bf98","reportUrl":"https://golioth.github.io/allure-reports/branch/1702//#testresult/1937bbd12f96bf98","status":"passed","time":{"start":1730237652092,"stop":1730237682916,"duration":30824}},{"uid":"653ad7ccd765848d","reportUrl":"https://golioth.github.io/allure-reports/branch/1696//#testresult/653ad7ccd765848d","status":"passed","time":{"start":1729791068792,"stop":1729791098769,"duration":29977}},{"uid":"e4f8432cef3fb3f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/e4f8432cef3fb3f4","status":"passed","time":{"start":1729780281030,"stop":1729780313605,"duration":32575}},{"uid":"6ae03c6888fe37c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/6ae03c6888fe37c4","status":"passed","time":{"start":1729726514202,"stop":1729726570856,"duration":56654}},{"uid":"6ac2d32a3b6ed1ca","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/6ac2d32a3b6ed1ca","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729723396078,"stop":1729723416172,"duration":20094}},{"uid":"cb7c61496792d9eb","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/cb7c61496792d9eb","status":"passed","time":{"start":1729720799255,"stop":1729720830118,"duration":30863}},{"uid":"a22ee64bb9787e0e","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/a22ee64bb9787e0e","status":"passed","time":{"start":1729531567587,"stop":1729531599642,"duration":32055}},{"uid":"bc50820bd375d73f","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/bc50820bd375d73f","status":"passed","time":{"start":1729531567587,"stop":1729531599642,"duration":32055}},{"uid":"11cae5b4bf638d76","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/11cae5b4bf638d76","status":"passed","time":{"start":1729530469436,"stop":1729530543920,"duration":74484}},{"uid":"e4f1d76de998e31f","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/e4f1d76de998e31f","status":"passed","time":{"start":1729381094103,"stop":1729381123546,"duration":29443}},{"uid":"1031b3af43d308f6","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/1031b3af43d308f6","status":"passed","time":{"start":1729381094103,"stop":1729381123546,"duration":29443}},{"uid":"1d769cb22c193687","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/1d769cb22c193687","status":"passed","time":{"start":1729199798674,"stop":1729199832064,"duration":33390}},{"uid":"f90bf85adfa2e9b4","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/f90bf85adfa2e9b4","status":"passed","time":{"start":1729118070581,"stop":1729118115622,"duration":45041}},{"uid":"902b4b8ab3a8087d","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/902b4b8ab3a8087d","status":"passed","time":{"start":1729115634442,"stop":1729115678187,"duration":43745}},{"uid":"9830a7b60b551708","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/9830a7b60b551708","status":"passed","time":{"start":1729109654366,"stop":1729109684263,"duration":29897}},{"uid":"cebded1b95d2b6be","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/cebded1b95d2b6be","status":"passed","time":{"start":1729036047424,"stop":1729036078187,"duration":30763}},{"uid":"35f8ba4c0fa2980e","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/35f8ba4c0fa2980e","status":"passed","time":{"start":1729032616969,"stop":1729032647766,"duration":30797}},{"uid":"c9a862246c920611","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/c9a862246c920611","status":"passed","time":{"start":1729027607790,"stop":1729027686461,"duration":78671}},{"uid":"211368c85ff970ab","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/211368c85ff970ab","status":"passed","time":{"start":1729025459209,"stop":1729025556950,"duration":97741}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c20ef626276a13d9.json","parameterValues":["'nrf9160dk'","'zephyr'"]}