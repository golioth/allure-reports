{"uid":"c0522167e09b405c","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1732053376654,"stop":1732053399277,"duration":22623},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7cd25e50>\ndevice = <golioth.golioth.Device object at 0xffff7cd39250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732053358286,"stop":1732053358287,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732053358287,"stop":1732053358287,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732053358288,"stop":1732053358289,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732053358288,"stop":1732053358288,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732053358289,"stop":1732053358289,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732053358290,"stop":1732053358292,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732053358292,"stop":1732053358293,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732053358293,"stop":1732053358293,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732053358294,"stop":1732053358733,"duration":439},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732053358733,"stop":1732053359724,"duration":991},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732053359725,"stop":1732053375606,"duration":15881},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732053375607,"stop":1732053376652,"duration":1045},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7cd25e50>\ndevice = <golioth.golioth.Device object at 0xffff7cd39250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9600c14053236b3e","name":"log","source":"9600c14053236b3e.txt","type":"text/plain","size":12416}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732053399542,"stop":1732053399560,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732053399561,"stop":1732053400097,"duration":536},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732053400099,"stop":1732053400101,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732053400106,"stop":1732053400106,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5c64fc8ab756"},{"name":"thread","value":"392-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2ebfb2f27193baa7","status":"passed","time":{"start":1732048485691,"stop":1732048502644,"duration":16953}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":3,"skipped":0,"passed":33,"unknown":0,"total":41},"items":[{"uid":"4f275bad9fd7d772","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/4f275bad9fd7d772","status":"passed","time":{"start":1732048485691,"stop":1732048502644,"duration":16953}},{"uid":"ad803a4402def1ea","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/ad803a4402def1ea","status":"passed","time":{"start":1732044029368,"stop":1732044045170,"duration":15802}},{"uid":"a4fffd78d86d4c26","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/a4fffd78d86d4c26","status":"passed","time":{"start":1732032059011,"stop":1732032082873,"duration":23862}},{"uid":"a1de3761f226e731","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/a1de3761f226e731","status":"passed","time":{"start":1732029460894,"stop":1732029479009,"duration":18115}},{"uid":"92d833a29704550d","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/92d833a29704550d","status":"passed","time":{"start":1732028158205,"stop":1732028176043,"duration":17838}},{"uid":"3c2908c8763da803","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/3c2908c8763da803","status":"passed","time":{"start":1732015052877,"stop":1732015071988,"duration":19111}},{"uid":"b2a72e30d15396d8","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/b2a72e30d15396d8","status":"passed","time":{"start":1732001630959,"stop":1732001650470,"duration":19511}},{"uid":"f23d6a10c418f9d","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/f23d6a10c418f9d","status":"passed","time":{"start":1731970855828,"stop":1731970873922,"duration":18094}},{"uid":"6b33192b0a6dc169","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/6b33192b0a6dc169","status":"passed","time":{"start":1731968655785,"stop":1731968676450,"duration":20665}},{"uid":"2655d8f71f525978","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/2655d8f71f525978","status":"passed","time":{"start":1731962896276,"stop":1731962920968,"duration":24692}},{"uid":"3ef8bda1247b198a","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/3ef8bda1247b198a","status":"passed","time":{"start":1731958564862,"stop":1731958584485,"duration":19623}},{"uid":"f87de19fe8a6f856","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/f87de19fe8a6f856","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731955137852,"stop":1731955160883,"duration":23031}},{"uid":"caf9adb076f90220","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/caf9adb076f90220","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934235733,"stop":1731934235733,"duration":0}},{"uid":"1665f419ea2b6722","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/1665f419ea2b6722","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923166092,"stop":1731923166092,"duration":0}},{"uid":"81395cf70929a7e4","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/81395cf70929a7e4","status":"passed","time":{"start":1731906369005,"stop":1731906385803,"duration":16798}},{"uid":"ea8af9353701615b","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/ea8af9353701615b","status":"passed","time":{"start":1731714833470,"stop":1731714851059,"duration":17589}},{"uid":"2872578077cdcd8e","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/2872578077cdcd8e","status":"passed","time":{"start":1731711394144,"stop":1731711416062,"duration":21918}},{"uid":"ffa29a22b0b4dcf5","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/ffa29a22b0b4dcf5","status":"passed","time":{"start":1731707532490,"stop":1731707548143,"duration":15653}},{"uid":"c3a0c656adbe341d","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/c3a0c656adbe341d","status":"passed","time":{"start":1731708323203,"stop":1731708344838,"duration":21635}},{"uid":"5f86de4dd9f9dff","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/5f86de4dd9f9dff","status":"passed","time":{"start":1731695688587,"stop":1731695709259,"duration":20672}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c0522167e09b405c.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}