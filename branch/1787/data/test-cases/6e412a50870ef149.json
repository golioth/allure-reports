{"uid":"6e412a50870ef149","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a7312cf31d6314ecf7ffd5a0a0af0ddc","time":{"start":1732053423045,"stop":1732053446116,"duration":23071},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab38e710>\ndevice = <golioth.golioth.Device object at 0xffffab3adc10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732053403385,"stop":1732053403385,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732053403385,"stop":1732053403386,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732053403386,"stop":1732053403386,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732053403387,"stop":1732053403387,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732053403387,"stop":1732053403387,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732053403388,"stop":1732053403390,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732053403391,"stop":1732053403391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732053403391,"stop":1732053403391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732053403392,"stop":1732053403843,"duration":451},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732053403844,"stop":1732053404813,"duration":969},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732053404814,"stop":1732053421999,"duration":17185},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732053421999,"stop":1732053423042,"duration":1043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab38e710>\ndevice = <golioth.golioth.Device object at 0xffffab3adc10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"4789d49bd9c7aa86","name":"log","source":"4789d49bd9c7aa86.txt","type":"text/plain","size":14583}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732053446477,"stop":1732053446776,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732053446778,"stop":1732053447187,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732053447189,"stop":1732053447191,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732053447196,"stop":1732053447196,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5c64fc8ab756"},{"name":"thread","value":"407-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4d75ab7c0c42eddf","status":"passed","time":{"start":1732048524714,"stop":1732048552944,"duration":28230}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":29,"unknown":0,"total":41},"items":[{"uid":"94b07407d8077167","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/94b07407d8077167","status":"passed","time":{"start":1732048524714,"stop":1732048552944,"duration":28230}},{"uid":"aa027fa9e6f7ab89","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/aa027fa9e6f7ab89","status":"passed","time":{"start":1732044067981,"stop":1732044093211,"duration":25230}},{"uid":"f6cf28857d7473e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/f6cf28857d7473e3","status":"passed","time":{"start":1732032104913,"stop":1732032131830,"duration":26917}},{"uid":"6f87d38816df2c85","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/6f87d38816df2c85","status":"passed","time":{"start":1732029499604,"stop":1732029524772,"duration":25168}},{"uid":"cbb5afb4bda9b01c","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/cbb5afb4bda9b01c","status":"passed","time":{"start":1732028199038,"stop":1732028226269,"duration":27231}},{"uid":"286dd23e9f20f87c","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/286dd23e9f20f87c","status":"passed","time":{"start":1732015094932,"stop":1732015124288,"duration":29356}},{"uid":"d0d3a1c9d0e5f65e","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/d0d3a1c9d0e5f65e","status":"passed","time":{"start":1732001673340,"stop":1732001700540,"duration":27200}},{"uid":"fb62684128ea2dc","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/fb62684128ea2dc","status":"passed","time":{"start":1731970896014,"stop":1731970923342,"duration":27328}},{"uid":"9dee13e6c64b42ba","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/9dee13e6c64b42ba","status":"passed","time":{"start":1731968699379,"stop":1731968727719,"duration":28340}},{"uid":"f93ffd186240cb37","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/f93ffd186240cb37","status":"passed","time":{"start":1731962942824,"stop":1731962968808,"duration":25984}},{"uid":"350ec19b03bd9de6","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/350ec19b03bd9de6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731958606404,"stop":1731958629592,"duration":23188}},{"uid":"6a32557d8d2bbee0","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/6a32557d8d2bbee0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731955183047,"stop":1731955206289,"duration":23242}},{"uid":"a7471cc6a547b2da","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/a7471cc6a547b2da","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731934298052,"stop":1731934391222,"duration":93170}},{"uid":"6e6b8708ef958184","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/6e6b8708ef958184","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731923223343,"stop":1731923316477,"duration":93134}},{"uid":"63d3e6ba99171847","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/63d3e6ba99171847","status":"passed","time":{"start":1731906407894,"stop":1731906435160,"duration":27266}},{"uid":"bcc4215e323c5e76","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/bcc4215e323c5e76","status":"passed","time":{"start":1731714873063,"stop":1731714902942,"duration":29879}},{"uid":"d15a0fe75b716dc8","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/d15a0fe75b716dc8","status":"passed","time":{"start":1731711438295,"stop":1731711466577,"duration":28282}},{"uid":"dd0c26dc621d8dd2","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/dd0c26dc621d8dd2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731707570184,"stop":1731707593318,"duration":23134}},{"uid":"d6e0ec7b6d14a7b4","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/d6e0ec7b6d14a7b4","status":"passed","time":{"start":1731708366531,"stop":1731708393461,"duration":26930}},{"uid":"aaa684b4e9901db","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/aaa684b4e9901db","status":"passed","time":{"start":1731695731288,"stop":1731695761271,"duration":29983}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6e412a50870ef149.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}