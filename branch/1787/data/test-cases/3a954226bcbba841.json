{"uid":"3a954226bcbba841","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"9ea8ee677231e39a8691323ca77f58b7","time":{"start":1732048034092,"stop":1732048146818,"duration":112726},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb285cfd0>\ndevice = <golioth.golioth.Device object at 0xffffb26f23d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732048024294,"stop":1732048024295,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732048024295,"stop":1732048024295,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732048024296,"stop":1732048024296,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732048024296,"stop":1732048024296,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732048024297,"stop":1732048024297,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732048024297,"stop":1732048024299,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732048024300,"stop":1732048024300,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732048024301,"stop":1732048024811,"duration":510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732048024301,"stop":1732048024301,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732048024812,"stop":1732048025811,"duration":999},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732048025812,"stop":1732048033562,"duration":7750},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732048033562,"stop":1732048034089,"duration":527},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb285cfd0>\ndevice = <golioth.golioth.Device object at 0xffffb26f23d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c3252f7a30c4ed6f","name":"log","source":"c3252f7a30c4ed6f.txt","type":"text/plain","size":16625}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732048147143,"stop":1732048147265,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732048147267,"stop":1732048147655,"duration":388},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732048147657,"stop":1732048147659,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732048147664,"stop":1732048147664,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8e2fc21b4836"},{"name":"thread","value":"618-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"16e7f7efcf167709","status":"passed","time":{"start":1732047762913,"stop":1732047787438,"duration":24525}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":33,"unknown":0,"total":40},"items":[{"uid":"91699c026a0feb9c","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/91699c026a0feb9c","status":"passed","time":{"start":1732043719376,"stop":1732043738766,"duration":19390}},{"uid":"3bb63fc111a0ac4d","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/3bb63fc111a0ac4d","status":"passed","time":{"start":1732032411488,"stop":1732032436087,"duration":24599}},{"uid":"118db497e884ab21","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/118db497e884ab21","status":"passed","time":{"start":1732027628943,"stop":1732027652416,"duration":23473}},{"uid":"1f4a6b91af272f8f","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/1f4a6b91af272f8f","status":"passed","time":{"start":1732027628943,"stop":1732027652416,"duration":23473}},{"uid":"610ae2e733439779","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/610ae2e733439779","status":"passed","time":{"start":1732014843302,"stop":1732014866663,"duration":23361}},{"uid":"88d6e5c40e153beb","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/88d6e5c40e153beb","status":"passed","time":{"start":1732001083824,"stop":1732001107413,"duration":23589}},{"uid":"9b13fa2e09b9e55d","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/9b13fa2e09b9e55d","status":"passed","time":{"start":1731971102534,"stop":1731971126811,"duration":24277}},{"uid":"5c54a02367654a3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/5c54a02367654a3a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731963132425,"stop":1731963132425,"duration":0}},{"uid":"efcd4a33e537167a","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/efcd4a33e537167a","status":"passed","time":{"start":1731962476373,"stop":1731962517012,"duration":40639}},{"uid":"76befe7dc6dc8344","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/76befe7dc6dc8344","status":"passed","time":{"start":1731958313250,"stop":1731958336854,"duration":23604}},{"uid":"d6d6e0454a9f655d","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/d6d6e0454a9f655d","status":"passed","time":{"start":1731956082853,"stop":1731956106414,"duration":23561}},{"uid":"48993b298f33ba50","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/48993b298f33ba50","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731933232910,"stop":1731933232910,"duration":0}},{"uid":"d0592c6162c3481f","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/d0592c6162c3481f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731922913449,"stop":1731922913449,"duration":0}},{"uid":"c3c55d3751caa324","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/c3c55d3751caa324","status":"passed","time":{"start":1731905994831,"stop":1731906019293,"duration":24462}},{"uid":"ac43573b7de66f30","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/ac43573b7de66f30","status":"passed","time":{"start":1731714463270,"stop":1731714486588,"duration":23318}},{"uid":"61fd04f90af1bbd0","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/61fd04f90af1bbd0","status":"passed","time":{"start":1731711371423,"stop":1731711390901,"duration":19478}},{"uid":"f24c7c51bd4c531c","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/f24c7c51bd4c531c","status":"passed","time":{"start":1731707138712,"stop":1731707162876,"duration":24164}},{"uid":"ca0b1329c4d04302","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/ca0b1329c4d04302","status":"passed","time":{"start":1731707108720,"stop":1731707128076,"duration":19356}},{"uid":"86b2a901ddcf74bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/86b2a901ddcf74bd","status":"passed","time":{"start":1731695332994,"stop":1731695352288,"duration":19294}},{"uid":"88f8b9c485112e89","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/88f8b9c485112e89","status":"passed","time":{"start":1731622565092,"stop":1731622585263,"duration":20171}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"3a954226bcbba841.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}