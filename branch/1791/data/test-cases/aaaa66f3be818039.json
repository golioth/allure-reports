{"uid":"aaaa66f3be818039","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1732126700325,"stop":1732126723399,"duration":23074},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb87af310>\ndevice = <golioth.golioth.Device object at 0xffffb8659710>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1732126682076,"stop":1732126682077,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1732126682076,"stop":1732126682076,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732126682077,"stop":1732126682078,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732126682077,"stop":1732126682077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732126682078,"stop":1732126682081,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732126682078,"stop":1732126682078,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732126682081,"stop":1732126682082,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732126682082,"stop":1732126682082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732126682082,"stop":1732126682586,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732126682587,"stop":1732126683544,"duration":957},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732126683545,"stop":1732126699454,"duration":15909},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732126699454,"stop":1732126700322,"duration":868},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb87af310>\ndevice = <golioth.golioth.Device object at 0xffffb8659710>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a925a329b1a11d9d","name":"log","source":"a925a329b1a11d9d.txt","type":"text/plain","size":15201}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732126723753,"stop":1732126723771,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732126723773,"stop":1732126724152,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732126724154,"stop":1732126724157,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732126724162,"stop":1732126724162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a1b444161288"},{"name":"thread","value":"462-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":4,"skipped":0,"passed":36,"unknown":0,"total":45},"items":[{"uid":"adda96f6bc70f767","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/adda96f6bc70f767","status":"passed","time":{"start":1732125304884,"stop":1732125314334,"duration":9450}},{"uid":"6feb0a48b1d9dd45","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/6feb0a48b1d9dd45","status":"passed","time":{"start":1732093954571,"stop":1732093967607,"duration":13036}},{"uid":"bc51104ad67db63d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/bc51104ad67db63d","status":"passed","time":{"start":1732056358896,"stop":1732056367497,"duration":8601}},{"uid":"1e2ef3c5dffe3128","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/1e2ef3c5dffe3128","status":"passed","time":{"start":1732053554659,"stop":1732053566026,"duration":11367}},{"uid":"4b444a62d4c1c7c0","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/4b444a62d4c1c7c0","status":"passed","time":{"start":1732048658048,"stop":1732048668969,"duration":10921}},{"uid":"dae11aae8b616671","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/dae11aae8b616671","status":"passed","time":{"start":1732044204610,"stop":1732044213822,"duration":9212}},{"uid":"95178e515ca2b2ff","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/95178e515ca2b2ff","status":"passed","time":{"start":1732032204445,"stop":1732032214557,"duration":10112}},{"uid":"767c87533aa5a7fc","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/767c87533aa5a7fc","status":"passed","time":{"start":1732029626466,"stop":1732029635319,"duration":8853}},{"uid":"c863991f1db0c1d9","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/c863991f1db0c1d9","status":"passed","time":{"start":1732028330386,"stop":1732028340513,"duration":10127}},{"uid":"cae93275ec3822c0","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/cae93275ec3822c0","status":"passed","time":{"start":1732015239289,"stop":1732015248024,"duration":8735}},{"uid":"8d833edd0a16b74","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/8d833edd0a16b74","status":"passed","time":{"start":1732001813671,"stop":1732001823434,"duration":9763}},{"uid":"a9387551fc45ae37","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/a9387551fc45ae37","status":"passed","time":{"start":1731971031382,"stop":1731971041584,"duration":10202}},{"uid":"6b4f8835d3500160","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/6b4f8835d3500160","status":"passed","time":{"start":1731968836714,"stop":1731968844441,"duration":7727}},{"uid":"723cada6cc4a2a1e","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/723cada6cc4a2a1e","status":"passed","time":{"start":1731963071128,"stop":1731963082248,"duration":11120}},{"uid":"96b3f25e68b4ccd","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/96b3f25e68b4ccd","status":"passed","time":{"start":1731958735991,"stop":1731958745659,"duration":9668}},{"uid":"6a573d65b0dc1dfd","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/6a573d65b0dc1dfd","status":"passed","time":{"start":1731955380196,"stop":1731955389764,"duration":9568}},{"uid":"2834475c318e3d36","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/2834475c318e3d36","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934482385,"stop":1731934482385,"duration":0}},{"uid":"511a7ab2cc38e970","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/511a7ab2cc38e970","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923402393,"stop":1731923402393,"duration":0}},{"uid":"1d7ab94440a346fc","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/1d7ab94440a346fc","status":"passed","time":{"start":1731906538594,"stop":1731906546309,"duration":7715}},{"uid":"c2bf87068cbb2b8b","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/c2bf87068cbb2b8b","status":"passed","time":{"start":1731715003945,"stop":1731715011610,"duration":7665}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"aaaa66f3be818039.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}