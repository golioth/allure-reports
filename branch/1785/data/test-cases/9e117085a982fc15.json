{"uid":"9e117085a982fc15","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"760eff61a6b23948f80921df65cbf7f5","time":{"start":1732043622658,"stop":1732043630932,"duration":8274},"status":"failed","statusMessage":"AssertionError: assert 20.5 == 20.0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad9a4710>\ndevice = <golioth.golioth.Device object at 0xffffad98a0d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 20.5 == 20.0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732043612853,"stop":1732043612853,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732043612854,"stop":1732043612854,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732043612854,"stop":1732043612854,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732043612855,"stop":1732043612855,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732043612855,"stop":1732043612856,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732043612856,"stop":1732043612858,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732043612859,"stop":1732043612859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732043612859,"stop":1732043612859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732043612860,"stop":1732043613306,"duration":446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732043613306,"stop":1732043614277,"duration":971},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732043614277,"stop":1732043622128,"duration":7851},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732043622128,"stop":1732043622655,"duration":527},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 20.5 == 20.0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad9a4710>\ndevice = <golioth.golioth.Device object at 0xffffad98a0d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 20.5 == 20.0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","steps":[],"attachments":[{"uid":"efa2fbb5cde4cfbd","name":"log","source":"efa2fbb5cde4cfbd.txt","type":"text/plain","size":15092}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732043631141,"stop":1732043631183,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732043631185,"stop":1732043631595,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732043631597,"stop":1732043631600,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732043631605,"stop":1732043631605,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"893a7dcf00f2"},{"name":"thread","value":"493-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":6,"skipped":0,"passed":31,"unknown":0,"total":39},"items":[{"uid":"601a1d3ad2f7357b","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/601a1d3ad2f7357b","status":"passed","time":{"start":1732032295462,"stop":1732032316346,"duration":20884}},{"uid":"38ac08598eecb1ab","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/38ac08598eecb1ab","status":"passed","time":{"start":1732027510827,"stop":1732027533246,"duration":22419}},{"uid":"615343978f7623f0","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/615343978f7623f0","status":"passed","time":{"start":1732027510827,"stop":1732027533246,"duration":22419}},{"uid":"6aae4484003fbac8","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/6aae4484003fbac8","status":"passed","time":{"start":1732014770653,"stop":1732014794175,"duration":23522}},{"uid":"eb2b3497940efe1d","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/eb2b3497940efe1d","status":"passed","time":{"start":1732000981496,"stop":1732001000743,"duration":19247}},{"uid":"2a9fbb55bafbf35e","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/2a9fbb55bafbf35e","status":"passed","time":{"start":1731970971312,"stop":1731971008824,"duration":37512}},{"uid":"57ba5d2deceaa14","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/57ba5d2deceaa14","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731963105516,"stop":1731963105516,"duration":0}},{"uid":"8f3ffa51d7bf5df7","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/8f3ffa51d7bf5df7","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1731962379827,"stop":1731962379827,"duration":0}},{"uid":"97b7f8c6acce63bc","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/97b7f8c6acce63bc","status":"passed","time":{"start":1731958073308,"stop":1731958224981,"duration":151673}},{"uid":"3abff6e28d7ff62f","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/3abff6e28d7ff62f","status":"passed","time":{"start":1731955970565,"stop":1731955994100,"duration":23535}},{"uid":"bd86ba5b4e603f2f","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/bd86ba5b4e603f2f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731933208554,"stop":1731933208554,"duration":0}},{"uid":"b382bc1edaebbcc2","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/b382bc1edaebbcc2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731922897735,"stop":1731922897735,"duration":0}},{"uid":"8fefda73ecd61cdb","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/8fefda73ecd61cdb","status":"passed","time":{"start":1731905889489,"stop":1731905908644,"duration":19155}},{"uid":"d6dd1eb907f17429","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/d6dd1eb907f17429","status":"passed","time":{"start":1731714351666,"stop":1731714375012,"duration":23346}},{"uid":"451e81e391c2fcab","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/451e81e391c2fcab","status":"passed","time":{"start":1731711338340,"stop":1731711357048,"duration":18708}},{"uid":"5b99fce27201bbc2","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/5b99fce27201bbc2","status":"passed","time":{"start":1731707018996,"stop":1731707043218,"duration":24222}},{"uid":"15960c3c390b8503","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/15960c3c390b8503","status":"passed","time":{"start":1731706998099,"stop":1731707020701,"duration":22602}},{"uid":"dc5b99269b236b64","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/dc5b99269b236b64","status":"passed","time":{"start":1731695226884,"stop":1731695249339,"duration":22455}},{"uid":"e85a6beed0dd083c","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/e85a6beed0dd083c","status":"passed","time":{"start":1731622457756,"stop":1731622480224,"duration":22468}},{"uid":"93c9aedfe08e44dd","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/93c9aedfe08e44dd","status":"passed","time":{"start":1731622457756,"stop":1731622480224,"duration":22468}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"9e117085a982fc15.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}