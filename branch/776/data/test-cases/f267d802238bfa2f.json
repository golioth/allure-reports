{"uid":"f267d802238bfa2f","name":"test_restart","fullName":"tests.hil.tests.settings.test_settings#test_restart","historyId":"d54522c406aaefb99d17d6ecedf7faab","time":{"start":1760715825110,"stop":1760715835831,"duration":10721},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"self = <trio.lowlevel.FdStream object at 0x7f7c3f0b44d0>, max_bytes = 65536\n\n    async def receive_some(self, max_bytes: int | None = None) -> bytes:\n        with self._receive_conflict_detector:\n            if max_bytes is None:\n                max_bytes = DEFAULT_RECEIVE_SIZE\n            else:\n                if not isinstance(max_bytes, int):\n                    raise TypeError(\"max_bytes must be integer >= 1\")\n                if max_bytes < 1:\n                    raise ValueError(\"max_bytes must be integer >= 1\")\n    \n            await trio.lowlevel.checkpoint()\n            while True:\n                try:\n>                   data = os.read(self._fd_holder.fd, max_bytes)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE                   BlockingIOError: [Errno 11] Resource temporarily unavailable\n\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:182: BlockingIOError\n\nDuring handling of the above exception, another exception occurred:\n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n>           yield scope\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/pytest_hil/linuxboard.py:31: in receive_some\n    return await self.process.stdout.receive_some()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:184: in receive_some\n    await trio.lowlevel.wait_readable(self._fd_holder.fd)\n../../../.local/lib/python3.12/site-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:336: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:311: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n../../../.local/lib/python3.12/site-packages/trio/_core/_traps.py:208: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n        if reason is None:\n            raise Cancelled._create(source=\"unknown\", reason=\"misnesting\")\n        else:\n>           raise Cancelled._create(\n                source=reason.source,\n                reason=reason.reason,\n                source_task=reason.source_task,\n            )\nE           trio.Cancelled: cancelled due to deadline\n\n../../../.local/lib/python3.12/site-packages/trio/_core/_run.py:1663: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <pytest_hil.linuxboard.LinuxBoard object at 0x7f7c3f3a3620>\ndevice = <golioth.golioth.Device object at 0x7f7c3f3a3d70>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n>       assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/hil/tests/settings/test_settings.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:187: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760715710163,"stop":1760715710163,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760715710164,"stop":1760715710164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760715710164,"stop":1760715710580,"duration":416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760715710164,"stop":1760715710164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760715710164,"stop":1760715710164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760715710164,"stop":1760715710164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760715710164,"stop":1760715710164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1760715710164,"stop":1760715710164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1760715710580,"stop":1760715710581,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760715710581,"stop":1760715711235,"duration":654},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1760715711235,"stop":1760715726718,"duration":15483},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"self = <trio.lowlevel.FdStream object at 0x7f7c3f0b44d0>, max_bytes = 65536\n\n    async def receive_some(self, max_bytes: int | None = None) -> bytes:\n        with self._receive_conflict_detector:\n            if max_bytes is None:\n                max_bytes = DEFAULT_RECEIVE_SIZE\n            else:\n                if not isinstance(max_bytes, int):\n                    raise TypeError(\"max_bytes must be integer >= 1\")\n                if max_bytes < 1:\n                    raise ValueError(\"max_bytes must be integer >= 1\")\n    \n            await trio.lowlevel.checkpoint()\n            while True:\n                try:\n>                   data = os.read(self._fd_holder.fd, max_bytes)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE                   BlockingIOError: [Errno 11] Resource temporarily unavailable\n\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:182: BlockingIOError\n\nDuring handling of the above exception, another exception occurred:\n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n>           yield scope\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/pytest_hil/linuxboard.py:31: in receive_some\n    return await self.process.stdout.receive_some()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_unix_pipes.py:184: in receive_some\n    await trio.lowlevel.wait_readable(self._fd_holder.fd)\n../../../.local/lib/python3.12/site-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:336: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n../../../.local/lib/python3.12/site-packages/trio/_core/_io_epoll.py:311: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n../../../.local/lib/python3.12/site-packages/trio/_core/_traps.py:208: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.local/lib/python3.12/site-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n        if reason is None:\n            raise Cancelled._create(source=\"unknown\", reason=\"misnesting\")\n        else:\n>           raise Cancelled._create(\n                source=reason.source,\n                reason=reason.reason,\n                source_task=reason.source_task,\n            )\nE           trio.Cancelled: cancelled due to deadline\n\n../../../.local/lib/python3.12/site-packages/trio/_core/_run.py:1663: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <pytest_hil.linuxboard.LinuxBoard object at 0x7f7c3f3a3620>\ndevice = <golioth.golioth.Device object at 0x7f7c3f3a3d70>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n>       assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/hil/tests/settings/test_settings.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.12/site-packages/pytest_hil/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nseconds = 10\n\n    @contextmanager\n    def fail_after(\n        seconds: float,\n        *,\n        shield: bool = False,\n    ) -> Generator[trio.CancelScope, None, None]:\n        \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n        it is actually cancelled.\n    \n        This function and :func:`move_on_after` are similar in that both create a\n        cancel scope with a given timeout, and if the timeout expires then both\n        will cause :exc:`Cancelled` to be raised within the scope. The difference\n        is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n        it's caught and discarded. When it reaches :func:`fail_after`, then it's\n        caught and :exc:`TooSlowError` is raised in its place.\n    \n        The deadline of the cancel scope is calculated upon entering.\n    \n        Args:\n          seconds (float): The timeout.\n          shield (bool): Initial value for the `~trio.CancelScope.shield` attribute\n              of the newly created cancel scope.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if *seconds* is less than zero or NaN.\n    \n        \"\"\"\n        with move_on_after(seconds, shield=shield) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n../../../.local/lib/python3.12/site-packages/trio/_timeouts.py:187: TooSlowError","steps":[],"attachments":[{"uid":"81eb2ac0b11d85a9","name":"stdout","source":"81eb2ac0b11d85a9.txt","type":"text/plain","size":445}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1760715835914,"stop":1760715835914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760715835914,"stop":1760715836146,"duration":232},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1760715836146,"stop":1760715836149,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760715836149,"stop":1760715836150,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"linux"},{"name":"tag","value":"linux"},{"name":"parentSuite","value":"hil.linux.linux"},{"name":"tag"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"runnervmzdgdc"},{"name":"thread","value":"3963-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'linux'"},{"name":"platform_name","value":"'linux'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":25,"unknown":0,"total":27},"items":[{"uid":"1ca5c3af672e15c0","reportUrl":"https://golioth.github.io/allure-reports/branch/774//#testresult/1ca5c3af672e15c0","status":"passed","time":{"start":1760715188730,"stop":1760715221812,"duration":33082}},{"uid":"96df2f8b3c4e45dd","reportUrl":"https://golioth.github.io/allure-reports/branch/771//#testresult/96df2f8b3c4e45dd","status":"passed","time":{"start":1760646789402,"stop":1760646822473,"duration":33071}},{"uid":"9ac38e4d0fd4dc6e","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/9ac38e4d0fd4dc6e","status":"passed","time":{"start":1760025353555,"stop":1760025386887,"duration":33332}},{"uid":"b55587966e56310f","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/b55587966e56310f","status":"passed","time":{"start":1760025353555,"stop":1760025386887,"duration":33332}},{"uid":"e758f167aff812e9","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/e758f167aff812e9","status":"passed","time":{"start":1759951773287,"stop":1759951804561,"duration":31274}},{"uid":"edadefc45693c4b7","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/edadefc45693c4b7","status":"passed","time":{"start":1759951773287,"stop":1759951804561,"duration":31274}},{"uid":"624bcbeaae666780","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/624bcbeaae666780","status":"passed","time":{"start":1759775604071,"stop":1759775633642,"duration":29571}},{"uid":"c73cc7e4bc82c418","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/c73cc7e4bc82c418","status":"passed","time":{"start":1759780679578,"stop":1759780705354,"duration":25776}},{"uid":"8605953ea29e4d17","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/8605953ea29e4d17","status":"passed","time":{"start":1759780679578,"stop":1759780705354,"duration":25776}},{"uid":"e58ffcf574553e39","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/e58ffcf574553e39","status":"passed","time":{"start":1759775604071,"stop":1759775633642,"duration":29571}},{"uid":"d3d2e885c209e2c3","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/d3d2e885c209e2c3","status":"passed","time":{"start":1759762903902,"stop":1759762937745,"duration":33843}},{"uid":"eb89a86bee86778f","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/eb89a86bee86778f","status":"passed","time":{"start":1759764826318,"stop":1759764859414,"duration":33096}},{"uid":"18deced9b002fc15","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/18deced9b002fc15","status":"passed","time":{"start":1759762903902,"stop":1759762937745,"duration":33843}},{"uid":"e6a64076928daa0","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/e6a64076928daa0","status":"passed","time":{"start":1759514305947,"stop":1759514339020,"duration":33073}},{"uid":"a70b21a39034ecd0","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/a70b21a39034ecd0","status":"passed","time":{"start":1759715659025,"stop":1759715692108,"duration":33083}},{"uid":"a81e59bfda725a29","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/a81e59bfda725a29","status":"passed","time":{"start":1759514305947,"stop":1759514339020,"duration":33073}},{"uid":"5a297ef6b34c3ff7","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/5a297ef6b34c3ff7","status":"passed","time":{"start":1759514305947,"stop":1759514339020,"duration":33073}},{"uid":"82a5ac8359cc19b3","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/82a5ac8359cc19b3","status":"passed","time":{"start":1759175164565,"stop":1759175192388,"duration":27823}},{"uid":"a432fed1c5dfb7ae","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/a432fed1c5dfb7ae","status":"passed","time":{"start":1759372212687,"stop":1759372245924,"duration":33237}},{"uid":"fd7f223943077967","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/fd7f223943077967","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759367698322,"stop":1759367708822,"duration":10500}}]},"tags":["linux","anyio"]},"source":"f267d802238bfa2f.json","parameterValues":["'linux'","'linux'"]}