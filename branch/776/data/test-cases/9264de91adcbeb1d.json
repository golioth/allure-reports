{"uid":"9264de91adcbeb1d","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"3f78d4f17255538011913e52f5d5a6c2","time":{"start":1760715876788,"stop":1760715891905,"duration":15117},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f7a51cd0830>\ndevice = <golioth.golioth.Device object at 0x7f7a51b85fd0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*lightdb_observe: Counter \\\\(async\\\\)', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760715876065,"stop":1760715876065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760715876065,"stop":1760715876065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760715876065,"stop":1760715876065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760715876065,"stop":1760715876065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760715876066,"stop":1760715876066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760715876066,"stop":1760715876066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760715876066,"stop":1760715876066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760715876066,"stop":1760715876066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760715876067,"stop":1760715876251,"duration":184},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760715876251,"stop":1760715876675,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760715876675,"stop":1760715876685,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760715876685,"stop":1760715876787,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f7a51cd0830>\ndevice = <golioth.golioth.Device object at 0x7f7a51b85fd0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*lightdb_observe: Counter \\\\(async\\\\)', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"887df9b4ba2396e","name":"log","source":"887df9b4ba2396e.txt","type":"text/plain","size":14399}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760715892288,"stop":1760715892510,"duration":222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760715892511,"stop":1760715892824,"duration":313},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760715892825,"stop":1760715892825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760715892836,"stop":1760715892836,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_32"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_32"},{"name":"tag","value":"GitHub Actions 1000066429"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b8fd1888f488"},{"name":"thread","value":"33309-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_32'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":26,"unknown":0,"total":27},"items":[{"uid":"a0d77027eb350602","reportUrl":"https://golioth.github.io/allure-reports/branch/774//#testresult/a0d77027eb350602","status":"passed","time":{"start":1760715438816,"stop":1760715444924,"duration":6108}},{"uid":"fbec7ec4986dff0d","reportUrl":"https://golioth.github.io/allure-reports/branch/771//#testresult/fbec7ec4986dff0d","status":"passed","time":{"start":1760646885987,"stop":1760646891921,"duration":5934}},{"uid":"6c2e4c9eb7e6fb8","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/6c2e4c9eb7e6fb8","status":"passed","time":{"start":1760025511472,"stop":1760025517449,"duration":5977}},{"uid":"22992a6566d3b6f9","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/22992a6566d3b6f9","status":"passed","time":{"start":1760025511472,"stop":1760025517449,"duration":5977}},{"uid":"bbd4547f67125a9a","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/bbd4547f67125a9a","status":"passed","time":{"start":1759958622679,"stop":1759958628435,"duration":5756}},{"uid":"26362d0dc0d4c3ac","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/26362d0dc0d4c3ac","status":"passed","time":{"start":1759951821124,"stop":1759951827689,"duration":6565}},{"uid":"e05a50e0fba720bd","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/e05a50e0fba720bd","status":"passed","time":{"start":1759775543492,"stop":1759775549152,"duration":5660}},{"uid":"9818694deec155b5","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/9818694deec155b5","status":"passed","time":{"start":1759796440884,"stop":1759796446866,"duration":5982}},{"uid":"801049bf9e321007","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/801049bf9e321007","status":"passed","time":{"start":1759780764384,"stop":1759780771004,"duration":6620}},{"uid":"e5413e533c52ebd4","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/e5413e533c52ebd4","status":"passed","time":{"start":1759775543492,"stop":1759775549152,"duration":5660}},{"uid":"5d1b3e2aa5a19a4f","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/5d1b3e2aa5a19a4f","status":"passed","time":{"start":1759772713303,"stop":1759772719386,"duration":6083}},{"uid":"a14a486bd360acbc","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/a14a486bd360acbc","status":"passed","time":{"start":1759764900578,"stop":1759764906301,"duration":5723}},{"uid":"fa14a29e4b974f3b","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/fa14a29e4b974f3b","status":"passed","time":{"start":1759762983310,"stop":1759762988849,"duration":5539}},{"uid":"c970fbbcfb06b86e","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/c970fbbcfb06b86e","status":"passed","time":{"start":1759514396057,"stop":1759514401701,"duration":5644}},{"uid":"2a2fa4185805679a","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/2a2fa4185805679a","status":"passed","time":{"start":1759367759718,"stop":1759367765456,"duration":5738}},{"uid":"42701f85fb57f40d","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/42701f85fb57f40d","status":"passed","time":{"start":1759514396057,"stop":1759514401701,"duration":5644}},{"uid":"2c744cb64f945099","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/2c744cb64f945099","status":"passed","time":{"start":1759514396057,"stop":1759514401701,"duration":5644}},{"uid":"f98501f4baef5c6a","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/f98501f4baef5c6a","status":"passed","time":{"start":1759175266557,"stop":1759175272362,"duration":5805}},{"uid":"eaa015a202b484c6","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/eaa015a202b484c6","status":"passed","time":{"start":1759372307697,"stop":1759372313597,"duration":5900}},{"uid":"4fdba9b9341c3dc3","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/4fdba9b9341c3dc3","status":"passed","time":{"start":1759367759718,"stop":1759367765456,"duration":5738}}]},"tags":["anyio","native_sim_32","GitHub Actions 1000066429","zephyr"]},"source":"9264de91adcbeb1d.json","parameterValues":["'native_sim_32'","'zephyr'"]}