{"uid":"4e48e160ca9a46ab","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"7288a85cfc86c7d252d11e5f51712a5f","time":{"start":1760715879220,"stop":1760715894404,"duration":15184},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f5e24ab8830>\ndevice = <golioth.golioth.Device object at 0x7f5e2496dfd0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*lightdb_observe: Counter \\\\(async\\\\)', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760715878651,"stop":1760715878651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760715878651,"stop":1760715878651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760715878651,"stop":1760715878651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760715878651,"stop":1760715878651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760715878652,"stop":1760715878652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760715878652,"stop":1760715878652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760715878652,"stop":1760715878652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760715878652,"stop":1760715878652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760715878652,"stop":1760715878896,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760715878901,"stop":1760715879183,"duration":282},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760715879183,"stop":1760715879191,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760715879191,"stop":1760715879220,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f5e24ab8830>\ndevice = <golioth.golioth.Device object at 0x7f5e2496dfd0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*lightdb_observe: Counter \\\\(async\\\\)', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7ad1c0bf6783a7d8","name":"log","source":"7ad1c0bf6783a7d8.txt","type":"text/plain","size":14404}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760715894702,"stop":1760715894832,"duration":130},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760715894832,"stop":1760715896872,"duration":2040},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760715896872,"stop":1760715896876,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760715896877,"stop":1760715896877,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 1000066430"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"faf43b4b78db"},{"name":"thread","value":"33245-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":26,"unknown":0,"total":27},"items":[{"uid":"14720c9a19306024","reportUrl":"https://golioth.github.io/allure-reports/branch/774//#testresult/14720c9a19306024","status":"passed","time":{"start":1760715126188,"stop":1760715131824,"duration":5636}},{"uid":"2b641f3cb6d53e4f","reportUrl":"https://golioth.github.io/allure-reports/branch/771//#testresult/2b641f3cb6d53e4f","status":"passed","time":{"start":1760647038542,"stop":1760647044271,"duration":5729}},{"uid":"a0d079d815e4a845","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/a0d079d815e4a845","status":"passed","time":{"start":1760025401908,"stop":1760025407415,"duration":5507}},{"uid":"865c27eec3083772","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/865c27eec3083772","status":"passed","time":{"start":1760025401908,"stop":1760025407415,"duration":5507}},{"uid":"9a18ba387fec5e52","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/9a18ba387fec5e52","status":"passed","time":{"start":1759958632215,"stop":1759958638819,"duration":6604}},{"uid":"5d44d4ea41522f28","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/5d44d4ea41522f28","status":"passed","time":{"start":1759951821643,"stop":1759951828591,"duration":6948}},{"uid":"a6d0f55109946a0c","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/a6d0f55109946a0c","status":"passed","time":{"start":1759857174990,"stop":1759857181236,"duration":6246}},{"uid":"28ef0ff0eeb852a4","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/28ef0ff0eeb852a4","status":"passed","time":{"start":1759796451056,"stop":1759796456860,"duration":5804}},{"uid":"431ddf38e2b23348","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/431ddf38e2b23348","status":"passed","time":{"start":1759780770751,"stop":1759780776520,"duration":5769}},{"uid":"54269af1e71e1db2","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/54269af1e71e1db2","status":"passed","time":{"start":1759775580082,"stop":1759775586035,"duration":5953}},{"uid":"8d1c52160e342ab5","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/8d1c52160e342ab5","status":"passed","time":{"start":1759772693592,"stop":1759772699568,"duration":5976}},{"uid":"cf144a47b5fbac17","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/cf144a47b5fbac17","status":"passed","time":{"start":1759764899855,"stop":1759764906035,"duration":6180}},{"uid":"1865f2df0f8f8634","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/1865f2df0f8f8634","status":"passed","time":{"start":1759762963794,"stop":1759762969564,"duration":5770}},{"uid":"48d1d58f88df1267","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/48d1d58f88df1267","status":"passed","time":{"start":1759514411706,"stop":1759514417230,"duration":5524}},{"uid":"e5a159f17c473c6f","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/e5a159f17c473c6f","status":"passed","time":{"start":1759367771096,"stop":1759367776714,"duration":5618}},{"uid":"4ad9082bbcfe94f0","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/4ad9082bbcfe94f0","status":"passed","time":{"start":1759514411706,"stop":1759514417230,"duration":5524}},{"uid":"ab828325b76aff6b","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/ab828325b76aff6b","status":"passed","time":{"start":1759514411706,"stop":1759514417230,"duration":5524}},{"uid":"6298c7c0da32507c","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/6298c7c0da32507c","status":"passed","time":{"start":1759175261241,"stop":1759175266820,"duration":5579}},{"uid":"3f25e0c9ca0b710e","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/3f25e0c9ca0b710e","status":"passed","time":{"start":1759372291863,"stop":1759372297811,"duration":5948}},{"uid":"7756961f2f30b24","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/7756961f2f30b24","status":"passed","time":{"start":1759367771096,"stop":1759367776714,"duration":5618}}]},"tags":["GitHub Actions 1000066430","native_sim_64","anyio","zephyr"]},"source":"4e48e160ca9a46ab.json","parameterValues":["'native_sim_64'","'zephyr'"]}