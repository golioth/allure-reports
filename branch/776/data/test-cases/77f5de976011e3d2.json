{"uid":"77f5de976011e3d2","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1760722618256,"stop":1760722710912,"duration":92656},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb0d94c20>\ndevice = <golioth.golioth.Device object at 0xffffb0ddeba0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760722598596,"stop":1760722598596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760722598597,"stop":1760722598598,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760722598597,"stop":1760722598597,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760722598598,"stop":1760722598598,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760722598599,"stop":1760722598601,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760722598599,"stop":1760722598599,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760722598602,"stop":1760722598602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760722598602,"stop":1760722598602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760722598603,"stop":1760722599680,"duration":1077},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760722599680,"stop":1760722600325,"duration":645},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760722600325,"stop":1760722617636,"duration":17311},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760722617637,"stop":1760722618252,"duration":615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb0d94c20>\ndevice = <golioth.golioth.Device object at 0xffffb0ddeba0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"aa66703262ac8b50","name":"log","source":"aa66703262ac8b50.txt","type":"text/plain","size":22136}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760722711280,"stop":1760722711329,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760722711331,"stop":1760722711663,"duration":332},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760722711665,"stop":1760722711667,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760722711672,"stop":1760722711672,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"26a3b3c39264"},{"name":"thread","value":"387-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":4,"skipped":0,"passed":12,"unknown":0,"total":18},"items":[{"uid":"d1d6a0142a82ace6","reportUrl":"https://golioth.github.io/allure-reports/branch/774//#testresult/d1d6a0142a82ace6","status":"passed","time":{"start":1760716284488,"stop":1760716311655,"duration":27167}},{"uid":"e74f24679e01bea5","reportUrl":"https://golioth.github.io/allure-reports/branch/771//#testresult/e74f24679e01bea5","status":"passed","time":{"start":1760649555378,"stop":1760649613889,"duration":58511}},{"uid":"792192bcb2d6c68d","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/792192bcb2d6c68d","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa1d506e0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa20fb9d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa20fafd0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa1fd6c40>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa1fd7490>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa201a210>])","time":{"start":1759784255363,"stop":1759784314275,"duration":58912}},{"uid":"8e08813dbae4349f","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/8e08813dbae4349f","status":"passed","time":{"start":1759797375049,"stop":1759797404511,"duration":29462}},{"uid":"48ec1b475fa89876","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/48ec1b475fa89876","status":"passed","time":{"start":1759784907734,"stop":1759784936411,"duration":28677}},{"uid":"58da9a221a2f3e41","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/58da9a221a2f3e41","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa1d506e0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa20fb9d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa20fafd0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa1fd6c40>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa1fd7490>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffffa201a210>])","time":{"start":1759784255363,"stop":1759784314275,"duration":58912}},{"uid":"ea71ac7efaaf4cd7","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/ea71ac7efaaf4cd7","status":"passed","time":{"start":1759772950651,"stop":1759772979285,"duration":28634}},{"uid":"426af52cc96f4ab","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/426af52cc96f4ab","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759766244826,"stop":1759766337546,"duration":92720}},{"uid":"e19ba1b921f4930c","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/e19ba1b921f4930c","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1759768039057,"stop":1759768070612,"duration":31555}},{"uid":"e4e693bcdec9542c","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/e4e693bcdec9542c","status":"passed","time":{"start":1759719195849,"stop":1759719223547,"duration":27698}},{"uid":"def3c62b39337a9f","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/def3c62b39337a9f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759718534598,"stop":1759718627262,"duration":92664}},{"uid":"9f7187137e1d49d3","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/9f7187137e1d49d3","status":"passed","time":{"start":1759515605171,"stop":1759515632831,"duration":27660}},{"uid":"d4f95a6683686cdd","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/d4f95a6683686cdd","status":"passed","time":{"start":1759515605171,"stop":1759515632831,"duration":27660}},{"uid":"cab2317d354b31ba","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/cab2317d354b31ba","status":"passed","time":{"start":1759368568961,"stop":1759368595927,"duration":26966}},{"uid":"67b925a662b2b008","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/67b925a662b2b008","status":"passed","time":{"start":1759269844033,"stop":1759269872688,"duration":28655}},{"uid":"717d9aa1e0e548b7","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/717d9aa1e0e548b7","status":"passed","time":{"start":1759160222256,"stop":1759160249838,"duration":27582}},{"uid":"b70998a623b1017b","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/b70998a623b1017b","status":"passed","time":{"start":1758914335212,"stop":1758914363107,"duration":27895}}]},"tags":["mikes_orange_pi","anyio","rak5010","zephyr"]},"source":"77f5de976011e3d2.json","parameterValues":["'rak5010'","'zephyr'"]}