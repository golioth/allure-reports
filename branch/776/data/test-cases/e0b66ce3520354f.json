{"uid":"e0b66ce3520354f","name":"test_lightdb_set","fullName":"examples.esp_idf.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"4fbe4e16432480a7cd5c1b51d7942878","time":{"start":1760722208087,"stop":1760722232231,"duration":24144},"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffa3ba3770>\ndevice = <golioth.golioth.Device object at 0xffffa3aac440>\n\n    async def test_lightdb_set(board, device):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Wait for device to connect\n        await board.wait_for_regex_in_line('.*Golioth client connected', timeout_s=30.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            pattern = re.compile(fr\"Setting counter to {i}\")\n            await board.wait_for_regex_in_line(pattern, timeout_s=30.0)\n            await board.wait_for_regex_in_line('Counter successfully set', timeout_s=5.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nexamples/esp_idf/lightdb/set/pytest/test_sample.py:42: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1760722177589,"stop":1760722177589,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760722177590,"stop":1760722177591,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1760722177590,"stop":1760722177590,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760722177591,"stop":1760722177591,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760722177592,"stop":1760722177592,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760722177592,"stop":1760722177592,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760722177593,"stop":1760722177593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1760722177593,"stop":1760722207297,"duration":29704},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1760722177625,"stop":1760722177625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1760722177625,"stop":1760722177625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1760722177626,"stop":1760722177626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1760722177626,"stop":1760722177626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1760722177627,"stop":1760722177627,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760722207299,"stop":1760722207673,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760722207674,"stop":1760722208084,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffffa3ba3770>\ndevice = <golioth.golioth.Device object at 0xffffa3aac440>\n\n    async def test_lightdb_set(board, device):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Wait for device to connect\n        await board.wait_for_regex_in_line('.*Golioth client connected', timeout_s=30.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            pattern = re.compile(fr\"Setting counter to {i}\")\n            await board.wait_for_regex_in_line(pattern, timeout_s=30.0)\n            await board.wait_for_regex_in_line('Counter successfully set', timeout_s=5.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nexamples/esp_idf/lightdb/set/pytest/test_sample.py:42: AssertionError","steps":[],"attachments":[{"uid":"f4848c38cbed556c","name":"stdout","source":"f4848c38cbed556c.txt","type":"text/plain","size":10083}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1760722232404,"stop":1760722232603,"duration":199},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760722232605,"stop":1760722232605,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1760722232607,"stop":1760722232613,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2eec6ca9b80e"},{"name":"thread","value":"269-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":6,"skipped":0,"passed":19,"unknown":0,"total":26},"items":[{"uid":"37cd92517541d6fe","reportUrl":"https://golioth.github.io/allure-reports/branch/774//#testresult/37cd92517541d6fe","status":"passed","time":{"start":1760719857484,"stop":1760719878818,"duration":21334}},{"uid":"25d5ec6becfbbce4","reportUrl":"https://golioth.github.io/allure-reports/branch/771//#testresult/25d5ec6becfbbce4","status":"passed","time":{"start":1760649202030,"stop":1760649224034,"duration":22004}},{"uid":"f5222df4b0e19f0b","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/f5222df4b0e19f0b","status":"passed","time":{"start":1760034486017,"stop":1760034507615,"duration":21598}},{"uid":"e7926d7cef5e0377","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/e7926d7cef5e0377","status":"passed","time":{"start":1760027729338,"stop":1760027751309,"duration":21971}},{"uid":"3f17330aa4d397d1","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/3f17330aa4d397d1","status":"passed","time":{"start":1759955194754,"stop":1759955220316,"duration":25562}},{"uid":"fb498637e0e1046d","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/fb498637e0e1046d","status":"passed","time":{"start":1759955194754,"stop":1759955220316,"duration":25562}},{"uid":"ef4320f479b4b39e","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/ef4320f479b4b39e","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759858288364,"stop":1759858298578,"duration":10214}},{"uid":"c16fa6e16648ff9d","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/c16fa6e16648ff9d","status":"passed","time":{"start":1759798392620,"stop":1759798413976,"duration":21356}},{"uid":"5614d2fca20a62f5","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/5614d2fca20a62f5","status":"passed","time":{"start":1759783471743,"stop":1759783493278,"duration":21535}},{"uid":"d5970bd96c8674c7","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/d5970bd96c8674c7","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759781804975,"stop":1759781811442,"duration":6467}},{"uid":"457c0575a87ad189","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/457c0575a87ad189","status":"passed","time":{"start":1759774103968,"stop":1759774125621,"duration":21653}},{"uid":"ac89e81a4ed7f476","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/ac89e81a4ed7f476","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759767037270,"stop":1759767061468,"duration":24198}},{"uid":"ab3fd0a2812ec23f","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/ab3fd0a2812ec23f","status":"passed","time":{"start":1759764230113,"stop":1759764254101,"duration":23988}},{"uid":"7d6c43e25f81e97f","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/7d6c43e25f81e97f","status":"passed","time":{"start":1759523917592,"stop":1759523940630,"duration":23038}},{"uid":"6bedcf0651dbd4f8","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/6bedcf0651dbd4f8","status":"passed","time":{"start":1759370652878,"stop":1759370674575,"duration":21697}},{"uid":"8a06b61e7757a10d","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/8a06b61e7757a10d","status":"passed","time":{"start":1759523917592,"stop":1759523940630,"duration":23038}},{"uid":"82665918f62c7bb8","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/82665918f62c7bb8","status":"broken","statusDetails":"SystemExit: 2","time":{"start":1759516247965,"stop":1759516247965,"duration":0}},{"uid":"c600fa1b936cf38f","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/c600fa1b936cf38f","status":"passed","time":{"start":1759245400100,"stop":1759245421108,"duration":21008}},{"uid":"e306e84f0b6f0efc","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/e306e84f0b6f0efc","status":"passed","time":{"start":1759379334452,"stop":1759379355400,"duration":20948}},{"uid":"a3548491a851390a","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/a3548491a851390a","status":"passed","time":{"start":1759370652878,"stop":1759370674575,"duration":21697}}]},"tags":["esp-idf","anyio","sams_orange_pi","esp32_devkitc_wrover_espidf"]},"source":"e0b66ce3520354f.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}