{"uid":"314c5e415d4a52fa","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"c3c56fd394e8a51c6a7b951f90915fb9","time":{"start":1760731385137,"stop":1760731444767,"duration":59630},"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0dbb230>\ndevice = <golioth.golioth.Device object at 0xffffa0cc4ad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1760731369974,"stop":1760731369974,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760731369975,"stop":1760731369976,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760731369975,"stop":1760731369975,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760731369976,"stop":1760731369976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760731369976,"stop":1760731369977,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760731369977,"stop":1760731369979,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760731369980,"stop":1760731369980,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760731369980,"stop":1760731369980,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760731369981,"stop":1760731370494,"duration":513},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760731370495,"stop":1760731371161,"duration":666},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760731371161,"stop":1760731384506,"duration":13345},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760731384507,"stop":1760731385134,"duration":627},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa0dbb230>\ndevice = <golioth.golioth.Device object at 0xffffa0cc4ad0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","steps":[],"attachments":[{"uid":"2bfb24ae0be95f7b","name":"log","source":"2bfb24ae0be95f7b.txt","type":"text/plain","size":34247}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760731444939,"stop":1760731444988,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760731444991,"stop":1760731445324,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760731445326,"stop":1760731445328,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760731445333,"stop":1760731445333,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"558abd50fb4c"},{"name":"thread","value":"660-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e779973871315c95","status":"passed","time":{"start":1760717092189,"stop":1760717145666,"duration":53477}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":15,"unknown":0,"total":19},"items":[{"uid":"eb6bbcc32042155c","reportUrl":"https://golioth.github.io/allure-reports/branch/776//#testresult/eb6bbcc32042155c","status":"passed","time":{"start":1760723612872,"stop":1760723667171,"duration":54299}},{"uid":"44660d53978e60","reportUrl":"https://golioth.github.io/allure-reports/branch/774//#testresult/44660d53978e60","status":"passed","time":{"start":1760717092189,"stop":1760717145666,"duration":53477}},{"uid":"75e7eb8be2c06b68","reportUrl":"https://golioth.github.io/allure-reports/branch/771//#testresult/75e7eb8be2c06b68","status":"passed","time":{"start":1760650461357,"stop":1760650515350,"duration":53993}},{"uid":"5e0e95b2988838b","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/5e0e95b2988838b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759785536635,"stop":1759785632213,"duration":95578}},{"uid":"71157bfca4495005","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/71157bfca4495005","status":"passed","time":{"start":1759798629454,"stop":1759798683427,"duration":53973}},{"uid":"351f7d356f663264","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/351f7d356f663264","status":"passed","time":{"start":1759785971959,"stop":1759786025290,"duration":53331}},{"uid":"a7dadaf2910eeef9","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/a7dadaf2910eeef9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759785536635,"stop":1759785632213,"duration":95578}},{"uid":"a7c4fe5d053a279e","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/a7c4fe5d053a279e","status":"passed","time":{"start":1759774022549,"stop":1759774076520,"duration":53971}},{"uid":"7b8484e19ad6a7e2","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/7b8484e19ad6a7e2","status":"passed","time":{"start":1759767569897,"stop":1759767651439,"duration":81542}},{"uid":"9eb5da80656c2504","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/9eb5da80656c2504","status":"passed","time":{"start":1759769106312,"stop":1759769159858,"duration":53546}},{"uid":"a90ea3f874552e79","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/a90ea3f874552e79","status":"passed","time":{"start":1759720232920,"stop":1759720286012,"duration":53092}},{"uid":"5e33f5780314c024","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/5e33f5780314c024","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759719590679,"stop":1759719683792,"duration":93113}},{"uid":"ca731ea596543896","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/ca731ea596543896","status":"passed","time":{"start":1759516848074,"stop":1759516901494,"duration":53420}},{"uid":"dcca5eee503ceac3","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/dcca5eee503ceac3","status":"passed","time":{"start":1759516848074,"stop":1759516901494,"duration":53420}},{"uid":"b901e9a718471c38","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/b901e9a718471c38","status":"passed","time":{"start":1759369620881,"stop":1759369674419,"duration":53538}},{"uid":"c7449218c4337be8","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/c7449218c4337be8","status":"passed","time":{"start":1759270993205,"stop":1759271046848,"duration":53643}},{"uid":"7ad70679fbd272a5","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/7ad70679fbd272a5","status":"passed","time":{"start":1759161493571,"stop":1759161546825,"duration":53254}},{"uid":"11c9cbb6108907ef","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/11c9cbb6108907ef","status":"passed","time":{"start":1758915586339,"stop":1758915639284,"duration":52945}}]},"tags":["mikes_orange_pi","anyio","rak5010","zephyr"]},"source":"314c5e415d4a52fa.json","parameterValues":["'rak5010'","'zephyr'"]}