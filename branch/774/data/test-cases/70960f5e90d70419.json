{"uid":"70960f5e90d70419","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1760730698779,"stop":1760730730019,"duration":31240},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa668f0e0>\nproject = <golioth.golioth.Project object at 0xffffa64dcd70>\ndevice = <golioth.golioth.Device object at 0xffffa6590ad0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1760730679343,"stop":1760730679343,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1760730679344,"stop":1760730679345,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1760730679344,"stop":1760730679344,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1760730679345,"stop":1760730679347,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1760730679348,"stop":1760730679348,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1760730679349,"stop":1760730679349,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1760730679349,"stop":1760730679349,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1760730679350,"stop":1760730679352,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1760730679352,"stop":1760730679852,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1760730679853,"stop":1760730680495,"duration":642},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1760730680496,"stop":1760730697230,"duration":16734},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1760730697230,"stop":1760730698773,"duration":1543},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa668f0e0>\nproject = <golioth.golioth.Project object at 0xffffa64dcd70>\ndevice = <golioth.golioth.Device object at 0xffffa6590ad0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"dcc6af9fe4c76395","name":"log","source":"dcc6af9fe4c76395.txt","type":"text/plain","size":44182}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1760730730267,"stop":1760730730274,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1760730730276,"stop":1760730730590,"duration":314},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1760730730592,"stop":1760730730594,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1760730730596,"stop":1760730730596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8275acc1b4e8"},{"name":"thread","value":"461-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cdb8e2b2aa4a8428","status":"passed","time":{"start":1760719819262,"stop":1760719830971,"duration":11709}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":23,"unknown":0,"total":27},"items":[{"uid":"e11063569f231df3","reportUrl":"https://golioth.github.io/allure-reports/branch/776//#testresult/e11063569f231df3","status":"passed","time":{"start":1760721711988,"stop":1760721719803,"duration":7815}},{"uid":"f4a141252c27f6c7","reportUrl":"https://golioth.github.io/allure-reports/branch/774//#testresult/f4a141252c27f6c7","status":"passed","time":{"start":1760719819262,"stop":1760719830971,"duration":11709}},{"uid":"2f63dc805981710a","reportUrl":"https://golioth.github.io/allure-reports/branch/771//#testresult/2f63dc805981710a","status":"passed","time":{"start":1760648178015,"stop":1760648188927,"duration":10912}},{"uid":"d67c9d1599638234","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/d67c9d1599638234","status":"passed","time":{"start":1760033089103,"stop":1760033099955,"duration":10852}},{"uid":"829e98e0690f1017","reportUrl":"https://golioth.github.io/allure-reports/branch/760//#testresult/829e98e0690f1017","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1760028066332,"stop":1760028066332,"duration":0}},{"uid":"bcdfacc3dfec6f25","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/bcdfacc3dfec6f25","status":"passed","time":{"start":1759958677051,"stop":1759958688055,"duration":11004}},{"uid":"54ee5c15eb96d682","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/54ee5c15eb96d682","status":"passed","time":{"start":1759952734069,"stop":1759952743745,"duration":9676}},{"uid":"ef18d8c2337a8db5","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/ef18d8c2337a8db5","status":"passed","time":{"start":1759857163697,"stop":1759857175556,"duration":11859}},{"uid":"4e51d6784b27f5bb","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/4e51d6784b27f5bb","status":"passed","time":{"start":1759800105530,"stop":1759800115950,"duration":10420}},{"uid":"ef087528fa32c090","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/ef087528fa32c090","status":"passed","time":{"start":1759786763357,"stop":1759786776031,"duration":12674}},{"uid":"7f18d68b12dc84ed","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/7f18d68b12dc84ed","status":"passed","time":{"start":1759783981948,"stop":1759783993866,"duration":11918}},{"uid":"c9777b398e9b4635","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/c9777b398e9b4635","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759772877284,"stop":1759772877284,"duration":0}},{"uid":"41ea0a4d62a88fd9","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/41ea0a4d62a88fd9","status":"passed","time":{"start":1759770399398,"stop":1759770412840,"duration":13442}},{"uid":"562c5e8a92c8792f","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/562c5e8a92c8792f","status":"passed","time":{"start":1759768162318,"stop":1759768173336,"duration":11018}},{"uid":"85959b749a9d9cec","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/85959b749a9d9cec","status":"passed","time":{"start":1759716553809,"stop":1759716567755,"duration":13946}},{"uid":"17420adafd425ae3","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/17420adafd425ae3","status":"passed","time":{"start":1759715840892,"stop":1759715851207,"duration":10315}},{"uid":"fa84e60aee939545","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/fa84e60aee939545","status":"passed","time":{"start":1759522103822,"stop":1759522115230,"duration":11408}},{"uid":"dbd43d11ec68bf1a","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/dbd43d11ec68bf1a","status":"passed","time":{"start":1759516841280,"stop":1759516851579,"duration":10299}},{"uid":"872d48bb60b24794","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/872d48bb60b24794","status":"passed","time":{"start":1759246319101,"stop":1759246330879,"duration":11778}},{"uid":"e1d0b97461511d01","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/e1d0b97461511d01","status":"passed","time":{"start":1759378981765,"stop":1759378990600,"duration":8835}}]},"tags":["anyio","sams_orange_pi","esp32_devkitc_wrover","zephyr"]},"source":"70960f5e90d70419.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}