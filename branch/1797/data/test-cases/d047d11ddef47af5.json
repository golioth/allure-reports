{"uid":"d047d11ddef47af5","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"bfe488b0ced6617e28e9fae7ab667d7b","time":{"start":1732144626759,"stop":1732144658665,"duration":31906},"status":"failed","statusMessage":"AssertionError: assert 4 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa69c5210>\ndevice = <golioth.golioth.Device object at 0xffffa69aa490>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 4 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732144616753,"stop":1732144616753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732144616754,"stop":1732144616754,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732144616754,"stop":1732144616754,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732144616755,"stop":1732144616756,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732144616755,"stop":1732144616755,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732144616756,"stop":1732144616758,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732144616759,"stop":1732144616759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732144616759,"stop":1732144616759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732144616760,"stop":1732144617193,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732144617194,"stop":1732144618327,"duration":1133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732144618328,"stop":1732144626227,"duration":7899},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732144626227,"stop":1732144626756,"duration":529},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 4 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa69c5210>\ndevice = <golioth.golioth.Device object at 0xffffa69aa490>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 4 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"eb5a49af141d88dc","name":"log","source":"eb5a49af141d88dc.txt","type":"text/plain","size":31203}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732144658866,"stop":1732144659092,"duration":226},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732144659094,"stop":1732144660560,"duration":1466},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732144660565,"stop":1732144660571,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732144660582,"stop":1732144660582,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"70e8cbe43599"},{"name":"thread","value":"410-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":5,"skipped":0,"passed":43,"unknown":0,"total":49},"items":[{"uid":"af27eda1a09fb936","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/af27eda1a09fb936","status":"passed","time":{"start":1732134458391,"stop":1732134482815,"duration":24424}},{"uid":"c2a96c53758cc11e","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/c2a96c53758cc11e","status":"passed","time":{"start":1732093855675,"stop":1732093879931,"duration":24256}},{"uid":"4dbbbd55682620c7","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/4dbbbd55682620c7","status":"passed","time":{"start":1732093855675,"stop":1732093879931,"duration":24256}},{"uid":"13122d3ce6c7547e","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/13122d3ce6c7547e","status":"passed","time":{"start":1732125848884,"stop":1732125874374,"duration":25490}},{"uid":"2076ac036d557e81","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/2076ac036d557e81","status":"passed","time":{"start":1732123803494,"stop":1732123828735,"duration":25241}},{"uid":"447e75b38d08dd60","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/447e75b38d08dd60","status":"passed","time":{"start":1732093855675,"stop":1732093879931,"duration":24256}},{"uid":"d32c67106f9933d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/d32c67106f9933d3","status":"passed","time":{"start":1732052149696,"stop":1732052174031,"duration":24335}},{"uid":"e8084be021c62822","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/e8084be021c62822","status":"passed","time":{"start":1732052149696,"stop":1732052174031,"duration":24335}},{"uid":"8d85ffeab01d0333","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/8d85ffeab01d0333","status":"passed","time":{"start":1732047802704,"stop":1732047826177,"duration":23473}},{"uid":"481f44abe23c00a1","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/481f44abe23c00a1","status":"passed","time":{"start":1732043508576,"stop":1732043531995,"duration":23419}},{"uid":"9ee803a10422cdb0","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/9ee803a10422cdb0","status":"passed","time":{"start":1732032159380,"stop":1732032184042,"duration":24662}},{"uid":"14ac4a53b963e260","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/14ac4a53b963e260","status":"passed","time":{"start":1732027395226,"stop":1732027418362,"duration":23136}},{"uid":"db82e2245ba25047","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/db82e2245ba25047","status":"passed","time":{"start":1732027395226,"stop":1732027418362,"duration":23136}},{"uid":"c299ac70a4d185d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/c299ac70a4d185d7","status":"passed","time":{"start":1732014653037,"stop":1732014679289,"duration":26252}},{"uid":"92ca1570fd3e398a","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/92ca1570fd3e398a","status":"passed","time":{"start":1732000865952,"stop":1732000889332,"duration":23380}},{"uid":"ea40be673121b822","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/ea40be673121b822","status":"passed","time":{"start":1731970848623,"stop":1731970873106,"duration":24483}},{"uid":"9ee5ea09e3e75e2e","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/9ee5ea09e3e75e2e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731963070847,"stop":1731963070847,"duration":0}},{"uid":"79191c23cf98ef81","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/79191c23cf98ef81","status":"passed","time":{"start":1731962301873,"stop":1731962327359,"duration":25486}},{"uid":"c9fea6c5fafe06b7","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/c9fea6c5fafe06b7","status":"passed","time":{"start":1731957957212,"stop":1731957981704,"duration":24492}},{"uid":"ac305670d13aff9a","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/ac305670d13aff9a","status":"passed","time":{"start":1731955770088,"stop":1731955794624,"duration":24536}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"d047d11ddef47af5.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}