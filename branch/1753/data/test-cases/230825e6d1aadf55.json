{"uid":"230825e6d1aadf55","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"fbdcf5b89e903e4e31b43e980f10a270","time":{"start":1731707615279,"stop":1731707632895,"duration":17616},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8f1aec50>\ndevice = <golioth.golioth.Device object at 0xffff8f1cd750>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731707597416,"stop":1731707597416,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731707597417,"stop":1731707597417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731707597417,"stop":1731707597417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731707597418,"stop":1731707597418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731707597418,"stop":1731707597418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731707597419,"stop":1731707597421,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731707597422,"stop":1731707597422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731707597422,"stop":1731707597422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731707597423,"stop":1731707597835,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731707597836,"stop":1731707598699,"duration":863},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731707598700,"stop":1731707614232,"duration":15532},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731707614233,"stop":1731707615276,"duration":1043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8f1aec50>\ndevice = <golioth.golioth.Device object at 0xffff8f1cd750>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"1f96fc442685d235","name":"log","source":"1f96fc442685d235.txt","type":"text/plain","size":25461}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731707633076,"stop":1731707633087,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731707633089,"stop":1731707633560,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731707633563,"stop":1731707633566,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731707633574,"stop":1731707633574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"971413c7273f"},{"name":"thread","value":"446-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":7,"skipped":0,"passed":12,"unknown":0,"total":23},"items":[{"uid":"32da49d0b73be438","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/32da49d0b73be438","status":"passed","time":{"start":1731708415257,"stop":1731708435600,"duration":20343}},{"uid":"6e02a25c060c045c","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/6e02a25c060c045c","status":"passed","time":{"start":1731695782384,"stop":1731695807923,"duration":25539}},{"uid":"6fc73d3e16f60338","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/6fc73d3e16f60338","status":"passed","time":{"start":1731690104600,"stop":1731690131177,"duration":26577}},{"uid":"fbd20dd4a331d2b","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/fbd20dd4a331d2b","status":"passed","time":{"start":1731624718291,"stop":1731624740764,"duration":22473}},{"uid":"4009dea5dc7250e0","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/4009dea5dc7250e0","status":"passed","time":{"start":1731622928199,"stop":1731622948690,"duration":20491}},{"uid":"8c4d0c5bbe44eced","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/8c4d0c5bbe44eced","status":"passed","time":{"start":1731616489051,"stop":1731616509743,"duration":20692}},{"uid":"89e73dfecc28c1af","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/89e73dfecc28c1af","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731614245531,"stop":1731614268601,"duration":23070}},{"uid":"32c1f9c13406bee9","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/32c1f9c13406bee9","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731611248047,"stop":1731611248047,"duration":0}},{"uid":"a2e9a6bd15e8df40","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/a2e9a6bd15e8df40","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731598490566,"stop":1731598513785,"duration":23219}},{"uid":"e6a2dbfa124aa9b4","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/e6a2dbfa124aa9b4","status":"passed","time":{"start":1731549005108,"stop":1731549028731,"duration":23623}},{"uid":"5c98cc926691f347","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/5c98cc926691f347","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731566977442,"stop":1731566977442,"duration":0}},{"uid":"443a6d1d65cc1163","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/443a6d1d65cc1163","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731543433558,"stop":1731543456635,"duration":23077}},{"uid":"2d1d6972096311c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/2d1d6972096311c5","status":"passed","time":{"start":1731540410804,"stop":1731540433810,"duration":23006}},{"uid":"4022ec9d74c4d292","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/4022ec9d74c4d292","status":"passed","time":{"start":1731537799117,"stop":1731537823721,"duration":24604}},{"uid":"57e9bb0a7a7b40d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/57e9bb0a7a7b40d7","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731537726556,"stop":1731537726556,"duration":0}},{"uid":"8c46cd51b2a69265","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/8c46cd51b2a69265","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731523851322,"stop":1731523874443,"duration":23121}},{"uid":"396f0f02e6b93e5b","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/396f0f02e6b93e5b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731523851322,"stop":1731523874443,"duration":23121}},{"uid":"98e9014478ab255b","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/98e9014478ab255b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731523851322,"stop":1731523874443,"duration":23121}},{"uid":"f4b7482b048b2696","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/f4b7482b048b2696","status":"passed","time":{"start":1731521013287,"stop":1731521038945,"duration":25658}},{"uid":"5f918c6ecd82d24b","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/5f918c6ecd82d24b","status":"passed","time":{"start":1731428283854,"stop":1731428306399,"duration":22545}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"230825e6d1aadf55.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}