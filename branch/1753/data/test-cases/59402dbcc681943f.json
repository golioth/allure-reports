{"uid":"59402dbcc681943f","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1731707721140,"stop":1731707815276,"duration":94136},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a221e50>\nproject = <golioth.golioth.Project object at 0xffff9b78b050>\ndevice = <golioth.golioth.Device object at 0xffff9a234dd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731707702211,"stop":1731707702211,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731707702212,"stop":1731707702212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731707702212,"stop":1731707702212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731707702213,"stop":1731707702214,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731707702213,"stop":1731707702213,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731707702214,"stop":1731707702214,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731707702214,"stop":1731707702215,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731707702215,"stop":1731707702217,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731707702218,"stop":1731707702623,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731707702624,"stop":1731707703560,"duration":936},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731707703561,"stop":1731707720127,"duration":16566},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731707720128,"stop":1731707721137,"duration":1009},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a221e50>\nproject = <golioth.golioth.Project object at 0xffff9b78b050>\ndevice = <golioth.golioth.Device object at 0xffff9a234dd0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"15e4f944187ac597","name":"log","source":"15e4f944187ac597.txt","type":"text/plain","size":20648}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731707815549,"stop":1731707815590,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731707815592,"stop":1731707816021,"duration":429},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731707816023,"stop":1731707816025,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731707816027,"stop":1731707816027,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"971413c7273f"},{"name":"thread","value":"487-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":4,"skipped":0,"passed":16,"unknown":0,"total":23},"items":[{"uid":"2f4912d7f094e6ea","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/2f4912d7f094e6ea","status":"passed","time":{"start":1731708611259,"stop":1731708623227,"duration":11968}},{"uid":"10609a38f6f714f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/10609a38f6f714f4","status":"passed","time":{"start":1731695898737,"stop":1731695907447,"duration":8710}},{"uid":"1657873834b8b7b9","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/1657873834b8b7b9","status":"passed","time":{"start":1731690229963,"stop":1731690240793,"duration":10830}},{"uid":"a94f9dfe2dd5333d","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/a94f9dfe2dd5333d","status":"passed","time":{"start":1731624836358,"stop":1731624846225,"duration":9867}},{"uid":"963f822eccfad043","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/963f822eccfad043","status":"passed","time":{"start":1731623033221,"stop":1731623042887,"duration":9666}},{"uid":"570275068e5f896c","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/570275068e5f896c","status":"passed","time":{"start":1731616606054,"stop":1731616616960,"duration":10906}},{"uid":"92f74e34d31c3458","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/92f74e34d31c3458","status":"passed","time":{"start":1731614354895,"stop":1731614367061,"duration":12166}},{"uid":"800fdc058de1ea31","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/800fdc058de1ea31","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731611374991,"stop":1731611374991,"duration":0}},{"uid":"a1f8c62f8e5cec76","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/a1f8c62f8e5cec76","status":"passed","time":{"start":1731598607126,"stop":1731598619038,"duration":11912}},{"uid":"c758e3ca80c94c12","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/c758e3ca80c94c12","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731549206947,"stop":1731549301024,"duration":94077}},{"uid":"6025f00572c115da","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/6025f00572c115da","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731567098779,"stop":1731567098779,"duration":0}},{"uid":"cffa1d60462ae3a6","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/cffa1d60462ae3a6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731543550845,"stop":1731543575033,"duration":24188}},{"uid":"2e4b76803b19906","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/2e4b76803b19906","status":"passed","time":{"start":1731540522970,"stop":1731540533138,"duration":10168}},{"uid":"3c802230fa38c993","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/3c802230fa38c993","status":"passed","time":{"start":1731537994197,"stop":1731538002297,"duration":8100}},{"uid":"abf3e9b1e37513da","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/abf3e9b1e37513da","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731537857679,"stop":1731537857679,"duration":0}},{"uid":"cbbde962341335c6","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/cbbde962341335c6","status":"passed","time":{"start":1731524061131,"stop":1731524069750,"duration":8619}},{"uid":"4b6fb511e0f6552f","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/4b6fb511e0f6552f","status":"passed","time":{"start":1731524061131,"stop":1731524069750,"duration":8619}},{"uid":"ccc6d16193dd04aa","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/ccc6d16193dd04aa","status":"passed","time":{"start":1731524061131,"stop":1731524069750,"duration":8619}},{"uid":"d5871542ba0e2300","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/d5871542ba0e2300","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731521212829,"stop":1731521237006,"duration":24177}},{"uid":"b0ded7b9503b2da6","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/b0ded7b9503b2da6","status":"passed","time":{"start":1731428401364,"stop":1731428412126,"duration":10762}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"59402dbcc681943f.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}