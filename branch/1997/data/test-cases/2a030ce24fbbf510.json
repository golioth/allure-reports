{
  "uid" : "2a030ce24fbbf510",
  "name" : "test_cert_provisioning",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning",
  "historyId" : "cbbe5798356bbcd9f9da9dcb46821d09",
  "time" : {
    "start" : 1735838072388,
    "stop" : 1735838074268,
    "duration" : 1880
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffff8a9e77d0>\nproject = <golioth.golioth.Project object at 0xffff8ab928d0>\ndevice_name = 'certificate-ArmDQCjDPisNIzmu'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960093367-if00,baud=115200']\ncertificate_cred = '6776c9596c6d6aa9b9be8c62', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "project",
    "time" : {
      "start" : 1735838039798,
      "stop" : 1735838040957,
      "duration" : 1159
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1735838039790,
      "stop" : 1735838039790,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1735838039793,
      "stop" : 1735838039793,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1735838039791,
      "stop" : 1735838039791,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1735838039789,
      "stop" : 1735838039789,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mcumgr_conn_args",
    "time" : {
      "start" : 1735838072385,
      "stop" : 1735838072385,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1735838041586,
      "stop" : 1735838071250,
      "duration" : 29664
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1735838071251,
      "stop" : 1735838072385,
      "duration" : 1134
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1735838039792,
      "stop" : 1735838039792,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred",
    "time" : {
      "start" : 1735838040960,
      "stop" : 1735838041585,
      "duration" : 625
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1735838039794,
      "stop" : 1735838039797,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1735838040958,
      "stop" : 1735838040959,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1735838039788,
      "stop" : 1735838039788,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffff8a9e77d0>\nproject = <golioth.golioth.Project object at 0xffff8ab928d0>\ndevice_name = 'certificate-ArmDQCjDPisNIzmu'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960093367-if00,baud=115200']\ncertificate_cred = '6776c9596c6d6aa9b9be8c62', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2ce30dd5719e58d2",
      "name" : "log",
      "source" : "2ce30dd5719e58d2.txt",
      "type" : "text/plain",
      "size" : 14736
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1735838075483,
      "stop" : 1735838075485,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1735838074643,
      "stop" : 1735838074691,
      "duration" : 48
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred::0",
    "time" : {
      "start" : 1735838074693,
      "stop" : 1735838075086,
      "duration" : 393
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1735838075487,
      "stop" : 1735838075488,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name::0",
    "time" : {
      "start" : 1735838075087,
      "stop" : 1735838075481,
      "duration" : 394
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "270b61c2574b"
  }, {
    "name" : "thread",
    "value" : "834-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 7,
        "unknown" : 0,
        "total" : 8
      },
      "items" : [ {
        "uid" : "81e04df2f871ec0e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/81e04df2f871ec0e",
        "status" : "passed",
        "time" : {
          "start" : 1735834355087,
          "stop" : 1735834381533,
          "duration" : 26446
        }
      }, {
        "uid" : "abc1d8c784c4d1be",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/abc1d8c784c4d1be",
        "status" : "passed",
        "time" : {
          "start" : 1735829420833,
          "stop" : 1735829448503,
          "duration" : 27670
        }
      }, {
        "uid" : "b1bd3a5fdd463d36",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/b1bd3a5fdd463d36",
        "status" : "passed",
        "time" : {
          "start" : 1735680120429,
          "stop" : 1735680168574,
          "duration" : 48145
        }
      }, {
        "uid" : "7de521f3e8c65421",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2/#testresult/7de521f3e8c65421",
        "status" : "passed",
        "time" : {
          "start" : 1735680042870,
          "stop" : 1735680071980,
          "duration" : 29110
        }
      }, {
        "uid" : "28d534e1659351d7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1987/#testresult/28d534e1659351d7",
        "status" : "passed",
        "time" : {
          "start" : 1735670515582,
          "stop" : 1735670559539,
          "duration" : 43957
        }
      }, {
        "uid" : "3995bfe27ae95e9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1982/#testresult/3995bfe27ae95e9",
        "status" : "passed",
        "time" : {
          "start" : 1735577071006,
          "stop" : 1735577098558,
          "duration" : 27552
        }
      }, {
        "uid" : "db5f38a492c8ef2e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1971/#testresult/db5f38a492c8ef2e",
        "status" : "passed",
        "time" : {
          "start" : 1734762393578,
          "stop" : 1734762423274,
          "duration" : 29696
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "2a030ce24fbbf510.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}