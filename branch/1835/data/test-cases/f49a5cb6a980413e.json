{"uid":"f49a5cb6a980413e","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1732318623890,"stop":1732318717886,"duration":93996},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbb9beb10>\nproject = <golioth.golioth.Project object at 0xffffbbb32d90>\ndevice = <golioth.golioth.Device object at 0xffffbb9d9b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732318593840,"stop":1732318593841,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732318593841,"stop":1732318593841,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732318593842,"stop":1732318593842,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732318593842,"stop":1732318593842,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732318593843,"stop":1732318593843,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732318593843,"stop":1732318593843,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732318593844,"stop":1732318593846,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732318593844,"stop":1732318593844,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732318593847,"stop":1732318594278,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732318594279,"stop":1732318595146,"duration":867},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732318595147,"stop":1732318622788,"duration":27641},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732318622789,"stop":1732318623887,"duration":1098},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbb9beb10>\nproject = <golioth.golioth.Project object at 0xffffbbb32d90>\ndevice = <golioth.golioth.Device object at 0xffffbb9d9b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"653e8f6b8f48d5e7","name":"log","source":"653e8f6b8f48d5e7.txt","type":"text/plain","size":21196}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732318718127,"stop":1732318718165,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732318718167,"stop":1732318718580,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732318718582,"stop":1732318718585,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732318718587,"stop":1732318718587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"373f0539cdf3"},{"name":"thread","value":"845-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"31075510d086992f","status":"passed","time":{"start":1732314688207,"stop":1732314710160,"duration":21953}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":30,"unknown":0,"total":35},"items":[{"uid":"bc7e2ed17ef95c9f","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/bc7e2ed17ef95c9f","status":"passed","time":{"start":1732314688207,"stop":1732314710160,"duration":21953}},{"uid":"f213a3875cfab63","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/f213a3875cfab63","status":"passed","time":{"start":1732296936921,"stop":1732296950187,"duration":13266}},{"uid":"cff24a8f982bd8d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/cff24a8f982bd8d7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732294178908,"stop":1732294272913,"duration":94005}},{"uid":"a8579ddfc775fb71","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/a8579ddfc775fb71","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221696579,"stop":1732221696579,"duration":0}},{"uid":"e33395d9901a2c2d","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/e33395d9901a2c2d","status":"passed","time":{"start":1732136615485,"stop":1732136702700,"duration":87215}},{"uid":"6e87218001874bd6","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/6e87218001874bd6","status":"passed","time":{"start":1732128415788,"stop":1732128427229,"duration":11441}},{"uid":"78acb4d3e269b2eb","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/78acb4d3e269b2eb","status":"passed","time":{"start":1732127147604,"stop":1732127172397,"duration":24793}},{"uid":"a4c9050c8f41de57","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/a4c9050c8f41de57","status":"passed","time":{"start":1732050237431,"stop":1732050269317,"duration":31886}},{"uid":"93d5e1382f89080d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/93d5e1382f89080d","status":"passed","time":{"start":1732050237431,"stop":1732050269317,"duration":31886}},{"uid":"f2f9bfb6ad0e7ef0","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/f2f9bfb6ad0e7ef0","status":"passed","time":{"start":1732050237431,"stop":1732050269317,"duration":31886}},{"uid":"33abb33b8795a8ad","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/33abb33b8795a8ad","status":"passed","time":{"start":1732033994740,"stop":1732034028140,"duration":33400}},{"uid":"8d41c35806ac20a9","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/8d41c35806ac20a9","status":"passed","time":{"start":1731972542431,"stop":1731972565586,"duration":23155}},{"uid":"cb6f484706d9d50","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/cb6f484706d9d50","status":"passed","time":{"start":1731964779725,"stop":1731964791812,"duration":12087}},{"uid":"dc5a1b8019269bd8","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/dc5a1b8019269bd8","status":"passed","time":{"start":1731959895222,"stop":1731959916632,"duration":21410}},{"uid":"f6dad92529081795","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/f6dad92529081795","status":"passed","time":{"start":1731956874134,"stop":1731956906674,"duration":32540}},{"uid":"c126a5035d445e96","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/c126a5035d445e96","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731908176323,"stop":1731908270416,"duration":94093}},{"uid":"150a111213d476b6","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/150a111213d476b6","status":"passed","time":{"start":1731716868634,"stop":1731716897778,"duration":29144}},{"uid":"e082f3931d4b97e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/e082f3931d4b97e6","status":"passed","time":{"start":1731712853445,"stop":1731712886221,"duration":32776}},{"uid":"a5d457c404617ae4","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/a5d457c404617ae4","status":"passed","time":{"start":1731710526990,"stop":1731710553903,"duration":26913}},{"uid":"b7407fe811551942","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/b7407fe811551942","status":"passed","time":{"start":1731709844037,"stop":1731709855343,"duration":11306}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f49a5cb6a980413e.json","parameterValues":["'nrf9160dk'","'zephyr'"]}