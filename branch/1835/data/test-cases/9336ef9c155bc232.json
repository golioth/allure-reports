{"uid":"9336ef9c155bc232","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1732313117356,"stop":1732313141340,"duration":23984},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb48b7d10>\ndevice = <golioth.golioth.Device object at 0xffffb48d2890>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732313088660,"stop":1732313088661,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732313088661,"stop":1732313088661,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732313088662,"stop":1732313088662,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732313088662,"stop":1732313088662,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732313088663,"stop":1732313088665,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732313088663,"stop":1732313088663,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732313088666,"stop":1732313088666,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732313088667,"stop":1732313089238,"duration":571},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732313088667,"stop":1732313088667,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732313089238,"stop":1732313090360,"duration":1122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732313090361,"stop":1732313114248,"duration":23887},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732313114249,"stop":1732313117349,"duration":3100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb48b7d10>\ndevice = <golioth.golioth.Device object at 0xffffb48d2890>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","steps":[],"attachments":[{"uid":"d22eceee0f7cc92b","name":"log","source":"d22eceee0f7cc92b.txt","type":"text/plain","size":18187}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732313141519,"stop":1732313141731,"duration":212},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732313141733,"stop":1732313142425,"duration":692},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732313142429,"stop":1732313142433,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732313142441,"stop":1732313142442,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"03bf65f8a045"},{"name":"thread","value":"1034-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"44a0ecfc8838b28c","status":"passed","time":{"start":1732313060374,"stop":1732313084182,"duration":23808}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":79,"unknown":0,"total":83},"items":[{"uid":"6fe0a61195935521","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/6fe0a61195935521","status":"passed","time":{"start":1732301199406,"stop":1732301222899,"duration":23493}},{"uid":"7edeb9bb37eb619d","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/7edeb9bb37eb619d","status":"passed","time":{"start":1732301199406,"stop":1732301222899,"duration":23493}},{"uid":"3792c388b4f03c15","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/3792c388b4f03c15","status":"passed","time":{"start":1732301199406,"stop":1732301222899,"duration":23493}},{"uid":"439f249c472e7785","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/439f249c472e7785","status":"passed","time":{"start":1732292901342,"stop":1732292924652,"duration":23310}},{"uid":"50088c89961b5c28","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/50088c89961b5c28","status":"passed","time":{"start":1732229462507,"stop":1732229505494,"duration":42987}},{"uid":"dc0fa9fb20fbc8d0","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/dc0fa9fb20fbc8d0","status":"passed","time":{"start":1732292901342,"stop":1732292924652,"duration":23310}},{"uid":"13f17880e455e137","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/13f17880e455e137","status":"passed","time":{"start":1732227488858,"stop":1732227512187,"duration":23329}},{"uid":"5d29d97f7ba5f6e5","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/5d29d97f7ba5f6e5","status":"passed","time":{"start":1732289352427,"stop":1732289380184,"duration":27757}},{"uid":"d4e79ec410101dfc","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d4e79ec410101dfc","status":"passed","time":{"start":1732284261854,"stop":1732284289703,"duration":27849}},{"uid":"fa5f6ea7487b5bdf","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/fa5f6ea7487b5bdf","status":"passed","time":{"start":1732286648984,"stop":1732286676901,"duration":27917}},{"uid":"c57126d6f705f9d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/c57126d6f705f9d7","status":"passed","time":{"start":1732284261854,"stop":1732284289703,"duration":27849}},{"uid":"e2b371f26a354bd4","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/e2b371f26a354bd4","status":"passed","time":{"start":1732280136201,"stop":1732280160227,"duration":24026}},{"uid":"85c6d8333c0334b0","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/85c6d8333c0334b0","status":"passed","time":{"start":1732274931104,"stop":1732274959028,"duration":27924}},{"uid":"162fc16ebf418cc0","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/162fc16ebf418cc0","status":"passed","time":{"start":1732273925710,"stop":1732273949037,"duration":23327}},{"uid":"692cfa9a8b44c74a","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/692cfa9a8b44c74a","status":"passed","time":{"start":1732232163888,"stop":1732232187272,"duration":23384}},{"uid":"41977d2b627f00ad","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/41977d2b627f00ad","status":"passed","time":{"start":1732229462507,"stop":1732229505494,"duration":42987}},{"uid":"33e2b42198b5c962","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/33e2b42198b5c962","status":"passed","time":{"start":1732227488858,"stop":1732227512187,"duration":23329}},{"uid":"94ccca8d9d015f37","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/94ccca8d9d015f37","status":"passed","time":{"start":1732225061729,"stop":1732225085169,"duration":23440}},{"uid":"74b946d26d14421b","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/74b946d26d14421b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732220892731,"stop":1732220892731,"duration":0}},{"uid":"e3f6457a3fa2c2b8","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/e3f6457a3fa2c2b8","status":"passed","time":{"start":1732216273678,"stop":1732216297855,"duration":24177}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"9336ef9c155bc232.json","parameterValues":["'nrf52840dk'","'zephyr'"]}