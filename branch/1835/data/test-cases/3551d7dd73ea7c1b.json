{"uid":"3551d7dd73ea7c1b","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a8632ecd3cd3b3c347c26a5269c4b5ab","time":{"start":1732318231560,"stop":1732318324842,"duration":93282},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8662d7d0>\ndevice = <golioth.golioth.Device object at 0xffff8664aa90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732318201823,"stop":1732318201823,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732318201824,"stop":1732318201824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732318201824,"stop":1732318201824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732318201825,"stop":1732318201825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732318201825,"stop":1732318201826,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732318201826,"stop":1732318201828,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732318201829,"stop":1732318201829,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732318201829,"stop":1732318201829,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732318201830,"stop":1732318202300,"duration":470},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732318202301,"stop":1732318203165,"duration":864},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732318203165,"stop":1732318230467,"duration":27302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732318230468,"stop":1732318231555,"duration":1087},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8662d7d0>\ndevice = <golioth.golioth.Device object at 0xffff8664aa90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f1b44ca7f00acddd","name":"log","source":"f1b44ca7f00acddd.txt","type":"text/plain","size":16448}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732318325124,"stop":1732318325170,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732318325171,"stop":1732318325582,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732318325584,"stop":1732318325586,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732318325591,"stop":1732318325591,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"373f0539cdf3"},{"name":"thread","value":"649-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8fb417e8d5c794bf","status":"passed","time":{"start":1732314395307,"stop":1732314439616,"duration":44309}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":6,"skipped":0,"passed":24,"unknown":0,"total":35},"items":[{"uid":"5a6d2c3a1541c149","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/5a6d2c3a1541c149","status":"passed","time":{"start":1732314395307,"stop":1732314439616,"duration":44309}},{"uid":"31a1e24484b8bdd8","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/31a1e24484b8bdd8","status":"passed","time":{"start":1732296723855,"stop":1732296753933,"duration":30078}},{"uid":"58116f3465a278da","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/58116f3465a278da","status":"passed","time":{"start":1732293841787,"stop":1732293887568,"duration":45781}},{"uid":"acdccad7dcdabac7","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/acdccad7dcdabac7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221666401,"stop":1732221666401,"duration":0}},{"uid":"50b0ef3c347cb153","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/50b0ef3c347cb153","status":"passed","time":{"start":1732136338104,"stop":1732136432823,"duration":94719}},{"uid":"3523b426c4dcab22","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/3523b426c4dcab22","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1732128115385,"stop":1732128115385,"duration":0}},{"uid":"38bdde23c340edb0","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/38bdde23c340edb0","status":"passed","time":{"start":1732126813653,"stop":1732126855651,"duration":41998}},{"uid":"28d78b4c7b156c20","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/28d78b4c7b156c20","status":"passed","time":{"start":1732049973879,"stop":1732050022949,"duration":49070}},{"uid":"8c259e4995a762d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/8c259e4995a762d7","status":"passed","time":{"start":1732049973879,"stop":1732050022949,"duration":49070}},{"uid":"6a3b4336420bc9b0","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/6a3b4336420bc9b0","status":"passed","time":{"start":1732049973879,"stop":1732050022949,"duration":49070}},{"uid":"4f1e7c197694c868","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/4f1e7c197694c868","status":"passed","time":{"start":1732033711712,"stop":1732033760484,"duration":48772}},{"uid":"641635c5fb903335","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/641635c5fb903335","status":"passed","time":{"start":1731972309240,"stop":1731972339866,"duration":30626}},{"uid":"7dde9d8c15dc9ce8","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/7dde9d8c15dc9ce8","status":"passed","time":{"start":1731964619520,"stop":1731964653115,"duration":33595}},{"uid":"432ecca7922e9a0e","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/432ecca7922e9a0e","status":"passed","time":{"start":1731959533453,"stop":1731959588411,"duration":54958}},{"uid":"dd779bf8d0a8a90","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/dd779bf8d0a8a90","status":"passed","time":{"start":1731956522684,"stop":1731956568244,"duration":45560}},{"uid":"7148c2653c220f4f","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/7148c2653c220f4f","status":"passed","time":{"start":1731907855552,"stop":1731907895584,"duration":40032}},{"uid":"744a1e66b44c2697","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/744a1e66b44c2697","status":"passed","time":{"start":1731716480365,"stop":1731716529861,"duration":49496}},{"uid":"f955443a58d7751d","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/f955443a58d7751d","status":"passed","time":{"start":1731712589155,"stop":1731712634868,"duration":45713}},{"uid":"7b3134f68a9fe8b1","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/7b3134f68a9fe8b1","status":"passed","time":{"start":1731710171558,"stop":1731710223258,"duration":51700}},{"uid":"9b88fbb341f934a2","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/9b88fbb341f934a2","status":"passed","time":{"start":1731709561856,"stop":1731709590919,"duration":29063}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"3551d7dd73ea7c1b.json","parameterValues":["'nrf9160dk'","'zephyr'"]}