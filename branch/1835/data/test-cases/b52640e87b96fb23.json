{"uid":"b52640e87b96fb23","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"1ec1936b7990a0542c6cd1098cc4bb62","time":{"start":1732318496626,"stop":1732318589833,"duration":93207},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dfdfc10>\ndevice = <golioth.golioth.Device object at 0xffff9dffa9d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732318467067,"stop":1732318467067,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732318467068,"stop":1732318467068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732318467069,"stop":1732318467069,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732318467069,"stop":1732318467069,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732318467070,"stop":1732318467072,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732318467070,"stop":1732318467070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732318467073,"stop":1732318467073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732318467074,"stop":1732318467074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732318467074,"stop":1732318467498,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732318467499,"stop":1732318468474,"duration":975},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732318468475,"stop":1732318495559,"duration":27084},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732318495560,"stop":1732318496620,"duration":1060},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dfdfc10>\ndevice = <golioth.golioth.Device object at 0xffff9dffa9d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ad18140c8cc1131d","name":"log","source":"ad18140c8cc1131d.txt","type":"text/plain","size":16715}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732318590116,"stop":1732318590162,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732318590163,"stop":1732318590536,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732318590538,"stop":1732318590540,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732318590545,"stop":1732318590545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"373f0539cdf3"},{"name":"thread","value":"796-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"71a2a966743e0cb5","status":"passed","time":{"start":1732314634334,"stop":1732314654810,"duration":20476}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":28,"unknown":0,"total":35},"items":[{"uid":"a6ed50534eda6dff","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/a6ed50534eda6dff","status":"passed","time":{"start":1732314634334,"stop":1732314654810,"duration":20476}},{"uid":"eb08cecc369005eb","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/eb08cecc369005eb","status":"passed","time":{"start":1732296893299,"stop":1732296903610,"duration":10311}},{"uid":"5d6b60cf0d7f5ea6","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/5d6b60cf0d7f5ea6","status":"passed","time":{"start":1732294117015,"stop":1732294145340,"duration":28325}},{"uid":"b6c0eb1ea678b351","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/b6c0eb1ea678b351","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221689102,"stop":1732221689102,"duration":0}},{"uid":"ca0d24ddd05586b7","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/ca0d24ddd05586b7","status":"passed","time":{"start":1732136572001,"stop":1732136582532,"duration":10531}},{"uid":"a8371cc203590d0f","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/a8371cc203590d0f","status":"passed","time":{"start":1732128371852,"stop":1732128382843,"duration":10991}},{"uid":"fab8200d7b6694a","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/fab8200d7b6694a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732127020623,"stop":1732127113872,"duration":93249}},{"uid":"38e418c47652417b","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/38e418c47652417b","status":"passed","time":{"start":1732050183677,"stop":1732050204091,"duration":20414}},{"uid":"a31eaa36e71ce43c","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/a31eaa36e71ce43c","status":"passed","time":{"start":1732050183677,"stop":1732050204091,"duration":20414}},{"uid":"ee7db07f81071ec5","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/ee7db07f81071ec5","status":"passed","time":{"start":1732050183677,"stop":1732050204091,"duration":20414}},{"uid":"ad36e42db57e581d","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/ad36e42db57e581d","status":"passed","time":{"start":1732033928601,"stop":1732033961392,"duration":32791}},{"uid":"2e06a8aff5e510b3","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/2e06a8aff5e510b3","status":"passed","time":{"start":1731972493842,"stop":1731972509546,"duration":15704}},{"uid":"123af57474dacc11","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/123af57474dacc11","status":"passed","time":{"start":1731964736131,"stop":1731964746969,"duration":10838}},{"uid":"4058c5630763070b","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/4058c5630763070b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731959768321,"stop":1731959861526,"duration":93205}},{"uid":"eef8422a42db00e7","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/eef8422a42db00e7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731956746627,"stop":1731956839955,"duration":93328}},{"uid":"d879fd9dfcdb0942","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/d879fd9dfcdb0942","status":"passed","time":{"start":1731908119209,"stop":1731908143162,"duration":23953}},{"uid":"289dceb5251eb9d1","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/289dceb5251eb9d1","status":"passed","time":{"start":1731716816132,"stop":1731716834689,"duration":18557}},{"uid":"cc27263765c3f1a0","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/cc27263765c3f1a0","status":"passed","time":{"start":1731712793308,"stop":1731712820008,"duration":26700}},{"uid":"2d4cbd4b7f0b11b1","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/2d4cbd4b7f0b11b1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731710400706,"stop":1731710493793,"duration":93087}},{"uid":"1a6f1730eb70c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/1a6f1730eb70c4","status":"passed","time":{"start":1731709799510,"stop":1731709810892,"duration":11382}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b52640e87b96fb23.json","parameterValues":["'nrf9160dk'","'zephyr'"]}