{
  "uid" : "c2063e4201c6c8d5",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello",
  "historyId" : "e124f10389952e3c52fb82b67fe5598b",
  "time" : {
    "start" : 1732802132640,
    "stop" : 1732802245789,
    "duration" : 113149
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8e2c71d0>\ndevice = <golioth.golioth.Device object at 0xffff8e2de010>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff8e453210>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_url",
    "time" : {
      "start" : 1732802103674,
      "stop" : 1732802103674,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "build_conf",
    "time" : {
      "start" : 1732802103652,
      "stop" : 1732802103668,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1732802104901,
      "stop" : 1732802131530,
      "duration" : 26629
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1732802131531,
      "stop" : 1732802132637,
      "duration" : 1106
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1732802103675,
      "stop" : 1732802104099,
      "duration" : 424
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1732802103673,
      "stop" : 1732802103674,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1732802103652,
      "stop" : 1732802103652,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1732802103670,
      "stop" : 1732802103673,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1732802104100,
      "stop" : 1732802104901,
      "duration" : 801
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1732802103670,
      "stop" : 1732802103670,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1732802103669,
      "stop" : 1732802103670,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8e2c71d0>\ndevice = <golioth.golioth.Device object at 0xffff8e2de010>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff8e453210>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "11319b196074b308",
      "name" : "log",
      "source" : "11319b196074b308.txt",
      "type" : "text/plain",
      "size" : 17213
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1732802246182,
      "stop" : 1732802246196,
      "duration" : 14
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1732802246568,
      "stop" : 1732802246570,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1732802246575,
      "stop" : 1732802246575,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1732802246197,
      "stop" : 1732802246566,
      "duration" : 369
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "1f417158e05f"
  }, {
    "name" : "thread",
    "value" : "502-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "2dc0d143ddc42146",
      "status" : "broken",
      "statusDetails" : "httpx.ReadTimeout",
      "time" : {
        "start" : 1732730263969,
        "stop" : 1732730299421,
        "duration" : 35452
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 11,
        "skipped" : 0,
        "passed" : 35,
        "unknown" : 0,
        "total" : 47
      },
      "items" : [ {
        "uid" : "4a049e903ba48cc6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/4a049e903ba48cc6",
        "status" : "passed",
        "time" : {
          "start" : 1732750741461,
          "stop" : 1732750770879,
          "duration" : 29418
        }
      }, {
        "uid" : "255afeac32297243",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/255afeac32297243",
        "status" : "broken",
        "statusDetails" : "httpx.ReadTimeout",
        "time" : {
          "start" : 1732730263969,
          "stop" : 1732730299421,
          "duration" : 35452
        }
      }, {
        "uid" : "de7e210d894acb37",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/de7e210d894acb37",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732724622970,
          "stop" : 1732724736144,
          "duration" : 113174
        }
      }, {
        "uid" : "d55d0b8bd51f0fba",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/d55d0b8bd51f0fba",
        "status" : "passed",
        "time" : {
          "start" : 1732632411005,
          "stop" : 1732632441008,
          "duration" : 30003
        }
      }, {
        "uid" : "d33412121cee1754",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/d33412121cee1754",
        "status" : "passed",
        "time" : {
          "start" : 1732632411005,
          "stop" : 1732632441008,
          "duration" : 30003
        }
      }, {
        "uid" : "c746c01880c20b39",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/c746c01880c20b39",
        "status" : "passed",
        "time" : {
          "start" : 1732563486181,
          "stop" : 1732563516871,
          "duration" : 30690
        }
      }, {
        "uid" : "a5073502c8187e99",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/a5073502c8187e99",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732561178496,
          "stop" : 1732561293068,
          "duration" : 114572
        }
      }, {
        "uid" : "82f679da3bf6a4b2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/82f679da3bf6a4b2",
        "status" : "passed",
        "time" : {
          "start" : 1732555385509,
          "stop" : 1732555461447,
          "duration" : 75938
        }
      }, {
        "uid" : "5e26123157303491",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/5e26123157303491",
        "status" : "passed",
        "time" : {
          "start" : 1732549416928,
          "stop" : 1732549447213,
          "duration" : 30285
        }
      }, {
        "uid" : "44d0a7075cea4825",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/44d0a7075cea4825",
        "status" : "passed",
        "time" : {
          "start" : 1732466995032,
          "stop" : 1732467040148,
          "duration" : 45116
        }
      }, {
        "uid" : "bace48572cd36675",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/bace48572cd36675",
        "status" : "passed",
        "time" : {
          "start" : 1732408078869,
          "stop" : 1732408119526,
          "duration" : 40657
        }
      }, {
        "uid" : "e0ccde7feb486c77",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/e0ccde7feb486c77",
        "status" : "passed",
        "time" : {
          "start" : 1732317695645,
          "stop" : 1732317733949,
          "duration" : 38304
        }
      }, {
        "uid" : "28694401f5b82f5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/28694401f5b82f5",
        "status" : "passed",
        "time" : {
          "start" : 1732313903690,
          "stop" : 1732313948081,
          "duration" : 44391
        }
      }, {
        "uid" : "e909b3ea76ea1d60",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/e909b3ea76ea1d60",
        "status" : "passed",
        "time" : {
          "start" : 1732296295152,
          "stop" : 1732296324626,
          "duration" : 29474
        }
      }, {
        "uid" : "9112d5857b6c8f67",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/9112d5857b6c8f67",
        "status" : "passed",
        "time" : {
          "start" : 1732293500762,
          "stop" : 1732293544050,
          "duration" : 43288
        }
      }, {
        "uid" : "dbc753b0444f3bda",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1816//#testresult/dbc753b0444f3bda",
        "status" : "broken",
        "statusDetails" : "FileNotFoundError: [Errno 2] No such file or directory: '/__w/golioth-firmware-sdk/golioth-firmware-sdk/twister-out/nrf9160dk@0.14.0_nrf9160_ns/hello_nrf91_offloaded/sample.golioth.hello_nrf91_offloaded/zephyr/.config'",
        "time" : {
          "start" : 1732221648717,
          "stop" : 1732221648717,
          "duration" : 0
        }
      }, {
        "uid" : "cdde07f38f9b212b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1792//#testresult/cdde07f38f9b212b",
        "status" : "passed",
        "time" : {
          "start" : 1732135935507,
          "stop" : 1732135966279,
          "duration" : 30772
        }
      }, {
        "uid" : "addb1f01be22493e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1791//#testresult/addb1f01be22493e",
        "status" : "passed",
        "time" : {
          "start" : 1732127651989,
          "stop" : 1732127686999,
          "duration" : 35010
        }
      }, {
        "uid" : "1ba5b7729e79e76c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1790//#testresult/1ba5b7729e79e76c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732126580939,
          "stop" : 1732126695474,
          "duration" : 114535
        }
      }, {
        "uid" : "b00faaa266ecabba",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1787//#testresult/b00faaa266ecabba",
        "status" : "passed",
        "time" : {
          "start" : 1732049500689,
          "stop" : 1732049545831,
          "duration" : 45142
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "c2063e4201c6c8d5.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}