{
  "uid" : "353a41d1c064a35d",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "a8632ecd3cd3b3c347c26a5269c4b5ab",
  "time" : {
    "start" : 1732802673247,
    "stop" : 1732802766489,
    "duration" : 93242
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff980fbc10>\ndevice = <golioth.golioth.Device object at 0xffff98116f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1732802644095,
      "stop" : 1732802644095,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1732802645358,
      "stop" : 1732802672145,
      "duration" : 26787
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1732802644093,
      "stop" : 1732802644093,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1732802644099,
      "stop" : 1732802644504,
      "duration" : 405
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1732802644099,
      "stop" : 1732802644099,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1732802644505,
      "stop" : 1732802645358,
      "duration" : 853
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1732802644092,
      "stop" : 1732802644093,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1732802644095,
      "stop" : 1732802644097,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1732802644092,
      "stop" : 1732802644092,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1732802644098,
      "stop" : 1732802644098,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1732802644094,
      "stop" : 1732802644094,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1732802672146,
      "stop" : 1732802673243,
      "duration" : 1097
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff980fbc10>\ndevice = <golioth.golioth.Device object at 0xffff98116f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1d977bf88c46c0e",
      "name" : "log",
      "source" : "1d977bf88c46c0e.txt",
      "type" : "text/plain",
      "size" : 17477
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1732802766770,
      "stop" : 1732802766816,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1732802767191,
      "stop" : 1732802767193,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1732802766818,
      "stop" : 1732802767189,
      "duration" : 371
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1732802767198,
      "stop" : 1732802767198,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "1f417158e05f"
  }, {
    "name" : "thread",
    "value" : "651-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "9121f1cca7396481",
      "status" : "passed",
      "time" : {
        "start" : 1732730831164,
        "stop" : 1732730865514,
        "duration" : 34350
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 6,
        "broken" : 8,
        "skipped" : 0,
        "passed" : 33,
        "unknown" : 0,
        "total" : 47
      },
      "items" : [ {
        "uid" : "2555019b83c08589",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/2555019b83c08589",
        "status" : "passed",
        "time" : {
          "start" : 1732751159797,
          "stop" : 1732751189529,
          "duration" : 29732
        }
      }, {
        "uid" : "c5cbfb6c052a7753",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/c5cbfb6c052a7753",
        "status" : "passed",
        "time" : {
          "start" : 1732730831164,
          "stop" : 1732730865514,
          "duration" : 34350
        }
      }, {
        "uid" : "945ff08446df880b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/945ff08446df880b",
        "status" : "passed",
        "time" : {
          "start" : 1732725220935,
          "stop" : 1732725273376,
          "duration" : 52441
        }
      }, {
        "uid" : "da7ff0441078a92",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/da7ff0441078a92",
        "status" : "passed",
        "time" : {
          "start" : 1732632855936,
          "stop" : 1732632888609,
          "duration" : 32673
        }
      }, {
        "uid" : "93cbc95663d81a75",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/93cbc95663d81a75",
        "status" : "passed",
        "time" : {
          "start" : 1732632855936,
          "stop" : 1732632888609,
          "duration" : 32673
        }
      }, {
        "uid" : "66170e2c9d32c9f7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/66170e2c9d32c9f7",
        "status" : "passed",
        "time" : {
          "start" : 1732563989356,
          "stop" : 1732564020290,
          "duration" : 30934
        }
      }, {
        "uid" : "96fd3f060f7d9cb2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/96fd3f060f7d9cb2",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732561742070,
          "stop" : 1732561835166,
          "duration" : 93096
        }
      }, {
        "uid" : "8675497b5f708e39",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/8675497b5f708e39",
        "status" : "failed",
        "statusDetails" : "Failed: Prompt not found",
        "time" : {
          "start" : 1732555900549,
          "stop" : 1732555900549,
          "duration" : 0
        }
      }, {
        "uid" : "81a4230af09f8f32",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/81a4230af09f8f32",
        "status" : "passed",
        "time" : {
          "start" : 1732549855410,
          "stop" : 1732549888132,
          "duration" : 32722
        }
      }, {
        "uid" : "1b0b5322019ff632",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/1b0b5322019ff632",
        "status" : "passed",
        "time" : {
          "start" : 1732467480119,
          "stop" : 1732467527443,
          "duration" : 47324
        }
      }, {
        "uid" : "30b5fee10d6bda60",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/30b5fee10d6bda60",
        "status" : "passed",
        "time" : {
          "start" : 1732408551963,
          "stop" : 1732408596222,
          "duration" : 44259
        }
      }, {
        "uid" : "3551d7dd73ea7c1b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/3551d7dd73ea7c1b",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732318231560,
          "stop" : 1732318324842,
          "duration" : 93282
        }
      }, {
        "uid" : "5a6d2c3a1541c149",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/5a6d2c3a1541c149",
        "status" : "passed",
        "time" : {
          "start" : 1732314395307,
          "stop" : 1732314439616,
          "duration" : 44309
        }
      }, {
        "uid" : "31a1e24484b8bdd8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/31a1e24484b8bdd8",
        "status" : "passed",
        "time" : {
          "start" : 1732296723855,
          "stop" : 1732296753933,
          "duration" : 30078
        }
      }, {
        "uid" : "58116f3465a278da",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/58116f3465a278da",
        "status" : "passed",
        "time" : {
          "start" : 1732293841787,
          "stop" : 1732293887568,
          "duration" : 45781
        }
      }, {
        "uid" : "acdccad7dcdabac7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1816//#testresult/acdccad7dcdabac7",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1732221666401,
          "stop" : 1732221666401,
          "duration" : 0
        }
      }, {
        "uid" : "50b0ef3c347cb153",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1792//#testresult/50b0ef3c347cb153",
        "status" : "passed",
        "time" : {
          "start" : 1732136338104,
          "stop" : 1732136432823,
          "duration" : 94719
        }
      }, {
        "uid" : "3523b426c4dcab22",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1791//#testresult/3523b426c4dcab22",
        "status" : "failed",
        "statusDetails" : "Failed: Prompt not found",
        "time" : {
          "start" : 1732128115385,
          "stop" : 1732128115385,
          "duration" : 0
        }
      }, {
        "uid" : "38bdde23c340edb0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1790//#testresult/38bdde23c340edb0",
        "status" : "passed",
        "time" : {
          "start" : 1732126813653,
          "stop" : 1732126855651,
          "duration" : 41998
        }
      }, {
        "uid" : "28d78b4c7b156c20",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1787//#testresult/28d78b4c7b156c20",
        "status" : "passed",
        "time" : {
          "start" : 1732049973879,
          "stop" : 1732050022949,
          "duration" : 49070
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "353a41d1c064a35d.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}