{
  "uid" : "9ddf6f5f3a504154",
  "name" : "test_settings",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings",
  "historyId" : "d6d167c5ecb927d8d413dac5f1f3452a",
  "time" : {
    "start" : 1732803121735,
    "stop" : 1732803215590,
    "duration" : 93855
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9f20af90>\nproject = <golioth.golioth.Project object at 0xffff9f37ea10>\ndevice = <golioth.golioth.Device object at 0xffff9f225f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1732803092150,
      "stop" : 1732803092150,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1732803120631,
      "stop" : 1732803121732,
      "duration" : 1101
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1732803092675,
      "stop" : 1732803093545,
      "duration" : 870
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1732803092153,
      "stop" : 1732803092155,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1732803092149,
      "stop" : 1732803092150,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1732803092151,
      "stop" : 1732803092151,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1732803092152,
      "stop" : 1732803092152,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1732803093545,
      "stop" : 1732803120631,
      "duration" : 27086
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1732803092153,
      "stop" : 1732803092153,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1732803092152,
      "stop" : 1732803092152,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1732803092156,
      "stop" : 1732803092674,
      "duration" : 518
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1732803092151,
      "stop" : 1732803092151,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9f20af90>\nproject = <golioth.golioth.Project object at 0xffff9f37ea10>\ndevice = <golioth.golioth.Device object at 0xffff9f225f10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8f7675fd6d1f4270",
      "name" : "log",
      "source" : "8f7675fd6d1f4270.txt",
      "type" : "text/plain",
      "size" : 20681
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1732803215946,
      "stop" : 1732803216348,
      "duration" : 402
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1732803216354,
      "stop" : 1732803216354,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1732803215936,
      "stop" : 1732803215944,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1732803216350,
      "stop" : 1732803216352,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "1f417158e05f"
  }, {
    "name" : "thread",
    "value" : "847-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "34ad15d24f3ee9b2",
      "status" : "passed",
      "time" : {
        "start" : 1732731082788,
        "stop" : 1732731098313,
        "duration" : 15525
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 38,
        "unknown" : 0,
        "total" : 47
      },
      "items" : [ {
        "uid" : "5555252f2a4f0a0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/5555252f2a4f0a0",
        "status" : "passed",
        "time" : {
          "start" : 1732751371969,
          "stop" : 1732751384779,
          "duration" : 12810
        }
      }, {
        "uid" : "78150d5d4472be11",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/78150d5d4472be11",
        "status" : "passed",
        "time" : {
          "start" : 1732731082788,
          "stop" : 1732731098313,
          "duration" : 15525
        }
      }, {
        "uid" : "b7f6f9f521c60b2d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/b7f6f9f521c60b2d",
        "status" : "passed",
        "time" : {
          "start" : 1732725507292,
          "stop" : 1732725529578,
          "duration" : 22286
        }
      }, {
        "uid" : "ea867ea2e38121d9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/ea867ea2e38121d9",
        "status" : "passed",
        "time" : {
          "start" : 1732633074392,
          "stop" : 1732633087259,
          "duration" : 12867
        }
      }, {
        "uid" : "f6b29405a2ac69e0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/f6b29405a2ac69e0",
        "status" : "passed",
        "time" : {
          "start" : 1732633074392,
          "stop" : 1732633087259,
          "duration" : 12867
        }
      }, {
        "uid" : "67adc2d9acc5d3c7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/67adc2d9acc5d3c7",
        "status" : "passed",
        "time" : {
          "start" : 1732564221576,
          "stop" : 1732564236707,
          "duration" : 15131
        }
      }, {
        "uid" : "63d22186b32dbbb7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/63d22186b32dbbb7",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732562072458,
          "stop" : 1732562166461,
          "duration" : 94003
        }
      }, {
        "uid" : "7c82d2919a624bc7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/7c82d2919a624bc7",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732556312786,
          "stop" : 1732556406773,
          "duration" : 93987
        }
      }, {
        "uid" : "ff5821cdc008b2f1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/ff5821cdc008b2f1",
        "status" : "passed",
        "time" : {
          "start" : 1732550141141,
          "stop" : 1732550154044,
          "duration" : 12903
        }
      }, {
        "uid" : "e634b82e8b3c05d0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/e634b82e8b3c05d0",
        "status" : "passed",
        "time" : {
          "start" : 1732467743322,
          "stop" : 1732467770859,
          "duration" : 27537
        }
      }, {
        "uid" : "1e71725feb274659",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/1e71725feb274659",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732408825668,
          "stop" : 1732408919614,
          "duration" : 93946
        }
      }, {
        "uid" : "f49a5cb6a980413e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/f49a5cb6a980413e",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732318623890,
          "stop" : 1732318717886,
          "duration" : 93996
        }
      }, {
        "uid" : "bc7e2ed17ef95c9f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/bc7e2ed17ef95c9f",
        "status" : "passed",
        "time" : {
          "start" : 1732314688207,
          "stop" : 1732314710160,
          "duration" : 21953
        }
      }, {
        "uid" : "f213a3875cfab63",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/f213a3875cfab63",
        "status" : "passed",
        "time" : {
          "start" : 1732296936921,
          "stop" : 1732296950187,
          "duration" : 13266
        }
      }, {
        "uid" : "cff24a8f982bd8d7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/cff24a8f982bd8d7",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732294178908,
          "stop" : 1732294272913,
          "duration" : 94005
        }
      }, {
        "uid" : "a8579ddfc775fb71",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1816//#testresult/a8579ddfc775fb71",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1732221696579,
          "stop" : 1732221696579,
          "duration" : 0
        }
      }, {
        "uid" : "e33395d9901a2c2d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1792//#testresult/e33395d9901a2c2d",
        "status" : "passed",
        "time" : {
          "start" : 1732136615485,
          "stop" : 1732136702700,
          "duration" : 87215
        }
      }, {
        "uid" : "6e87218001874bd6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1791//#testresult/6e87218001874bd6",
        "status" : "passed",
        "time" : {
          "start" : 1732128415788,
          "stop" : 1732128427229,
          "duration" : 11441
        }
      }, {
        "uid" : "78acb4d3e269b2eb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1790//#testresult/78acb4d3e269b2eb",
        "status" : "passed",
        "time" : {
          "start" : 1732127147604,
          "stop" : 1732127172397,
          "duration" : 24793
        }
      }, {
        "uid" : "a4c9050c8f41de57",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1787//#testresult/a4c9050c8f41de57",
        "status" : "passed",
        "time" : {
          "start" : 1732050237431,
          "stop" : 1732050269317,
          "duration" : 31886
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "9ddf6f5f3a504154.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}