{
  "uid" : "cfb51afc14e2d6e9",
  "name" : "test_fw_update",
  "fullName" : "examples.esp_idf.fw_update.pytest.test_sample#test_fw_update",
  "historyId" : "48d0816a206ae6718f292d04b6749e18",
  "time" : {
    "start" : 1732802171881,
    "stop" : 1732802742285,
    "duration" : 570404
  },
  "status" : "failed",
  "statusMessage" : "Failed: Timeout >600.0s",
  "statusTrace" : "pyfuncitem = <Function test_fw_update>\n\n    @pytest.hookimpl(tryfirst=True)\n    def pytest_pyfunc_call(pyfuncitem: Any) -> bool | None:\n        def run_with_hypothesis(**kwargs: Any) -> None:\n            with get_runner(backend_name, backend_options) as runner:\n                runner.run_test(original_func, kwargs)\n    \n        backend = pyfuncitem.funcargs.get(\"anyio_backend\")\n        if backend:\n            backend_name, backend_options = extract_backend_and_options(backend)\n    \n            if hasattr(pyfuncitem.obj, \"hypothesis\"):\n                # Wrap the inner test function unless it's already wrapped\n                original_func = pyfuncitem.obj.hypothesis.inner_test\n                if original_func.__qualname__ != run_with_hypothesis.__qualname__:\n                    if iscoroutinefunction(original_func):\n                        pyfuncitem.obj.hypothesis.inner_test = run_with_hypothesis\n    \n                return None\n    \n            if iscoroutinefunction(pyfuncitem.obj):\n                funcargs = pyfuncitem.funcargs\n                testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n                with get_runner(backend_name, backend_options) as runner:\n                    try:\n>                       runner.run_test(pyfuncitem.obj, testargs)\n\n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:951: in run_test\n    self._call_in_runner_task(test_func, **kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:919: in _call_in_runner_task\n    self._call_queue.get()()\n/usr/lib/python3.11/queue.py:171: in get\n    self.not_empty.wait()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Condition(<unlocked _thread.lock object at 0xffff94ba0340>, 0)>\ntimeout = None\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n    \n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n    \n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n    \n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n    \n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n    \n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n>               waiter.acquire()\nE               Failed: Timeout >600.0s\n\n/usr/lib/python3.11/threading.py:320: Failed",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "bmp_port",
    "time" : {
      "start" : 1732802142304,
      "stop" : 1732802142312,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "board",
    "time" : {
      "start" : 1732802142315,
      "stop" : 1732802167848,
      "duration" : 25533
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1732802142270,
      "stop" : 1732802142270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "blueprint_name",
    "time" : {
      "start" : 1732802142315,
      "stop" : 1732802142315,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "baud",
    "time" : {
      "start" : 1732802142301,
      "stop" : 1732802142302,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fw_info",
    "time" : {
      "start" : 1732802142271,
      "stop" : 1732802142300,
      "duration" : 29
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "release",
    "time" : {
      "start" : 1732802171449,
      "stop" : 1732802171877,
      "duration" : 428
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "port",
    "time" : {
      "start" : 1732802142301,
      "stop" : 1732802142301,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1732802142313,
      "stop" : 1732802142313,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "artifact",
    "time" : {
      "start" : 1732802169758,
      "stop" : 1732802170166,
      "duration" : 408
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1732802142302,
      "stop" : 1732802142303,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "blueprint_id",
    "time" : {
      "start" : 1732802169359,
      "stop" : 1732802169757,
      "duration" : 398
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fw_image",
    "time" : {
      "start" : 1732802142303,
      "stop" : 1732802142303,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1732802142314,
      "stop" : 1732802142314,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1732802168444,
      "stop" : 1732802169358,
      "duration" : 914
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "board_name",
    "time" : {
      "start" : 1732802142300,
      "stop" : 1732802142301,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "serial_number",
    "time" : {
      "start" : 1732802142303,
      "stop" : 1732802142304,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1732802142314,
      "stop" : 1732802142314,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1732802167850,
      "stop" : 1732802168443,
      "duration" : 593
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tag",
    "time" : {
      "start" : 1732802170166,
      "stop" : 1732802171448,
      "duration" : 1282
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1732802142302,
      "stop" : 1732802142302,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: Timeout >600.0s",
    "statusTrace" : "pyfuncitem = <Function test_fw_update>\n\n    @pytest.hookimpl(tryfirst=True)\n    def pytest_pyfunc_call(pyfuncitem: Any) -> bool | None:\n        def run_with_hypothesis(**kwargs: Any) -> None:\n            with get_runner(backend_name, backend_options) as runner:\n                runner.run_test(original_func, kwargs)\n    \n        backend = pyfuncitem.funcargs.get(\"anyio_backend\")\n        if backend:\n            backend_name, backend_options = extract_backend_and_options(backend)\n    \n            if hasattr(pyfuncitem.obj, \"hypothesis\"):\n                # Wrap the inner test function unless it's already wrapped\n                original_func = pyfuncitem.obj.hypothesis.inner_test\n                if original_func.__qualname__ != run_with_hypothesis.__qualname__:\n                    if iscoroutinefunction(original_func):\n                        pyfuncitem.obj.hypothesis.inner_test = run_with_hypothesis\n    \n                return None\n    \n            if iscoroutinefunction(pyfuncitem.obj):\n                funcargs = pyfuncitem.funcargs\n                testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n                with get_runner(backend_name, backend_options) as runner:\n                    try:\n>                       runner.run_test(pyfuncitem.obj, testargs)\n\n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:951: in run_test\n    self._call_in_runner_task(test_func, **kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:919: in _call_in_runner_task\n    self._call_queue.get()()\n/usr/lib/python3.11/queue.py:171: in get\n    self.not_empty.wait()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Condition(<unlocked _thread.lock object at 0xffff94ba0340>, 0)>\ntimeout = None\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n    \n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n    \n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n    \n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n    \n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n    \n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n>               waiter.acquire()\nE               Failed: Timeout >600.0s\n\n/usr/lib/python3.11/threading.py:320: Failed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ebf5ab0031b32411",
      "name" : "stdout",
      "source" : "ebf5ab0031b32411.txt",
      "type" : "text/plain",
      "size" : 84406
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "board::0",
    "time" : {
      "start" : 1732802757575,
      "stop" : 1732802757580,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fw_info::0",
    "time" : {
      "start" : 1732802757631,
      "stop" : 1732802757634,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "release::0",
    "time" : {
      "start" : 1732802742745,
      "stop" : 1732802756337,
      "duration" : 13592
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "artifact::0",
    "time" : {
      "start" : 1732802757170,
      "stop" : 1732802757171,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "blueprint_id::0",
    "time" : {
      "start" : 1732802757173,
      "stop" : 1732802757173,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1732802757175,
      "stop" : 1732802757570,
      "duration" : 395
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1732802757573,
      "stop" : 1732802757573,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tag::0",
    "time" : {
      "start" : 1732802756339,
      "stop" : 1732802757168,
      "duration" : 829
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32s3_devkitc_espidf"
  }, {
    "name" : "tag",
    "value" : "esp-idf"
  }, {
    "name" : "parentSuite",
    "value" : "sample.esp-idf.esp32s3_devkitc_espidf"
  }, {
    "name" : "tag",
    "value" : "jons_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "dfb39a6ab35e"
  }, {
    "name" : "thread",
    "value" : "282-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "examples.esp_idf.fw_update.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32s3_devkitc_espidf'"
  }, {
    "name" : "platform_name",
    "value" : "'esp-idf'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "7ae43d33c6c3a9f4",
      "status" : "passed",
      "time" : {
        "start" : 1732729216265,
        "stop" : 1732729327775,
        "duration" : 111510
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 93,
        "unknown" : 0,
        "total" : 99
      },
      "items" : [ {
        "uid" : "8940f88cc9bd56af",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/8940f88cc9bd56af",
        "status" : "passed",
        "time" : {
          "start" : 1732749740892,
          "stop" : 1732749853527,
          "duration" : 112635
        }
      }, {
        "uid" : "6586c67918290c46",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/6586c67918290c46",
        "status" : "passed",
        "time" : {
          "start" : 1732729216265,
          "stop" : 1732729327775,
          "duration" : 111510
        }
      }, {
        "uid" : "b3a9b8e46dc6d65a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/b3a9b8e46dc6d65a",
        "status" : "broken",
        "statusDetails" : "SystemExit: 2",
        "time" : {
          "start" : 1732723866323,
          "stop" : 1732723866323,
          "duration" : 0
        }
      }, {
        "uid" : "b49d68bdb1714558",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/b49d68bdb1714558",
        "status" : "passed",
        "time" : {
          "start" : 1732639654497,
          "stop" : 1732640028914,
          "duration" : 374417
        }
      }, {
        "uid" : "59edd2f3233c314",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/59edd2f3233c314",
        "status" : "passed",
        "time" : {
          "start" : 1732563615502,
          "stop" : 1732563901536,
          "duration" : 286034
        }
      }, {
        "uid" : "dd9d2a8eea801c09",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/dd9d2a8eea801c09",
        "status" : "passed",
        "time" : {
          "start" : 1732560093285,
          "stop" : 1732560203180,
          "duration" : 109895
        }
      }, {
        "uid" : "4d8da28464c5dc85",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/4d8da28464c5dc85",
        "status" : "passed",
        "time" : {
          "start" : 1732554437014,
          "stop" : 1732554548836,
          "duration" : 111822
        }
      }, {
        "uid" : "e93b456b68d8356c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/e93b456b68d8356c",
        "status" : "passed",
        "time" : {
          "start" : 1732508914666,
          "stop" : 1732509233101,
          "duration" : 318435
        }
      }, {
        "uid" : "8aed1cdb77d6ea50",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/8aed1cdb77d6ea50",
        "status" : "passed",
        "time" : {
          "start" : 1732508914666,
          "stop" : 1732509233101,
          "duration" : 318435
        }
      }, {
        "uid" : "e29986bb100071d5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/e29986bb100071d5",
        "status" : "passed",
        "time" : {
          "start" : 1732317059436,
          "stop" : 1732317171446,
          "duration" : 112010
        }
      }, {
        "uid" : "ba098dcf92ca5f93",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/ba098dcf92ca5f93",
        "status" : "passed",
        "time" : {
          "start" : 1732317059436,
          "stop" : 1732317171446,
          "duration" : 112010
        }
      }, {
        "uid" : "ccc2557d0e35862d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/ccc2557d0e35862d",
        "status" : "passed",
        "time" : {
          "start" : 1732317059436,
          "stop" : 1732317171446,
          "duration" : 112010
        }
      }, {
        "uid" : "a7caec7c22207229",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/a7caec7c22207229",
        "status" : "failed",
        "statusDetails" : "Failed: Timeout >600.0s",
        "time" : {
          "start" : 1732312384140,
          "stop" : 1732312954743,
          "duration" : 570603
        }
      }, {
        "uid" : "1c84f0a8ba587f2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1832//#testresult/1c84f0a8ba587f2",
        "status" : "passed",
        "time" : {
          "start" : 1732301961871,
          "stop" : 1732302077710,
          "duration" : 115839
        }
      }, {
        "uid" : "aa39e2262aeba2d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1832//#testresult/aa39e2262aeba2d",
        "status" : "passed",
        "time" : {
          "start" : 1732301961871,
          "stop" : 1732302077710,
          "duration" : 115839
        }
      }, {
        "uid" : "826a0d4fd0ecdddc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1832//#testresult/826a0d4fd0ecdddc",
        "status" : "passed",
        "time" : {
          "start" : 1732301961871,
          "stop" : 1732302077710,
          "duration" : 115839
        }
      }, {
        "uid" : "69c1ca31b3723d56",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/69c1ca31b3723d56",
        "status" : "passed",
        "time" : {
          "start" : 1732292432084,
          "stop" : 1732292733287,
          "duration" : 301203
        }
      }, {
        "uid" : "ec8dbc0e9f3c6fd4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1817//#testresult/ec8dbc0e9f3c6fd4",
        "status" : "broken",
        "statusDetails" : "trio.TooSlowError",
        "time" : {
          "start" : 1732229756521,
          "stop" : 1732229860911,
          "duration" : 104390
        }
      }, {
        "uid" : "993eebe41c5fe827",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/993eebe41c5fe827",
        "status" : "passed",
        "time" : {
          "start" : 1732292432084,
          "stop" : 1732292733287,
          "duration" : 301203
        }
      }, {
        "uid" : "d7aa849250934eeb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1818//#testresult/d7aa849250934eeb",
        "status" : "passed",
        "time" : {
          "start" : 1732228317448,
          "stop" : 1732228621525,
          "duration" : 304077
        }
      } ]
    },
    "tags" : [ "esp32s3_devkitc_espidf", "esp-idf", "jons_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')" ]
  },
  "source" : "cfb51afc14e2d6e9.json",
  "parameterValues" : [ "'esp32s3_devkitc_espidf'", "'esp-idf'" ]
}