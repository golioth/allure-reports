{
  "uid" : "2b500c5d8d20c657",
  "name" : "test_lightdb_set",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set",
  "historyId" : "795cf1865df9980166e83af7545b18f1",
  "time" : {
    "start" : 1732802799688,
    "stop" : 1732802892844,
    "duration" : 93156
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff838aba10>\ndevice = <golioth.golioth.Device object at 0xffff838c6750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "project",
    "time" : {
      "start" : 1732802770508,
      "stop" : 1732802770934,
      "duration" : 426
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1732802770504,
      "stop" : 1732802770506,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1732802770503,
      "stop" : 1732802770503,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1732802770503,
      "stop" : 1732802770503,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1732802798605,
      "stop" : 1732802799681,
      "duration" : 1076
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1732802771796,
      "stop" : 1732802798604,
      "duration" : 26808
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1732802770508,
      "stop" : 1732802770508,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1732802770507,
      "stop" : 1732802770507,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1732802770934,
      "stop" : 1732802771796,
      "duration" : 862
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1732802770502,
      "stop" : 1732802770502,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1732802770501,
      "stop" : 1732802770502,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1732802770504,
      "stop" : 1732802770504,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff838aba10>\ndevice = <golioth.golioth.Device object at 0xffff838c6750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "852dd7df621a5d46",
      "name" : "log",
      "source" : "852dd7df621a5d46.txt",
      "type" : "text/plain",
      "size" : 16962
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1732802893589,
      "stop" : 1732802893591,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1732802893596,
      "stop" : 1732802893596,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1732802893197,
      "stop" : 1732802893210,
      "duration" : 13
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1732802893212,
      "stop" : 1732802893587,
      "duration" : 375
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "1f417158e05f"
  }, {
    "name" : "thread",
    "value" : "700-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "d9ab45de54d1ed07",
      "status" : "broken",
      "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
      "time" : {
        "start" : 1732730898687,
        "stop" : 1732730944809,
        "duration" : 46122
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 10,
        "skipped" : 0,
        "passed" : 37,
        "unknown" : 0,
        "total" : 47
      },
      "items" : [ {
        "uid" : "9ae460b4dfae9751",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/9ae460b4dfae9751",
        "status" : "passed",
        "time" : {
          "start" : 1732751222336,
          "stop" : 1732751247133,
          "duration" : 24797
        }
      }, {
        "uid" : "e0b7d6ad84bf7ba9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/e0b7d6ad84bf7ba9",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732730898687,
          "stop" : 1732730944809,
          "duration" : 46122
        }
      }, {
        "uid" : "66a9c963a7a7b9d4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/66a9c963a7a7b9d4",
        "status" : "passed",
        "time" : {
          "start" : 1732725306897,
          "stop" : 1732725348979,
          "duration" : 42082
        }
      }, {
        "uid" : "4a36c6ddbbf30df2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/4a36c6ddbbf30df2",
        "status" : "passed",
        "time" : {
          "start" : 1732632921644,
          "stop" : 1732632947798,
          "duration" : 26154
        }
      }, {
        "uid" : "57044ac628372eb3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/57044ac628372eb3",
        "status" : "passed",
        "time" : {
          "start" : 1732632921644,
          "stop" : 1732632947798,
          "duration" : 26154
        }
      }, {
        "uid" : "ad7463f7c756a83b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/ad7463f7c756a83b",
        "status" : "passed",
        "time" : {
          "start" : 1732564053278,
          "stop" : 1732564094786,
          "duration" : 41508
        }
      }, {
        "uid" : "1c9a320ccc405215",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/1c9a320ccc405215",
        "status" : "passed",
        "time" : {
          "start" : 1732561868707,
          "stop" : 1732561910746,
          "duration" : 42039
        }
      }, {
        "uid" : "dc15a2524ff98505",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/dc15a2524ff98505",
        "status" : "passed",
        "time" : {
          "start" : 1732555982609,
          "stop" : 1732556025796,
          "duration" : 43187
        }
      }, {
        "uid" : "c1068cfca790aa26",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/c1068cfca790aa26",
        "status" : "passed",
        "time" : {
          "start" : 1732549921154,
          "stop" : 1732550015633,
          "duration" : 94479
        }
      }, {
        "uid" : "833995a39e213878",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/833995a39e213878",
        "status" : "passed",
        "time" : {
          "start" : 1732467560800,
          "stop" : 1732467599101,
          "duration" : 38301
        }
      }, {
        "uid" : "787653b52ebff6ba",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/787653b52ebff6ba",
        "status" : "passed",
        "time" : {
          "start" : 1732408629891,
          "stop" : 1732408676241,
          "duration" : 46350
        }
      }, {
        "uid" : "d19a3bf75d0d3702",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/d19a3bf75d0d3702",
        "status" : "passed",
        "time" : {
          "start" : 1732318358251,
          "stop" : 1732318397187,
          "duration" : 38936
        }
      }, {
        "uid" : "1a05514c8f94d3c8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/1a05514c8f94d3c8",
        "status" : "passed",
        "time" : {
          "start" : 1732314473179,
          "stop" : 1732314515415,
          "duration" : 42236
        }
      }, {
        "uid" : "421247feb3fc066",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/421247feb3fc066",
        "status" : "passed",
        "time" : {
          "start" : 1732296786867,
          "stop" : 1732296811518,
          "duration" : 24651
        }
      }, {
        "uid" : "267889af90c256fe",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/267889af90c256fe",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732293921151,
          "stop" : 1732294014381,
          "duration" : 93230
        }
      }, {
        "uid" : "a0eceb93c1f0803c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1816//#testresult/a0eceb93c1f0803c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1732221673962,
          "stop" : 1732221673962,
          "duration" : 0
        }
      }, {
        "uid" : "fe2b372dda11c350",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1792//#testresult/fe2b372dda11c350",
        "status" : "passed",
        "time" : {
          "start" : 1732136465784,
          "stop" : 1732136490173,
          "duration" : 24389
        }
      }, {
        "uid" : "6462acc874b13712",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1791//#testresult/6462acc874b13712",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732128196732,
          "stop" : 1732128289925,
          "duration" : 93193
        }
      }, {
        "uid" : "a35bad19d108d2df",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1790//#testresult/a35bad19d108d2df",
        "status" : "passed",
        "time" : {
          "start" : 1732126888721,
          "stop" : 1732126922094,
          "duration" : 33373
        }
      }, {
        "uid" : "dafb0d0dbaf10054",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1787//#testresult/dafb0d0dbaf10054",
        "status" : "passed",
        "time" : {
          "start" : 1732050056360,
          "stop" : 1732050093685,
          "duration" : 37325
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "2b500c5d8d20c657.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}