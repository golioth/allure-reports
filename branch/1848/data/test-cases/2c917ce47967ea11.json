{
  "uid" : "2c917ce47967ea11",
  "name" : "test_rpc",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc",
  "historyId" : "c4178e273bd3962d06b411c6f8e74f6b",
  "time" : {
    "start" : 1732802006006,
    "stop" : 1732802098814,
    "duration" : 92808
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff820bd590>\ndevice = <golioth.golioth.Device object at 0xffff81ed4150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device",
    "time" : {
      "start" : 1732801975281,
      "stop" : 1732801976104,
      "duration" : 823
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1732801974718,
      "stop" : 1732801975280,
      "duration" : 562
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1732801974717,
      "stop" : 1732801974717,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1732801974712,
      "stop" : 1732801974712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1732801974712,
      "stop" : 1732801974712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1732801976105,
      "stop" : 1732802004912,
      "duration" : 28807
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1732801974713,
      "stop" : 1732801974713,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1732802004912,
      "stop" : 1732802006003,
      "duration" : 1091
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1732801974718,
      "stop" : 1732801974718,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1732801974713,
      "stop" : 1732801974713,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1732801974714,
      "stop" : 1732801974716,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1732801974714,
      "stop" : 1732801974714,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff820bd590>\ndevice = <golioth.golioth.Device object at 0xffff81ed4150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1dad075677de5208",
      "name" : "log",
      "source" : "1dad075677de5208.txt",
      "type" : "text/plain",
      "size" : 15302
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1732802099342,
      "stop" : 1732802099724,
      "duration" : 382
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1732802099726,
      "stop" : 1732802099729,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1732802099192,
      "stop" : 1732802099340,
      "duration" : 148
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1732802099733,
      "stop" : 1732802099734,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "1f417158e05f"
  }, {
    "name" : "thread",
    "value" : "451-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "c15b235fbf7a6d",
      "status" : "passed",
      "time" : {
        "start" : 1732730206544,
        "stop" : 1732730230989,
        "duration" : 24445
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 38,
        "unknown" : 0,
        "total" : 47
      },
      "items" : [ {
        "uid" : "b87f8487828f615f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/b87f8487828f615f",
        "status" : "passed",
        "time" : {
          "start" : 1732750698177,
          "stop" : 1732750708698,
          "duration" : 10521
        }
      }, {
        "uid" : "249712596d6748f9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/249712596d6748f9",
        "status" : "passed",
        "time" : {
          "start" : 1732730206544,
          "stop" : 1732730230989,
          "duration" : 24445
        }
      }, {
        "uid" : "944fa46b8466e04b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/944fa46b8466e04b",
        "status" : "passed",
        "time" : {
          "start" : 1732724560536,
          "stop" : 1732724589521,
          "duration" : 28985
        }
      }, {
        "uid" : "5a092b6212fed352",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/5a092b6212fed352",
        "status" : "passed",
        "time" : {
          "start" : 1732632366660,
          "stop" : 1732632378054,
          "duration" : 11394
        }
      }, {
        "uid" : "d04d9beb86158e0d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/d04d9beb86158e0d",
        "status" : "passed",
        "time" : {
          "start" : 1732632366660,
          "stop" : 1732632378054,
          "duration" : 11394
        }
      }, {
        "uid" : "a8f0a9685f8e1d4d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/a8f0a9685f8e1d4d",
        "status" : "passed",
        "time" : {
          "start" : 1732563439789,
          "stop" : 1732563453213,
          "duration" : 13424
        }
      }, {
        "uid" : "48eea8ccdd9e6679",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/48eea8ccdd9e6679",
        "status" : "passed",
        "time" : {
          "start" : 1732561116787,
          "stop" : 1732561145242,
          "duration" : 28455
        }
      }, {
        "uid" : "977c67c10486c91c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/977c67c10486c91c",
        "status" : "passed",
        "time" : {
          "start" : 1732555332725,
          "stop" : 1732555352218,
          "duration" : 19493
        }
      }, {
        "uid" : "b79ef855f6041c96",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/b79ef855f6041c96",
        "status" : "passed",
        "time" : {
          "start" : 1732549372218,
          "stop" : 1732549384214,
          "duration" : 11996
        }
      }, {
        "uid" : "c4df09b56eacd12b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/c4df09b56eacd12b",
        "status" : "passed",
        "time" : {
          "start" : 1732466936027,
          "stop" : 1732466961828,
          "duration" : 25801
        }
      }, {
        "uid" : "a1a4de7c389ca043",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/a1a4de7c389ca043",
        "status" : "passed",
        "time" : {
          "start" : 1732408019166,
          "stop" : 1732408045463,
          "duration" : 26297
        }
      }, {
        "uid" : "4b5fe7e596a10062",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/4b5fe7e596a10062",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732317569239,
          "stop" : 1732317661885,
          "duration" : 92646
        }
      }, {
        "uid" : "c9f3eaf769441617",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/c9f3eaf769441617",
        "status" : "passed",
        "time" : {
          "start" : 1732313848924,
          "stop" : 1732313869758,
          "duration" : 20834
        }
      }, {
        "uid" : "8a45bbbedd9c0095",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/8a45bbbedd9c0095",
        "status" : "passed",
        "time" : {
          "start" : 1732296251206,
          "stop" : 1732296262424,
          "duration" : 11218
        }
      }, {
        "uid" : "b4e1069e408b5297",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/b4e1069e408b5297",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732293374101,
          "stop" : 1732293466918,
          "duration" : 92817
        }
      }, {
        "uid" : "a4b1b5f592169a5d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1816//#testresult/a4b1b5f592169a5d",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1732221639307,
          "stop" : 1732221639307,
          "duration" : 0
        }
      }, {
        "uid" : "dee884946152b1a0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1792//#testresult/dee884946152b1a0",
        "status" : "passed",
        "time" : {
          "start" : 1732135892119,
          "stop" : 1732135903074,
          "duration" : 10955
        }
      }, {
        "uid" : "a92662ad61775fd8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1791//#testresult/a92662ad61775fd8",
        "status" : "broken",
        "statusDetails" : "golioth.golioth.RPCTimeout: RPC timeout",
        "time" : {
          "start" : 1732127597586,
          "stop" : 1732127617541,
          "duration" : 19955
        }
      }, {
        "uid" : "d9e7860f96c18127",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1790//#testresult/d9e7860f96c18127",
        "status" : "passed",
        "time" : {
          "start" : 1732126520412,
          "stop" : 1732126548145,
          "duration" : 27733
        }
      }, {
        "uid" : "a637323eb903583d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1787//#testresult/a637323eb903583d",
        "status" : "passed",
        "time" : {
          "start" : 1732049437774,
          "stop" : 1732049467716,
          "duration" : 29942
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "2c917ce47967ea11.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}