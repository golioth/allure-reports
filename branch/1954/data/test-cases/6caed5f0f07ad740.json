{
  "uid" : "6caed5f0f07ad740",
  "name" : "test_lightdb_delete",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete",
  "historyId" : "f1e2c2234d7dcc518bcd25346bf33416",
  "time" : {
    "start" : 1734555668014,
    "stop" : 1734555761765,
    "duration" : 93751
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffad177310>\ndevice = <golioth.golioth.Device object at 0xffffad18e710>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "project",
    "time" : {
      "start" : 1734555638729,
      "stop" : 1734555639230,
      "duration" : 501
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734555666946,
      "stop" : 1734555668011,
      "duration" : 1065
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734555638722,
      "stop" : 1734555638722,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734555640076,
      "stop" : 1734555666946,
      "duration" : 26870
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734555638727,
      "stop" : 1734555638728,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734555639231,
      "stop" : 1734555640075,
      "duration" : 844
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734555638725,
      "stop" : 1734555638727,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734555638723,
      "stop" : 1734555638724,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734555638728,
      "stop" : 1734555638728,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734555638723,
      "stop" : 1734555638723,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734555638724,
      "stop" : 1734555638724,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734555638722,
      "stop" : 1734555638722,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffad177310>\ndevice = <golioth.golioth.Device object at 0xffffad18e710>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c533f78e0d9bacae",
      "name" : "log",
      "source" : "c533f78e0d9bacae.txt",
      "type" : "text/plain",
      "size" : 19879
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1734555762665,
      "stop" : 1734555762668,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734555762060,
      "stop" : 1734555762081,
      "duration" : 21
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734555762083,
      "stop" : 1734555762663,
      "duration" : 580
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734555762674,
      "stop" : 1734555762674,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "e6aca9891692"
  }, {
    "name" : "thread",
    "value" : "743-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 10,
        "skipped" : 0,
        "passed" : 24,
        "unknown" : 0,
        "total" : 34
      },
      "items" : [ {
        "uid" : "2d96dab954186f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1952/#testresult/2d96dab954186f",
        "status" : "passed",
        "time" : {
          "start" : 1734538629493,
          "stop" : 1734538646268,
          "duration" : 16775
        }
      }, {
        "uid" : "d922b3123e39335",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/d922b3123e39335",
        "status" : "passed",
        "time" : {
          "start" : 1734465979480,
          "stop" : 1734466007697,
          "duration" : 28217
        }
      }, {
        "uid" : "9473e62dd9b85b83",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/9473e62dd9b85b83",
        "status" : "passed",
        "time" : {
          "start" : 1734459747074,
          "stop" : 1734459763626,
          "duration" : 16552
        }
      }, {
        "uid" : "e3e51b8b7c61ab9c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/e3e51b8b7c61ab9c",
        "status" : "passed",
        "time" : {
          "start" : 1734459747074,
          "stop" : 1734459763626,
          "duration" : 16552
        }
      }, {
        "uid" : "62bb09999cf6f4b3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1947/#testresult/62bb09999cf6f4b3",
        "status" : "passed",
        "time" : {
          "start" : 1734454733862,
          "stop" : 1734454764736,
          "duration" : 30874
        }
      }, {
        "uid" : "43f142c10e1479f5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1945/#testresult/43f142c10e1479f5",
        "status" : "passed",
        "time" : {
          "start" : 1734448860779,
          "stop" : 1734448886031,
          "duration" : 25252
        }
      }, {
        "uid" : "c5d1452476426b71",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/c5d1452476426b71",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734413837841,
          "stop" : 1734413931430,
          "duration" : 93589
        }
      }, {
        "uid" : "f2fa160c561cc11",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/f2fa160c561cc11",
        "status" : "passed",
        "time" : {
          "start" : 1734380301336,
          "stop" : 1734380317510,
          "duration" : 16174
        }
      }, {
        "uid" : "e386d6af748d60dd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/40/#testresult/e386d6af748d60dd",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734238034271,
          "stop" : 1734238034271,
          "duration" : 0
        }
      }, {
        "uid" : "e59fab9410648c92",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/e59fab9410648c92",
        "status" : "passed",
        "time" : {
          "start" : 1734129996253,
          "stop" : 1734130012620,
          "duration" : 16367
        }
      }, {
        "uid" : "4a3d14713162eaa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/4a3d14713162eaa",
        "status" : "passed",
        "time" : {
          "start" : 1734050263304,
          "stop" : 1734050295204,
          "duration" : 31900
        }
      }, {
        "uid" : "756d2c7a64f0685e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/756d2c7a64f0685e",
        "status" : "passed",
        "time" : {
          "start" : 1734046471660,
          "stop" : 1734046501080,
          "duration" : 29420
        }
      }, {
        "uid" : "98e3d52a807cbaca",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/98e3d52a807cbaca",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734035181985,
          "stop" : 1734035181985,
          "duration" : 0
        }
      }, {
        "uid" : "9370eaa6b5158dce",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/9370eaa6b5158dce",
        "status" : "passed",
        "time" : {
          "start" : 1734031218422,
          "stop" : 1734031248303,
          "duration" : 29881
        }
      }, {
        "uid" : "17c5c0cd589c7d26",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/17c5c0cd589c7d26",
        "status" : "passed",
        "time" : {
          "start" : 1734027376528,
          "stop" : 1734027408626,
          "duration" : 32098
        }
      }, {
        "uid" : "1e3bd4f04e516ea0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/1e3bd4f04e516ea0",
        "status" : "passed",
        "time" : {
          "start" : 1734026597128,
          "stop" : 1734026689512,
          "duration" : 92384
        }
      }, {
        "uid" : "7fcd8799bd87c5f6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/7fcd8799bd87c5f6",
        "status" : "passed",
        "time" : {
          "start" : 1733947921385,
          "stop" : 1733948013053,
          "duration" : 91668
        }
      }, {
        "uid" : "dc433074d5a1b778",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/dc433074d5a1b778",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733963062104,
          "stop" : 1733963155578,
          "duration" : 93474
        }
      }, {
        "uid" : "e9a83463c6a817eb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/e9a83463c6a817eb",
        "status" : "passed",
        "time" : {
          "start" : 1733959666316,
          "stop" : 1733959749303,
          "duration" : 82987
        }
      }, {
        "uid" : "904f999db2e8be97",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/904f999db2e8be97",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733954912912,
          "stop" : 1733954912912,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "6caed5f0f07ad740.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}