{"uid":"188500fa6dca5642","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"c4178e273bd3962d06b411c6f8e74f6b","time":{"start":1731696938840,"stop":1731697031723,"duration":92883},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3986710>\ndevice = <golioth.golioth.Device object at 0xffffa39e7250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731696908771,"stop":1731696908771,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"wifi_psk","time":{"start":1731696908772,"stop":1731696908772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"wifi_ssid","time":{"start":1731696908772,"stop":1731696908772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"twister_harness_config","time":{"start":1731696908773,"stop":1731696908774,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_name","time":{"start":1731696908773,"stop":1731696908773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_object","time":{"start":1731696908774,"stop":1731696908776,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_url","time":{"start":1731696908777,"stop":1731696908777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_key","time":{"start":1731696908777,"stop":1731696908777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project","time":{"start":1731696908778,"stop":1731696909313,"duration":535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device","time":{"start":1731696909313,"stop":1731696910294,"duration":981},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"dut","time":{"start":1731696910295,"stop":1731696937753,"duration":27458},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"shell","time":{"start":1731696937754,"stop":1731696938835,"duration":1081},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3986710>\ndevice = <golioth.golioth.Device object at 0xffffa39e7250>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"423724dbc89d09a4","name":"log","source":"423724dbc89d09a4.txt","type":"text/plain","size":14168}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":1},"afterStages":[{"name":"dut::0","time":{"start":1731697032048,"stop":1731697032090,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device::0","time":{"start":1731697032092,"stop":1731697032463,"duration":371},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project::0","time":{"start":1731697032465,"stop":1731697032468,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_object::0","time":{"start":1731697032472,"stop":1731697032473,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57d0b2e066f4"},{"name":"thread","value":"345-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":10,"unknown":0,"total":14},"items":[{"uid":"229748d95d7cf093","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/229748d95d7cf093","status":"passed","time":{"start":1731614345066,"stop":1731614358289,"duration":13223}},{"uid":"3731313dbe1fa829","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/3731313dbe1fa829","status":"passed","time":{"start":1731596724782,"stop":1731596736654,"duration":11872}},{"uid":"df1acf31d6fe57e2","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/df1acf31d6fe57e2","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1731549312536,"stop":1731549336270,"duration":23734}},{"uid":"8698fa334b95383f","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/8698fa334b95383f","status":"passed","time":{"start":1731544131088,"stop":1731544143100,"duration":12012}},{"uid":"6744aedb3cd5a595","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/6744aedb3cd5a595","status":"passed","time":{"start":1731541446972,"stop":1731541458525,"duration":11553}},{"uid":"2c89fbec04941a7a","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/2c89fbec04941a7a","status":"passed","time":{"start":1731540040752,"stop":1731540078103,"duration":37351}},{"uid":"9e98310181e3cb03","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/9e98310181e3cb03","status":"passed","time":{"start":1731528033666,"stop":1731528060705,"duration":27039}},{"uid":"35e52f163c3ea203","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/35e52f163c3ea203","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731522926690,"stop":1731523019492,"duration":92802}},{"uid":"a2a78e6563d4bc5f","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/a2a78e6563d4bc5f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731522926690,"stop":1731523019492,"duration":92802}},{"uid":"765c23b08ee3a3ce","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/765c23b08ee3a3ce","status":"passed","time":{"start":1731520754707,"stop":1731520780036,"duration":25329}},{"uid":"200e0e9fe85a2c9f","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/200e0e9fe85a2c9f","status":"passed","time":{"start":1731428867286,"stop":1731428879222,"duration":11936}},{"uid":"135627ea32d666bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/135627ea32d666bd","status":"passed","time":{"start":1731105118116,"stop":1731105129593,"duration":11477}},{"uid":"43e73f53b9fc06b2","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/43e73f53b9fc06b2","status":"passed","time":{"start":1731099378048,"stop":1731099410917,"duration":32869}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"188500fa6dca5642.json","parameterValues":["'nrf9160dk'","'zephyr'"]}