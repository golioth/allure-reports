{"uid":"d4aca612d2c4b9d7","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"466fcb31cd63d28758a28daeb9320ffb","time":{"start":1731695095402,"stop":1731695188550,"duration":93148},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3ee7850>\ndevice = <golioth.golioth.Device object at 0xffffa3edd8d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731695086623,"stop":1731695086623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"wifi_psk","time":{"start":1731695086624,"stop":1731695086624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"wifi_ssid","time":{"start":1731695086624,"stop":1731695086624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"twister_harness_config","time":{"start":1731695086625,"stop":1731695086626,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_name","time":{"start":1731695086625,"stop":1731695086625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_object","time":{"start":1731695086626,"stop":1731695086628,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_url","time":{"start":1731695086629,"stop":1731695086629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_key","time":{"start":1731695086629,"stop":1731695086629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project","time":{"start":1731695086630,"stop":1731695087057,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device","time":{"start":1731695087057,"stop":1731695088071,"duration":1014},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"dut","time":{"start":1731695088072,"stop":1731695094850,"duration":6778},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"shell","time":{"start":1731695094851,"stop":1731695095399,"duration":548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa3ee7850>\ndevice = <golioth.golioth.Device object at 0xffffa3edd8d0>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"161e3a9fa518a1a2","name":"log","source":"161e3a9fa518a1a2.txt","type":"text/plain","size":16177}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":1},"afterStages":[{"name":"dut::0","time":{"start":1731695188833,"stop":1731695188871,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device::0","time":{"start":1731695188873,"stop":1731695189246,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project::0","time":{"start":1731695189248,"stop":1731695189250,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_object::0","time":{"start":1731695189255,"stop":1731695189256,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"bd414089bc65"},{"name":"thread","value":"464-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":18,"unknown":0,"total":21},"items":[{"uid":"8b9de50b208c71ff","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/8b9de50b208c71ff","status":"passed","time":{"start":1731622407791,"stop":1731622418562,"duration":10771}},{"uid":"36adb33438d495c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/36adb33438d495c5","status":"passed","time":{"start":1731622407791,"stop":1731622418562,"duration":10771}},{"uid":"565952ad95f4634a","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/565952ad95f4634a","status":"passed","time":{"start":1731622407791,"stop":1731622418562,"duration":10771}},{"uid":"96dd058d2889d1b0","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/96dd058d2889d1b0","status":"passed","time":{"start":1731616344180,"stop":1731616356003,"duration":11823}},{"uid":"180fbfdfd315c58c","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/180fbfdfd315c58c","status":"passed","time":{"start":1731613551999,"stop":1731613562629,"duration":10630}},{"uid":"b7bb53c1d9a218cd","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/b7bb53c1d9a218cd","status":"passed","time":{"start":1731610618063,"stop":1731610628735,"duration":10672}},{"uid":"91a5cb33a0c3d510","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/91a5cb33a0c3d510","status":"passed","time":{"start":1731596962573,"stop":1731596972533,"duration":9960}},{"uid":"df5e97f92b69cabd","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/df5e97f92b69cabd","status":"passed","time":{"start":1731548950440,"stop":1731548960974,"duration":10534}},{"uid":"381d9304b223b953","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/381d9304b223b953","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731563680011,"stop":1731563680011,"duration":0}},{"uid":"ae49639861df2daa","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/ae49639861df2daa","status":"passed","time":{"start":1731542670255,"stop":1731542681026,"duration":10771}},{"uid":"400b116c6db3201a","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/400b116c6db3201a","status":"passed","time":{"start":1731539565810,"stop":1731539576813,"duration":11003}},{"uid":"7c87184eb76172e9","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/7c87184eb76172e9","status":"passed","time":{"start":1731536370723,"stop":1731536381337,"duration":10614}},{"uid":"9efa39de3d925c6a","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/9efa39de3d925c6a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731535883411,"stop":1731535883411,"duration":0}},{"uid":"b54863fc64a9ecb6","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/b54863fc64a9ecb6","status":"passed","time":{"start":1731519687559,"stop":1731519698374,"duration":10815}},{"uid":"63b275b76ba83a91","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/63b275b76ba83a91","status":"passed","time":{"start":1731519687559,"stop":1731519698374,"duration":10815}},{"uid":"e7f0bceb5c4dcedc","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/e7f0bceb5c4dcedc","status":"passed","time":{"start":1731519687559,"stop":1731519698374,"duration":10815}},{"uid":"4dada3cc6ef459fb","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/4dada3cc6ef459fb","status":"passed","time":{"start":1731519687559,"stop":1731519698374,"duration":10815}},{"uid":"3b99421884aa4f9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/3b99421884aa4f9b","status":"passed","time":{"start":1731428418054,"stop":1731428429051,"duration":10997}},{"uid":"153bd46a4709b57a","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/153bd46a4709b57a","status":"passed","time":{"start":1731103882139,"stop":1731103891900,"duration":9761}},{"uid":"eb5a99c3705c26d1","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/eb5a99c3705c26d1","status":"passed","time":{"start":1731098746070,"stop":1731098755640,"duration":9570}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"d4aca612d2c4b9d7.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}