{"uid":"d1d06b8620cf3279","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1731697897870,"stop":1731697991819,"duration":93949},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb01edb50>\nproject = <golioth.golioth.Project object at 0xffffb0367690>\ndevice = <golioth.golioth.Device object at 0xffffb0200e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731697868701,"stop":1731697868702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"anyio_backend","time":{"start":1731697868701,"stop":1731697868701,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"wifi_psk","time":{"start":1731697868702,"stop":1731697868702,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_key","time":{"start":1731697868702,"stop":1731697868703,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_url","time":{"start":1731697868703,"stop":1731697868703,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"twister_harness_config","time":{"start":1731697868704,"stop":1731697868704,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_name","time":{"start":1731697868704,"stop":1731697868704,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_object","time":{"start":1731697868705,"stop":1731697868707,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project","time":{"start":1731697868707,"stop":1731697869101,"duration":394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device","time":{"start":1731697869102,"stop":1731697869932,"duration":830},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"dut","time":{"start":1731697869933,"stop":1731697896794,"duration":26861},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"shell","time":{"start":1731697896794,"stop":1731697897867,"duration":1073},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb01edb50>\nproject = <golioth.golioth.Project object at 0xffffb0367690>\ndevice = <golioth.golioth.Device object at 0xffffb0200e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"eeb4635dce02c218","name":"log","source":"eeb4635dce02c218.txt","type":"text/plain","size":20576}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":1},"afterStages":[{"name":"dut::0","time":{"start":1731697992022,"stop":1731697992035,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device::0","time":{"start":1731697992037,"stop":1731697992416,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project::0","time":{"start":1731697992419,"stop":1731697992421,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_object::0","time":{"start":1731697992423,"stop":1731697992423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57d0b2e066f4"},{"name":"thread","value":"719-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":13,"unknown":0,"total":14},"items":[{"uid":"7b9c994c33de50d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/7b9c994c33de50d3","status":"passed","time":{"start":1731615073184,"stop":1731615089985,"duration":16801}},{"uid":"e6378ae2367c8842","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/e6378ae2367c8842","status":"passed","time":{"start":1731597516504,"stop":1731597529091,"duration":12587}},{"uid":"27ba49ef0407468d","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/27ba49ef0407468d","status":"passed","time":{"start":1731550028880,"stop":1731550050257,"duration":21377}},{"uid":"38d61b16f48b2e7c","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/38d61b16f48b2e7c","status":"passed","time":{"start":1731544943828,"stop":1731544959067,"duration":15239}},{"uid":"764d89ac9a02daea","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/764d89ac9a02daea","status":"passed","time":{"start":1731542114308,"stop":1731542126861,"duration":12553}},{"uid":"1be1d4bb1e161a7a","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/1be1d4bb1e161a7a","status":"passed","time":{"start":1731541013036,"stop":1731541045391,"duration":32355}},{"uid":"5e8b89760512afbe","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/5e8b89760512afbe","status":"passed","time":{"start":1731528902355,"stop":1731528930851,"duration":28496}},{"uid":"358d391c82745f06","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/358d391c82745f06","status":"passed","time":{"start":1731523848747,"stop":1731523884482,"duration":35735}},{"uid":"7d2a4c948955abbe","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/7d2a4c948955abbe","status":"passed","time":{"start":1731523848747,"stop":1731523884482,"duration":35735}},{"uid":"5e7528d1934d8fb6","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/5e7528d1934d8fb6","status":"passed","time":{"start":1731521614303,"stop":1731521650431,"duration":36128}},{"uid":"28b83e47076dc02f","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/28b83e47076dc02f","status":"passed","time":{"start":1731429664703,"stop":1731429677904,"duration":13201}},{"uid":"7d68094f151a66ed","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/7d68094f151a66ed","status":"passed","time":{"start":1731105808553,"stop":1731105823868,"duration":15315}},{"uid":"e7e285e6e1c212f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/e7e285e6e1c212f5","status":"passed","time":{"start":1731100304358,"stop":1731100327249,"duration":22891}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d1d06b8620cf3279.json","parameterValues":["'nrf9160dk'","'zephyr'"]}