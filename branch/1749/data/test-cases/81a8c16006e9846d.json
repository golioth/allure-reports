{"uid":"81a8c16006e9846d","name":"test_hello","fullName":"examples.esp_idf.hello.pytest.test_sample#test_hello","historyId":"38bf6e633dc99475bab8d042bff56ad7","time":{"start":1731694922524,"stop":1731694945873,"duration":23349},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffadd95750>\ndevice = <golioth.golioth.Device object at 0xffffadd40490>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.datetime.utcnow()\n        await board.wait_for_regex_in_line('.*Sending hello! 3', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.datetime.utcnow()\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nexamples/esp_idf/hello/pytest/test_sample.py:42: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731694896606,"stop":1731694896606,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"board_name","time":{"start":1731694896607,"stop":1731694896607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"port","time":{"start":1731694896608,"stop":1731694896608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"baud","time":{"start":1731694896609,"stop":1731694896609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"wifi_ssid","time":{"start":1731694896609,"stop":1731694896610,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"wifi_psk","time":{"start":1731694896610,"stop":1731694896610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"serial_number","time":{"start":1731694896611,"stop":1731694896611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"fw_image","time":{"start":1731694896611,"stop":1731694896611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"bmp_port","time":{"start":1731694896612,"stop":1731694896612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device_name","time":{"start":1731694896612,"stop":1731694896612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_key","time":{"start":1731694896613,"stop":1731694896613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"api_url","time":{"start":1731694896613,"stop":1731694896613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"board","time":{"start":1731694896614,"stop":1731694920971,"duration":24357},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project","time":{"start":1731694920972,"stop":1731694921517,"duration":545},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"device","time":{"start":1731694921517,"stop":1731694922521,"duration":1004},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffadd95750>\ndevice = <golioth.golioth.Device object at 0xffffadd40490>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.datetime.utcnow()\n        await board.wait_for_regex_in_line('.*Sending hello! 3', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.datetime.utcnow()\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nexamples/esp_idf/hello/pytest/test_sample.py:42: AssertionError","steps":[],"attachments":[{"uid":"d29d878bc38ab49c","name":"stdout","source":"d29d878bc38ab49c.txt","type":"text/plain","size":8048}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":1},"afterStages":[{"name":"device::0","time":{"start":1731694945995,"stop":1731694946432,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"project::0","time":{"start":1731694946434,"stop":1731694946435,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"board::0","time":{"start":1731694946436,"stop":1731694946443,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8667cc5347a1"},{"name":"thread","value":"243-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":20,"unknown":0,"total":21},"items":[{"uid":"af93717b4dfb5252","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/af93717b4dfb5252","status":"passed","time":{"start":1731621979894,"stop":1731621999427,"duration":19533}},{"uid":"2c691256b0791b40","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/2c691256b0791b40","status":"passed","time":{"start":1731621979894,"stop":1731621999427,"duration":19533}},{"uid":"6ff2a3139ed50554","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/6ff2a3139ed50554","status":"passed","time":{"start":1731621979894,"stop":1731621999427,"duration":19533}},{"uid":"780eaafaf6305f28","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/780eaafaf6305f28","status":"passed","time":{"start":1731615611178,"stop":1731615630962,"duration":19784}},{"uid":"bd2845f547c85e0f","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/bd2845f547c85e0f","status":"passed","time":{"start":1731612702200,"stop":1731612721670,"duration":19470}},{"uid":"a6d6f95d74816d2f","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/a6d6f95d74816d2f","status":"passed","time":{"start":1731610770982,"stop":1731610790260,"duration":19278}},{"uid":"18a1d795c91d1556","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/18a1d795c91d1556","status":"passed","time":{"start":1731542547902,"stop":1731542567755,"duration":19853}},{"uid":"826d47e3df920553","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/826d47e3df920553","status":"passed","time":{"start":1731547941596,"stop":1731547961447,"duration":19851}},{"uid":"19bb4569d679873f","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/19bb4569d679873f","status":"passed","time":{"start":1731537937066,"stop":1731537956524,"duration":19458}},{"uid":"549fb1a3d980f875","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/549fb1a3d980f875","status":"passed","time":{"start":1731542547902,"stop":1731542567755,"duration":19853}},{"uid":"f8d7c5bef9df7e08","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/f8d7c5bef9df7e08","status":"passed","time":{"start":1731540077454,"stop":1731540097118,"duration":19664}},{"uid":"57c234ec0787affb","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/57c234ec0787affb","status":"passed","time":{"start":1731538389985,"stop":1731538408760,"duration":18775}},{"uid":"70b3f447d2ceb2b9","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/70b3f447d2ceb2b9","status":"passed","time":{"start":1731537937066,"stop":1731537956524,"duration":19458}},{"uid":"9333670ec5000a5c","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/9333670ec5000a5c","status":"passed","time":{"start":1731519677367,"stop":1731519697276,"duration":19909}},{"uid":"76653af2519593f7","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/76653af2519593f7","status":"passed","time":{"start":1731519677367,"stop":1731519697276,"duration":19909}},{"uid":"499a8807c45f9e31","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/499a8807c45f9e31","status":"passed","time":{"start":1731519677367,"stop":1731519697276,"duration":19909}},{"uid":"8ec661c5a5afdd96","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/8ec661c5a5afdd96","status":"passed","time":{"start":1731519677367,"stop":1731519697276,"duration":19909}},{"uid":"c202f29b834e8552","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/c202f29b834e8552","status":"passed","time":{"start":1731427457622,"stop":1731427476573,"duration":18951}},{"uid":"26183af8225e6147","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/26183af8225e6147","status":"passed","time":{"start":1731103699707,"stop":1731103718927,"duration":19220}},{"uid":"700b8b3e954917cb","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/700b8b3e954917cb","status":"passed","time":{"start":1731098334089,"stop":1731098356661,"duration":22572}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","jons_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')"]},"source":"81a8c16006e9846d.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}