{"uid":"774d96c8efda2037","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"760eff61a6b23948f80921df65cbf7f5","time":{"start":1731613600068,"stop":1731613627811,"duration":27743},"status":"failed","statusMessage":"AssertionError: assert 22 == 21.5","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b8a7290>\ndevice = <golioth.golioth.Device object at 0xffff8b894f10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 22 == 21.5\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731613590221,"stop":1731613590222,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731613590221,"stop":1731613590221,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731613590222,"stop":1731613590222,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731613590223,"stop":1731613590223,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731613590223,"stop":1731613590223,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731613590224,"stop":1731613590226,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731613590226,"stop":1731613590227,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731613590227,"stop":1731613590227,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731613590228,"stop":1731613590855,"duration":627},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731613590855,"stop":1731613591787,"duration":932},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731613591788,"stop":1731613599549,"duration":7761},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731613599550,"stop":1731613600065,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 22 == 21.5","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b8a7290>\ndevice = <golioth.golioth.Device object at 0xffff8b894f10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 22 == 21.5\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","steps":[],"attachments":[{"uid":"229b1b813b58c655","name":"log","source":"229b1b813b58c655.txt","type":"text/plain","size":16519}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731613628003,"stop":1731613628106,"duration":103},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731613628108,"stop":1731613628528,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731613628530,"stop":1731613628532,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731613628537,"stop":1731613628537,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"6ab0e1c1313b"},{"name":"thread","value":"494-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":13,"unknown":0,"total":16},"items":[{"uid":"dd7184e7594bb0e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/dd7184e7594bb0e3","status":"passed","time":{"start":1731610666189,"stop":1731610688376,"duration":22187}},{"uid":"2202d9f5b7da5dce","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/2202d9f5b7da5dce","status":"passed","time":{"start":1731597011343,"stop":1731597033546,"duration":22203}},{"uid":"28943d2bbb8c6828","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/28943d2bbb8c6828","status":"passed","time":{"start":1731548767578,"stop":1731548789974,"duration":22396}},{"uid":"da28df6b6bdf4199","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/da28df6b6bdf4199","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731563695361,"stop":1731563695361,"duration":0}},{"uid":"ac9b4773cd8553b0","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/ac9b4773cd8553b0","status":"passed","time":{"start":1731542719964,"stop":1731542743422,"duration":23458}},{"uid":"76a04a63dbd5422d","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/76a04a63dbd5422d","status":"passed","time":{"start":1731539613149,"stop":1731539637433,"duration":24284}},{"uid":"23b0df477423fd4c","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/23b0df477423fd4c","status":"passed","time":{"start":1731536418574,"stop":1731536440985,"duration":22411}},{"uid":"f1cf16e404367cc1","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/f1cf16e404367cc1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731535898824,"stop":1731535898824,"duration":0}},{"uid":"1fd9b4841690909f","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/1fd9b4841690909f","status":"passed","time":{"start":1731519735268,"stop":1731519880520,"duration":145252}},{"uid":"edf5399365cfba82","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/edf5399365cfba82","status":"passed","time":{"start":1731519735268,"stop":1731519880520,"duration":145252}},{"uid":"93defe43bd43f347","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/93defe43bd43f347","status":"passed","time":{"start":1731519735268,"stop":1731519880520,"duration":145252}},{"uid":"362aef17d95edf66","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/362aef17d95edf66","status":"passed","time":{"start":1731519735268,"stop":1731519880520,"duration":145252}},{"uid":"3e2249f593f7997d","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/3e2249f593f7997d","status":"passed","time":{"start":1731428468033,"stop":1731428490555,"duration":22522}},{"uid":"fe6386c855ecb18d","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/fe6386c855ecb18d","status":"passed","time":{"start":1731103930304,"stop":1731103953677,"duration":23373}},{"uid":"9f2b45e81ad76ec8","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/9f2b45e81ad76ec8","status":"passed","time":{"start":1731098883718,"stop":1731098914498,"duration":30780}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"774d96c8efda2037.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}