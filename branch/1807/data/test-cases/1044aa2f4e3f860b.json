{"uid":"1044aa2f4e3f860b","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"ddc2f31d085089b8b5f25dfb44556fd5","time":{"start":1732209248456,"stop":1732209268370,"duration":19914},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9352b690>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583850>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583110>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff935837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583210>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff93561050>\ndevice = <golioth.golioth.Device object at 0xffff935468d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9352b690>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583850>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583110>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff935837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583210>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732209237166,"stop":1732209237166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732209237167,"stop":1732209237167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732209237168,"stop":1732209237168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732209237168,"stop":1732209237168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732209237169,"stop":1732209237171,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732209237169,"stop":1732209237169,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732209237172,"stop":1732209237172,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732209237172,"stop":1732209237173,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732209237173,"stop":1732209238180,"duration":1007},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732209238180,"stop":1732209239975,"duration":1795},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732209239976,"stop":1732209247923,"duration":7947},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732209247923,"stop":1732209248454,"duration":531},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9352b690>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583850>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583110>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff935837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583210>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff93561050>\ndevice = <golioth.golioth.Device object at 0xffff935468d0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9352b690>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583850>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583110>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff935837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff93583210>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"1b04c82ecd59a25a","name":"log","source":"1b04c82ecd59a25a.txt","type":"text/plain","size":20721}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732209268553,"stop":1732209268756,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732209268758,"stop":1732209269198,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732209269200,"stop":1732209269202,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732209269207,"stop":1732209269207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ddd0f619197d"},{"name":"thread","value":"420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":10,"skipped":0,"passed":52,"unknown":0,"total":63},"items":[{"uid":"41bd74b3cde858f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/41bd74b3cde858f5","status":"passed","time":{"start":1732208440052,"stop":1732208459670,"duration":19618}},{"uid":"e7d9520ad404c3dd","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/e7d9520ad404c3dd","status":"passed","time":{"start":1732146315660,"stop":1732146339010,"duration":23350}},{"uid":"efa64eb382071c3","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/efa64eb382071c3","status":"passed","time":{"start":1732199421836,"stop":1732199441512,"duration":19676}},{"uid":"e5b379cf8b732d64","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/e5b379cf8b732d64","status":"passed","time":{"start":1732199174466,"stop":1732199193073,"duration":18607}},{"uid":"325a5c4e9d2b4812","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/325a5c4e9d2b4812","status":"passed","time":{"start":1732146315660,"stop":1732146339010,"duration":23350}},{"uid":"aefa699fb74bbc87","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/aefa699fb74bbc87","status":"passed","time":{"start":1732195836965,"stop":1732195856713,"duration":19748}},{"uid":"4803c7af2c8234f2","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/4803c7af2c8234f2","status":"passed","time":{"start":1732192737284,"stop":1732192759639,"duration":22355}},{"uid":"80d6a23ba9e4109d","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/80d6a23ba9e4109d","status":"passed","time":{"start":1732146315660,"stop":1732146339010,"duration":23350}},{"uid":"1ac2779abb6149da","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/1ac2779abb6149da","status":"passed","time":{"start":1732186787627,"stop":1732186802366,"duration":14739}},{"uid":"7f1461b4412318b2","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/7f1461b4412318b2","status":"passed","time":{"start":1732146315660,"stop":1732146339010,"duration":23350}},{"uid":"83b03e06340edb05","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/83b03e06340edb05","status":"passed","time":{"start":1732154043553,"stop":1732154063043,"duration":19490}},{"uid":"3976dd0ff67bf3d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/3976dd0ff67bf3d3","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1732147925381,"stop":1732147925381,"duration":0}},{"uid":"25c24546b81b972f","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/25c24546b81b972f","status":"passed","time":{"start":1732146315660,"stop":1732146339010,"duration":23350}},{"uid":"4b5dbd3cbc0ff757","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/4b5dbd3cbc0ff757","status":"passed","time":{"start":1732144548879,"stop":1732144568347,"duration":19468}},{"uid":"c50567d1a7b462f8","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/c50567d1a7b462f8","status":"passed","time":{"start":1732134384328,"stop":1732134402933,"duration":18605}},{"uid":"c3e73070110aa1d9","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/c3e73070110aa1d9","status":"passed","time":{"start":1732093780382,"stop":1732093800438,"duration":20056}},{"uid":"3d5a845879167952","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/3d5a845879167952","status":"passed","time":{"start":1732093780382,"stop":1732093800438,"duration":20056}},{"uid":"8045c3a5a33ecc01","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/8045c3a5a33ecc01","status":"passed","time":{"start":1732125773211,"stop":1732125792795,"duration":19584}},{"uid":"345a367cf80c12f","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/345a367cf80c12f","status":"passed","time":{"start":1732123721688,"stop":1732123741322,"duration":19634}},{"uid":"67d61dfde46a27a9","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/67d61dfde46a27a9","status":"passed","time":{"start":1732093780382,"stop":1732093800438,"duration":20056}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"1044aa2f4e3f860b.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}