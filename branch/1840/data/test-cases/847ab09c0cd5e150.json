{"uid":"847ab09c0cd5e150","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1732556662406,"stop":1732556775084,"duration":112678},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95500990>\ndevice = <golioth.golioth.Device object at 0xffff953929d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1732556633205,"stop":1732556633206,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1732556633205,"stop":1732556633205,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732556633206,"stop":1732556633207,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732556633206,"stop":1732556633206,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732556633207,"stop":1732556633207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732556633208,"stop":1732556633210,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732556633210,"stop":1732556633211,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732556633211,"stop":1732556633211,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732556633212,"stop":1732556633645,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732556633646,"stop":1732556634464,"duration":818},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732556634465,"stop":1732556661354,"duration":26889},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732556661355,"stop":1732556662403,"duration":1048},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95500990>\ndevice = <golioth.golioth.Device object at 0xffff953929d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"4a83f3f1002266bd","name":"log","source":"4a83f3f1002266bd.txt","type":"text/plain","size":14766}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732556775401,"stop":1732556775564,"duration":163},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732556775566,"stop":1732556775943,"duration":377},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732556775945,"stop":1732556775948,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732556775953,"stop":1732556775953,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"6ac357075f68"},{"name":"thread","value":"966-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ec9666504c943ac2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732556516395,"stop":1732556629188,"duration":112793}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":30,"unknown":0,"total":39},"items":[{"uid":"f97119777f32c94b","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/f97119777f32c94b","status":"passed","time":{"start":1732550372170,"stop":1732550399541,"duration":27371}},{"uid":"701a30ff1f4f9eea","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/701a30ff1f4f9eea","status":"passed","time":{"start":1732468140170,"stop":1732468184972,"duration":44802}},{"uid":"86a27bf58756dc59","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/86a27bf58756dc59","status":"passed","time":{"start":1732409352412,"stop":1732409389629,"duration":37217}},{"uid":"590c2280c3ffefc5","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/590c2280c3ffefc5","status":"passed","time":{"start":1732318969010,"stop":1732319010886,"duration":41876}},{"uid":"c5850e40e3534d67","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/c5850e40e3534d67","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732314894163,"stop":1732315006873,"duration":112710}},{"uid":"5a0ecccc447de31e","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/5a0ecccc447de31e","status":"passed","time":{"start":1732297098451,"stop":1732297123154,"duration":24703}},{"uid":"9165fe6b95a61502","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/9165fe6b95a61502","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732294672103,"stop":1732294784906,"duration":112803}},{"uid":"70d5a650b1519011","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/70d5a650b1519011","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221728731,"stop":1732221728731,"duration":0}},{"uid":"62bbaca671bf29f7","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/62bbaca671bf29f7","status":"passed","time":{"start":1732136920651,"stop":1732136945279,"duration":24628}},{"uid":"5467f42e7d3bdf11","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/5467f42e7d3bdf11","status":"passed","time":{"start":1732128640408,"stop":1732128665376,"duration":24968}},{"uid":"1d5896d08dc65657","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/1d5896d08dc65657","status":"passed","time":{"start":1732127526978,"stop":1732127568871,"duration":41893}},{"uid":"cecbebdb42cbea2a","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/cecbebdb42cbea2a","status":"passed","time":{"start":1732050518065,"stop":1732050559129,"duration":41064}},{"uid":"cf2e1398f80a0b82","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/cf2e1398f80a0b82","status":"passed","time":{"start":1732050518065,"stop":1732050559129,"duration":41064}},{"uid":"7a55c352fb8f37b1","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/7a55c352fb8f37b1","status":"passed","time":{"start":1732050518065,"stop":1732050559129,"duration":41064}},{"uid":"4595cf375029dd9","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/4595cf375029dd9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732034267804,"stop":1732034380530,"duration":112726}},{"uid":"f223556c3331130a","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/f223556c3331130a","status":"passed","time":{"start":1731972714769,"stop":1731972739592,"duration":24823}},{"uid":"1030cae5584af587","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/1030cae5584af587","status":"passed","time":{"start":1731964885012,"stop":1731964910994,"duration":25982}},{"uid":"e1ab44124f8534c2","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/e1ab44124f8534c2","status":"passed","time":{"start":1731960165333,"stop":1731960206678,"duration":41345}},{"uid":"22bd6771362a7750","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/22bd6771362a7750","status":"passed","time":{"start":1731957091228,"stop":1731957123404,"duration":32176}},{"uid":"bf7d56886f58a757","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/bf7d56886f58a757","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731908530671,"stop":1731908643421,"duration":112750}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"847ab09c0cd5e150.json","parameterValues":["'nrf9160dk'","'zephyr'"]}