{"uid":"5cd581f30e4ae9e8","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"f1e2c2234d7dcc518bcd25346bf33416","time":{"start":1732556058837,"stop":1732556152451,"duration":93614},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad3539d0>\ndevice = <golioth.golioth.Device object at 0xffffad36e950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732556029611,"stop":1732556029611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732556029611,"stop":1732556029612,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732556029612,"stop":1732556029612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732556029613,"stop":1732556029613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732556029613,"stop":1732556029613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732556029614,"stop":1732556029616,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732556029616,"stop":1732556029617,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732556029617,"stop":1732556029617,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732556029618,"stop":1732556030073,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732556030074,"stop":1732556030892,"duration":818},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732556030892,"stop":1732556057742,"duration":26850},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732556057743,"stop":1732556058830,"duration":1087},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad3539d0>\ndevice = <golioth.golioth.Device object at 0xffffad36e950>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a84a2c7226e8768b","name":"log","source":"a84a2c7226e8768b.txt","type":"text/plain","size":18823}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732556152719,"stop":1732556152768,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732556152770,"stop":1732556153179,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732556153181,"stop":1732556153183,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732556153188,"stop":1732556153188,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"6ac357075f68"},{"name":"thread","value":"718-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":36,"unknown":0,"total":39},"items":[{"uid":"b6ddc7857dd4c52a","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/b6ddc7857dd4c52a","status":"passed","time":{"start":1732550048340,"stop":1732550064989,"duration":16649}},{"uid":"c279b5c84eb33145","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/c279b5c84eb33145","status":"passed","time":{"start":1732467632290,"stop":1732467657331,"duration":25041}},{"uid":"ddc40c4a467c2525","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/ddc40c4a467c2525","status":"passed","time":{"start":1732408709275,"stop":1732408735836,"duration":26561}},{"uid":"7b4990c75a9af4f","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/7b4990c75a9af4f","status":"passed","time":{"start":1732318430388,"stop":1732318463274,"duration":32886}},{"uid":"9545bf93ce27a36c","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/9545bf93ce27a36c","status":"passed","time":{"start":1732314548814,"stop":1732314601388,"duration":52574}},{"uid":"c694c1fba80dd915","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/c694c1fba80dd915","status":"passed","time":{"start":1732296844499,"stop":1732296860348,"duration":15849}},{"uid":"23a198e662c9704","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/23a198e662c9704","status":"passed","time":{"start":1732294047983,"stop":1732294083543,"duration":35560}},{"uid":"e95503073a9662ae","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/e95503073a9662ae","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221681397,"stop":1732221681397,"duration":0}},{"uid":"4d97656b36efb448","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/4d97656b36efb448","status":"passed","time":{"start":1732136523129,"stop":1732136539279,"duration":16150}},{"uid":"1b6821e8b1fad652","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/1b6821e8b1fad652","status":"passed","time":{"start":1732128323241,"stop":1732128339339,"duration":16098}},{"uid":"f614fb641f985e8b","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/f614fb641f985e8b","status":"passed","time":{"start":1732126954660,"stop":1732126987538,"duration":32878}},{"uid":"fa4f4dd14381515d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/fa4f4dd14381515d","status":"passed","time":{"start":1732050126827,"stop":1732050151070,"duration":24243}},{"uid":"56917985e81423ed","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/56917985e81423ed","status":"passed","time":{"start":1732050126827,"stop":1732050151070,"duration":24243}},{"uid":"f08e53a229811c82","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/f08e53a229811c82","status":"passed","time":{"start":1732050126827,"stop":1732050151070,"duration":24243}},{"uid":"a41c4e09b5febde9","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/a41c4e09b5febde9","status":"passed","time":{"start":1732033865114,"stop":1732033895620,"duration":30506}},{"uid":"a1c2a60a94ca4f93","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/a1c2a60a94ca4f93","status":"passed","time":{"start":1731972442965,"stop":1731972460626,"duration":17661}},{"uid":"67452aba179089e9","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/67452aba179089e9","status":"passed","time":{"start":1731964686163,"stop":1731964703579,"duration":17416}},{"uid":"865863167cd4a6c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/865863167cd4a6c4","status":"passed","time":{"start":1731960090781,"stop":1731960131498,"duration":40717}},{"uid":"4078e4f14f618162","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/4078e4f14f618162","status":"passed","time":{"start":1731956676718,"stop":1731956713274,"duration":36556}},{"uid":"4dbf0fa44996e377","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/4dbf0fa44996e377","status":"passed","time":{"start":1731908055143,"stop":1731908086341,"duration":31198}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"5cd581f30e4ae9e8.json","parameterValues":["'nrf9160dk'","'zephyr'"]}