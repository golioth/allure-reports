{
  "uid" : "b8ea2efdd19d8d56",
  "name" : "test_lightdb_set",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set",
  "historyId" : "795cf1865df9980166e83af7545b18f1",
  "time" : {
    "start" : 1734448734189,
    "stop" : 1734448827333,
    "duration" : 93144
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7d8ff9d0>\ndevice = <golioth.golioth.Device object at 0xffff7d914750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1734448704397,
      "stop" : 1734448704397,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734448704394,
      "stop" : 1734448704396,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734448704801,
      "stop" : 1734448705597,
      "duration" : 796
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734448704391,
      "stop" : 1734448704391,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734448704393,
      "stop" : 1734448704394,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734448704397,
      "stop" : 1734448704397,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734448704392,
      "stop" : 1734448704392,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734448705598,
      "stop" : 1734448733087,
      "duration" : 27489
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734448704398,
      "stop" : 1734448704801,
      "duration" : 403
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734448704393,
      "stop" : 1734448704393,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734448704392,
      "stop" : 1734448704392,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734448733087,
      "stop" : 1734448734186,
      "duration" : 1099
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7d8ff9d0>\ndevice = <golioth.golioth.Device object at 0xffff7d914750>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "57d93f40a79638c0",
      "name" : "log",
      "source" : "57d93f40a79638c0.txt",
      "type" : "text/plain",
      "size" : 17990
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734448828099,
      "stop" : 1734448828099,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734448827706,
      "stop" : 1734448828090,
      "duration" : 384
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734448827658,
      "stop" : 1734448827704,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734448828092,
      "stop" : 1734448828094,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "013d1319f454"
  }, {
    "name" : "thread",
    "value" : "701-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 28
      },
      "items" : [ {
        "uid" : "a47a3b90fb5b3a77",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/a47a3b90fb5b3a77",
        "status" : "passed",
        "time" : {
          "start" : 1734413779063,
          "stop" : 1734413804720,
          "duration" : 25657
        }
      }, {
        "uid" : "b94cedb7db8b6076",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/b94cedb7db8b6076",
        "status" : "passed",
        "time" : {
          "start" : 1734380243923,
          "stop" : 1734380268581,
          "duration" : 24658
        }
      }, {
        "uid" : "e1070c4d79935582",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/40/#testresult/e1070c4d79935582",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734238026443,
          "stop" : 1734238026443,
          "duration" : 0
        }
      }, {
        "uid" : "fcf3d872a38bb1b4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/fcf3d872a38bb1b4",
        "status" : "passed",
        "time" : {
          "start" : 1734129934776,
          "stop" : 1734129963064,
          "duration" : 28288
        }
      }, {
        "uid" : "8201746f710c9e38",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/8201746f710c9e38",
        "status" : "passed",
        "time" : {
          "start" : 1734050194056,
          "stop" : 1734050229903,
          "duration" : 35847
        }
      }, {
        "uid" : "e04e222636c490ff",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/e04e222636c490ff",
        "status" : "passed",
        "time" : {
          "start" : 1734046395449,
          "stop" : 1734046438189,
          "duration" : 42740
        }
      }, {
        "uid" : "c793fbc25f5571c4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/c793fbc25f5571c4",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734035174248,
          "stop" : 1734035174248,
          "duration" : 0
        }
      }, {
        "uid" : "c6de637db2ce17ab",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/c6de637db2ce17ab",
        "status" : "passed",
        "time" : {
          "start" : 1734031143540,
          "stop" : 1734031185402,
          "duration" : 41862
        }
      }, {
        "uid" : "6287b4502009b300",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/6287b4502009b300",
        "status" : "passed",
        "time" : {
          "start" : 1734027297753,
          "stop" : 1734027343346,
          "duration" : 45593
        }
      }, {
        "uid" : "1ab26188090aeecb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/1ab26188090aeecb",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734026470782,
          "stop" : 1734026563970,
          "duration" : 93188
        }
      }, {
        "uid" : "d0ce92a020dad3de",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/d0ce92a020dad3de",
        "status" : "passed",
        "time" : {
          "start" : 1733947863437,
          "stop" : 1733947888569,
          "duration" : 25132
        }
      }, {
        "uid" : "ffb51d7775721154",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/ffb51d7775721154",
        "status" : "passed",
        "time" : {
          "start" : 1733962968754,
          "stop" : 1733963028959,
          "duration" : 60205
        }
      }, {
        "uid" : "208186f9049ed925",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/208186f9049ed925",
        "status" : "passed",
        "time" : {
          "start" : 1733959538166,
          "stop" : 1733959633729,
          "duration" : 95563
        }
      }, {
        "uid" : "35c7b417d727b0bd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/35c7b417d727b0bd",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733954901106,
          "stop" : 1733954901106,
          "duration" : 0
        }
      }, {
        "uid" : "d4ffbe9fe88d4156",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/d4ffbe9fe88d4156",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733951354202,
          "stop" : 1733951447285,
          "duration" : 93083
        }
      }, {
        "uid" : "a023195130cec07",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/a023195130cec07",
        "status" : "passed",
        "time" : {
          "start" : 1733951132556,
          "stop" : 1733951209149,
          "duration" : 76593
        }
      }, {
        "uid" : "ae3233b2b52bc805",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/ae3233b2b52bc805",
        "status" : "passed",
        "time" : {
          "start" : 1733948827865,
          "stop" : 1733948909927,
          "duration" : 82062
        }
      }, {
        "uid" : "8744328a66bbb4ca",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/8744328a66bbb4ca",
        "status" : "passed",
        "time" : {
          "start" : 1733947863437,
          "stop" : 1733947888569,
          "duration" : 25132
        }
      }, {
        "uid" : "dfc207fb3145099e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/dfc207fb3145099e",
        "status" : "passed",
        "time" : {
          "start" : 1733932162136,
          "stop" : 1733932186489,
          "duration" : 24353
        }
      }, {
        "uid" : "681a3d625b68fcb2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/681a3d625b68fcb2",
        "status" : "passed",
        "time" : {
          "start" : 1733930538622,
          "stop" : 1733930635014,
          "duration" : 96392
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "b8ea2efdd19d8d56.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}