{
  "uid" : "c0ba064e94c91514",
  "name" : "test_cert_provisioning",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning",
  "historyId" : "cbbe5798356bbcd9f9da9dcb46821d09",
  "time" : {
    "start" : 1734449265166,
    "stop" : 1734449267142,
    "duration" : 1976
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffad77f350>\nproject = <golioth.golioth.Project object at 0xffffaf22b050>\ndevice_name = 'certificate-ochrOcBfeAXmXgkC'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960017212-if00,baud=115200']\ncertificate_cred = '67619852db61987ad345c5a7', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_object",
    "time" : {
      "start" : 1734449233967,
      "stop" : 1734449233968,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734449233963,
      "stop" : 1734449233963,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734449233966,
      "stop" : 1734449233966,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred",
    "time" : {
      "start" : 1734449234403,
      "stop" : 1734449234916,
      "duration" : 513
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734449234402,
      "stop" : 1734449234402,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734449233964,
      "stop" : 1734449233964,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734449234917,
      "stop" : 1734449264057,
      "duration" : 29140
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734449264057,
      "stop" : 1734449265160,
      "duration" : 1103
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734449233969,
      "stop" : 1734449234401,
      "duration" : 432
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734449233966,
      "stop" : 1734449233966,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734449233965,
      "stop" : 1734449233965,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734449233964,
      "stop" : 1734449233964,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mcumgr_conn_args",
    "time" : {
      "start" : 1734449265161,
      "stop" : 1734449265161,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffad77f350>\nproject = <golioth.golioth.Project object at 0xffffaf22b050>\ndevice_name = 'certificate-ochrOcBfeAXmXgkC'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960017212-if00,baud=115200']\ncertificate_cred = '67619852db61987ad345c5a7', wifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n>           shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:66: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_command, timeout=1.0, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*settings\\\\ set\\\\ wifi/ssid\\\\ \"golioth\\\\-runner\\\\-5b0\"'\nnum_of_lines = None, timeout = 1.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "66e11c1ce5ce9a1a",
      "name" : "log",
      "source" : "66e11c1ce5ce9a1a.txt",
      "type" : "text/plain",
      "size" : 14735
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734449268159,
      "stop" : 1734449268159,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred::0",
    "time" : {
      "start" : 1734449267410,
      "stop" : 1734449267777,
      "duration" : 367
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name::0",
    "time" : {
      "start" : 1734449267779,
      "stop" : 1734449268152,
      "duration" : 373
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734449267379,
      "stop" : 1734449267408,
      "duration" : 29
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734449268155,
      "stop" : 1734449268157,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "013d1319f454"
  }, {
    "name" : "thread",
    "value" : "1049-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 19,
        "unknown" : 0,
        "total" : 23
      },
      "items" : [ {
        "uid" : "d1525df246600db5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/d1525df246600db5",
        "status" : "passed",
        "time" : {
          "start" : 1734414466297,
          "stop" : 1734414494569,
          "duration" : 28272
        }
      }, {
        "uid" : "f5d47acab6ff4713",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/40/#testresult/f5d47acab6ff4713",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734238065528,
          "stop" : 1734238065528,
          "duration" : 0
        }
      }, {
        "uid" : "cc53af60bb844e6d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/cc53af60bb844e6d",
        "status" : "passed",
        "time" : {
          "start" : 1734130258717,
          "stop" : 1734130306428,
          "duration" : 47711
        }
      }, {
        "uid" : "9c80a278cc8348ba",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/9c80a278cc8348ba",
        "status" : "passed",
        "time" : {
          "start" : 1734050609343,
          "stop" : 1734050684394,
          "duration" : 75051
        }
      }, {
        "uid" : "50e6f5c95b57d2ef",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/50e6f5c95b57d2ef",
        "status" : "passed",
        "time" : {
          "start" : 1734046807057,
          "stop" : 1734046882986,
          "duration" : 75929
        }
      }, {
        "uid" : "db2b2c9637160f9d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/db2b2c9637160f9d",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734035231018,
          "stop" : 1734035231018,
          "duration" : 0
        }
      }, {
        "uid" : "3b5879c9a501b442",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/3b5879c9a501b442",
        "status" : "passed",
        "time" : {
          "start" : 1734027726664,
          "stop" : 1734027765421,
          "duration" : 38757
        }
      }, {
        "uid" : "212326c024c8f0f1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/212326c024c8f0f1",
        "status" : "passed",
        "time" : {
          "start" : 1733948253123,
          "stop" : 1733948283671,
          "duration" : 30548
        }
      }, {
        "uid" : "b6f1f247ac3c6bb2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/b6f1f247ac3c6bb2",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733954961258,
          "stop" : 1733954961258,
          "duration" : 0
        }
      }, {
        "uid" : "dce32282f72d4dcc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/dce32282f72d4dcc",
        "status" : "passed",
        "time" : {
          "start" : 1733951753772,
          "stop" : 1733951781675,
          "duration" : 27903
        }
      }, {
        "uid" : "ae20aa6d741f88dc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/ae20aa6d741f88dc",
        "status" : "passed",
        "time" : {
          "start" : 1733951655437,
          "stop" : 1733951754481,
          "duration" : 99044
        }
      }, {
        "uid" : "2023102876a2cf3e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/2023102876a2cf3e",
        "status" : "passed",
        "time" : {
          "start" : 1733949268917,
          "stop" : 1733949314267,
          "duration" : 45350
        }
      }, {
        "uid" : "8682e3b3d23009bc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/8682e3b3d23009bc",
        "status" : "passed",
        "time" : {
          "start" : 1733948253123,
          "stop" : 1733948283671,
          "duration" : 30548
        }
      }, {
        "uid" : "4e5bf75f1757a541",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/4e5bf75f1757a541",
        "status" : "passed",
        "time" : {
          "start" : 1733932578459,
          "stop" : 1733932606942,
          "duration" : 28483
        }
      }, {
        "uid" : "10347d89fcaf907f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/10347d89fcaf907f",
        "status" : "passed",
        "time" : {
          "start" : 1733931094209,
          "stop" : 1733931121403,
          "duration" : 27194
        }
      }, {
        "uid" : "8945e31f0a1df66c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/8945e31f0a1df66c",
        "status" : "passed",
        "time" : {
          "start" : 1733892911564,
          "stop" : 1733892956139,
          "duration" : 44575
        }
      }, {
        "uid" : "a67ec1ed62324989",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/a67ec1ed62324989",
        "status" : "passed",
        "time" : {
          "start" : 1733891794187,
          "stop" : 1733891821161,
          "duration" : 26974
        }
      }, {
        "uid" : "e24812a14dc30aa8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/e24812a14dc30aa8",
        "status" : "passed",
        "time" : {
          "start" : 1733879863027,
          "stop" : 1733879900483,
          "duration" : 37456
        }
      }, {
        "uid" : "be3e3b43ef8a833a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/be3e3b43ef8a833a",
        "status" : "passed",
        "time" : {
          "start" : 1733879408428,
          "stop" : 1733879508808,
          "duration" : 100380
        }
      }, {
        "uid" : "f30ddca0cc878d35",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/f30ddca0cc878d35",
        "status" : "passed",
        "time" : {
          "start" : 1733868947261,
          "stop" : 1733868974860,
          "duration" : 27599
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "c0ba064e94c91514.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}