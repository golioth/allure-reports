{"uid":"93c7d611c16ad817","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"ddc2f31d085089b8b5f25dfb44556fd5","time":{"start":1731962149727,"stop":1731962242648,"duration":92921},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8dbf3810>\ndevice = <golioth.golioth.Device object at 0xffff8dbe0b90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731962138513,"stop":1731962138514,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731962138514,"stop":1731962138514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731962138515,"stop":1731962138515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731962138515,"stop":1731962138515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731962138516,"stop":1731962138516,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731962138516,"stop":1731962138518,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731962138519,"stop":1731962138519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731962138520,"stop":1731962139234,"duration":714},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731962138520,"stop":1731962138520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731962139235,"stop":1731962141194,"duration":1959},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731962141195,"stop":1731962149176,"duration":7981},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731962149176,"stop":1731962149724,"duration":548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8dbf3810>\ndevice = <golioth.golioth.Device object at 0xffff8dbe0b90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"29c4a2fc71801ce5","name":"log","source":"29c4a2fc71801ce5.txt","type":"text/plain","size":15073}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731962242903,"stop":1731962243432,"duration":529},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731962243433,"stop":1731962243950,"duration":517},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731962243952,"stop":1731962243954,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731962243959,"stop":1731962243959,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1b33cd0ca45d"},{"name":"thread","value":"393-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":24,"unknown":0,"total":31},"items":[{"uid":"3e1c5927ebc2491e","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/3e1c5927ebc2491e","status":"passed","time":{"start":1731957882869,"stop":1731957901476,"duration":18607}},{"uid":"1ac25ee12f39fe19","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/1ac25ee12f39fe19","status":"passed","time":{"start":1731955694110,"stop":1731955712740,"duration":18630}},{"uid":"76d0ca4a5d4c5c39","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/76d0ca4a5d4c5c39","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731933162042,"stop":1731933162042,"duration":0}},{"uid":"67eb35cc814c3b07","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/67eb35cc814c3b07","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731922852377,"stop":1731922852377,"duration":0}},{"uid":"643c1c5b36a2e163","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/643c1c5b36a2e163","status":"passed","time":{"start":1731905705261,"stop":1731905723752,"duration":18491}},{"uid":"899ff9e9a746a628","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/899ff9e9a746a628","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731714086934,"stop":1731714179674,"duration":92740}},{"uid":"39f586b25e48747b","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/39f586b25e48747b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731711057191,"stop":1731711150047,"duration":92856}},{"uid":"8635a87b533c4ad5","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/8635a87b533c4ad5","status":"passed","time":{"start":1731706819969,"stop":1731706834748,"duration":14779}},{"uid":"b694af2dfc32cc61","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/b694af2dfc32cc61","status":"passed","time":{"start":1731706812760,"stop":1731706828171,"duration":15411}},{"uid":"da89bc13d5d82b97","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/da89bc13d5d82b97","status":"passed","time":{"start":1731694959634,"stop":1731694974929,"duration":15295}},{"uid":"7c2179fdaac8206","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/7c2179fdaac8206","status":"passed","time":{"start":1731622265323,"stop":1731622285064,"duration":19741}},{"uid":"94a3a10371d6cdba","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/94a3a10371d6cdba","status":"passed","time":{"start":1731622265323,"stop":1731622285064,"duration":19741}},{"uid":"4309da1479f776f3","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/4309da1479f776f3","status":"passed","time":{"start":1731622265323,"stop":1731622285064,"duration":19741}},{"uid":"d32a32ea77a934a0","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/d32a32ea77a934a0","status":"passed","time":{"start":1731616201453,"stop":1731616216429,"duration":14976}},{"uid":"eba5f66a5364cd49","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/eba5f66a5364cd49","status":"passed","time":{"start":1731613414511,"stop":1731613428972,"duration":14461}},{"uid":"afa171329909263f","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/afa171329909263f","status":"passed","time":{"start":1731610475388,"stop":1731610495083,"duration":19695}},{"uid":"f91416eab29baa45","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/f91416eab29baa45","status":"passed","time":{"start":1731596822101,"stop":1731596841610,"duration":19509}},{"uid":"c593aea50504f3f8","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/c593aea50504f3f8","status":"passed","time":{"start":1731548565898,"stop":1731548584412,"duration":18514}},{"uid":"8b1ea3c6d79825cf","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/8b1ea3c6d79825cf","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731563649351,"stop":1731563649351,"duration":0}},{"uid":"995b72a2b660c3c6","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/995b72a2b660c3c6","status":"passed","time":{"start":1731542529420,"stop":1731542547974,"duration":18554}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"93c7d611c16ad817.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}