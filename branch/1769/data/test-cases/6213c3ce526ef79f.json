{"uid":"6213c3ce526ef79f","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1731965011429,"stop":1731965049048,"duration":37619},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff900e2390>\ndevice = <golioth.golioth.Device object at 0xffff900f1190>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731964981666,"stop":1731964981666,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731964981667,"stop":1731964981667,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731964981668,"stop":1731964981668,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731964981668,"stop":1731964981668,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731964981669,"stop":1731964981671,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731964981669,"stop":1731964981669,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731964981672,"stop":1731964981672,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731964981673,"stop":1731964981673,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731964981673,"stop":1731964982177,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731964982178,"stop":1731964983530,"duration":1352},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731964983531,"stop":1731965010345,"duration":26814},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731965010345,"stop":1731965011426,"duration":1081},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff900e2390>\ndevice = <golioth.golioth.Device object at 0xffff900f1190>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"799262780dfefec7","name":"log","source":"799262780dfefec7.txt","type":"text/plain","size":27415}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731965049362,"stop":1731965049389,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731965049391,"stop":1731965049837,"duration":446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731965049840,"stop":1731965049842,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731965049847,"stop":1731965049847,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1ed7135852f5"},{"name":"thread","value":"918-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":18,"unknown":0,"total":22},"items":[{"uid":"82fc5316c31c6df9","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/82fc5316c31c6df9","status":"passed","time":{"start":1731959621756,"stop":1731959658913,"duration":37157}},{"uid":"86484d738cbab822","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/86484d738cbab822","status":"passed","time":{"start":1731956601874,"stop":1731956643585,"duration":41711}},{"uid":"fdc8e0a63ea88054","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/fdc8e0a63ea88054","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731907928450,"stop":1731908021701,"duration":93251}},{"uid":"fed09180ef6e0d24","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/fed09180ef6e0d24","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731716562951,"stop":1731716656142,"duration":93191}},{"uid":"32912dd42c909f09","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/32912dd42c909f09","status":"passed","time":{"start":1731712667818,"stop":1731712702152,"duration":34334}},{"uid":"1068096f3eeb9ec0","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/1068096f3eeb9ec0","status":"passed","time":{"start":1731710256427,"stop":1731710299755,"duration":43328}},{"uid":"d2ad06de4f7815cc","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/d2ad06de4f7815cc","status":"passed","time":{"start":1731709623552,"stop":1731709717777,"duration":94225}},{"uid":"9947911a8a97d23d","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/9947911a8a97d23d","status":"passed","time":{"start":1731697690164,"stop":1731697730111,"duration":39947}},{"uid":"f1db0b1dee2d83aa","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/f1db0b1dee2d83aa","status":"passed","time":{"start":1731614920286,"stop":1731614946784,"duration":26498}},{"uid":"1d17aafdcb02f80f","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/1d17aafdcb02f80f","status":"passed","time":{"start":1731597356561,"stop":1731597380999,"duration":24438}},{"uid":"7b3daf652ca08f76","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/7b3daf652ca08f76","status":"passed","time":{"start":1731549836600,"stop":1731549879678,"duration":43078}},{"uid":"8be8e2fa18dc0bbe","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/8be8e2fa18dc0bbe","status":"passed","time":{"start":1731544717921,"stop":1731544812432,"duration":94511}},{"uid":"2977a9e643e1c999","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/2977a9e643e1c999","status":"passed","time":{"start":1731541964090,"stop":1731541989287,"duration":25197}},{"uid":"c8a3a955fe06d355","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/c8a3a955fe06d355","status":"passed","time":{"start":1731540747914,"stop":1731540786879,"duration":38965}},{"uid":"63b8dbffc5ca2401","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/63b8dbffc5ca2401","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731528646700,"stop":1731528739930,"duration":93230}},{"uid":"dab2d7abecc979ab","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/dab2d7abecc979ab","status":"passed","time":{"start":1731523643352,"stop":1731523694182,"duration":50830}},{"uid":"c81ebb3a80544c7e","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/c81ebb3a80544c7e","status":"passed","time":{"start":1731523643352,"stop":1731523694182,"duration":50830}},{"uid":"8f9eeffad719a14e","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/8f9eeffad719a14e","status":"passed","time":{"start":1731521408571,"stop":1731521444166,"duration":35595}},{"uid":"dd7923ddc5017027","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/dd7923ddc5017027","status":"passed","time":{"start":1731429509859,"stop":1731429538071,"duration":28212}},{"uid":"856edc09eba57bf2","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/856edc09eba57bf2","status":"passed","time":{"start":1731105655641,"stop":1731105680736,"duration":25095}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6213c3ce526ef79f.json","parameterValues":["'nrf9160dk'","'zephyr'"]}