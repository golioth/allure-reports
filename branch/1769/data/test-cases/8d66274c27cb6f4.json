{"uid":"8d66274c27cb6f4","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1731962707232,"stop":1731962819934,"duration":112702},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5907210>\ndevice = <golioth.golioth.Device object at 0xffffa5921e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1731962679005,"stop":1731962679005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731962679005,"stop":1731962679005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731962679006,"stop":1731962679006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731962679006,"stop":1731962679006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731962679007,"stop":1731962679007,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731962679007,"stop":1731962679009,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731962679010,"stop":1731962679010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731962679011,"stop":1731962679011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731962679012,"stop":1731962679453,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731962679453,"stop":1731962680338,"duration":885},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731962680339,"stop":1731962704035,"duration":23696},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731962704036,"stop":1731962707225,"duration":3189},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5907210>\ndevice = <golioth.golioth.Device object at 0xffffa5921e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7a6cdd7e5d63bae3","name":"log","source":"7a6cdd7e5d63bae3.txt","type":"text/plain","size":14371}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731962820284,"stop":1731962820292,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731962820294,"stop":1731962820742,"duration":448},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731962820744,"stop":1731962820746,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731962820752,"stop":1731962820752,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e518faadc3a6"},{"name":"thread","value":"1035-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f4772b17380bb0e3","status":"passed","time":{"start":1731962646891,"stop":1731962674483,"duration":27592}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"1d92bc323995c787","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/1d92bc323995c787","status":"passed","time":{"start":1731958266733,"stop":1731958291089,"duration":24356}},{"uid":"deaff7cdf1619506","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/deaff7cdf1619506","status":"passed","time":{"start":1731955373873,"stop":1731955397599,"duration":23726}},{"uid":"8e9295b4e881217","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/8e9295b4e881217","status":"passed","time":{"start":1731933754577,"stop":1731933778480,"duration":23903}},{"uid":"4da8db0ae5ab9dd9","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/4da8db0ae5ab9dd9","status":"passed","time":{"start":1731923180561,"stop":1731923203828,"duration":23267}},{"uid":"55caead437a46d4a","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/55caead437a46d4a","status":"passed","time":{"start":1731905889060,"stop":1731905912496,"duration":23436}},{"uid":"200cb3cfece77b4c","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/200cb3cfece77b4c","status":"passed","time":{"start":1731714011328,"stop":1731714039027,"duration":27699}},{"uid":"d98e899b936031d2","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/d98e899b936031d2","status":"passed","time":{"start":1731710572077,"stop":1731710596007,"duration":23930}},{"uid":"c6129f27016070db","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/c6129f27016070db","status":"passed","time":{"start":1731706330955,"stop":1731706354458,"duration":23503}},{"uid":"53a03234d53724c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/53a03234d53724c5","status":"passed","time":{"start":1731694713820,"stop":1731694737197,"duration":23377}},{"uid":"648304c8a5369790","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/648304c8a5369790","status":"passed","time":{"start":1731689826367,"stop":1731689854030,"duration":27663}},{"uid":"33b2563bde014587","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/33b2563bde014587","status":"passed","time":{"start":1731625264316,"stop":1731625292217,"duration":27901}},{"uid":"1d3efb4522ce376","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/1d3efb4522ce376","status":"passed","time":{"start":1731621787421,"stop":1731621811636,"duration":24215}},{"uid":"579361cb5ce0d08e","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/579361cb5ce0d08e","status":"passed","time":{"start":1731616485449,"stop":1731616513055,"duration":27606}},{"uid":"9a5944e136dde557","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/9a5944e136dde557","status":"passed","time":{"start":1731613950794,"stop":1731613974848,"duration":24054}},{"uid":"f824e87e43749fb8","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/f824e87e43749fb8","status":"passed","time":{"start":1731611023043,"stop":1731611046857,"duration":23814}},{"uid":"3b9c56e300d30bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/3b9c56e300d30bd","status":"passed","time":{"start":1731597444661,"stop":1731597472700,"duration":28039}},{"uid":"3991f20b78286c3f","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/3991f20b78286c3f","status":"passed","time":{"start":1731548329974,"stop":1731548353930,"duration":23956}},{"uid":"2b8efcc74836eed9","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/2b8efcc74836eed9","status":"passed","time":{"start":1731564416168,"stop":1731564439937,"duration":23769}},{"uid":"ce818864daf346f6","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/ce818864daf346f6","status":"passed","time":{"start":1731543119878,"stop":1731543147876,"duration":27998}},{"uid":"16548015be8dcdad","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/16548015be8dcdad","status":"passed","time":{"start":1731539821344,"stop":1731539845179,"duration":23835}}]},"tags":["mikes_orange_pi","nrf52840dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"8d66274c27cb6f4.json","parameterValues":["'nrf52840dk'","'zephyr'"]}