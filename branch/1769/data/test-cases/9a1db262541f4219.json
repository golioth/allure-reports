{"uid":"9a1db262541f4219","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"9dfded31f8d05ecc85884d5776ac41cc","time":{"start":1731962244917,"stop":1731962338564,"duration":93647},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff923c23d0>\ndevice = <golioth.golioth.Device object at 0xffff923d1410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731962216564,"stop":1731962216564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731962216564,"stop":1731962216564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731962216565,"stop":1731962216566,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731962216565,"stop":1731962216565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731962216566,"stop":1731962216569,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731962216566,"stop":1731962216566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731962216569,"stop":1731962216570,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731962216570,"stop":1731962217013,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731962216570,"stop":1731962216570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731962217014,"stop":1731962218070,"duration":1056},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731962218070,"stop":1731962241707,"duration":23637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731962241708,"stop":1731962244910,"duration":3202},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff923c23d0>\ndevice = <golioth.golioth.Device object at 0xffff923d1410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8f8bd7d77febde8d","name":"log","source":"8f8bd7d77febde8d.txt","type":"text/plain","size":18300}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731962338763,"stop":1731962338770,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731962338772,"stop":1731962339139,"duration":367},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731962339141,"stop":1731962339144,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731962339149,"stop":1731962339149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e518faadc3a6"},{"name":"thread","value":"651-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":28,"unknown":0,"total":30},"items":[{"uid":"25aa7f8d53dcd02d","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/25aa7f8d53dcd02d","status":"passed","time":{"start":1731957881597,"stop":1731957896784,"duration":15187}},{"uid":"b9d52b01e3d0a28","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/b9d52b01e3d0a28","status":"passed","time":{"start":1731954996597,"stop":1731955012218,"duration":15621}},{"uid":"e66040466cd4d926","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/e66040466cd4d926","status":"passed","time":{"start":1731933508978,"stop":1731933524642,"duration":15664}},{"uid":"41dbc20478235b47","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/41dbc20478235b47","status":"passed","time":{"start":1731922796378,"stop":1731922811739,"duration":15361}},{"uid":"9e736e792350dd9c","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/9e736e792350dd9c","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1731905510121,"stop":1731905510121,"duration":0}},{"uid":"3ed379b1606eb5ae","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/3ed379b1606eb5ae","status":"passed","time":{"start":1731713665442,"stop":1731713680806,"duration":15364}},{"uid":"9e95821efafecfd1","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/9e95821efafecfd1","status":"passed","time":{"start":1731710325874,"stop":1731710341183,"duration":15309}},{"uid":"55d764efac52bc58","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/55d764efac52bc58","status":"passed","time":{"start":1731706083031,"stop":1731706098671,"duration":15640}},{"uid":"c22035dcd06663ab","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/c22035dcd06663ab","status":"passed","time":{"start":1731694523454,"stop":1731694538496,"duration":15042}},{"uid":"f1dc820690671dc6","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/f1dc820690671dc6","status":"passed","time":{"start":1731689448486,"stop":1731689464179,"duration":15693}},{"uid":"4bee0807c3ce885e","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/4bee0807c3ce885e","status":"passed","time":{"start":1731624884449,"stop":1731624899718,"duration":15269}},{"uid":"cc6027f568e4a774","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/cc6027f568e4a774","status":"passed","time":{"start":1731621543080,"stop":1731621558766,"duration":15686}},{"uid":"1e302657aeb2729b","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/1e302657aeb2729b","status":"passed","time":{"start":1731616105289,"stop":1731616121118,"duration":15829}},{"uid":"2d6ef1952c9c5ce1","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/2d6ef1952c9c5ce1","status":"passed","time":{"start":1731613558222,"stop":1731613573556,"duration":15334}},{"uid":"90ab3727f8ac3c96","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/90ab3727f8ac3c96","status":"passed","time":{"start":1731610639511,"stop":1731610655174,"duration":15663}},{"uid":"c0dd3210fde0bda1","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/c0dd3210fde0bda1","status":"passed","time":{"start":1731597071135,"stop":1731597087485,"duration":16350}},{"uid":"26d2187f9a236a3","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/26d2187f9a236a3","status":"passed","time":{"start":1731548109865,"stop":1731548132644,"duration":22779}},{"uid":"8d133a2413e4a7df","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/8d133a2413e4a7df","status":"passed","time":{"start":1731564080016,"stop":1731564095556,"duration":15540}},{"uid":"3fba36faedca3ccb","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/3fba36faedca3ccb","status":"passed","time":{"start":1731542740329,"stop":1731542756178,"duration":15849}},{"uid":"2b8693ae0fe29bd1","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/2b8693ae0fe29bd1","status":"passed","time":{"start":1731539578305,"stop":1731539593964,"duration":15659}}]},"tags":["mikes_orange_pi","nrf52840dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"9a1db262541f4219.json","parameterValues":["'nrf52840dk'","'zephyr'"]}