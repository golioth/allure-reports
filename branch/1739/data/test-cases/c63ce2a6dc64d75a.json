{"uid":"c63ce2a6dc64d75a","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"29965a84c7f143cf4efad9827e24c81d","time":{"start":1731547285538,"stop":1731547298159,"duration":12621},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf52840dk.nRF52840DK object at 0xffffae85ea50>\ndevice = <golioth.golioth.Device object at 0xffffae852090>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffae852090>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731547246711,"stop":1731547246712,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1731547246712,"stop":1731547246713,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1731547246713,"stop":1731547246713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1731547246714,"stop":1731547246714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731547246715,"stop":1731547246715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731547246716,"stop":1731547246716,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1731547246717,"stop":1731547246717,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1731547246717,"stop":1731547246718,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1731547246718,"stop":1731547246718,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731547246719,"stop":1731547246720,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731547246719,"stop":1731547246719,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731547246720,"stop":1731547247133,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731547246720,"stop":1731547246720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1731547247134,"stop":1731547259671,"duration":12537},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731547259673,"stop":1731547260635,"duration":962},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731547260635,"stop":1731547273768,"duration":13133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf52840dk.nRF52840DK object at 0xffffae85ea50>\ndevice = <golioth.golioth.Device object at 0xffffae852090>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffae852090>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"c1638877c232ecc5","name":"stdout","source":"c1638877c232ecc5.txt","type":"text/plain","size":145}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1731547440514,"stop":1731547440514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731547440516,"stop":1731547441511,"duration":995},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1731547441514,"stop":1731547441515,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731547441518,"stop":1731547441520,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"5044b1b795bb"},{"name":"thread","value":"299-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":8,"unknown":0,"total":13},"items":[{"uid":"8d3fe5d176c1aed2","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/8d3fe5d176c1aed2","status":"passed","time":{"start":1731564204058,"stop":1731564216366,"duration":12308}},{"uid":"26be0d7f00735d73","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/26be0d7f00735d73","status":"passed","time":{"start":1731541242768,"stop":1731541255870,"duration":13102}},{"uid":"d94323ab79548e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/d94323ab79548e6","status":"passed","time":{"start":1731537978671,"stop":1731537991065,"duration":12394}},{"uid":"bef7856b0f1f330a","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/bef7856b0f1f330a","status":"passed","time":{"start":1731534600317,"stop":1731534612733,"duration":12416}},{"uid":"4264108a9daf7839","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/4264108a9daf7839","status":"passed","time":{"start":1731534249758,"stop":1731534262148,"duration":12390}},{"uid":"5e20b6f33a3577f0","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/5e20b6f33a3577f0","status":"passed","time":{"start":1731523857858,"stop":1731523870098,"duration":12240}},{"uid":"b3e843b477833a2e","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/b3e843b477833a2e","status":"passed","time":{"start":1731523857858,"stop":1731523870098,"duration":12240}},{"uid":"fbcdc6cfb811df9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/fbcdc6cfb811df9b","status":"passed","time":{"start":1731523857858,"stop":1731523870098,"duration":12240}},{"uid":"6569b4226e4d6d55","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/6569b4226e4d6d55","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731518549115,"stop":1731518549115,"duration":0}},{"uid":"cdf735a3fa05031","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/cdf735a3fa05031","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731426192403,"stop":1731426192403,"duration":0}},{"uid":"f7228eb233a4c69c","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/f7228eb233a4c69c","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731103207749,"stop":1731103207749,"duration":0}},{"uid":"4d4840282f3903fe","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/4d4840282f3903fe","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731097292863,"stop":1731097292863,"duration":0}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c63ce2a6dc64d75a.json","parameterValues":["'nrf52840dk'","'zephyr'"]}