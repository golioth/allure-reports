{"uid":"3b7c9f9249d495ff","name":"test_set_int_range_out_max","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_max","historyId":"e0ee158f4ddcdd2eea0d5820324e258e","time":{"start":1731547357550,"stop":1731547369808,"duration":12258},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf52840dk.nRF52840DK object at 0xffffae85ea50>\ndevice = <golioth.golioth.Device object at 0xffffae852090>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffae852090>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731547246711,"stop":1731547246712,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1731547246712,"stop":1731547246713,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1731547246713,"stop":1731547246713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1731547246714,"stop":1731547246714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731547246715,"stop":1731547246715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731547246716,"stop":1731547246716,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1731547246717,"stop":1731547246717,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1731547246717,"stop":1731547246718,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1731547246718,"stop":1731547246718,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731547246719,"stop":1731547246720,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731547246719,"stop":1731547246719,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731547246720,"stop":1731547247133,"duration":413},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731547246720,"stop":1731547246720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1731547247134,"stop":1731547259671,"duration":12537},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731547259673,"stop":1731547260635,"duration":962},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1731547260635,"stop":1731547273768,"duration":13133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <nrf52840dk.nRF52840DK object at 0xffffae85ea50>\ndevice = <golioth.golioth.Device object at 0xffffae852090>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffae852090>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"cb9bf58bf428a4a0","name":"stdout","source":"cb9bf58bf428a4a0.txt","type":"text/plain","size":736}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1731547440514,"stop":1731547440514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731547440516,"stop":1731547441511,"duration":995},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1731547441514,"stop":1731547441515,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731547441518,"stop":1731547441520,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"5044b1b795bb"},{"name":"thread","value":"299-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":8,"unknown":0,"total":13},"items":[{"uid":"7ef2a4bc6af62746","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/7ef2a4bc6af62746","status":"passed","time":{"start":1731564252334,"stop":1731564264666,"duration":12332}},{"uid":"86907109366a59bc","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/86907109366a59bc","status":"passed","time":{"start":1731541298162,"stop":1731541311174,"duration":13012}},{"uid":"14094f9ef4cc9f2d","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/14094f9ef4cc9f2d","status":"passed","time":{"start":1731538029540,"stop":1731538042018,"duration":12478}},{"uid":"68c0ae797b692ed4","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/68c0ae797b692ed4","status":"passed","time":{"start":1731534651092,"stop":1731534664177,"duration":13085}},{"uid":"4bdbe95bea14310e","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/4bdbe95bea14310e","status":"passed","time":{"start":1731534298684,"stop":1731534310989,"duration":12305}},{"uid":"bd5dd8575f55048d","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/bd5dd8575f55048d","status":"passed","time":{"start":1731523906036,"stop":1731523918255,"duration":12219}},{"uid":"470b7287dcd41394","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/470b7287dcd41394","status":"passed","time":{"start":1731523906036,"stop":1731523918255,"duration":12219}},{"uid":"f7b395ebfd187db7","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/f7b395ebfd187db7","status":"passed","time":{"start":1731523906036,"stop":1731523918255,"duration":12219}},{"uid":"841be89e4ac1f8d2","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/841be89e4ac1f8d2","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731518551270,"stop":1731518551270,"duration":0}},{"uid":"43dcb6863d8da66a","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/43dcb6863d8da66a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731426194675,"stop":1731426194675,"duration":0}},{"uid":"50e539c5c612f950","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/50e539c5c612f950","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731103209903,"stop":1731103209903,"duration":0}},{"uid":"28b627465fc434d0","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/28b627465fc434d0","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1731097295024,"stop":1731097295024,"duration":0}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"3b7c9f9249d495ff.json","parameterValues":["'nrf52840dk'","'zephyr'"]}