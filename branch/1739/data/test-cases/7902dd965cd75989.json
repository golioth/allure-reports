{"uid":"7902dd965cd75989","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"7288a85cfc86c7d252d11e5f51712a5f","time":{"start":1731546204601,"stop":1731546210265,"duration":5664},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fab19522b90>\ndevice = <golioth.golioth.Device object at 0x7fab194ffb90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1731546203746,"stop":1731546203746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1731546203746,"stop":1731546203746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731546203746,"stop":1731546203747,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731546203747,"stop":1731546203747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731546203747,"stop":1731546203747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731546203747,"stop":1731546203747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731546203747,"stop":1731546203747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731546203748,"stop":1731546203971,"duration":223},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731546203748,"stop":1731546203748,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731546203971,"stop":1731546204593,"duration":622},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731546204594,"stop":1731546204595,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731546204595,"stop":1731546204600,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fab19522b90>\ndevice = <golioth.golioth.Device object at 0x7fab194ffb90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException","steps":[],"attachments":[{"uid":"df9ff85fdb713b7a","name":"log","source":"df9ff85fdb713b7a.txt","type":"text/plain","size":17986}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731546210363,"stop":1731546210364,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731546210365,"stop":1731546210629,"duration":264},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731546210630,"stop":1731546210631,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731546210632,"stop":1731546210632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 56"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"69b085053e8c"},{"name":"thread","value":"73092-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":12,"unknown":0,"total":13},"items":[{"uid":"a1c0bcca264920","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/a1c0bcca264920","status":"passed","time":{"start":1731533275281,"stop":1731533281146,"duration":5865}},{"uid":"dcffba778d98b3b3","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/dcffba778d98b3b3","status":"passed","time":{"start":1731538550141,"stop":1731538555788,"duration":5647}},{"uid":"66fafedbccb38ada","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/66fafedbccb38ada","status":"passed","time":{"start":1731533672091,"stop":1731533678088,"duration":5997}},{"uid":"d1ebb0faadccc8db","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/d1ebb0faadccc8db","status":"passed","time":{"start":1731533290318,"stop":1731533295873,"duration":5555}},{"uid":"518e2036d3d774ca","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/518e2036d3d774ca","status":"passed","time":{"start":1731533275281,"stop":1731533281146,"duration":5865}},{"uid":"2bf4aa833aa06036","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/2bf4aa833aa06036","status":"passed","time":{"start":1731518130638,"stop":1731518136024,"duration":5386}},{"uid":"e14c97de2e1924ed","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/e14c97de2e1924ed","status":"passed","time":{"start":1731518130638,"stop":1731518136024,"duration":5386}},{"uid":"f9abcd58556a714b","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/f9abcd58556a714b","status":"passed","time":{"start":1731518130638,"stop":1731518136024,"duration":5386}},{"uid":"3a73626924de4b63","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/3a73626924de4b63","status":"passed","time":{"start":1731518130638,"stop":1731518136024,"duration":5386}},{"uid":"e8b7c0de507fcb1a","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/e8b7c0de507fcb1a","status":"passed","time":{"start":1731425764480,"stop":1731425770325,"duration":5845}},{"uid":"fa39ff0176c276d2","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/fa39ff0176c276d2","status":"passed","time":{"start":1731102113964,"stop":1731102119731,"duration":5767}},{"uid":"f508265b334c927","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/f508265b334c927","status":"passed","time":{"start":1731096725542,"stop":1731096731688,"duration":6146}}]},"tags":["GitHub Actions 56","native_sim_64","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7902dd965cd75989.json","parameterValues":["'native_sim_64'","'zephyr'"]}