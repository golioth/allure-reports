{"uid":"53d7fd4f0abbabd6","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1759779143572,"stop":1759779178034,"duration":34462},"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9aa3380>\ndevice = <golioth.golioth.Device object at 0xffffa99ad6a0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759779116014,"stop":1759779116015,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759779116015,"stop":1759779116015,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759779116016,"stop":1759779116016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759779116016,"stop":1759779116016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759779116017,"stop":1759779116017,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759779116017,"stop":1759779116019,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759779116020,"stop":1759779116020,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759779116021,"stop":1759779116486,"duration":465},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759779116021,"stop":1759779116021,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759779116487,"stop":1759779117127,"duration":640},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759779117128,"stop":1759779142938,"duration":25810},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759779142939,"stop":1759779143567,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 3 == 2","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9aa3380>\ndevice = <golioth.golioth.Device object at 0xffffa99ad6a0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 3 == 2\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","steps":[],"attachments":[{"uid":"4aad812f1f55e7cd","name":"log","source":"4aad812f1f55e7cd.txt","type":"text/plain","size":27085}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759779178415,"stop":1759779178572,"duration":157},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759779178574,"stop":1759779178903,"duration":329},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759779178905,"stop":1759779178908,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759779178913,"stop":1759779178913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"fc353d108750"},{"name":"thread","value":"1238-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":13,"unknown":0,"total":15},"items":[{"uid":"c407b3b2a4eae81f","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/c407b3b2a4eae81f","status":"passed","time":{"start":1759768856428,"stop":1759768878165,"duration":21737}},{"uid":"9062411e6a9fbb62","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/9062411e6a9fbb62","status":"passed","time":{"start":1759769982662,"stop":1759770004625,"duration":21963}},{"uid":"46b7abaacd3ffaa6","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/46b7abaacd3ffaa6","status":"passed","time":{"start":1759768856428,"stop":1759768878165,"duration":21737}},{"uid":"a5d296b8d30fa188","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/a5d296b8d30fa188","status":"passed","time":{"start":1759523995127,"stop":1759524024199,"duration":29072}},{"uid":"8a7009096a4710e2","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/8a7009096a4710e2","status":"passed","time":{"start":1759523995127,"stop":1759524024199,"duration":29072}},{"uid":"1db1bc6368d6d197","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/1db1bc6368d6d197","status":"passed","time":{"start":1759518347403,"stop":1759518372969,"duration":25566}},{"uid":"ea02e124ecc2da5e","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/ea02e124ecc2da5e","status":"passed","time":{"start":1759245768731,"stop":1759245801142,"duration":32411}},{"uid":"994786cd2aaed02","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/994786cd2aaed02","status":"passed","time":{"start":1759373709012,"stop":1759373732872,"duration":23860}},{"uid":"1bc45e5de620b539","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/1bc45e5de620b539","status":"passed","time":{"start":1759272316578,"stop":1759272340816,"duration":24238}},{"uid":"325b4abe885294b0","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/325b4abe885294b0","status":"passed","time":{"start":1759245768731,"stop":1759245801142,"duration":32411}},{"uid":"98cb2daae8c62378","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/98cb2daae8c62378","status":"passed","time":{"start":1759179548205,"stop":1759179582536,"duration":34331}},{"uid":"24f977055eb893c7","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/24f977055eb893c7","status":"passed","time":{"start":1759162165787,"stop":1759162188506,"duration":22719}},{"uid":"a4971a999e8aa39e","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/a4971a999e8aa39e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759111982904,"stop":1759112005248,"duration":22344}},{"uid":"f816c5b667ce39ae","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/f816c5b667ce39ae","status":"passed","time":{"start":1758916471754,"stop":1758916495532,"duration":23778}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","zephyr"]},"source":"53d7fd4f0abbabd6.json","parameterValues":["'nrf9160dk'","'zephyr'"]}