{"uid":"d0b1496587ba96a5","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"b3d5b97364e6f035c71c0a09d7a1be64","time":{"start":1759784908437,"stop":1759785001193,"duration":92756},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9062b380>\ndevice = <golioth.golioth.Device object at 0xffff905296a0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759784892960,"stop":1759784892960,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759784892960,"stop":1759784892961,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759784892961,"stop":1759784892961,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759784892961,"stop":1759784892962,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759784892962,"stop":1759784892962,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759784892962,"stop":1759784892964,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759784892965,"stop":1759784892965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759784892966,"stop":1759784892966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759784892966,"stop":1759784893470,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759784893471,"stop":1759784894158,"duration":687},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759784894159,"stop":1759784907800,"duration":13641},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759784907800,"stop":1759784908434,"duration":634},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9062b380>\ndevice = <golioth.golioth.Device object at 0xffff905296a0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"61f61d5b564ddf0","name":"log","source":"61f61d5b564ddf0.txt","type":"text/plain","size":25459}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759785001572,"stop":1759785001613,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759785001615,"stop":1759785001982,"duration":367},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759785001985,"stop":1759785001987,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759785001992,"stop":1759785001992,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9c2a9f353df7"},{"name":"thread","value":"530-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":9,"unknown":0,"total":15},"items":[{"uid":"cebe217a5a4e764f","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/cebe217a5a4e764f","status":"passed","time":{"start":1759798052674,"stop":1759798092971,"duration":40297}},{"uid":"463a4efa484d8c9d","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/463a4efa484d8c9d","status":"passed","time":{"start":1759785582041,"stop":1759785622551,"duration":40510}},{"uid":"5ab57ae4752204a0","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/5ab57ae4752204a0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759784908437,"stop":1759785001193,"duration":92756}},{"uid":"1c8e008e0b0609c5","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/1c8e008e0b0609c5","status":"passed","time":{"start":1759773631902,"stop":1759773671885,"duration":39983}},{"uid":"b1c143ffe5390cd6","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/b1c143ffe5390cd6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759766953342,"stop":1759767046167,"duration":92825}},{"uid":"b5ac85049b568929","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/b5ac85049b568929","status":"passed","time":{"start":1759768720202,"stop":1759768760458,"duration":40256}},{"uid":"26afd262e137c596","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/26afd262e137c596","status":"passed","time":{"start":1759719854231,"stop":1759719894774,"duration":40543}},{"uid":"7ab0908de99fa629","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/7ab0908de99fa629","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1759719219710,"stop":1759719271877,"duration":52167}},{"uid":"c56feac6b7f160e1","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/c56feac6b7f160e1","status":"passed","time":{"start":1759516280539,"stop":1759516322645,"duration":42106}},{"uid":"cdec1b63804d19e5","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/cdec1b63804d19e5","status":"passed","time":{"start":1759516280539,"stop":1759516322645,"duration":42106}},{"uid":"7f287f6325b29f3","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/7f287f6325b29f3","status":"passed","time":{"start":1759369242995,"stop":1759369284128,"duration":41133}},{"uid":"e0f65bb2d478cfc","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/e0f65bb2d478cfc","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1759270512468,"stop":1759270556016,"duration":43548}},{"uid":"a5af6a2dd56955f7","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/a5af6a2dd56955f7","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1759160921454,"stop":1759160966443,"duration":44989}},{"uid":"86d99a49068cba3f","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/86d99a49068cba3f","status":"passed","time":{"start":1758915014670,"stop":1758915055513,"duration":40843}}]},"tags":["mikes_orange_pi","anyio","rak5010","zephyr"]},"source":"d0b1496587ba96a5.json","parameterValues":["'rak5010'","'zephyr'"]}