{"uid":"ac4a0e85b875403e","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1732227575588,"stop":1732227623922,"duration":48334},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eec6610>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a450>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7ee77f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f045950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eea72d0>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7eec7690>\ndevice = <golioth.golioth.Device object at 0xffff7eea5b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eec6610>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a450>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7ee77f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f045950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eea72d0>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732227537657,"stop":1732227537658,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732227537658,"stop":1732227537658,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732227537659,"stop":1732227537659,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732227537659,"stop":1732227537659,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732227537660,"stop":1732227537660,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732227537660,"stop":1732227537662,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732227537663,"stop":1732227537663,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732227537664,"stop":1732227538385,"duration":721},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732227537664,"stop":1732227537664,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732227538385,"stop":1732227540234,"duration":1849},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732227540234,"stop":1732227574976,"duration":34742},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732227574977,"stop":1732227575585,"duration":608},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eec6610>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a450>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7ee77f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f045950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eea72d0>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7eec7690>\ndevice = <golioth.golioth.Device object at 0xffff7eea5b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eec6610>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a450>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7ee77f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f045950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eea72d0>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"238bf2758e028fbd","name":"log","source":"238bf2758e028fbd.txt","type":"text/plain","size":30425}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732227624111,"stop":1732227624143,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732227624145,"stop":1732227624560,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732227624562,"stop":1732227624565,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732227624569,"stop":1732227624570,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1aef3be5caaa"},{"name":"thread","value":"391-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":14,"skipped":0,"passed":62,"unknown":0,"total":79},"items":[{"uid":"ae1a82250890f2e","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/ae1a82250890f2e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732290288828,"stop":1732290381674,"duration":92846}},{"uid":"1d0dfb685ce5a800","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/1d0dfb685ce5a800","status":"passed","time":{"start":1732289194255,"stop":1732289241695,"duration":47440}},{"uid":"c5d7140539a545f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/c5d7140539a545f5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732286955237,"stop":1732287048043,"duration":92806}},{"uid":"d586d88120438f43","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d586d88120438f43","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732283644843,"stop":1732283737650,"duration":92807}},{"uid":"541eb781936d5c55","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/541eb781936d5c55","status":"passed","time":{"start":1732280157709,"stop":1732280206238,"duration":48529}},{"uid":"dc21202ad644bd07","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/dc21202ad644bd07","status":"passed","time":{"start":1732274504596,"stop":1732274552446,"duration":47850}},{"uid":"6c7f904136bf0871","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/6c7f904136bf0871","status":"passed","time":{"start":1732273276286,"stop":1732273324986,"duration":48700}},{"uid":"8d19ab11b98166cd","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/8d19ab11b98166cd","status":"passed","time":{"start":1732232122518,"stop":1732232171954,"duration":49436}},{"uid":"418b361fe2bf49e5","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/418b361fe2bf49e5","status":"passed","time":{"start":1732225262415,"stop":1732225310913,"duration":48498}},{"uid":"d171b05c76164c8a","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/d171b05c76164c8a","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eec6610>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a450>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7ee77f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f045950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eea72d0>])","time":{"start":1732227575588,"stop":1732227623922,"duration":48334}},{"uid":"ac9037001511415d","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/ac9037001511415d","status":"passed","time":{"start":1732225262415,"stop":1732225310913,"duration":48498}},{"uid":"eb654a2605b74527","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/eb654a2605b74527","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'","time":{"start":1732221244990,"stop":1732221244990,"duration":0}},{"uid":"bb4af8136b99b36d","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/bb4af8136b99b36d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732217217413,"stop":1732217310253,"duration":92840}},{"uid":"9e287131aba49ee5","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/9e287131aba49ee5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732211578289,"stop":1732211671101,"duration":92812}},{"uid":"92ccefa0f13bc4d9","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/92ccefa0f13bc4d9","status":"passed","time":{"start":1732210218510,"stop":1732210267201,"duration":48691}},{"uid":"d2525537d4093f6d","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/d2525537d4093f6d","status":"passed","time":{"start":1732208942330,"stop":1732208991358,"duration":49028}},{"uid":"7f62ea55cb9f357c","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/7f62ea55cb9f357c","status":"passed","time":{"start":1732205583571,"stop":1732205632448,"duration":48877}},{"uid":"e067d8f4450f4544","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/e067d8f4450f4544","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732202781121,"stop":1732202873925,"duration":92804}},{"uid":"6f160753d755cd3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/6f160753d755cd3a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732200903446,"stop":1732200996238,"duration":92792}},{"uid":"42d0767f535833e0","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/42d0767f535833e0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199256551,"stop":1732199349287,"duration":92736}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"ac4a0e85b875403e.json","parameterValues":["'rak5010'","'zephyr'"]}