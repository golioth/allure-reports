{"uid":"1530d5a92090db67","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"b3d5b97364e6f035c71c0a09d7a1be64","time":{"start":1732227509571,"stop":1732227533553,"duration":23982},"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5bb8c10>\ndevice = <golioth.golioth.Device object at 0xffffa5c16290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1732227471352,"stop":1732227471353,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1732227471352,"stop":1732227471352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732227471353,"stop":1732227471353,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732227471354,"stop":1732227471354,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732227471354,"stop":1732227471354,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732227471355,"stop":1732227471357,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732227471357,"stop":1732227471358,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732227471358,"stop":1732227471358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732227471359,"stop":1732227471937,"duration":578},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732227471937,"stop":1732227472812,"duration":875},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732227472813,"stop":1732227508929,"duration":36116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732227508930,"stop":1732227509568,"duration":638},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5bb8c10>\ndevice = <golioth.golioth.Device object at 0xffffa5c16290>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n        shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n    \n        # Test successful RPC\n    \n        result = await device.rpc.call(\"multiply\", [ 7, 6 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  42))\n        assert result['value'] == 42, \"Didn't receive correct value\"\n    \n        # Test successful RPC using float\n    \n        result = await device.rpc.call(\"multiply\", [ 11.4, 93.81 ])\n        LOGGER.info(\"### Received: {0} Expected: {1}\".format(result['value'],  1069.434))\n        assert result['value'] == 1069.434, \"Didn't receive correct float\"\n    \n        # Test invalid argument RPC\n    \n        error_code = None\n        try:\n            result = await device.rpc.call(\"multiply\", [ 6, 'J' ])\n        except Exception as e:\n            error_code = e\n            pass\n>       LOGGER.info(\"### Received: {0} Expected: {1}\".format(error_code.status_code,  RPCStatusCode.INVALID_ARGUMENT))\nE       AttributeError: 'RPCTimeout' object has no attribute 'status_code'\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:53: AttributeError","steps":[],"attachments":[{"uid":"128caa719a7e63a1","name":"log","source":"128caa719a7e63a1.txt","type":"text/plain","size":31461}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732227533866,"stop":1732227533916,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732227533917,"stop":1732227534329,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732227534331,"stop":1732227534333,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732227534338,"stop":1732227534338,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1aef3be5caaa"},{"name":"thread","value":"367-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":23,"skipped":0,"passed":46,"unknown":0,"total":69},"items":[{"uid":"f606e50b5d2c2075","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/f606e50b5d2c2075","status":"passed","time":{"start":1732225201029,"stop":1732225221605,"duration":20576}},{"uid":"e4ddb176fb81c33d","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/e4ddb176fb81c33d","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'","time":{"start":1732221224662,"stop":1732221224662,"duration":0}},{"uid":"9d2f2a37b13bcd09","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/9d2f2a37b13bcd09","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732217105594,"stop":1732217198336,"duration":92742}},{"uid":"252fa3ac98ce486a","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/252fa3ac98ce486a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732211466153,"stop":1732211558953,"duration":92800}},{"uid":"e2192969c6bf6b7f","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/e2192969c6bf6b7f","status":"passed","time":{"start":1732210157350,"stop":1732210177692,"duration":20342}},{"uid":"6d6f70c60725af11","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/6d6f70c60725af11","status":"passed","time":{"start":1732208882207,"stop":1732208901589,"duration":19382}},{"uid":"fb88fcd5bd13e8a","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/fb88fcd5bd13e8a","status":"passed","time":{"start":1732205523894,"stop":1732205542815,"duration":18921}},{"uid":"865f6bb844a62026","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/865f6bb844a62026","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732202646938,"stop":1732202739659,"duration":92721}},{"uid":"184659be1a549dd3","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/184659be1a549dd3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732200791603,"stop":1732200884453,"duration":92850}},{"uid":"a926761d56df9630","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/a926761d56df9630","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199144969,"stop":1732199237670,"duration":92701}},{"uid":"d83d08436a4f9453","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d83d08436a4f9453","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732197168090,"stop":1732197260831,"duration":92741}},{"uid":"f21d9f9ad3403925","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/f21d9f9ad3403925","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732193648126,"stop":1732193740871,"duration":92745}},{"uid":"fa258f1fd0949874","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/fa258f1fd0949874","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732191997688,"stop":1732192090371,"duration":92683}},{"uid":"a49dfabeff23249c","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/a49dfabeff23249c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732187379905,"stop":1732187472595,"duration":92690}},{"uid":"15b2fb7afd1fd275","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/15b2fb7afd1fd275","status":"passed","time":{"start":1732185451407,"stop":1732185472461,"duration":21054}},{"uid":"71cbefabf4b078d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/71cbefabf4b078d3","status":"passed","time":{"start":1732142637993,"stop":1732142657778,"duration":19785}},{"uid":"5086b1621338f9f9","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/5086b1621338f9f9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732148731489,"stop":1732148824158,"duration":92669}},{"uid":"1288d08f9bdc1127","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/1288d08f9bdc1127","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146654591,"stop":1732146747365,"duration":92774}},{"uid":"a809c18fe9f9a995","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/a809c18fe9f9a995","status":"passed","time":{"start":1732144315936,"stop":1732144335623,"duration":19687}},{"uid":"593a6c25563ced0","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/593a6c25563ced0","status":"passed","time":{"start":1732142637993,"stop":1732142657778,"duration":19785}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"1530d5a92090db67.json","parameterValues":["'rak5010'","'zephyr'"]}