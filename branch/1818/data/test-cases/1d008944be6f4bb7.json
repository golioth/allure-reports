{"uid":"1d008944be6f4bb7","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1732227086251,"stop":1732227124339,"duration":38088},"status":"failed","statusMessage":"AssertionError: assert 4 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbcaf35d0>\ndevice = <golioth.golioth.Device object at 0xffffbcb09f90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 4 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732227057338,"stop":1732227057338,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732227057339,"stop":1732227057339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732227057340,"stop":1732227057340,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732227057340,"stop":1732227057340,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732227057341,"stop":1732227057341,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732227057341,"stop":1732227057343,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732227057344,"stop":1732227057344,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732227057345,"stop":1732227057789,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732227057345,"stop":1732227057345,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732227057790,"stop":1732227059206,"duration":1416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732227059206,"stop":1732227083116,"duration":23910},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732227083116,"stop":1732227086244,"duration":3128},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 4 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbcaf35d0>\ndevice = <golioth.golioth.Device object at 0xffffbcb09f90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 4 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"175e3666ffbc9feb","name":"log","source":"175e3666ffbc9feb.txt","type":"text/plain","size":33423}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732227124588,"stop":1732227124618,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732227124620,"stop":1732227125456,"duration":836},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732227125458,"stop":1732227125460,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732227125465,"stop":1732227125465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8d9924c0c558"},{"name":"thread","value":"593-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":61,"unknown":0,"total":66},"items":[{"uid":"5229604c6616867e","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/5229604c6616867e","status":"passed","time":{"start":1732224671641,"stop":1732224695271,"duration":23630}},{"uid":"52a344fbedbd9d38","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/52a344fbedbd9d38","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732220824264,"stop":1732220824264,"duration":0}},{"uid":"888ff26a08aab63a","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/888ff26a08aab63a","status":"passed","time":{"start":1732215840394,"stop":1732215864340,"duration":23946}},{"uid":"d01015fcc270f34","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d01015fcc270f34","status":"passed","time":{"start":1732211065358,"stop":1732211091711,"duration":26353}},{"uid":"32e5fc7d22263d3e","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/32e5fc7d22263d3e","status":"passed","time":{"start":1732209515924,"stop":1732209542412,"duration":26488}},{"uid":"a44e4392f30310d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/a44e4392f30310d7","status":"passed","time":{"start":1732208405850,"stop":1732208429249,"duration":23399}},{"uid":"e76e2b0806ae42d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/e76e2b0806ae42d3","status":"passed","time":{"start":1732185774091,"stop":1732185798443,"duration":24352}},{"uid":"a7acb49419ab00a6","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/a7acb49419ab00a6","status":"passed","time":{"start":1732200155096,"stop":1732200179053,"duration":23957}},{"uid":"3ecd87d66d798256","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/3ecd87d66d798256","status":"passed","time":{"start":1732187276163,"stop":1732187300190,"duration":24027}},{"uid":"eb112e533d21ace0","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/eb112e533d21ace0","status":"passed","time":{"start":1732185774091,"stop":1732185798443,"duration":24352}},{"uid":"db32ec2aa3c5ddee","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/db32ec2aa3c5ddee","status":"passed","time":{"start":1732195030491,"stop":1732195053933,"duration":23442}},{"uid":"f54113b276e61839","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/f54113b276e61839","status":"passed","time":{"start":1732187276163,"stop":1732187300190,"duration":24027}},{"uid":"2c12b5894bd252e4","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/2c12b5894bd252e4","status":"passed","time":{"start":1732185774091,"stop":1732185798443,"duration":24352}},{"uid":"d6eb099602e7697f","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/d6eb099602e7697f","status":"passed","time":{"start":1732187276163,"stop":1732187300190,"duration":24027}},{"uid":"a49e77a03e8c3cef","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/a49e77a03e8c3cef","status":"passed","time":{"start":1732185774091,"stop":1732185798443,"duration":24352}},{"uid":"f9e8cb9818adddf8","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/f9e8cb9818adddf8","status":"passed","time":{"start":1732142357365,"stop":1732142380738,"duration":23373}},{"uid":"b2bc5883f9bf877c","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/b2bc5883f9bf877c","status":"passed","time":{"start":1732147186761,"stop":1732147211630,"duration":24869}},{"uid":"ac822f221e0f7a2e","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/ac822f221e0f7a2e","status":"passed","time":{"start":1732143988202,"stop":1732144011881,"duration":23679}},{"uid":"5c10d91f9544a13a","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/5c10d91f9544a13a","status":"passed","time":{"start":1732142357365,"stop":1732142380738,"duration":23373}},{"uid":"9b6158d8c10f0622","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/9b6158d8c10f0622","status":"passed","time":{"start":1732134284763,"stop":1732134310476,"duration":25713}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1d008944be6f4bb7.json","parameterValues":["'nrf52840dk'","'zephyr'"]}