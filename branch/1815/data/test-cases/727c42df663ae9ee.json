{"uid":"727c42df663ae9ee","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"ddbd6781d4488af4f57eae6c3dca1e27","time":{"start":1732217777553,"stop":1732217871763,"duration":94210},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dc67050>\nproject = <golioth.golioth.Project object at 0xffff9ddd2e50>\ndevice = <golioth.golioth.Device object at 0xffff9dc49b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732217762703,"stop":1732217762704,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732217762704,"stop":1732217762704,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732217762705,"stop":1732217762705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732217762705,"stop":1732217762705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732217762706,"stop":1732217762706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732217762706,"stop":1732217762706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732217762707,"stop":1732217762707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732217762707,"stop":1732217762709,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732217762710,"stop":1732217763169,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732217763170,"stop":1732217764128,"duration":958},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732217764129,"stop":1732217776941,"duration":12812},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732217776942,"stop":1732217777550,"duration":608},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dc67050>\nproject = <golioth.golioth.Project object at 0xffff9ddd2e50>\ndevice = <golioth.golioth.Device object at 0xffff9dc49b10>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"69f69269d481a8b8","name":"log","source":"69f69269d481a8b8.txt","type":"text/plain","size":28997}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732217872121,"stop":1732217872295,"duration":174},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732217872297,"stop":1732217872712,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732217872714,"stop":1732217872716,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732217872718,"stop":1732217872718,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"61b793829390"},{"name":"thread","value":"467-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":54,"unknown":0,"total":66},"items":[{"uid":"fedaff6629b9918","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/fedaff6629b9918","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732212138889,"stop":1732212233002,"duration":94113}},{"uid":"523813aa173ec857","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/523813aa173ec857","status":"passed","time":{"start":1732210669544,"stop":1732210709761,"duration":40217}},{"uid":"973e54c7fb51dbc0","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/973e54c7fb51dbc0","status":"passed","time":{"start":1732209398304,"stop":1732209438655,"duration":40351}},{"uid":"fc3f475f32c83348","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/fc3f475f32c83348","status":"passed","time":{"start":1732206038243,"stop":1732206078708,"duration":40465}},{"uid":"36898cd35838c139","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/36898cd35838c139","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732203452413,"stop":1732203546504,"duration":94091}},{"uid":"88c929d6fd7fb0ce","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/88c929d6fd7fb0ce","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732201532682,"stop":1732201627199,"duration":94517}},{"uid":"f9c5e91914bea5d9","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/f9c5e91914bea5d9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199815243,"stop":1732199909253,"duration":94010}},{"uid":"d34cd4165cead6ba","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d34cd4165cead6ba","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732198392474,"stop":1732198486713,"duration":94239}},{"uid":"bda3fec57cf2a1ef","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/bda3fec57cf2a1ef","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732194319643,"stop":1732194413651,"duration":94008}},{"uid":"674294804b10aaa","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/674294804b10aaa","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192668622,"stop":1732192762896,"duration":94274}},{"uid":"b51eb805cb9ccfe9","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/b51eb805cb9ccfe9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732188050617,"stop":1732188144714,"duration":94097}},{"uid":"a848ebc77fdf782c","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/a848ebc77fdf782c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732186149730,"stop":1732186243674,"duration":93944}},{"uid":"406d4834a306c43c","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/406d4834a306c43c","status":"passed","time":{"start":1732143019514,"stop":1732143061900,"duration":42386}},{"uid":"4c079faa6912200e","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/4c079faa6912200e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732149537163,"stop":1732149631460,"duration":94297}},{"uid":"71953e2993de8984","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/71953e2993de8984","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732147459706,"stop":1732147553767,"duration":94061}},{"uid":"ae70b0d7b9d45fa4","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/ae70b0d7b9d45fa4","status":"passed","time":{"start":1732144828998,"stop":1732144868959,"duration":39961}},{"uid":"dfba3f891bcec628","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/dfba3f891bcec628","status":"passed","time":{"start":1732143019514,"stop":1732143061900,"duration":42386}},{"uid":"844d079f1de4681","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/844d079f1de4681","status":"passed","time":{"start":1732134972305,"stop":1732135030022,"duration":57717}},{"uid":"f41700e27a6014bf","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/f41700e27a6014bf","status":"passed","time":{"start":1732044860260,"stop":1732044902281,"duration":42021}},{"uid":"c54b968b54b7f699","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/c54b968b54b7f699","status":"passed","time":{"start":1732044860260,"stop":1732044902281,"duration":42021}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"727c42df663ae9ee.json","parameterValues":["'rak5010'","'zephyr'"]}