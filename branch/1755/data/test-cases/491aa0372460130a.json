{"uid":"491aa0372460130a","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1731712105665,"stop":1731712143155,"duration":37490},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff980b81d0>\ndevice = <golioth.golioth.Device object at 0xffff980baf10>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff98228410>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731712076978,"stop":1731712076979,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1731712076979,"stop":1731712076994,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731712076995,"stop":1731712076996,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731712076996,"stop":1731712076996,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731712076997,"stop":1731712076999,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731712077000,"stop":1731712077000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731712077000,"stop":1731712077000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731712077001,"stop":1731712077438,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731712077438,"stop":1731712078428,"duration":990},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731712078429,"stop":1731712104595,"duration":26166},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731712104596,"stop":1731712105662,"duration":1066},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff980b81d0>\ndevice = <golioth.golioth.Device object at 0xffff980baf10>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff98228410>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","steps":[],"attachments":[{"uid":"b615d74ac678b080","name":"log","source":"b615d74ac678b080.txt","type":"text/plain","size":20908}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731712143364,"stop":1731712143401,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731712143403,"stop":1731712143814,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731712143816,"stop":1731712143818,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731712143823,"stop":1731712143823,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"10ff5219e7b5"},{"name":"thread","value":"394-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":14,"unknown":0,"total":17},"items":[{"uid":"74a13e736d14b5db","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/74a13e736d14b5db","status":"passed","time":{"start":1731709633677,"stop":1731709690009,"duration":56332}},{"uid":"da5dba8946d6716","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/da5dba8946d6716","status":"passed","time":{"start":1731709304513,"stop":1731709334463,"duration":29950}},{"uid":"19aa6a587984fcb9","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/19aa6a587984fcb9","status":"passed","time":{"start":1731697064826,"stop":1731697115741,"duration":50915}},{"uid":"9904e97e84799306","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/9904e97e84799306","status":"passed","time":{"start":1731614391148,"stop":1731614433873,"duration":42725}},{"uid":"71a71be8668eb37b","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/71a71be8668eb37b","status":"passed","time":{"start":1731596769464,"stop":1731596799747,"duration":30283}},{"uid":"ffb85c106d5a026c","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/ffb85c106d5a026c","status":"passed","time":{"start":1731549370873,"stop":1731549418679,"duration":47806}},{"uid":"a105a2be37e7de6f","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/a105a2be37e7de6f","status":"passed","time":{"start":1731544176436,"stop":1731544206004,"duration":29568}},{"uid":"2db821d21c475dfa","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/2db821d21c475dfa","status":"passed","time":{"start":1731541491700,"stop":1731541529146,"duration":37446}},{"uid":"37518f38c0456334","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/37518f38c0456334","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731540111546,"stop":1731540224692,"duration":113146}},{"uid":"74b9c78d8c3261e7","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/74b9c78d8c3261e7","status":"passed","time":{"start":1731528093793,"stop":1731528143060,"duration":49267}},{"uid":"58886f3b748dbbe","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/58886f3b748dbbe","status":"passed","time":{"start":1731523052540,"stop":1731523102991,"duration":50451}},{"uid":"da301bf115f6f191","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/da301bf115f6f191","status":"passed","time":{"start":1731523052540,"stop":1731523102991,"duration":50451}},{"uid":"b649fcf7c3cc23f","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/b649fcf7c3cc23f","status":"passed","time":{"start":1731520812895,"stop":1731520859240,"duration":46345}},{"uid":"e7f4e4cdaae5f727","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/e7f4e4cdaae5f727","status":"passed","time":{"start":1731428911817,"stop":1731428942050,"duration":30233}},{"uid":"db0a3e9fa142e0d0","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/db0a3e9fa142e0d0","status":"passed","time":{"start":1731105162228,"stop":1731105192696,"duration":30468}},{"uid":"841aa0770aaf08d9","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/841aa0770aaf08d9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731099443821,"stop":1731099556930,"duration":113109}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"491aa0372460130a.json","parameterValues":["'nrf9160dk'","'zephyr'"]}