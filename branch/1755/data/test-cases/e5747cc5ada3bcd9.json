{"uid":"e5747cc5ada3bcd9","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1731713153749,"stop":1731713192322,"duration":38573},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7dd07410>\ndevice = <golioth.golioth.Device object at 0xffff7dd21e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 1 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1731713124499,"stop":1731713124499,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731713124500,"stop":1731713124500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731713124500,"stop":1731713124500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731713124501,"stop":1731713124502,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731713124501,"stop":1731713124501,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731713124502,"stop":1731713124504,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731713124505,"stop":1731713124506,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731713124505,"stop":1731713124505,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731713124506,"stop":1731713124914,"duration":408},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731713124915,"stop":1731713125858,"duration":943},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731713125859,"stop":1731713152642,"duration":26783},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731713152642,"stop":1731713153744,"duration":1102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7dd07410>\ndevice = <golioth.golioth.Device object at 0xffff7dd21e50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 1 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","steps":[],"attachments":[{"uid":"5cfd59298065e277","name":"log","source":"5cfd59298065e277.txt","type":"text/plain","size":18814}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731713192501,"stop":1731713192508,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731713192510,"stop":1731713192883,"duration":373},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731713192885,"stop":1731713192887,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731713192892,"stop":1731713192892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"10ff5219e7b5"},{"name":"thread","value":"937-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1dfdb6f5403be2e1","status":"passed","time":{"start":1731712996749,"stop":1731713038718,"duration":41969}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":14,"unknown":0,"total":17},"items":[{"uid":"1dc66c99c2b13cb3","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/1dc66c99c2b13cb3","status":"passed","time":{"start":1731710917259,"stop":1731710957982,"duration":40723}},{"uid":"87a3181a68aaba51","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/87a3181a68aaba51","status":"passed","time":{"start":1731710005372,"stop":1731710029791,"duration":24419}},{"uid":"5615c6879de3f798","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/5615c6879de3f798","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731698270521,"stop":1731698383308,"duration":112787}},{"uid":"aaa4de2723f9d718","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/aaa4de2723f9d718","status":"passed","time":{"start":1731615304703,"stop":1731615329168,"duration":24465}},{"uid":"3d61d42ae8b090e7","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/3d61d42ae8b090e7","status":"passed","time":{"start":1731597796821,"stop":1731597835470,"duration":38649}},{"uid":"fbaa6513724d2680","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/fbaa6513724d2680","status":"passed","time":{"start":1731550384985,"stop":1731550427307,"duration":42322}},{"uid":"360563e19a18bcc","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/360563e19a18bcc","status":"passed","time":{"start":1731545108572,"stop":1731545133648,"duration":25076}},{"uid":"e18491ec705daaa3","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/e18491ec705daaa3","status":"passed","time":{"start":1731542341890,"stop":1731542366179,"duration":24289}},{"uid":"795ae8725e8f3666","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/795ae8725e8f3666","status":"passed","time":{"start":1731541406172,"stop":1731541441168,"duration":34996}},{"uid":"c55f1a6e75292370","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/c55f1a6e75292370","status":"passed","time":{"start":1731529129261,"stop":1731529168820,"duration":39559}},{"uid":"d70913019d20b6bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/d70913019d20b6bd","status":"passed","time":{"start":1731524107975,"stop":1731524146306,"duration":38331}},{"uid":"b611cfd7ff4ea720","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/b611cfd7ff4ea720","status":"passed","time":{"start":1731524107975,"stop":1731524146306,"duration":38331}},{"uid":"f14901b036e98449","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/f14901b036e98449","status":"passed","time":{"start":1731521947854,"stop":1731521991245,"duration":43391}},{"uid":"1c924529718234b5","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/1c924529718234b5","status":"passed","time":{"start":1731429907138,"stop":1731429933544,"duration":26406}},{"uid":"594427c16796795","reportUrl":"https://golioth.github.io/allure-reports/branch/1720//#testresult/594427c16796795","status":"passed","time":{"start":1731106035487,"stop":1731106060389,"duration":24902}},{"uid":"2592cbe11afedae9","reportUrl":"https://golioth.github.io/allure-reports/branch/1719//#testresult/2592cbe11afedae9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731100590566,"stop":1731100703420,"duration":112854}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e5747cc5ada3bcd9.json","parameterValues":["'nrf9160dk'","'zephyr'"]}