{
  "uid" : "ac53e39d824190a1",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "3038e6d5fffa4527a437bf078474dadf",
  "time" : {
    "start" : 1734128059861,
    "stop" : 1734128152605,
    "duration" : 92744
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb9edb4d0>\ndevice = <golioth.golioth.Device object at 0xffffb9eb5e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_url",
    "time" : {
      "start" : 1734128045209,
      "stop" : 1734128045209,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734128046585,
      "stop" : 1734128059208,
      "duration" : 12623
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734128045205,
      "stop" : 1734128045205,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734128045206,
      "stop" : 1734128045208,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734128045209,
      "stop" : 1734128045209,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734128045204,
      "stop" : 1734128045204,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734128045672,
      "stop" : 1734128046584,
      "duration" : 912
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734128045205,
      "stop" : 1734128045206,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734128045203,
      "stop" : 1734128045203,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734128045210,
      "stop" : 1734128045671,
      "duration" : 461
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734128059209,
      "stop" : 1734128059858,
      "duration" : 649
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734128045204,
      "stop" : 1734128045204,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb9edb4d0>\ndevice = <golioth.golioth.Device object at 0xffffb9eb5e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "442b2b8583c7c9ff",
      "name" : "log",
      "source" : "442b2b8583c7c9ff.txt",
      "type" : "text/plain",
      "size" : 21406
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1734128152887,
      "stop" : 1734128153097,
      "duration" : 210
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734128153475,
      "stop" : 1734128153475,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734128153099,
      "stop" : 1734128153465,
      "duration" : 366
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734128153467,
      "stop" : 1734128153470,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "79bddac46ff5"
  }, {
    "name" : "thread",
    "value" : "369-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 11,
        "skipped" : 0,
        "passed" : 13,
        "unknown" : 0,
        "total" : 24
      },
      "items" : [ {
        "uid" : "3428ff3b9fd7855a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/3428ff3b9fd7855a",
        "status" : "passed",
        "time" : {
          "start" : 1734048623465,
          "stop" : 1734048672090,
          "duration" : 48625
        }
      }, {
        "uid" : "3d089411c0722288",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/3d089411c0722288",
        "status" : "passed",
        "time" : {
          "start" : 1734044528253,
          "stop" : 1734044576427,
          "duration" : 48174
        }
      }, {
        "uid" : "349c225e17e26062",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/349c225e17e26062",
        "status" : "broken",
        "statusDetails" : "serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'",
        "time" : {
          "start" : 1734033475810,
          "stop" : 1734033475810,
          "duration" : 0
        }
      }, {
        "uid" : "81ba91ccbbab0b1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/81ba91ccbbab0b1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734028861427,
          "stop" : 1734028954188,
          "duration" : 92761
        }
      }, {
        "uid" : "aca6a97df7bfc16c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/aca6a97df7bfc16c",
        "status" : "passed",
        "time" : {
          "start" : 1734024495337,
          "stop" : 1734024544783,
          "duration" : 49446
        }
      }, {
        "uid" : "66c1a501ea530607",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/66c1a501ea530607",
        "status" : "passed",
        "time" : {
          "start" : 1734023919311,
          "stop" : 1734023967972,
          "duration" : 48661
        }
      }, {
        "uid" : "77694286e644254a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/77694286e644254a",
        "status" : "passed",
        "time" : {
          "start" : 1733982341173,
          "stop" : 1733982389992,
          "duration" : 48819
        }
      }, {
        "uid" : "2c3038e918b74a4f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/2c3038e918b74a4f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733960781081,
          "stop" : 1733960873889,
          "duration" : 92808
        }
      }, {
        "uid" : "79273a44dc6c2f12",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/79273a44dc6c2f12",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733957451041,
          "stop" : 1733957543889,
          "duration" : 92848
        }
      }, {
        "uid" : "e224e9a149fc000d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/e224e9a149fc000d",
        "status" : "broken",
        "statusDetails" : "serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'",
        "time" : {
          "start" : 1733952194660,
          "stop" : 1733952194660,
          "duration" : 0
        }
      }, {
        "uid" : "3b0da85954c0b408",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/3b0da85954c0b408",
        "status" : "passed",
        "time" : {
          "start" : 1733948680844,
          "stop" : 1733948728556,
          "duration" : 47712
        }
      }, {
        "uid" : "36d3bbf4a0e35277",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/36d3bbf4a0e35277",
        "status" : "passed",
        "time" : {
          "start" : 1733946108217,
          "stop" : 1733946157435,
          "duration" : 49218
        }
      }, {
        "uid" : "bcdedc7ff4d5661a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/bcdedc7ff4d5661a",
        "status" : "passed",
        "time" : {
          "start" : 1733941438031,
          "stop" : 1733941486428,
          "duration" : 48397
        }
      }, {
        "uid" : "b63dd14492f7007d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/b63dd14492f7007d",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733941443204,
          "stop" : 1733941535947,
          "duration" : 92743
        }
      }, {
        "uid" : "4386dced030473d9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/4386dced030473d9",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733931798527,
          "stop" : 1733931891305,
          "duration" : 92778
        }
      }, {
        "uid" : "8d5434e90eb55d48",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/8d5434e90eb55d48",
        "status" : "passed",
        "time" : {
          "start" : 1733886803020,
          "stop" : 1733886851185,
          "duration" : 48165
        }
      }, {
        "uid" : "8eaed7de36a184d5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/8eaed7de36a184d5",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733891181681,
          "stop" : 1733891274428,
          "duration" : 92747
        }
      }, {
        "uid" : "73e6a6fa3d581bf0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/73e6a6fa3d581bf0",
        "status" : "passed",
        "time" : {
          "start" : 1733886803020,
          "stop" : 1733886851185,
          "duration" : 48165
        }
      }, {
        "uid" : "517fdb6bca4e74f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/517fdb6bca4e74f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733875795930,
          "stop" : 1733875888724,
          "duration" : 92794
        }
      }, {
        "uid" : "6476c5af429f43f7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/6476c5af429f43f7",
        "status" : "passed",
        "time" : {
          "start" : 1733876174357,
          "stop" : 1733876224843,
          "duration" : 50486
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "ac53e39d824190a1.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}