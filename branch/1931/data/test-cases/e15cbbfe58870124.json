{
  "uid" : "e15cbbfe58870124",
  "name" : "test_lightdb_delete",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete",
  "historyId" : "6de3eafb2765c88fcbba2d44b75da8e7",
  "time" : {
    "start" : 1734128395173,
    "stop" : 1734128488674,
    "duration" : 93501
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff89497dd0>\ndevice = <golioth.golioth.Device object at 0xffff89482610>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1734128380574,
      "stop" : 1734128380574,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734128380570,
      "stop" : 1734128380570,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734128380575,
      "stop" : 1734128380575,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734128394526,
      "stop" : 1734128395170,
      "duration" : 644
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734128380568,
      "stop" : 1734128380568,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734128381998,
      "stop" : 1734128394525,
      "duration" : 12527
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734128380571,
      "stop" : 1734128380573,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734128380569,
      "stop" : 1734128380569,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734128380986,
      "stop" : 1734128381997,
      "duration" : 1011
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734128380569,
      "stop" : 1734128380570,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734128380571,
      "stop" : 1734128380571,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734128380575,
      "stop" : 1734128380986,
      "duration" : 411
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff89497dd0>\ndevice = <golioth.golioth.Device object at 0xffff89482610>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d878474bf5c01be6",
      "name" : "log",
      "source" : "d878474bf5c01be6.txt",
      "type" : "text/plain",
      "size" : 27006
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1734128489042,
      "stop" : 1734128489213,
      "duration" : 171
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734128489601,
      "stop" : 1734128489602,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734128489215,
      "stop" : 1734128489592,
      "duration" : 377
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734128489594,
      "stop" : 1734128489597,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "79bddac46ff5"
  }, {
    "name" : "thread",
    "value" : "429-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 11,
        "skipped" : 0,
        "passed" : 13,
        "unknown" : 0,
        "total" : 24
      },
      "items" : [ {
        "uid" : "1cb8f310ccf0cd3c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/1cb8f310ccf0cd3c",
        "status" : "passed",
        "time" : {
          "start" : 1734048907906,
          "stop" : 1734048953557,
          "duration" : 45651
        }
      }, {
        "uid" : "f9bbf630e672166f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/f9bbf630e672166f",
        "status" : "passed",
        "time" : {
          "start" : 1734044811603,
          "stop" : 1734044857608,
          "duration" : 46005
        }
      }, {
        "uid" : "d98965fc296a6b3f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/d98965fc296a6b3f",
        "status" : "broken",
        "statusDetails" : "serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'",
        "time" : {
          "start" : 1734033532639,
          "stop" : 1734033532639,
          "duration" : 0
        }
      }, {
        "uid" : "62243f52c098798f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/62243f52c098798f",
        "status" : "broken",
        "statusDetails" : "serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'",
        "time" : {
          "start" : 1734029098354,
          "stop" : 1734029098354,
          "duration" : 0
        }
      }, {
        "uid" : "9f90467eeda5aca6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/9f90467eeda5aca6",
        "status" : "passed",
        "time" : {
          "start" : 1734024773388,
          "stop" : 1734024819353,
          "duration" : 45965
        }
      }, {
        "uid" : "44ed72c3d44c0984",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/44ed72c3d44c0984",
        "status" : "passed",
        "time" : {
          "start" : 1734023577059,
          "stop" : 1734023621847,
          "duration" : 44788
        }
      }, {
        "uid" : "edf2fc0012b01d2d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/edf2fc0012b01d2d",
        "status" : "passed",
        "time" : {
          "start" : 1733982626861,
          "stop" : 1733982672396,
          "duration" : 45535
        }
      }, {
        "uid" : "32e99b1c7abd9f0d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/32e99b1c7abd9f0d",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733961115938,
          "stop" : 1733961209429,
          "duration" : 93491
        }
      }, {
        "uid" : "5aee518c295ef7fc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/5aee518c295ef7fc",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733957786643,
          "stop" : 1733957880249,
          "duration" : 93606
        }
      }, {
        "uid" : "78e750db687572bf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/78e750db687572bf",
        "status" : "broken",
        "statusDetails" : "serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'",
        "time" : {
          "start" : 1733952252745,
          "stop" : 1733952252745,
          "duration" : 0
        }
      }, {
        "uid" : "84f5453d5fe80839",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/84f5453d5fe80839",
        "status" : "passed",
        "time" : {
          "start" : 1733948964467,
          "stop" : 1733949009477,
          "duration" : 45010
        }
      }, {
        "uid" : "42ace3fac442fcf5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/42ace3fac442fcf5",
        "status" : "passed",
        "time" : {
          "start" : 1733946393923,
          "stop" : 1733946439412,
          "duration" : 45489
        }
      }, {
        "uid" : "9754ada9ece83a37",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/9754ada9ece83a37",
        "status" : "passed",
        "time" : {
          "start" : 1733941724503,
          "stop" : 1733941769700,
          "duration" : 45197
        }
      }, {
        "uid" : "275e190fd1e2347",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/275e190fd1e2347",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733941778031,
          "stop" : 1733941871479,
          "duration" : 93448
        }
      }, {
        "uid" : "ce63ad1cac53481f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/ce63ad1cac53481f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733932133163,
          "stop" : 1733932226641,
          "duration" : 93478
        }
      }, {
        "uid" : "296ccecb554ab59f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/296ccecb554ab59f",
        "status" : "passed",
        "time" : {
          "start" : 1733887087423,
          "stop" : 1733887132907,
          "duration" : 45484
        }
      }, {
        "uid" : "4593ba1c1287f1b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/4593ba1c1287f1b",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733890662437,
          "stop" : 1733890756049,
          "duration" : 93612
        }
      }, {
        "uid" : "9547068e9b8c6438",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/9547068e9b8c6438",
        "status" : "passed",
        "time" : {
          "start" : 1733887087423,
          "stop" : 1733887132907,
          "duration" : 45484
        }
      }, {
        "uid" : "371246fa874803cd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/371246fa874803cd",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733876130495,
          "stop" : 1733876224008,
          "duration" : 93513
        }
      }, {
        "uid" : "a2a6e7dffd0a7c63",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/a2a6e7dffd0a7c63",
        "status" : "passed",
        "time" : {
          "start" : 1733876460823,
          "stop" : 1733876507053,
          "duration" : 46230
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "e15cbbfe58870124.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}