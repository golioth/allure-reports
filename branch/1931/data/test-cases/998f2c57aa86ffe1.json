{
  "uid" : "998f2c57aa86ffe1",
  "name" : "test_rpc",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc",
  "historyId" : "b3d5b97364e6f035c71c0a09d7a1be64",
  "time" : {
    "start" : 1734127948139,
    "stop" : 1734128040856,
    "duration" : 92717
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb8f5d210>\ndevice = <golioth.golioth.Device object at 0xffffb8fb8850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "project",
    "time" : {
      "start" : 1734127931958,
      "stop" : 1734127932489,
      "duration" : 531
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734127947533,
      "stop" : 1734127948136,
      "duration" : 603
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734127932489,
      "stop" : 1734127933310,
      "duration" : 821
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734127931952,
      "stop" : 1734127931952,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734127931954,
      "stop" : 1734127931956,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734127931953,
      "stop" : 1734127931953,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734127931953,
      "stop" : 1734127931954,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734127931951,
      "stop" : 1734127931951,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734127931952,
      "stop" : 1734127931952,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734127933311,
      "stop" : 1734127947532,
      "duration" : 14221
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734127931957,
      "stop" : 1734127931958,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734127931957,
      "stop" : 1734127931957,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb8f5d210>\ndevice = <golioth.golioth.Device object at 0xffffb8fb8850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8106d6f9632b56e1",
      "name" : "log",
      "source" : "8106d6f9632b56e1.txt",
      "type" : "text/plain",
      "size" : 19442
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1734128041900,
      "stop" : 1734128041902,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734128041402,
      "stop" : 1734128041898,
      "duration" : 496
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734128041907,
      "stop" : 1734128041907,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734128041232,
      "stop" : 1734128041400,
      "duration" : 168
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "79bddac46ff5"
  }, {
    "name" : "thread",
    "value" : "347-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 12,
        "skipped" : 0,
        "passed" : 12,
        "unknown" : 0,
        "total" : 24
      },
      "items" : [ {
        "uid" : "8339dbbddb6f80c7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/8339dbbddb6f80c7",
        "status" : "passed",
        "time" : {
          "start" : 1734048563082,
          "stop" : 1734048582764,
          "duration" : 19682
        }
      }, {
        "uid" : "e304bb30ae4525de",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/e304bb30ae4525de",
        "status" : "passed",
        "time" : {
          "start" : 1734044468560,
          "stop" : 1734044487777,
          "duration" : 19217
        }
      }, {
        "uid" : "c1ccdfedb07f287b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/c1ccdfedb07f287b",
        "status" : "broken",
        "statusDetails" : "serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_B1E5A88410C9C828-if00'",
        "time" : {
          "start" : 1734033455041,
          "stop" : 1734033455041,
          "duration" : 0
        }
      }, {
        "uid" : "d68e394ab6534e95",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/d68e394ab6534e95",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734028749765,
          "stop" : 1734028842503,
          "duration" : 92738
        }
      }, {
        "uid" : "a2fc4b96c9642721",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/a2fc4b96c9642721",
        "status" : "passed",
        "time" : {
          "start" : 1734024435401,
          "stop" : 1734024454621,
          "duration" : 19220
        }
      }, {
        "uid" : "f48a0ea0b8403f13",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/f48a0ea0b8403f13",
        "status" : "passed",
        "time" : {
          "start" : 1734023228144,
          "stop" : 1734023247671,
          "duration" : 19527
        }
      }, {
        "uid" : "ab3a5ae816b8a183",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/ab3a5ae816b8a183",
        "status" : "passed",
        "time" : {
          "start" : 1733982281704,
          "stop" : 1733982300690,
          "duration" : 18986
        }
      }, {
        "uid" : "d0a8b385c0edd93f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/d0a8b385c0edd93f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733960669445,
          "stop" : 1733960762139,
          "duration" : 92694
        }
      }, {
        "uid" : "6cef6ef1c9845a26",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/6cef6ef1c9845a26",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733957339141,
          "stop" : 1733957431921,
          "duration" : 92780
        }
      }, {
        "uid" : "f6515d6da0dbe053",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/f6515d6da0dbe053",
        "status" : "broken",
        "statusDetails" : "serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'",
        "time" : {
          "start" : 1733952173054,
          "stop" : 1733952173054,
          "duration" : 0
        }
      }, {
        "uid" : "d8ac6f1170a933ec",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/d8ac6f1170a933ec",
        "status" : "passed",
        "time" : {
          "start" : 1733948621635,
          "stop" : 1733948640320,
          "duration" : 18685
        }
      }, {
        "uid" : "32b64a44ee80cd0f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/32b64a44ee80cd0f",
        "status" : "passed",
        "time" : {
          "start" : 1733946048550,
          "stop" : 1733946067572,
          "duration" : 19022
        }
      }, {
        "uid" : "a0b82f69e6411db",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/a0b82f69e6411db",
        "status" : "passed",
        "time" : {
          "start" : 1733941377309,
          "stop" : 1733941397274,
          "duration" : 19965
        }
      }, {
        "uid" : "6be96562a05581f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/6be96562a05581f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733941331360,
          "stop" : 1733941424156,
          "duration" : 92796
        }
      }, {
        "uid" : "259e3e622d097e08",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/259e3e622d097e08",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733931687007,
          "stop" : 1733931779691,
          "duration" : 92684
        }
      }, {
        "uid" : "969312f41ef83e7f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/969312f41ef83e7f",
        "status" : "passed",
        "time" : {
          "start" : 1733886742821,
          "stop" : 1733886762393,
          "duration" : 19572
        }
      }, {
        "uid" : "76ccf5d2cc9277e7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/76ccf5d2cc9277e7",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733890146554,
          "stop" : 1733890239302,
          "duration" : 92748
        }
      }, {
        "uid" : "91ca9c9d14711bbc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/91ca9c9d14711bbc",
        "status" : "passed",
        "time" : {
          "start" : 1733886742821,
          "stop" : 1733886762393,
          "duration" : 19572
        }
      }, {
        "uid" : "b035f1646baaaa89",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/b035f1646baaaa89",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733875684298,
          "stop" : 1733875777072,
          "duration" : 92774
        }
      }, {
        "uid" : "1d733c410c95a1b2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/1d733c410c95a1b2",
        "status" : "passed",
        "time" : {
          "start" : 1733876114899,
          "stop" : 1733876133544,
          "duration" : 18645
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "998f2c57aa86ffe1.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}