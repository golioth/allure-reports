{"uid":"fa258f1fd0949874","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"b3d5b97364e6f035c71c0a09d7a1be64","time":{"start":1732191997688,"stop":1732192090371,"duration":92683},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab87f550>\ndevice = <golioth.golioth.Device object at 0xffffab8da390>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732191982256,"stop":1732191982256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732191982257,"stop":1732191982257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732191982257,"stop":1732191982257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732191982258,"stop":1732191982258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732191982258,"stop":1732191982258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732191982259,"stop":1732191982261,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732191982262,"stop":1732191982262,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732191982262,"stop":1732191982262,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732191982263,"stop":1732191982823,"duration":560},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732191982824,"stop":1732191983711,"duration":887},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732191983712,"stop":1732191997033,"duration":13321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732191997034,"stop":1732191997685,"duration":651},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffab87f550>\ndevice = <golioth.golioth.Device object at 0xffffab8da390>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for device to reboot and connect\n    \n>       shell._device.readlines_until(regex=\".*RPC observation established\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*RPC observation established'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"3528c42d361ce0f","name":"log","source":"3528c42d361ce0f.txt","type":"text/plain","size":19441}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732192090744,"stop":1732192090989,"duration":245},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732192090990,"stop":1732192091401,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732192091403,"stop":1732192091405,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732192091410,"stop":1732192091410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1aca3a409cc6"},{"name":"thread","value":"345-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"59d57fc0bc9d1141","status":"passed","time":{"start":1732185451407,"stop":1732185472461,"duration":21054}},{"uid":"3e22ffd9c728434a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146654591,"stop":1732146747365,"duration":92774}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":14,"skipped":0,"passed":42,"unknown":0,"total":56},"items":[{"uid":"a49dfabeff23249c","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/a49dfabeff23249c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732187379905,"stop":1732187472595,"duration":92690}},{"uid":"15b2fb7afd1fd275","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/15b2fb7afd1fd275","status":"passed","time":{"start":1732185451407,"stop":1732185472461,"duration":21054}},{"uid":"71cbefabf4b078d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/71cbefabf4b078d3","status":"passed","time":{"start":1732142637993,"stop":1732142657778,"duration":19785}},{"uid":"5086b1621338f9f9","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/5086b1621338f9f9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732148731489,"stop":1732148824158,"duration":92669}},{"uid":"1288d08f9bdc1127","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/1288d08f9bdc1127","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146654591,"stop":1732146747365,"duration":92774}},{"uid":"a809c18fe9f9a995","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/a809c18fe9f9a995","status":"passed","time":{"start":1732144315936,"stop":1732144335623,"duration":19687}},{"uid":"593a6c25563ced0","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/593a6c25563ced0","status":"passed","time":{"start":1732142637993,"stop":1732142657778,"duration":19785}},{"uid":"6f6506c5ebca8a3b","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/6f6506c5ebca8a3b","status":"passed","time":{"start":1732134586261,"stop":1732134605103,"duration":18842}},{"uid":"32b784cf94647d54","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/32b784cf94647d54","status":"passed","time":{"start":1732044344232,"stop":1732044364173,"duration":19941}},{"uid":"5418cc2c4d0b3e1","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/5418cc2c4d0b3e1","status":"passed","time":{"start":1732044344232,"stop":1732044364173,"duration":19941}},{"uid":"af302d2ef41259e8","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/af302d2ef41259e8","status":"passed","time":{"start":1732126357460,"stop":1732126376782,"duration":19322}},{"uid":"39a038b6257ef3e2","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/39a038b6257ef3e2","status":"passed","time":{"start":1732123896376,"stop":1732123917511,"duration":21135}},{"uid":"b67545219fb541e","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/b67545219fb541e","status":"passed","time":{"start":1732044344232,"stop":1732044364173,"duration":19941}},{"uid":"2144cb90cf177c8e","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/2144cb90cf177c8e","status":"passed","time":{"start":1732048438662,"stop":1732048458372,"duration":19710}},{"uid":"cfe0984398ea7d73","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/cfe0984398ea7d73","status":"passed","time":{"start":1732048438662,"stop":1732048458372,"duration":19710}},{"uid":"a7c0854436b1b92","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/a7c0854436b1b92","status":"passed","time":{"start":1732048438662,"stop":1732048458372,"duration":19710}},{"uid":"c6eea39b8ea70851","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/c6eea39b8ea70851","status":"passed","time":{"start":1732044344232,"stop":1732044364173,"duration":19941}},{"uid":"8287037e1b65564d","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/8287037e1b65564d","status":"broken","statusDetails":"AttributeError: 'RPCTimeout' object has no attribute 'status_code'","time":{"start":1732032170356,"stop":1732032194313,"duration":23957}},{"uid":"f0a6cfa9f534071e","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/f0a6cfa9f534071e","status":"passed","time":{"start":1732014654370,"stop":1732014673816,"duration":19446}},{"uid":"736d97671e29540f","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/736d97671e29540f","status":"passed","time":{"start":1732014654370,"stop":1732014673816,"duration":19446}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"fa258f1fd0949874.json","parameterValues":["'rak5010'","'zephyr'"]}