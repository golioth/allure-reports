{"uid":"27810d1ba0dbd040","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"d863d307dfacb440b83f8a44acfa67f4","time":{"start":1732185613163,"stop":1732185706299,"duration":93136},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff998c8dd0>\ndevice = <golioth.golioth.Device object at 0xffff9987a790>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732185576064,"stop":1732185576064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732185576065,"stop":1732185576066,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732185576065,"stop":1732185576065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732185576066,"stop":1732185576066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732185576067,"stop":1732185576067,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732185576067,"stop":1732185576069,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732185576070,"stop":1732185576071,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732185576070,"stop":1732185576070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732185576071,"stop":1732185576506,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732185576506,"stop":1732185577405,"duration":899},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732185577405,"stop":1732185612552,"duration":35147},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732185612552,"stop":1732185613160,"duration":608},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff998c8dd0>\ndevice = <golioth.golioth.Device object at 0xffff9987a790>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a7d42358ae1fdef3","name":"log","source":"a7d42358ae1fdef3.txt","type":"text/plain","size":30054}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732185706575,"stop":1732185706619,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732185706621,"stop":1732185707030,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732185707033,"stop":1732185707035,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732185707040,"stop":1732185707040,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"921d55fe06e6"},{"name":"thread","value":"411-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9280594d62a80971","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146922547,"stop":1732147015684,"duration":93137}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":51,"unknown":0,"total":54},"items":[{"uid":"bd51650c5cefa390","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/bd51650c5cefa390","status":"passed","time":{"start":1732142742050,"stop":1732142802131,"duration":60081}},{"uid":"4fb744c5763a8157","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/4fb744c5763a8157","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732148999810,"stop":1732149092985,"duration":93175}},{"uid":"d1fea46d00f2faed","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/d1fea46d00f2faed","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146922547,"stop":1732147015684,"duration":93137}},{"uid":"4c10d1b948562338","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/4c10d1b948562338","status":"passed","time":{"start":1732144466013,"stop":1732144525222,"duration":59209}},{"uid":"969f19da5abd549b","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/969f19da5abd549b","status":"passed","time":{"start":1732142742050,"stop":1732142802131,"duration":60081}},{"uid":"14c1786c27b54224","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/14c1786c27b54224","status":"passed","time":{"start":1732134689636,"stop":1732134752734,"duration":63098}},{"uid":"406790f4310a2cd7","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/406790f4310a2cd7","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}},{"uid":"8d5c12c0c88544e5","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/8d5c12c0c88544e5","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}},{"uid":"be3a1756e07b0cb6","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/be3a1756e07b0cb6","status":"passed","time":{"start":1732126512582,"stop":1732126572225,"duration":59643}},{"uid":"17f0928be75a08e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/17f0928be75a08e6","status":"passed","time":{"start":1732124003387,"stop":1732124061612,"duration":58225}},{"uid":"b51d30d64c3fa2f8","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/b51d30d64c3fa2f8","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}},{"uid":"5d0e6c1fe4021023","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/5d0e6c1fe4021023","status":"passed","time":{"start":1732048543680,"stop":1732048602179,"duration":58499}},{"uid":"f284908eb4cacb1d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/f284908eb4cacb1d","status":"passed","time":{"start":1732048543680,"stop":1732048602179,"duration":58499}},{"uid":"772f0d989ee82c82","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/772f0d989ee82c82","status":"passed","time":{"start":1732048543680,"stop":1732048602179,"duration":58499}},{"uid":"3d8296f99e768d3e","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/3d8296f99e768d3e","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}},{"uid":"d83f1cd18a368dc9","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/d83f1cd18a368dc9","status":"passed","time":{"start":1732032281137,"stop":1732032340010,"duration":58873}},{"uid":"98d311ea40136b5e","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/98d311ea40136b5e","status":"passed","time":{"start":1732014759322,"stop":1732014817375,"duration":58053}},{"uid":"86cc11d6441a82ea","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/86cc11d6441a82ea","status":"passed","time":{"start":1732014759322,"stop":1732014817375,"duration":58053}},{"uid":"bfb6474465aad729","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/bfb6474465aad729","status":"passed","time":{"start":1732014759322,"stop":1732014817375,"duration":58053}},{"uid":"2120d4cbd0fa533a","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/2120d4cbd0fa533a","status":"passed","time":{"start":1732001495689,"stop":1732001554495,"duration":58806}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"27810d1ba0dbd040.json","parameterValues":["'rak5010'","'zephyr'"]}