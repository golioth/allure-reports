{"uid":"7ea75e75f99feccc","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"c3c56fd394e8a51c6a7b951f90915fb9","time":{"start":1732199479514,"stop":1732199572616,"duration":93102},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb4a67790>\ndevice = <golioth.golioth.Device object at 0xffffb4a46410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732199465069,"stop":1732199465069,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732199465070,"stop":1732199465070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732199465070,"stop":1732199465070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732199465071,"stop":1732199465071,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732199465072,"stop":1732199465072,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732199465072,"stop":1732199465074,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732199465075,"stop":1732199465075,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732199465075,"stop":1732199465076,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732199465076,"stop":1732199465545,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732199465546,"stop":1732199466439,"duration":893},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732199466440,"stop":1732199478903,"duration":12463},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732199478904,"stop":1732199479511,"duration":607},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb4a67790>\ndevice = <golioth.golioth.Device object at 0xffffb4a46410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"170e354d332e493f","name":"log","source":"170e354d332e493f.txt","type":"text/plain","size":21204}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732199572882,"stop":1732199573053,"duration":171},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732199573055,"stop":1732199573473,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732199573475,"stop":1732199573478,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732199573483,"stop":1732199573483,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"74715328e3f0"},{"name":"thread","value":"437-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"67414194f246a9a2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192332515,"stop":1732192425547,"duration":93032}},{"uid":"cb62ed26277ab24","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732185747253,"stop":1732185840384,"duration":93131}},{"uid":"cdae0fe26054f085","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732147056659,"stop":1732147149896,"duration":93237}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":52,"unknown":0,"total":59},"items":[{"uid":"1148faa80137ed8b","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/1148faa80137ed8b","status":"passed","time":{"start":1732197513403,"stop":1732197567352,"duration":53949}},{"uid":"d51c4f1f8dcef4f0","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/d51c4f1f8dcef4f0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732193983138,"stop":1732194076239,"duration":93101}},{"uid":"e51bde3dcd7facb3","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/e51bde3dcd7facb3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192332515,"stop":1732192425547,"duration":93032}},{"uid":"62407e5e191189a","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/62407e5e191189a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732187714749,"stop":1732187807792,"duration":93043}},{"uid":"868e286b31591e0d","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/868e286b31591e0d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732185747253,"stop":1732185840384,"duration":93131}},{"uid":"2b17a744b2b293db","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/2b17a744b2b293db","status":"passed","time":{"start":1732142821116,"stop":1732142877740,"duration":56624}},{"uid":"c62a37f7eb574db8","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/c62a37f7eb574db8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732149134121,"stop":1732149227256,"duration":93135}},{"uid":"ccbb15846cdea0af","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/ccbb15846cdea0af","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732147056659,"stop":1732147149896,"duration":93237}},{"uid":"6f626b53ce83b1ad","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/6f626b53ce83b1ad","status":"passed","time":{"start":1732144565841,"stop":1732144620424,"duration":54583}},{"uid":"e8b7d22ccd45203f","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/e8b7d22ccd45203f","status":"passed","time":{"start":1732142821116,"stop":1732142877740,"duration":56624}},{"uid":"b568eb86d6cf78c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/b568eb86d6cf78c5","status":"passed","time":{"start":1732134771068,"stop":1732134826627,"duration":55559}},{"uid":"a2df7fbe5706ece4","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/a2df7fbe5706ece4","status":"passed","time":{"start":1732044597160,"stop":1732044651704,"duration":54544}},{"uid":"711fe621dc28147e","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/711fe621dc28147e","status":"passed","time":{"start":1732044597160,"stop":1732044651704,"duration":54544}},{"uid":"1e73884bf5ab844d","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/1e73884bf5ab844d","status":"passed","time":{"start":1732126612430,"stop":1732126667013,"duration":54583}},{"uid":"1cfde1382188f6e8","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/1cfde1382188f6e8","status":"passed","time":{"start":1732124079982,"stop":1732124133696,"duration":53714}},{"uid":"f0331f88aff41367","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/f0331f88aff41367","status":"passed","time":{"start":1732044597160,"stop":1732044651704,"duration":54544}},{"uid":"489e20837522874d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/489e20837522874d","status":"passed","time":{"start":1732048620735,"stop":1732048674734,"duration":53999}},{"uid":"206f3d1fbe8478bf","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/206f3d1fbe8478bf","status":"passed","time":{"start":1732048620735,"stop":1732048674734,"duration":53999}},{"uid":"2e71bdb2cff3a539","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/2e71bdb2cff3a539","status":"passed","time":{"start":1732048620735,"stop":1732048674734,"duration":53999}},{"uid":"6255a0b10f771b8f","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/6255a0b10f771b8f","status":"passed","time":{"start":1732044597160,"stop":1732044651704,"duration":54544}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"7ea75e75f99feccc.json","parameterValues":["'rak5010'","'zephyr'"]}