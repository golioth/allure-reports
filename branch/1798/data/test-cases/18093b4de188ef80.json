{"uid":"18093b4de188ef80","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"d863d307dfacb440b83f8a44acfa67f4","time":{"start":1732199367928,"stop":1732199461015,"duration":93087},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95634150>\ndevice = <golioth.golioth.Device object at 0xffff955e2b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732199353459,"stop":1732199353460,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732199353460,"stop":1732199353460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732199353461,"stop":1732199353461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732199353461,"stop":1732199353461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732199353462,"stop":1732199353462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732199353462,"stop":1732199353464,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732199353465,"stop":1732199353465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732199353466,"stop":1732199353903,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732199353466,"stop":1732199353466,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732199353904,"stop":1732199354753,"duration":849},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732199354753,"stop":1732199367279,"duration":12526},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732199367280,"stop":1732199367925,"duration":645},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff95634150>\ndevice = <golioth.golioth.Device object at 0xffff955e2b50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a77eef4559874a95","name":"log","source":"a77eef4559874a95.txt","type":"text/plain","size":21802}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732199461281,"stop":1732199461327,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732199461329,"stop":1732199461761,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732199461763,"stop":1732199461766,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732199461770,"stop":1732199461771,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"74715328e3f0"},{"name":"thread","value":"417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"efa3442ea215431","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192220703,"stop":1732192313894,"duration":93191}},{"uid":"cdd44ea4b838f9f9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732185613163,"stop":1732185706299,"duration":93136}},{"uid":"702ee2c6848a165b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146922547,"stop":1732147015684,"duration":93137}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":52,"unknown":0,"total":59},"items":[{"uid":"e26e616a3af07e0e","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/e26e616a3af07e0e","status":"passed","time":{"start":1732197412003,"stop":1732197472577,"duration":60574}},{"uid":"7a359e27dff89503","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/7a359e27dff89503","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732193871332,"stop":1732193964477,"duration":93145}},{"uid":"535eac45c3ffa630","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/535eac45c3ffa630","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192220703,"stop":1732192313894,"duration":93191}},{"uid":"4de2b9d0e4e15679","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/4de2b9d0e4e15679","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732187602891,"stop":1732187695993,"duration":93102}},{"uid":"27810d1ba0dbd040","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/27810d1ba0dbd040","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732185613163,"stop":1732185706299,"duration":93136}},{"uid":"bd51650c5cefa390","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/bd51650c5cefa390","status":"passed","time":{"start":1732142742050,"stop":1732142802131,"duration":60081}},{"uid":"4fb744c5763a8157","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/4fb744c5763a8157","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732148999810,"stop":1732149092985,"duration":93175}},{"uid":"d1fea46d00f2faed","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/d1fea46d00f2faed","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146922547,"stop":1732147015684,"duration":93137}},{"uid":"4c10d1b948562338","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/4c10d1b948562338","status":"passed","time":{"start":1732144466013,"stop":1732144525222,"duration":59209}},{"uid":"969f19da5abd549b","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/969f19da5abd549b","status":"passed","time":{"start":1732142742050,"stop":1732142802131,"duration":60081}},{"uid":"14c1786c27b54224","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/14c1786c27b54224","status":"passed","time":{"start":1732134689636,"stop":1732134752734,"duration":63098}},{"uid":"406790f4310a2cd7","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/406790f4310a2cd7","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}},{"uid":"8d5c12c0c88544e5","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/8d5c12c0c88544e5","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}},{"uid":"be3a1756e07b0cb6","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/be3a1756e07b0cb6","status":"passed","time":{"start":1732126512582,"stop":1732126572225,"duration":59643}},{"uid":"17f0928be75a08e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/17f0928be75a08e6","status":"passed","time":{"start":1732124003387,"stop":1732124061612,"duration":58225}},{"uid":"b51d30d64c3fa2f8","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/b51d30d64c3fa2f8","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}},{"uid":"5d0e6c1fe4021023","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/5d0e6c1fe4021023","status":"passed","time":{"start":1732048543680,"stop":1732048602179,"duration":58499}},{"uid":"f284908eb4cacb1d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/f284908eb4cacb1d","status":"passed","time":{"start":1732048543680,"stop":1732048602179,"duration":58499}},{"uid":"772f0d989ee82c82","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/772f0d989ee82c82","status":"passed","time":{"start":1732048543680,"stop":1732048602179,"duration":58499}},{"uid":"3d8296f99e768d3e","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/3d8296f99e768d3e","status":"passed","time":{"start":1732044496023,"stop":1732044556127,"duration":60104}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"18093b4de188ef80.json","parameterValues":["'rak5010'","'zephyr'"]}