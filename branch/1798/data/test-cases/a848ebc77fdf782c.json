{"uid":"a848ebc77fdf782c","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"ddbd6781d4488af4f57eae6c3dca1e27","time":{"start":1732186149730,"stop":1732186243674,"duration":93944},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8281ec90>\nproject = <golioth.golioth.Project object at 0xffff829a14d0>\ndevice = <golioth.golioth.Device object at 0xffff828399d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732186112305,"stop":1732186112306,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732186112306,"stop":1732186112306,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732186112307,"stop":1732186112307,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732186112307,"stop":1732186112307,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732186112308,"stop":1732186112308,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732186112308,"stop":1732186112308,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732186112309,"stop":1732186112309,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732186112309,"stop":1732186112311,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732186112312,"stop":1732186112728,"duration":416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732186112729,"stop":1732186113623,"duration":894},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732186113624,"stop":1732186149091,"duration":35467},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732186149091,"stop":1732186149727,"duration":636},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8281ec90>\nproject = <golioth.golioth.Project object at 0xffff829a14d0>\ndevice = <golioth.golioth.Device object at 0xffff828399d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9a7fb4d7f0e39e26","name":"log","source":"9a7fb4d7f0e39e26.txt","type":"text/plain","size":31522}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732186243965,"stop":1732186244001,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732186244003,"stop":1732186244386,"duration":383},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732186244388,"stop":1732186244390,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732186244392,"stop":1732186244393,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"921d55fe06e6"},{"name":"thread","value":"491-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"17fe000537e62a5e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732147459706,"stop":1732147553767,"duration":94061}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":51,"unknown":0,"total":54},"items":[{"uid":"406d4834a306c43c","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/406d4834a306c43c","status":"passed","time":{"start":1732143019514,"stop":1732143061900,"duration":42386}},{"uid":"4c079faa6912200e","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/4c079faa6912200e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732149537163,"stop":1732149631460,"duration":94297}},{"uid":"71953e2993de8984","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/71953e2993de8984","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732147459706,"stop":1732147553767,"duration":94061}},{"uid":"ae70b0d7b9d45fa4","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/ae70b0d7b9d45fa4","status":"passed","time":{"start":1732144828998,"stop":1732144868959,"duration":39961}},{"uid":"dfba3f891bcec628","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/dfba3f891bcec628","status":"passed","time":{"start":1732143019514,"stop":1732143061900,"duration":42386}},{"uid":"844d079f1de4681","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/844d079f1de4681","status":"passed","time":{"start":1732134972305,"stop":1732135030022,"duration":57717}},{"uid":"f41700e27a6014bf","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/f41700e27a6014bf","status":"passed","time":{"start":1732044860260,"stop":1732044902281,"duration":42021}},{"uid":"c54b968b54b7f699","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/c54b968b54b7f699","status":"passed","time":{"start":1732044860260,"stop":1732044902281,"duration":42021}},{"uid":"9adc970dc6ce51d0","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/9adc970dc6ce51d0","status":"passed","time":{"start":1732126874388,"stop":1732126914444,"duration":40056}},{"uid":"8559503f970b824f","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/8559503f970b824f","status":"passed","time":{"start":1732124276020,"stop":1732124317359,"duration":41339}},{"uid":"497e8b0b6e5f8343","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/497e8b0b6e5f8343","status":"passed","time":{"start":1732044860260,"stop":1732044902281,"duration":42021}},{"uid":"a9d8fd5743caad8f","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/a9d8fd5743caad8f","status":"passed","time":{"start":1732048815203,"stop":1732048856389,"duration":41186}},{"uid":"85425128805e0b2b","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/85425128805e0b2b","status":"passed","time":{"start":1732048815203,"stop":1732048856389,"duration":41186}},{"uid":"1a93165140480b6","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/1a93165140480b6","status":"passed","time":{"start":1732048815203,"stop":1732048856389,"duration":41186}},{"uid":"c1e6dd9dfb9da968","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/c1e6dd9dfb9da968","status":"passed","time":{"start":1732044860260,"stop":1732044902281,"duration":42021}},{"uid":"90d57d3d8a0e939a","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/90d57d3d8a0e939a","status":"passed","time":{"start":1732032553027,"stop":1732032593702,"duration":40675}},{"uid":"8486b9082ac439ea","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/8486b9082ac439ea","status":"passed","time":{"start":1732015030424,"stop":1732015070933,"duration":40509}},{"uid":"76426d73b29a3b45","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/76426d73b29a3b45","status":"passed","time":{"start":1732015030424,"stop":1732015070933,"duration":40509}},{"uid":"419932185d14a2e9","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/419932185d14a2e9","status":"passed","time":{"start":1732015030424,"stop":1732015070933,"duration":40509}},{"uid":"f2a6e94f81ce9064","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/f2a6e94f81ce9064","status":"passed","time":{"start":1732001767665,"stop":1732001808481,"duration":40816}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"a848ebc77fdf782c.json","parameterValues":["'rak5010'","'zephyr'"]}