{"uid":"8b17bae109c9c99c","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"c9ae6dc826a01d1d44d52fc2bf414310","time":{"start":1732192556731,"stop":1732192649816,"duration":93085},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8fdb7e10>\ndevice = <golioth.golioth.Device object at 0xffff8fd9a850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732192542285,"stop":1732192542285,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732192542286,"stop":1732192542286,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732192542286,"stop":1732192542286,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732192542287,"stop":1732192542288,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732192542287,"stop":1732192542287,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732192542288,"stop":1732192542290,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732192542291,"stop":1732192542291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732192542291,"stop":1732192542291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732192542292,"stop":1732192542728,"duration":436},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732192542729,"stop":1732192543706,"duration":977},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732192543707,"stop":1732192556104,"duration":12397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732192556105,"stop":1732192556728,"duration":623},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8fdb7e10>\ndevice = <golioth.golioth.Device object at 0xffff8fd9a850>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f69b584812119168","name":"log","source":"f69b584812119168.txt","type":"text/plain","size":22346}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732192650083,"stop":1732192650129,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732192650130,"stop":1732192650586,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732192650588,"stop":1732192650590,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732192650595,"stop":1732192650595,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1aca3a409cc6"},{"name":"thread","value":"447-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3e37acfda15de2a8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732186015106,"stop":1732186108268,"duration":93162}},{"uid":"f351698d80b63a28","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732147325031,"stop":1732147418186,"duration":93155}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":51,"unknown":0,"total":56},"items":[{"uid":"a5cff0b20d29ccf8","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/a5cff0b20d29ccf8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732187938445,"stop":1732188031495,"duration":93050}},{"uid":"c2d1e60f245fc680","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/c2d1e60f245fc680","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732186015106,"stop":1732186108268,"duration":93162}},{"uid":"e90369dd63c6c35","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/e90369dd63c6c35","status":"passed","time":{"start":1732142959600,"stop":1732143000500,"duration":40900}},{"uid":"d495eb852831bc59","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/d495eb852831bc59","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732149402223,"stop":1732149495462,"duration":93239}},{"uid":"b841d1a74ad5cdae","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/b841d1a74ad5cdae","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732147325031,"stop":1732147418186,"duration":93155}},{"uid":"117b0c1610ded76d","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/117b0c1610ded76d","status":"passed","time":{"start":1732144747357,"stop":1732144787502,"duration":40145}},{"uid":"a66b0b029e77e719","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/a66b0b029e77e719","status":"passed","time":{"start":1732142959600,"stop":1732143000500,"duration":40900}},{"uid":"d1cdcae39bc5378f","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/d1cdcae39bc5378f","status":"passed","time":{"start":1732134913232,"stop":1732134953738,"duration":40506}},{"uid":"94f18bf3ac93a612","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/94f18bf3ac93a612","status":"passed","time":{"start":1732044779156,"stop":1732044818954,"duration":39798}},{"uid":"42c550b0a5ca4510","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/42c550b0a5ca4510","status":"passed","time":{"start":1732044779156,"stop":1732044818954,"duration":39798}},{"uid":"cbb8544464fc14f","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/cbb8544464fc14f","status":"passed","time":{"start":1732126792977,"stop":1732126833133,"duration":40156}},{"uid":"9e4f2d3aa0187017","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/9e4f2d3aa0187017","status":"passed","time":{"start":1732124217950,"stop":1732124257355,"duration":39405}},{"uid":"b987b0f3f40e2091","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/b987b0f3f40e2091","status":"passed","time":{"start":1732044779156,"stop":1732044818954,"duration":39798}},{"uid":"e1d59b2cf167924c","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/e1d59b2cf167924c","status":"passed","time":{"start":1732048756646,"stop":1732048796417,"duration":39771}},{"uid":"3ccd6dc5ebb9fb64","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/3ccd6dc5ebb9fb64","status":"passed","time":{"start":1732048756646,"stop":1732048796417,"duration":39771}},{"uid":"d7506a79f35280f6","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/d7506a79f35280f6","status":"passed","time":{"start":1732048756646,"stop":1732048796417,"duration":39771}},{"uid":"5c0b9bc424185461","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/5c0b9bc424185461","status":"passed","time":{"start":1732044779156,"stop":1732044818954,"duration":39798}},{"uid":"6261a57978a0111b","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/6261a57978a0111b","status":"passed","time":{"start":1732032494162,"stop":1732032534316,"duration":40154}},{"uid":"f8c5ad5931f2ab14","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/f8c5ad5931f2ab14","status":"passed","time":{"start":1732014971318,"stop":1732015011027,"duration":39709}},{"uid":"817bbec1cd995447","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/817bbec1cd995447","status":"passed","time":{"start":1732014971318,"stop":1732015011027,"duration":39709}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"8b17bae109c9c99c.json","parameterValues":["'rak5010'","'zephyr'"]}