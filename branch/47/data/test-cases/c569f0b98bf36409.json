{"uid":"c569f0b98bf36409","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"ae1c7e14b29d468f72319f0a6ff27eb0","time":{"start":1736530738958,"stop":1736530839602,"duration":100644},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb479a650>\nproject = <golioth.golioth.Project object at 0xffffb479c490>\ndevice = <golioth.golioth.Device object at 0xffffb479a010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <67815b1474b8809ed71a3f97, release_tags=[], device_tags=['67815b1374b8809ed71a3f96'], artifact_ids=['674e19a8509873c6f7445232'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1736530703505,"stop":1736530703505,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1736530703506,"stop":1736530703506,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1736530703506,"stop":1736530703506,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1736530703507,"stop":1736530703634,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1736530703635,"stop":1736530703635,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1736530703636,"stop":1736530703636,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1736530703636,"stop":1736530703636,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1736530703637,"stop":1736530703637,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1736530703637,"stop":1736530703640,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1736530703641,"stop":1736530704098,"duration":457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1736530704098,"stop":1736530705461,"duration":1363},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1736530705462,"stop":1736530705948,"duration":486},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1736530705948,"stop":1736530706601,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1736530706602,"stop":1736530708254,"duration":1652},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1736530708255,"stop":1736530708960,"duration":705},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1736530708960,"stop":1736530737916,"duration":28956},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1736530737916,"stop":1736530738955,"duration":1039},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb479a650>\nproject = <golioth.golioth.Project object at 0xffffb479c490>\ndevice = <golioth.golioth.Device object at 0xffffb479a010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <67815b1474b8809ed71a3f97, release_tags=[], device_tags=['67815b1374b8809ed71a3f96'], artifact_ids=['674e19a8509873c6f7445232'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"63946e055471db17","name":"log","source":"63946e055471db17.txt","type":"text/plain","size":35411}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1736530840045,"stop":1736530840094,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1736530840095,"stop":1736530840484,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1736530840486,"stop":1736530841277,"duration":791},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1736530841279,"stop":1736530841280,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1736530841282,"stop":1736530841282,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1736530841284,"stop":1736530841682,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1736530841685,"stop":1736530841685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1736530841687,"stop":1736530841687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1736530841694,"stop":1736530841696,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"92c6ef65f3e8"},{"name":"thread","value":"455-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":36,"unknown":0,"total":40},"items":[{"uid":"2b1500c264d487e5","reportUrl":"https://golioth.github.io/allure-reports/branch/46//#testresult/2b1500c264d487e5","status":"passed","time":{"start":1736525825595,"stop":1736526126557,"duration":300962}},{"uid":"99cc5e892d53c0c1","reportUrl":"https://golioth.github.io/allure-reports/branch/43//#testresult/99cc5e892d53c0c1","status":"passed","time":{"start":1736446543326,"stop":1736446843213,"duration":299887}},{"uid":"bde19c727af81dbe","reportUrl":"https://golioth.github.io/allure-reports/branch/42//#testresult/bde19c727af81dbe","status":"passed","time":{"start":1736442088079,"stop":1736442399649,"duration":311570}},{"uid":"3239ba0e709b6091","reportUrl":"https://golioth.github.io/allure-reports/branch/43//#testresult/3239ba0e709b6091","status":"passed","time":{"start":1736446543326,"stop":1736446843213,"duration":299887}},{"uid":"7cec8866af1c4d7c","reportUrl":"https://golioth.github.io/allure-reports/branch/42//#testresult/7cec8866af1c4d7c","status":"passed","time":{"start":1736442088079,"stop":1736442399649,"duration":311570}},{"uid":"129cf889d317a432","reportUrl":"https://golioth.github.io/allure-reports/branch/39//#testresult/129cf889d317a432","status":"passed","time":{"start":1736433584590,"stop":1736433872481,"duration":287891}},{"uid":"15433333058be195","reportUrl":"https://golioth.github.io/allure-reports/branch/39//#testresult/15433333058be195","status":"passed","time":{"start":1736433584590,"stop":1736433872481,"duration":287891}},{"uid":"2e420eb7d7444a57","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/2e420eb7d7444a57","status":"passed","time":{"start":1736285434965,"stop":1736285729557,"duration":294592}},{"uid":"4586812a0e20b18d","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/4586812a0e20b18d","status":"passed","time":{"start":1736285434965,"stop":1736285729557,"duration":294592}},{"uid":"3ccb1b09a8ff4e74","reportUrl":"https://golioth.github.io/allure-reports/branch/27/#testresult/3ccb1b09a8ff4e74","status":"passed","time":{"start":1736374963850,"stop":1736375266790,"duration":302940}},{"uid":"6de942eee55b5b88","reportUrl":"https://golioth.github.io/allure-reports/branch/5/#testresult/6de942eee55b5b88","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1736357857084,"stop":1736357994476,"duration":137392}},{"uid":"cfe2816d81ebe186","reportUrl":"https://golioth.github.io/allure-reports/branch/4/#testresult/cfe2816d81ebe186","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1736356011211,"stop":1736356117734,"duration":106523}},{"uid":"a1913469dc4ad89e","reportUrl":"https://golioth.github.io/allure-reports/branch/29/#testresult/a1913469dc4ad89e","status":"passed","time":{"start":1736361447212,"stop":1736361765027,"duration":317815}},{"uid":"9e16406687c79eb","reportUrl":"https://golioth.github.io/allure-reports/branch/27/#testresult/9e16406687c79eb","status":"passed","time":{"start":1736286160845,"stop":1736286459921,"duration":299076}},{"uid":"7893a599e41327f6","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/7893a599e41327f6","status":"passed","time":{"start":1736285434965,"stop":1736285729557,"duration":294592}},{"uid":"f01cf84b9beb0a0a","reportUrl":"https://golioth.github.io/allure-reports/branch/25//#testresult/f01cf84b9beb0a0a","status":"passed","time":{"start":1736276644038,"stop":1736276917704,"duration":273666}},{"uid":"751025650969ed0d","reportUrl":"https://golioth.github.io/allure-reports/branch/24/#testresult/751025650969ed0d","status":"passed","time":{"start":1736271848299,"stop":1736272248289,"duration":399990}},{"uid":"7238a0526c55282","reportUrl":"https://golioth.github.io/allure-reports/branch/1/#testresult/7238a0526c55282","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1736225099249,"stop":1736225220229,"duration":120980}},{"uid":"20de58937cc91c66","reportUrl":"https://golioth.github.io/allure-reports/branch/20/#testresult/20de58937cc91c66","status":"passed","time":{"start":1736208441472,"stop":1736208735095,"duration":293623}},{"uid":"c2438d2a305a9ee6","reportUrl":"https://golioth.github.io/allure-reports/branch/20/#testresult/c2438d2a305a9ee6","status":"passed","time":{"start":1736208441472,"stop":1736208735095,"duration":293623}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c569f0b98bf36409.json","parameterValues":["'nrf9160dk'","'zephyr'"]}