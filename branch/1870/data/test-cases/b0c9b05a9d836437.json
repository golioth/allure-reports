{
  "uid" : "b0c9b05a9d836437",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "1ec1936b7990a0542c6cd1098cc4bb62",
  "time" : {
    "start" : 1733443604295,
    "stop" : 1733443697838,
    "duration" : 93543
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9acb3e50>\ndevice = <golioth.golioth.Device object at 0xffff9accaa90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_name",
    "time" : {
      "start" : 1733443575092,
      "stop" : 1733443575092,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733443575096,
      "stop" : 1733443575097,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733443603228,
      "stop" : 1733443604289,
      "duration" : 1061
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733443575590,
      "stop" : 1733443576804,
      "duration" : 1214
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733443576805,
      "stop" : 1733443603228,
      "duration" : 26423
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733443575097,
      "stop" : 1733443575590,
      "duration" : 493
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733443575091,
      "stop" : 1733443575091,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733443575090,
      "stop" : 1733443575090,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733443575096,
      "stop" : 1733443575096,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733443575093,
      "stop" : 1733443575093,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733443575091,
      "stop" : 1733443575091,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733443575093,
      "stop" : 1733443575095,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9acb3e50>\ndevice = <golioth.golioth.Device object at 0xffff9accaa90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c3d18087cf81bed9",
      "name" : "log",
      "source" : "c3d18087cf81bed9.txt",
      "type" : "text/plain",
      "size" : 16460
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1733443698067,
      "stop" : 1733443698454,
      "duration" : 387
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733443698056,
      "stop" : 1733443698065,
      "duration" : 9
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733443698456,
      "stop" : 1733443698458,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733443698463,
      "stop" : 1733443698463,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "13a322741c0f"
  }, {
    "name" : "thread",
    "value" : "791-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 44,
        "unknown" : 0,
        "total" : 53
      },
      "items" : [ {
        "uid" : "6b9a491fc22a3b0d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/6b9a491fc22a3b0d",
        "status" : "passed",
        "time" : {
          "start" : 1733416487422,
          "stop" : 1733416520592,
          "duration" : 33170
        }
      }, {
        "uid" : "412bce4c96128ac",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/412bce4c96128ac",
        "status" : "passed",
        "time" : {
          "start" : 1733354107558,
          "stop" : 1733354118025,
          "duration" : 10467
        }
      }, {
        "uid" : "c9f1ae884348048a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/c9f1ae884348048a",
        "status" : "passed",
        "time" : {
          "start" : 1733329997750,
          "stop" : 1733330077192,
          "duration" : 79442
        }
      }, {
        "uid" : "f40f1f54735a6308",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/f40f1f54735a6308",
        "status" : "passed",
        "time" : {
          "start" : 1733255849499,
          "stop" : 1733255934325,
          "duration" : 84826
        }
      }, {
        "uid" : "429f6713dc023eab",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/429f6713dc023eab",
        "status" : "passed",
        "time" : {
          "start" : 1733192646102,
          "stop" : 1733192656704,
          "duration" : 10602
        }
      }, {
        "uid" : "a034f7e2530a9016",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/a034f7e2530a9016",
        "status" : "passed",
        "time" : {
          "start" : 1732803052869,
          "stop" : 1732803088125,
          "duration" : 35256
        }
      }, {
        "uid" : "1a862d3f8c7ac16f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/1a862d3f8c7ac16f",
        "status" : "passed",
        "time" : {
          "start" : 1732751328612,
          "stop" : 1732751339056,
          "duration" : 10444
        }
      }, {
        "uid" : "ad412a52c616dd8c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/ad412a52c616dd8c",
        "status" : "passed",
        "time" : {
          "start" : 1732731039220,
          "stop" : 1732731050095,
          "duration" : 10875
        }
      }, {
        "uid" : "1eecebdd90026f20",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/1eecebdd90026f20",
        "status" : "passed",
        "time" : {
          "start" : 1732725446432,
          "stop" : 1732725473553,
          "duration" : 27121
        }
      }, {
        "uid" : "aaf143ba4f69a72a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/aaf143ba4f69a72a",
        "status" : "passed",
        "time" : {
          "start" : 1732633030190,
          "stop" : 1732633041258,
          "duration" : 11068
        }
      }, {
        "uid" : "d8d5185ca9a091af",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/d8d5185ca9a091af",
        "status" : "passed",
        "time" : {
          "start" : 1732633030190,
          "stop" : 1732633041258,
          "duration" : 11068
        }
      }, {
        "uid" : "c093702e78a044f7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/c093702e78a044f7",
        "status" : "passed",
        "time" : {
          "start" : 1732564177347,
          "stop" : 1732564188385,
          "duration" : 11038
        }
      }, {
        "uid" : "ef10e320da26149b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/ef10e320da26149b",
        "status" : "passed",
        "time" : {
          "start" : 1732562010691,
          "stop" : 1732562038967,
          "duration" : 28276
        }
      }, {
        "uid" : "ea8003bdd0f59429",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/ea8003bdd0f59429",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732556186237,
          "stop" : 1732556279441,
          "duration" : 93204
        }
      }, {
        "uid" : "8c08c077a42b1897",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/8c08c077a42b1897",
        "status" : "passed",
        "time" : {
          "start" : 1732550097563,
          "stop" : 1732550107984,
          "duration" : 10421
        }
      }, {
        "uid" : "c62d68e123999e60",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/c62d68e123999e60",
        "status" : "passed",
        "time" : {
          "start" : 1732467690454,
          "stop" : 1732467710090,
          "duration" : 19636
        }
      }, {
        "uid" : "1b8f6e6a826b4c2d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/1b8f6e6a826b4c2d",
        "status" : "passed",
        "time" : {
          "start" : 1732408768896,
          "stop" : 1732408792248,
          "duration" : 23352
        }
      }, {
        "uid" : "b52640e87b96fb23",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/b52640e87b96fb23",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732318496626,
          "stop" : 1732318589833,
          "duration" : 93207
        }
      }, {
        "uid" : "a6ed50534eda6dff",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/a6ed50534eda6dff",
        "status" : "passed",
        "time" : {
          "start" : 1732314634334,
          "stop" : 1732314654810,
          "duration" : 20476
        }
      }, {
        "uid" : "eb08cecc369005eb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1828//#testresult/eb08cecc369005eb",
        "status" : "passed",
        "time" : {
          "start" : 1732296893299,
          "stop" : 1732296903610,
          "duration" : 10311
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "b0c9b05a9d836437.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}