{"uid":"baf8fbce6df264a6","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"b2900ea6ee9c25336d02db93f859b162","time":{"start":1736958489324,"stop":1736958506127,"duration":16803},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b7400d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b727950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b724a90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b71f0d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533690>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f250b51de90>\ndevice = <golioth.golioth.Device object at 0x7f250b504a10>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b7400d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b727950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b724a90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b71f0d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533690>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1736958488212,"stop":1736958488212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1736958488212,"stop":1736958488212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1736958488212,"stop":1736958488213,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1736958488212,"stop":1736958488212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1736958488212,"stop":1736958488212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1736958488213,"stop":1736958488213,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1736958488213,"stop":1736958488213,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1736958488214,"stop":1736958488614,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1736958488214,"stop":1736958488214,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1736958488614,"stop":1736958489187,"duration":573},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1736958489187,"stop":1736958489190,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1736958489190,"stop":1736958489323,"duration":133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b7400d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b727950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b724a90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b71f0d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533690>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f250b51de90>\ndevice = <golioth.golioth.Device object at 0x7f250b504a10>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b7400d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b727950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b724a90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b71f0d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533690>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"a1b9076b047ca620","name":"log","source":"a1b9076b047ca620.txt","type":"text/plain","size":17241}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1736958506386,"stop":1736958506917,"duration":531},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1736958506917,"stop":1736958507341,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1736958507350,"stop":1736958507350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1736958507351,"stop":1736958507351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_32"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_32"},{"name":"tag","value":"GitHub Actions 25"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"93b7d7863ada"},{"name":"thread","value":"26895-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_32'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":43,"unknown":0,"total":46},"items":[{"uid":"7d3ddbbf16017fb0","reportUrl":"https://golioth.github.io/allure-reports/branch/63//#testresult/7d3ddbbf16017fb0","status":"passed","time":{"start":1736967688144,"stop":1736967704814,"duration":16670}},{"uid":"e4164c8d0ad63b53","reportUrl":"https://golioth.github.io/allure-reports/branch/59//#testresult/e4164c8d0ad63b53","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b7400d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b727950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b724a90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b71f0d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f250b533690>])","time":{"start":1736958489324,"stop":1736958506127,"duration":16803}},{"uid":"b0a596705486c497","reportUrl":"https://golioth.github.io/allure-reports/branch/52//#testresult/b0a596705486c497","status":"passed","time":{"start":1736576483348,"stop":1736576500151,"duration":16803}},{"uid":"de557ef04dc4c77c","reportUrl":"https://golioth.github.io/allure-reports/branch/51//#testresult/de557ef04dc4c77c","status":"passed","time":{"start":1736576303067,"stop":1736576319633,"duration":16566}},{"uid":"e8fd5240a20e9f6c","reportUrl":"https://golioth.github.io/allure-reports/branch/47//#testresult/e8fd5240a20e9f6c","status":"passed","time":{"start":1736525827206,"stop":1736525843929,"duration":16723}},{"uid":"b82b7ce36ccd9d3a","reportUrl":"https://golioth.github.io/allure-reports/branch/46//#testresult/b82b7ce36ccd9d3a","status":"passed","time":{"start":1736522698269,"stop":1736522714902,"duration":16633}},{"uid":"385cb8f147e21b9e","reportUrl":"https://golioth.github.io/allure-reports/branch/43//#testresult/385cb8f147e21b9e","status":"passed","time":{"start":1736442392414,"stop":1736442409199,"duration":16785}},{"uid":"a4d14bd372fd99f0","reportUrl":"https://golioth.github.io/allure-reports/branch/42//#testresult/a4d14bd372fd99f0","status":"passed","time":{"start":1736438362821,"stop":1736438379676,"duration":16855}},{"uid":"7338d0d9eb601b98","reportUrl":"https://golioth.github.io/allure-reports/branch/43//#testresult/7338d0d9eb601b98","status":"passed","time":{"start":1736442392414,"stop":1736442409199,"duration":16785}},{"uid":"f7f37b68d01ca0a5","reportUrl":"https://golioth.github.io/allure-reports/branch/42//#testresult/f7f37b68d01ca0a5","status":"passed","time":{"start":1736438362821,"stop":1736438379676,"duration":16855}},{"uid":"964a69d47259c7fd","reportUrl":"https://golioth.github.io/allure-reports/branch/39//#testresult/964a69d47259c7fd","status":"passed","time":{"start":1736429500334,"stop":1736429517617,"duration":17283}},{"uid":"672babfe7ec894ee","reportUrl":"https://golioth.github.io/allure-reports/branch/39//#testresult/672babfe7ec894ee","status":"passed","time":{"start":1736429500334,"stop":1736429517617,"duration":17283}},{"uid":"d1fa8df48cb86e21","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/d1fa8df48cb86e21","status":"passed","time":{"start":1736378672576,"stop":1736378689153,"duration":16577}},{"uid":"9ab2a0170afd05cc","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/9ab2a0170afd05cc","status":"passed","time":{"start":1736374976415,"stop":1736374993324,"duration":16909}},{"uid":"513e2c29aa4b170d","reportUrl":"https://golioth.github.io/allure-reports/branch/27/#testresult/513e2c29aa4b170d","status":"passed","time":{"start":1736278671774,"stop":1736278688744,"duration":16970}},{"uid":"6a6b83876f915225","reportUrl":"https://golioth.github.io/allure-reports/branch/5/#testresult/6a6b83876f915225","status":"passed","time":{"start":1736349807026,"stop":1736349824036,"duration":17010}},{"uid":"1b5b973ba48e99bd","reportUrl":"https://golioth.github.io/allure-reports/branch/4/#testresult/1b5b973ba48e99bd","status":"passed","time":{"start":1736349492563,"stop":1736349509201,"duration":16638}},{"uid":"e88a6747f5f0820","reportUrl":"https://golioth.github.io/allure-reports/branch/29/#testresult/e88a6747f5f0820","status":"passed","time":{"start":1736350638533,"stop":1736350655431,"duration":16898}},{"uid":"d36ed31d4aaf0c97","reportUrl":"https://golioth.github.io/allure-reports/branch/27/#testresult/d36ed31d4aaf0c97","status":"passed","time":{"start":1736278671774,"stop":1736278688744,"duration":16970}},{"uid":"93c08bd4f0eef070","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/93c08bd4f0eef070","status":"passed","time":{"start":1736278538115,"stop":1736278555017,"duration":16902}}]},"tags":["GitHub Actions 25","anyio","native_sim_32","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"baf8fbce6df264a6.json","parameterValues":["'native_sim_32'","'zephyr'"]}