{"uid":"861a541bf453a807","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1729781666325,"stop":1729781688943,"duration":22618},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b002dd0>\ndevice = <golioth.golioth.Device object at 0xffff8b015050>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1729781648584,"stop":1729781648584,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729781648585,"stop":1729781648585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729781648585,"stop":1729781648585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729781648586,"stop":1729781648586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729781648586,"stop":1729781648586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729781648587,"stop":1729781648589,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729781648589,"stop":1729781648590,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729781648590,"stop":1729781648590,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729781648591,"stop":1729781649034,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729781649034,"stop":1729781649895,"duration":861},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729781649896,"stop":1729781665351,"duration":15455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729781665352,"stop":1729781666322,"duration":970},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b002dd0>\ndevice = <golioth.golioth.Device object at 0xffff8b015050>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f9753e414bb3ea1f","name":"log","source":"f9753e414bb3ea1f.txt","type":"text/plain","size":12527}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729781689184,"stop":1729781689214,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729781689216,"stop":1729781689621,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729781689623,"stop":1729781689625,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729781689630,"stop":1729781689630,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"37ce78d04662"},{"name":"thread","value":"520-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a75750e846b10573","status":"passed","time":{"start":1729781613185,"stop":1729781635807,"duration":22622}},{"uid":"6c24fbaf33281be3","status":"passed","time":{"start":1729725657005,"stop":1729725681371,"duration":24366}},{"uid":"744f940fe1ea1189","status":"passed","time":{"start":1729725604908,"stop":1729725628663,"duration":23755}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":13,"unknown":0,"total":19},"items":[{"uid":"6cde699c3a6dab73","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/6cde699c3a6dab73","status":"passed","time":{"start":1729725657005,"stop":1729725681371,"duration":24366}},{"uid":"466fee8cdd20871e","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/466fee8cdd20871e","status":"passed","time":{"start":1729723224982,"stop":1729723244454,"duration":19472}},{"uid":"f5e11022e7dee3d4","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/f5e11022e7dee3d4","status":"passed","time":{"start":1729719884681,"stop":1729719909563,"duration":24882}},{"uid":"70b9285314a4efa2","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/70b9285314a4efa2","status":"passed","time":{"start":1729625497956,"stop":1729625518467,"duration":20511}},{"uid":"be9734f92252853a","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/be9734f92252853a","status":"passed","time":{"start":1729530351161,"stop":1729530376532,"duration":25371}},{"uid":"76051217a6164b9d","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/76051217a6164b9d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729527916519,"stop":1729527939156,"duration":22637}},{"uid":"c5cb120062e9226b","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/c5cb120062e9226b","status":"passed","time":{"start":1729388856355,"stop":1729388880054,"duration":23699}},{"uid":"961a3321b80f59a9","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/961a3321b80f59a9","status":"passed","time":{"start":1729380174217,"stop":1729380194798,"duration":20581}},{"uid":"3eb9e39e707bdce3","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/3eb9e39e707bdce3","status":"passed","time":{"start":1729198644996,"stop":1729198668873,"duration":23877}},{"uid":"abb2a2cc65b66491","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/abb2a2cc65b66491","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729117283601,"stop":1729117396399,"duration":112798}},{"uid":"12e26f7a75dd88f8","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/12e26f7a75dd88f8","status":"passed","time":{"start":1729114431243,"stop":1729114454755,"duration":23512}},{"uid":"39e242e882678cf9","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/39e242e882678cf9","status":"passed","time":{"start":1729108885744,"stop":1729108909493,"duration":23749}},{"uid":"6eabdd92e28ed58a","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/6eabdd92e28ed58a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729035241293,"stop":1729035263779,"duration":22486}},{"uid":"a02932ec1f319dd","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/a02932ec1f319dd","status":"passed","time":{"start":1729032762336,"stop":1729032785824,"duration":23488}},{"uid":"f0fe4d4c9c599cc8","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/f0fe4d4c9c599cc8","status":"passed","time":{"start":1729029727641,"stop":1729029751430,"duration":23789}},{"uid":"6f440e403b4077b","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/6f440e403b4077b","status":"passed","time":{"start":1729024608659,"stop":1729024631241,"duration":22582}},{"uid":"e0120d421fe3dbd7","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/e0120d421fe3dbd7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729021671373,"stop":1729021693961,"duration":22588}},{"uid":"56c8a792216debaa","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/56c8a792216debaa","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729006957380,"stop":1729007070908,"duration":113528}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"861a541bf453a807.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}