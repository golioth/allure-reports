{"uid":"b1472c85af51d030","name":"test_restart","fullName":"tests.hil.tests.settings.test_settings#test_restart","historyId":"0292718abde5cdfeaf953fdc7df16213","time":{"start":1736978308616,"stop":1736978358157,"duration":49541},"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 132560.4532284963\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <nrf9160dk.nRF9160DK object at 0xffff97cf6650>\ndevice = <golioth.golioth.Device object at 0xffff97cef590>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n        assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Ending session', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_RESTART', False)\n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_restart: false', timeout_s=5)\n    \n        # Wait for client to restart\n        assert None != await board.wait_for_regex_in_line('Client restarted', timeout_s=60)\n    \n        # Wait for rush of initial settings log messages to pass\n        await trio.sleep(2)\n    \n        await device.settings.set('TEST_INT', 2320)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 2320', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 132560.4532284963\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1736978138870,"stop":1736978138871,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1736978138871,"stop":1736978138871,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1736978138872,"stop":1736978138873,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1736978138872,"stop":1736978138872,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1736978138873,"stop":1736978138874,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1736978138873,"stop":1736978138873,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1736978138874,"stop":1736978138874,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1736978138874,"stop":1736978138875,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1736978138875,"stop":1736978138875,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1736978138875,"stop":1736978138876,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1736978138876,"stop":1736978138876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1736978138877,"stop":1736978138877,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1736978138878,"stop":1736978139526,"duration":648},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1736978139527,"stop":1736978154164,"duration":14637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1736978154166,"stop":1736978155164,"duration":998},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1736978155165,"stop":1736978168126,"duration":12961},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"trio.TooSlowError","statusTrace":"deadline = 132560.4532284963\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n>           yield scope\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:72: in wait_for_regex_in_line\n    chunk = await self.receive_some()\n/usr/local/lib/python3.11/dist-packages/board.py:46: in receive_some\n    return await self.serial.receive_some()\n/usr/local/lib/python3.11/dist-packages/trio_serial/abstract.py:215: in receive_some\n    return bytes(await self._recv(max_bytes))\n/usr/local/lib/python3.11/dist-packages/trio_serial/posix.py:159: in _recv\n    await trio.lowlevel.wait_readable(self.fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_generated_io_epoll.py:45: in wait_readable\n    return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:334: in wait_readable\n    await self._epoll_wait(fd, \"read_task\")\n/usr/local/lib/python3.11/dist-packages/trio/_core/_io_epoll.py:309: in _epoll_wait\n    await _core.wait_task_rescheduled(abort)\n/usr/local/lib/python3.11/dist-packages/trio/_core/_traps.py:178: in wait_task_rescheduled\n    return (await _async_yield(WaitTaskRescheduled(abort_func))).unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_cancel() -> NoReturn:\n>       raise Cancelled._create()\nE       trio.Cancelled: Cancelled\n\n/usr/local/lib/python3.11/dist-packages/trio/_core/_run.py:1437: Cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nboard = <nrf9160dk.nRF9160DK object at 0xffff97cf6650>\ndevice = <golioth.golioth.Device object at 0xffff97cef590>\n\n    async def test_restart(board, device):\n        await device.settings.set('TEST_RESTART', True)\n        assert None != await board.wait_for_regex_in_line('Received test_restart: true', timeout_s=10)\n        assert None != await board.wait_for_regex_in_line('Ending session', timeout_s=10)\n    \n        # Check that we no longer receive this settings change\n        await device.settings.set('TEST_RESTART', False)\n        with pytest.raises(trio.TooSlowError) as e:\n            assert None != await board.wait_for_regex_in_line('Received test_restart: false', timeout_s=5)\n    \n        # Wait for client to restart\n        assert None != await board.wait_for_regex_in_line('Client restarted', timeout_s=60)\n    \n        # Wait for rush of initial settings log messages to pass\n        await trio.sleep(2)\n    \n        await device.settings.set('TEST_INT', 2320)\n>       assert None != await board.wait_for_regex_in_line('Received test_int: 2320', timeout_s=10)\n\ntests/hil/tests/settings/test_settings.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/board.py:54: in wait_for_regex_in_line\n    with trio.fail_after(timeout_s):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndeadline = 132560.4532284963\n\n    def fail_at(deadline: float) -> AbstractContextManager[trio.CancelScope]:  # type: ignore[misc]\n        \"\"\"Creates a cancel scope with the given deadline, and raises an error if it\n        is actually cancelled.\n    \n        This function and :func:`move_on_at` are similar in that both create a\n        cancel scope with a given absolute deadline, and if the deadline expires\n        then both will cause :exc:`Cancelled` to be raised within the scope. The\n        difference is that when the :exc:`Cancelled` exception reaches\n        :func:`move_on_at`, it's caught and discarded. When it reaches\n        :func:`fail_at`, then it's caught and :exc:`TooSlowError` is raised in its\n        place.\n    \n        Args:\n          deadline (float): The deadline.\n    \n        Raises:\n          TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n            and caught by the context manager.\n          ValueError: if deadline is NaN.\n    \n        \"\"\"\n        with move_on_at(deadline) as scope:\n            yield scope\n        if scope.cancelled_caught:\n>           raise TooSlowError\nE           trio.TooSlowError\n\n/usr/local/lib/python3.11/dist-packages/trio/_timeouts.py:123: TooSlowError","steps":[],"attachments":[{"uid":"b0ec33a1ae79691f","name":"stdout","source":"b0ec33a1ae79691f.txt","type":"text/plain","size":7235}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1736978358605,"stop":1736978358606,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1736978358608,"stop":1736978358987,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1736978358990,"stop":1736978358991,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1736978358994,"stop":1736978358996,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"90057ac2caec"},{"name":"thread","value":"232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":45,"unknown":0,"total":48},"items":[{"uid":"64dcf335c4153c18","reportUrl":"https://golioth.github.io/allure-reports/branch/65//#testresult/64dcf335c4153c18","status":"passed","time":{"start":1736975960913,"stop":1736975996761,"duration":35848}},{"uid":"369c71ca59a65f83","reportUrl":"https://golioth.github.io/allure-reports/branch/59//#testresult/369c71ca59a65f83","status":"passed","time":{"start":1736959867517,"stop":1736959905612,"duration":38095}},{"uid":"5b88a8c04e2e6b56","reportUrl":"https://golioth.github.io/allure-reports/branch/59//#testresult/5b88a8c04e2e6b56","status":"passed","time":{"start":1736959867517,"stop":1736959905612,"duration":38095}},{"uid":"319a5481a491c3d5","reportUrl":"https://golioth.github.io/allure-reports/branch/63//#testresult/319a5481a491c3d5","status":"passed","time":{"start":1736970692494,"stop":1736970725724,"duration":33230}},{"uid":"f75d10230434d14","reportUrl":"https://golioth.github.io/allure-reports/branch/59//#testresult/f75d10230434d14","status":"passed","time":{"start":1736959867517,"stop":1736959905612,"duration":38095}},{"uid":"5b177f280b091673","reportUrl":"https://golioth.github.io/allure-reports/branch/52//#testresult/5b177f280b091673","status":"passed","time":{"start":1736585663334,"stop":1736585699131,"duration":35797}},{"uid":"77f1070ff4f0fe4b","reportUrl":"https://golioth.github.io/allure-reports/branch/51//#testresult/77f1070ff4f0fe4b","status":"passed","time":{"start":1736579878990,"stop":1736579914904,"duration":35914}},{"uid":"3f5d87a3d3764719","reportUrl":"https://golioth.github.io/allure-reports/branch/47//#testresult/3f5d87a3d3764719","status":"passed","time":{"start":1736529526357,"stop":1736529562218,"duration":35861}},{"uid":"4591b3bd214d8741","reportUrl":"https://golioth.github.io/allure-reports/branch/46//#testresult/4591b3bd214d8741","status":"passed","time":{"start":1736524868486,"stop":1736524901735,"duration":33249}},{"uid":"f51ff52bedd6d432","reportUrl":"https://golioth.github.io/allure-reports/branch/43//#testresult/f51ff52bedd6d432","status":"passed","time":{"start":1736445472638,"stop":1736445508425,"duration":35787}},{"uid":"544f41aabaa9c6e9","reportUrl":"https://golioth.github.io/allure-reports/branch/42//#testresult/544f41aabaa9c6e9","status":"passed","time":{"start":1736439815021,"stop":1736439850957,"duration":35936}},{"uid":"3f1a9c9115dbe1ea","reportUrl":"https://golioth.github.io/allure-reports/branch/43//#testresult/3f1a9c9115dbe1ea","status":"passed","time":{"start":1736445472638,"stop":1736445508425,"duration":35787}},{"uid":"156dfc5c49a81a81","reportUrl":"https://golioth.github.io/allure-reports/branch/42//#testresult/156dfc5c49a81a81","status":"passed","time":{"start":1736439815021,"stop":1736439850957,"duration":35936}},{"uid":"6ee1580c619677a3","reportUrl":"https://golioth.github.io/allure-reports/branch/39//#testresult/6ee1580c619677a3","status":"passed","time":{"start":1736432329599,"stop":1736432362857,"duration":33258}},{"uid":"e5027dca170ee11","reportUrl":"https://golioth.github.io/allure-reports/branch/39//#testresult/e5027dca170ee11","status":"passed","time":{"start":1736432329599,"stop":1736432362857,"duration":33258}},{"uid":"af74d7f7a215cae3","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/af74d7f7a215cae3","status":"passed","time":{"start":1736279457860,"stop":1736279493714,"duration":35854}},{"uid":"d654897aee0cc2c9","reportUrl":"https://golioth.github.io/allure-reports/branch/26/#testresult/d654897aee0cc2c9","status":"passed","time":{"start":1736279457860,"stop":1736279493714,"duration":35854}},{"uid":"dce1409f2ae8ff75","reportUrl":"https://golioth.github.io/allure-reports/branch/27/#testresult/dce1409f2ae8ff75","status":"passed","time":{"start":1736283262548,"stop":1736283300682,"duration":38134}},{"uid":"3d24dd07d451ff43","reportUrl":"https://golioth.github.io/allure-reports/branch/5/#testresult/3d24dd07d451ff43","status":"passed","time":{"start":1736355556492,"stop":1736355590999,"duration":34507}},{"uid":"7aeb3d107f4044f0","reportUrl":"https://golioth.github.io/allure-reports/branch/4/#testresult/7aeb3d107f4044f0","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1736351644836,"stop":1736351685822,"duration":40986}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b1472c85af51d030.json","parameterValues":["'nrf9160dk'","'zephyr'"]}