{"uid":"131727ad1cca22e2","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"edf5f1012f71cfc9f14f014f109d19a8","time":{"start":1731905596964,"stop":1731905690235,"duration":93271},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad530190>\nproject = <golioth.golioth.Project object at 0xffffad993410>\ndevice = <golioth.golioth.Device object at 0xffffad532d90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <673ac831991409ec59c69e1f, release_tags=[], device_tags=['673ac830991409ec59c69e1e'], artifact_ids=['66da355cc36587e4581f9493'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731905581694,"stop":1731905581694,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731905581695,"stop":1731905581695,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731905581695,"stop":1731905581695,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1731905581696,"stop":1731905581724,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731905581725,"stop":1731905581726,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731905581725,"stop":1731905581725,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731905581726,"stop":1731905581726,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731905581727,"stop":1731905581727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731905581727,"stop":1731905581730,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731905581731,"stop":1731905582112,"duration":381},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"west_board","time":{"start":1731905581731,"stop":1731905581731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731905582113,"stop":1731905583164,"duration":1051},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1731905583164,"stop":1731905583580,"duration":416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1731905583581,"stop":1731905583956,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1731905583957,"stop":1731905585176,"duration":1219},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1731905585177,"stop":1731905585598,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731905585598,"stop":1731905596438,"duration":10840},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731905596438,"stop":1731905596960,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad530190>\nproject = <golioth.golioth.Project object at 0xffffad993410>\ndevice = <golioth.golioth.Device object at 0xffffad532d90>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <673ac831991409ec59c69e1f, release_tags=[], device_tags=['673ac830991409ec59c69e1e'], artifact_ids=['66da355cc36587e4581f9493'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n>       shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Nothing to do.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b1cf5e2961a12edd","name":"log","source":"b1cf5e2961a12edd.txt","type":"text/plain","size":34355}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731905690544,"stop":1731905690550,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1731905690552,"stop":1731905690913,"duration":361},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1731905690915,"stop":1731905691753,"duration":838},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1731905691756,"stop":1731905691756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1731905691758,"stop":1731905691759,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731905691760,"stop":1731905692172,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731905692174,"stop":1731905692174,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731905692178,"stop":1731905692178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1731905692211,"stop":1731905692213,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b1d2d54e0864"},{"name":"thread","value":"360-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":23,"unknown":0,"total":26},"items":[{"uid":"a8550f1fe92c5c84","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/a8550f1fe92c5c84","status":"passed","time":{"start":1731714024890,"stop":1731714072177,"duration":47287}},{"uid":"d85d21921fab2cb3","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/d85d21921fab2cb3","status":"passed","time":{"start":1731710978328,"stop":1731711040719,"duration":62391}},{"uid":"4d043a9f13e9549a","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/4d043a9f13e9549a","status":"passed","time":{"start":1731706732423,"stop":1731706804054,"duration":71631}},{"uid":"5dbaabc465db77c9","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/5dbaabc465db77c9","status":"passed","time":{"start":1731706751707,"stop":1731706798021,"duration":46314}},{"uid":"e9fc609e8833ad58","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/e9fc609e8833ad58","status":"passed","time":{"start":1731694883841,"stop":1731694944659,"duration":60818}},{"uid":"e8a12b7a3f9c435","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/e8a12b7a3f9c435","status":"passed","time":{"start":1731622202288,"stop":1731622250297,"duration":48009}},{"uid":"c7dbabb0e865be4","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/c7dbabb0e865be4","status":"passed","time":{"start":1731622202288,"stop":1731622250297,"duration":48009}},{"uid":"f54694c968a96d17","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/f54694c968a96d17","status":"passed","time":{"start":1731622202288,"stop":1731622250297,"duration":48009}},{"uid":"baf48c3e87570e5a","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/baf48c3e87570e5a","status":"passed","time":{"start":1731616117473,"stop":1731616184881,"duration":67408}},{"uid":"63adc413ad362eb3","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/63adc413ad362eb3","status":"passed","time":{"start":1731613353182,"stop":1731613399923,"duration":46741}},{"uid":"30436faa562775c1","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/30436faa562775c1","status":"passed","time":{"start":1731610412542,"stop":1731610460565,"duration":48023}},{"uid":"40c9d16ca3153f83","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/40c9d16ca3153f83","status":"passed","time":{"start":1731596759616,"stop":1731596807201,"duration":47585}},{"uid":"3dff8e3a453ece72","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/3dff8e3a453ece72","status":"passed","time":{"start":1731548504017,"stop":1731548551003,"duration":46986}},{"uid":"bdd7f1696bf04c32","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/bdd7f1696bf04c32","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731563637843,"stop":1731563637843,"duration":0}},{"uid":"f08e3047165ca3e","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/f08e3047165ca3e","status":"passed","time":{"start":1731542467709,"stop":1731542514700,"duration":46991}},{"uid":"53d796e5feba60d1","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/53d796e5feba60d1","status":"passed","time":{"start":1731539331135,"stop":1731539394858,"duration":63723}},{"uid":"7c4eb5084ff79b9f","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/7c4eb5084ff79b9f","status":"passed","time":{"start":1731536168263,"stop":1731536214898,"duration":46635}},{"uid":"7a0350e3441bdbf6","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/7a0350e3441bdbf6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731535841106,"stop":1731535841106,"duration":0}},{"uid":"9458b231a449709c","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/9458b231a449709c","status":"passed","time":{"start":1731519476274,"stop":1731519523531,"duration":47257}},{"uid":"31d8733ad204b4d2","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/31d8733ad204b4d2","status":"passed","time":{"start":1731519476274,"stop":1731519523531,"duration":47257}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"131727ad1cca22e2.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}