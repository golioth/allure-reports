{"uid":"105bf70d616cbd3c","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"92fec5fac7da5ac3a26deeb8207f2647","time":{"start":1730362953743,"stop":1730362953743,"duration":0},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_stream>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1730362953746,"stop":1730362953747,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1730362953746,"stop":1730362953746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1730362953747,"stop":1730362953747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1730362953748,"stop":1730362953748,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1730362953748,"stop":1730362953748,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1730362953749,"stop":1730362953751,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1730362953752,"stop":1730362953752,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1730362953752,"stop":1730362953752,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1730362953753,"stop":1730362954239,"duration":486},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1730362954239,"stop":1730362955226,"duration":987},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1730362955227,"stop":1730362957488,"duration":2261},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 90, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_stream>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","steps":[],"attachments":[{"uid":"39313ae5669c049b","name":"log","source":"39313ae5669c049b.txt","type":"text/plain","size":9422}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1730362957758,"stop":1730362958210,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1730362958212,"stop":1730362958214,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1730362958219,"stop":1730362958220,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ba0bb6cff016"},{"name":"thread","value":"454-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":19,"unknown":0,"total":21},"items":[{"uid":"9cf4e2d23f6b559b","reportUrl":"https://golioth.github.io/allure-reports/branch/1702//#testresult/9cf4e2d23f6b559b","status":"passed","time":{"start":1730237996380,"stop":1730238021986,"duration":25606}},{"uid":"8251904de583f8c0","reportUrl":"https://golioth.github.io/allure-reports/branch/1696//#testresult/8251904de583f8c0","status":"failed","statusDetails":"AssertionError: assert 22 == 21.5","time":{"start":1729791409559,"stop":1729791456439,"duration":46880}},{"uid":"3710d55fc4c5cd47","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/3710d55fc4c5cd47","status":"passed","time":{"start":1729780543105,"stop":1729780567985,"duration":24880}},{"uid":"6fead70229078e7a","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/6fead70229078e7a","status":"passed","time":{"start":1729726940422,"stop":1729726990290,"duration":49868}},{"uid":"295fa1ebeb166834","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/295fa1ebeb166834","status":"passed","time":{"start":1729723651081,"stop":1729723679239,"duration":28158}},{"uid":"34f1d0d94a0d4b92","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/34f1d0d94a0d4b92","status":"passed","time":{"start":1729531845847,"stop":1729531870507,"duration":24660}},{"uid":"28fff7fad5ccf9a7","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/28fff7fad5ccf9a7","status":"passed","time":{"start":1729531845847,"stop":1729531870507,"duration":24660}},{"uid":"40603e9849b0b371","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/40603e9849b0b371","status":"passed","time":{"start":1729530834318,"stop":1729530880115,"duration":45797}},{"uid":"a8ed1fdc0cd26a3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/a8ed1fdc0cd26a3a","status":"passed","time":{"start":1729381352285,"stop":1729381377049,"duration":24764}},{"uid":"30eb7fda64e2a524","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/30eb7fda64e2a524","status":"passed","time":{"start":1729381352285,"stop":1729381377049,"duration":24764}},{"uid":"4b6a0b05eeabddc6","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/4b6a0b05eeabddc6","status":"passed","time":{"start":1729200062632,"stop":1729200086999,"duration":24367}},{"uid":"de1b77b8478b688c","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/de1b77b8478b688c","status":"passed","time":{"start":1729118420966,"stop":1729118459029,"duration":38063}},{"uid":"1b75fd5f2aaa28","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/1b75fd5f2aaa28","status":"passed","time":{"start":1729115963966,"stop":1729116012861,"duration":48895}},{"uid":"4a4d3576229b7694","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/4a4d3576229b7694","status":"passed","time":{"start":1729109913582,"stop":1729110006644,"duration":93062}},{"uid":"10cbcb36d99c5eec","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/10cbcb36d99c5eec","status":"passed","time":{"start":1729036308655,"stop":1729036333930,"duration":25275}},{"uid":"ff09b635b7aeb5ae","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/ff09b635b7aeb5ae","status":"passed","time":{"start":1729032883117,"stop":1729032907141,"duration":24024}},{"uid":"b5dc64161edbba7b","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/b5dc64161edbba7b","status":"passed","time":{"start":1729028003029,"stop":1729028028172,"duration":25143}},{"uid":"d144342c89804d37","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/d144342c89804d37","status":"passed","time":{"start":1729025930995,"stop":1729025955727,"duration":24732}},{"uid":"b62e9fafa39e2d4f","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/b62e9fafa39e2d4f","status":"passed","time":{"start":1729022881294,"stop":1729022907286,"duration":25992}},{"uid":"ac07f9b71617c7a0","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/ac07f9b71617c7a0","status":"passed","time":{"start":1729007865997,"stop":1729007891088,"duration":25091}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"105bf70d616cbd3c.json","parameterValues":["'nrf9160dk'","'zephyr'"]}