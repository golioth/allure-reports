{"uid":"a5073502c8187e99","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1732561178496,"stop":1732561293068,"duration":114572},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8492a710>\ndevice = <golioth.golioth.Device object at 0xffff8493d2d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff84aa2d10>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732561149544,"stop":1732561149544,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1732561149544,"stop":1732561149560,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732561149561,"stop":1732561149562,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732561149562,"stop":1732561149562,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732561149562,"stop":1732561149565,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732561149566,"stop":1732561149566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732561149566,"stop":1732561149566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732561149567,"stop":1732561149993,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732561149993,"stop":1732561150801,"duration":808},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732561150802,"stop":1732561177373,"duration":26571},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732561177374,"stop":1732561178489,"duration":1115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8492a710>\ndevice = <golioth.golioth.Device object at 0xffff8493d2d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff84aa2d10>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"18859daf25b5f238","name":"log","source":"18859daf25b5f238.txt","type":"text/plain","size":18007}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732561293388,"stop":1732561293437,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732561293439,"stop":1732561293815,"duration":376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732561293817,"stop":1732561293819,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732561293824,"stop":1732561293824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"39b211c71204"},{"name":"thread","value":"477-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":31,"unknown":0,"total":40},"items":[{"uid":"82f679da3bf6a4b2","reportUrl":"https://golioth.github.io/allure-reports/branch/1840//#testresult/82f679da3bf6a4b2","status":"passed","time":{"start":1732555385509,"stop":1732555461447,"duration":75938}},{"uid":"5e26123157303491","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/5e26123157303491","status":"passed","time":{"start":1732549416928,"stop":1732549447213,"duration":30285}},{"uid":"44d0a7075cea4825","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/44d0a7075cea4825","status":"passed","time":{"start":1732466995032,"stop":1732467040148,"duration":45116}},{"uid":"bace48572cd36675","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/bace48572cd36675","status":"passed","time":{"start":1732408078869,"stop":1732408119526,"duration":40657}},{"uid":"e0ccde7feb486c77","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/e0ccde7feb486c77","status":"passed","time":{"start":1732317695645,"stop":1732317733949,"duration":38304}},{"uid":"28694401f5b82f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/28694401f5b82f5","status":"passed","time":{"start":1732313903690,"stop":1732313948081,"duration":44391}},{"uid":"e909b3ea76ea1d60","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/e909b3ea76ea1d60","status":"passed","time":{"start":1732296295152,"stop":1732296324626,"duration":29474}},{"uid":"9112d5857b6c8f67","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/9112d5857b6c8f67","status":"passed","time":{"start":1732293500762,"stop":1732293544050,"duration":43288}},{"uid":"dbc753b0444f3bda","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/dbc753b0444f3bda","status":"broken","statusDetails":"FileNotFoundError: [Errno 2] No such file or directory: '/__w/golioth-firmware-sdk/golioth-firmware-sdk/twister-out/nrf9160dk@0.14.0_nrf9160_ns/hello_nrf91_offloaded/sample.golioth.hello_nrf91_offloaded/zephyr/.config'","time":{"start":1732221648717,"stop":1732221648717,"duration":0}},{"uid":"cdde07f38f9b212b","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/cdde07f38f9b212b","status":"passed","time":{"start":1732135935507,"stop":1732135966279,"duration":30772}},{"uid":"addb1f01be22493e","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/addb1f01be22493e","status":"passed","time":{"start":1732127651989,"stop":1732127686999,"duration":35010}},{"uid":"1ba5b7729e79e76c","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/1ba5b7729e79e76c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732126580939,"stop":1732126695474,"duration":114535}},{"uid":"b00faaa266ecabba","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/b00faaa266ecabba","status":"passed","time":{"start":1732049500689,"stop":1732049545831,"duration":45142}},{"uid":"e477aa951dc1f964","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/e477aa951dc1f964","status":"passed","time":{"start":1732049500689,"stop":1732049545831,"duration":45142}},{"uid":"f287a85a8fe1e5f6","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/f287a85a8fe1e5f6","status":"passed","time":{"start":1732049500689,"stop":1732049545831,"duration":45142}},{"uid":"a34549e3fdedff27","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/a34549e3fdedff27","status":"passed","time":{"start":1732033232726,"stop":1732033288659,"duration":55933}},{"uid":"e0ac03b7299ac738","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/e0ac03b7299ac738","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731971706036,"stop":1731971820500,"duration":114464}},{"uid":"3196ac95e172c6c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/3196ac95e172c6c5","status":"passed","time":{"start":1731964034373,"stop":1731964064854,"duration":30481}},{"uid":"496fa0b584bd657e","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/496fa0b584bd657e","status":"passed","time":{"start":1731959016640,"stop":1731959059697,"duration":43057}},{"uid":"a8e3a07e54023dcc","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/a8e3a07e54023dcc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731955954249,"stop":1731956067244,"duration":112995}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"a5073502c8187e99.json","parameterValues":["'nrf9160dk'","'zephyr'"]}