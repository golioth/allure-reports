{
  "uid" : "896026ec5bf78ee0",
  "name" : "test_settings",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings",
  "historyId" : "ddbd6781d4488af4f57eae6c3dca1e27",
  "time" : {
    "start" : 1733765902797,
    "stop" : 1733765996699,
    "duration" : 93902
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa6e5ec90>\nproject = <golioth.golioth.Project object at 0xffffa78e3110>\ndevice = <golioth.golioth.Device object at 0xffffa6cf9a50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_url",
    "time" : {
      "start" : 1733765888159,
      "stop" : 1733765888159,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733765888157,
      "stop" : 1733765888158,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733765888160,
      "stop" : 1733765888162,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733765889473,
      "stop" : 1733765902163,
      "duration" : 12690
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733765888163,
      "stop" : 1733765888622,
      "duration" : 459
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733765888158,
      "stop" : 1733765888158,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733765888157,
      "stop" : 1733765888157,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733765888623,
      "stop" : 1733765889472,
      "duration" : 849
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733765888156,
      "stop" : 1733765888156,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733765902164,
      "stop" : 1733765902794,
      "duration" : 630
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733765888159,
      "stop" : 1733765888159,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733765888160,
      "stop" : 1733765888160,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa6e5ec90>\nproject = <golioth.golioth.Project object at 0xffffa78e3110>\ndevice = <golioth.golioth.Device object at 0xffffa6cf9a50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 1 s'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1ee01c9c092f2fcf",
      "name" : "log",
      "source" : "1ee01c9c092f2fcf.txt",
      "type" : "text/plain",
      "size" : 26579
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733765997664,
      "stop" : 1733765997664,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733765996982,
      "stop" : 1733765997283,
      "duration" : 301
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733765997659,
      "stop" : 1733765997662,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733765997285,
      "stop" : 1733765997657,
      "duration" : 372
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "b094b13a5a3f"
  }, {
    "name" : "thread",
    "value" : "496-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 22,
        "skipped" : 0,
        "passed" : 87,
        "unknown" : 0,
        "total" : 109
      },
      "items" : [ {
        "uid" : "9c9c24ff63609e2e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/35/#testresult/9c9c24ff63609e2e",
        "status" : "passed",
        "time" : {
          "start" : 1733555765436,
          "stop" : 1733555805846,
          "duration" : 40410
        }
      }, {
        "uid" : "369cf016c088b9f8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1873/#testresult/369cf016c088b9f8",
        "status" : "passed",
        "time" : {
          "start" : 1733523205658,
          "stop" : 1733523246320,
          "duration" : 40662
        }
      }, {
        "uid" : "6b0840bcb84e080f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1870/#testresult/6b0840bcb84e080f",
        "status" : "passed",
        "time" : {
          "start" : 1733441944202,
          "stop" : 1733441983960,
          "duration" : 39758
        }
      }, {
        "uid" : "97d2dbfc2d47cb10",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/97d2dbfc2d47cb10",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733414613821,
          "stop" : 1733414707906,
          "duration" : 94085
        }
      }, {
        "uid" : "914a6c471ec725e3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/914a6c471ec725e3",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733352650511,
          "stop" : 1733352744400,
          "duration" : 93889
        }
      }, {
        "uid" : "dfcaac155b8dba61",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/dfcaac155b8dba61",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733328879228,
          "stop" : 1733328973175,
          "duration" : 93947
        }
      }, {
        "uid" : "9bdbb8f146521f42",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/9bdbb8f146521f42",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733254373988,
          "stop" : 1733254467987,
          "duration" : 93999
        }
      }, {
        "uid" : "d4c263816e63db3a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/d4c263816e63db3a",
        "status" : "passed",
        "time" : {
          "start" : 1733191204251,
          "stop" : 1733191245125,
          "duration" : 40874
        }
      }, {
        "uid" : "edde513b310bf419",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/edde513b310bf419",
        "status" : "passed",
        "time" : {
          "start" : 1732729472835,
          "stop" : 1732729512939,
          "duration" : 40104
        }
      }, {
        "uid" : "97e7f00d8abfc0b1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/97e7f00d8abfc0b1",
        "status" : "passed",
        "time" : {
          "start" : 1732749950604,
          "stop" : 1732749990716,
          "duration" : 40112
        }
      }, {
        "uid" : "f428d91807032145",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/f428d91807032145",
        "status" : "passed",
        "time" : {
          "start" : 1732729472835,
          "stop" : 1732729512939,
          "duration" : 40104
        }
      }, {
        "uid" : "65377a40995ede11",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/65377a40995ede11",
        "status" : "passed",
        "time" : {
          "start" : 1732723911953,
          "stop" : 1732723952460,
          "duration" : 40507
        }
      }, {
        "uid" : "24299bbed9ebebb3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/24299bbed9ebebb3",
        "status" : "passed",
        "time" : {
          "start" : 1732640684341,
          "stop" : 1732640724566,
          "duration" : 40225
        }
      }, {
        "uid" : "c33be3deb52abe34",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/c33be3deb52abe34",
        "status" : "passed",
        "time" : {
          "start" : 1732631618603,
          "stop" : 1732631659625,
          "duration" : 41022
        }
      }, {
        "uid" : "e26216709a704ed5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/e26216709a704ed5",
        "status" : "passed",
        "time" : {
          "start" : 1732560416113,
          "stop" : 1732560457269,
          "duration" : 41156
        }
      }, {
        "uid" : "f0246b36c6c54224",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/f0246b36c6c54224",
        "status" : "passed",
        "time" : {
          "start" : 1732560416113,
          "stop" : 1732560457269,
          "duration" : 41156
        }
      }, {
        "uid" : "d0e12e792d966764",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/d0e12e792d966764",
        "status" : "passed",
        "time" : {
          "start" : 1732554647900,
          "stop" : 1732554687857,
          "duration" : 39957
        }
      }, {
        "uid" : "7b5908c6a5b7c656",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/7b5908c6a5b7c656",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732550005779,
          "stop" : 1732550099789,
          "duration" : 94010
        }
      }, {
        "uid" : "e0901ba42d255458",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/e0901ba42d255458",
        "status" : "passed",
        "time" : {
          "start" : 1732509340976,
          "stop" : 1732509381049,
          "duration" : 40073
        }
      }, {
        "uid" : "ed580404be1ce6ad",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/ed580404be1ce6ad",
        "status" : "passed",
        "time" : {
          "start" : 1732408548820,
          "stop" : 1732408588677,
          "duration" : 39857
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "896026ec5bf78ee0.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}