{
  "uid" : "f6b6316f52194206",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "d863d307dfacb440b83f8a44acfa67f4",
  "time" : {
    "start" : 1733765274815,
    "stop" : 1733765367924,
    "duration" : 93109
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffbaceba50>\ndevice = <golioth.golioth.Device object at 0xffffbacca610>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device",
    "time" : {
      "start" : 1733765260857,
      "stop" : 1733765261688,
      "duration" : 831
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733765260413,
      "stop" : 1733765260413,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733765260408,
      "stop" : 1733765260409,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733765260410,
      "stop" : 1733765260412,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733765260408,
      "stop" : 1733765260408,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733765260407,
      "stop" : 1733765260408,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733765260409,
      "stop" : 1733765260410,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733765260414,
      "stop" : 1733765260856,
      "duration" : 442
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733765261688,
      "stop" : 1733765274204,
      "duration" : 12516
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733765260413,
      "stop" : 1733765260413,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733765260407,
      "stop" : 1733765260407,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733765274204,
      "stop" : 1733765274812,
      "duration" : 608
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffbaceba50>\ndevice = <golioth.golioth.Device object at 0xffffbacca610>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "be088ce40b4f6908",
      "name" : "log",
      "source" : "be088ce40b4f6908.txt",
      "type" : "text/plain",
      "size" : 22975
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1733765368238,
      "stop" : 1733765368664,
      "duration" : 426
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733765368673,
      "stop" : 1733765368673,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733765368666,
      "stop" : 1733765368668,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733765368191,
      "stop" : 1733765368236,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "b094b13a5a3f"
  }, {
    "name" : "thread",
    "value" : "386-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 22,
        "skipped" : 0,
        "passed" : 88,
        "unknown" : 0,
        "total" : 110
      },
      "items" : [ {
        "uid" : "919e7a76f18a52c5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/35/#testresult/919e7a76f18a52c5",
        "status" : "passed",
        "time" : {
          "start" : 1733555403444,
          "stop" : 1733555463720,
          "duration" : 60276
        }
      }, {
        "uid" : "480893608a0c59c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1873/#testresult/480893608a0c59c",
        "status" : "passed",
        "time" : {
          "start" : 1733522843953,
          "stop" : 1733522903728,
          "duration" : 59775
        }
      }, {
        "uid" : "6d866163d06f0442",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1872/#testresult/6d866163d06f0442",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733452747341,
          "stop" : 1733452840820,
          "duration" : 93479
        }
      }, {
        "uid" : "7b3e56fca9b69da5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1870/#testresult/7b3e56fca9b69da5",
        "status" : "passed",
        "time" : {
          "start" : 1733441580935,
          "stop" : 1733441640875,
          "duration" : 59940
        }
      }, {
        "uid" : "50ed0483b87f65bd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/50ed0483b87f65bd",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733414165276,
          "stop" : 1733414258409,
          "duration" : 93133
        }
      }, {
        "uid" : "dc8c9d71088f4d3c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/dc8c9d71088f4d3c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733352203503,
          "stop" : 1733352296585,
          "duration" : 93082
        }
      }, {
        "uid" : "2e58683a0f11a9d1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/2e58683a0f11a9d1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733328431423,
          "stop" : 1733328524492,
          "duration" : 93069
        }
      }, {
        "uid" : "a5170da69e0864e3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/a5170da69e0864e3",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733253926032,
          "stop" : 1733254019080,
          "duration" : 93048
        }
      }, {
        "uid" : "a3afcdb589262b1b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/a3afcdb589262b1b",
        "status" : "passed",
        "time" : {
          "start" : 1733190829161,
          "stop" : 1733190888191,
          "duration" : 59030
        }
      }, {
        "uid" : "32d7034d4807390d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/32d7034d4807390d",
        "status" : "passed",
        "time" : {
          "start" : 1732729111530,
          "stop" : 1732729170256,
          "duration" : 58726
        }
      }, {
        "uid" : "a0f9aed988ca1ec3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/a0f9aed988ca1ec3",
        "status" : "passed",
        "time" : {
          "start" : 1732749588339,
          "stop" : 1732749648075,
          "duration" : 59736
        }
      }, {
        "uid" : "1670bd35625f56cf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/1670bd35625f56cf",
        "status" : "passed",
        "time" : {
          "start" : 1732729111530,
          "stop" : 1732729170256,
          "duration" : 58726
        }
      }, {
        "uid" : "24cadcd1f3be2a44",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/24cadcd1f3be2a44",
        "status" : "passed",
        "time" : {
          "start" : 1732723629342,
          "stop" : 1732723695601,
          "duration" : 66259
        }
      }, {
        "uid" : "6c34475df86f7790",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/6c34475df86f7790",
        "status" : "passed",
        "time" : {
          "start" : 1732640322596,
          "stop" : 1732640381912,
          "duration" : 59316
        }
      }, {
        "uid" : "12e4d3d7d0c3c676",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/12e4d3d7d0c3c676",
        "status" : "passed",
        "time" : {
          "start" : 1732631256108,
          "stop" : 1732631314586,
          "duration" : 58478
        }
      }, {
        "uid" : "c87f6a226cd51557",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/c87f6a226cd51557",
        "status" : "passed",
        "time" : {
          "start" : 1732560054126,
          "stop" : 1732560113493,
          "duration" : 59367
        }
      }, {
        "uid" : "6b5b4dcbe4b5aec",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/6b5b4dcbe4b5aec",
        "status" : "passed",
        "time" : {
          "start" : 1732560054126,
          "stop" : 1732560113493,
          "duration" : 59367
        }
      }, {
        "uid" : "2614f8c1f8950806",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/2614f8c1f8950806",
        "status" : "passed",
        "time" : {
          "start" : 1732554285679,
          "stop" : 1732554343858,
          "duration" : 58179
        }
      }, {
        "uid" : "328681629030e3ee",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/328681629030e3ee",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732549557543,
          "stop" : 1732549650690,
          "duration" : 93147
        }
      }, {
        "uid" : "c34ff65e1bd52560",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/c34ff65e1bd52560",
        "status" : "passed",
        "time" : {
          "start" : 1732508977918,
          "stop" : 1732509037462,
          "duration" : 59544
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "f6b6316f52194206.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}