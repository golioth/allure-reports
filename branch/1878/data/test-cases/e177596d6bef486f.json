{
  "uid" : "e177596d6bef486f",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "3038e6d5fffa4527a437bf078474dadf",
  "time" : {
    "start" : 1733764982700,
    "stop" : 1733765075435,
    "duration" : 92735
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa2b3ef90>\ndevice = <golioth.golioth.Device object at 0xffffa2d82150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "shell",
    "time" : {
      "start" : 1733764982089,
      "stop" : 1733764982697,
      "duration" : 608
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733764966634,
      "stop" : 1733764966634,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733764968072,
      "stop" : 1733764982088,
      "duration" : 14016
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733764966635,
      "stop" : 1733764966635,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733764966630,
      "stop" : 1733764966630,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733764966631,
      "stop" : 1733764966633,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733764966635,
      "stop" : 1733764967172,
      "duration" : 537
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733764966631,
      "stop" : 1733764966631,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733764967172,
      "stop" : 1733764968072,
      "duration" : 900
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733764966629,
      "stop" : 1733764966629,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733764966629,
      "stop" : 1733764966630,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733764966628,
      "stop" : 1733764966628,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa2b3ef90>\ndevice = <golioth.golioth.Device object at 0xffffa2d82150>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "59e266fad9267ea6",
      "name" : "log",
      "source" : "59e266fad9267ea6.txt",
      "type" : "text/plain",
      "size" : 19450
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1733765075843,
      "stop" : 1733765076079,
      "duration" : 236
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733765076464,
      "stop" : 1733765076464,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733765076457,
      "stop" : 1733765076459,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733765076081,
      "stop" : 1733765076455,
      "duration" : 374
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "b094b13a5a3f"
  }, {
    "name" : "thread",
    "value" : "346-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 22,
        "skipped" : 0,
        "passed" : 85,
        "unknown" : 0,
        "total" : 110
      },
      "items" : [ {
        "uid" : "4c0578fec356b064",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/35/#testresult/4c0578fec356b064",
        "status" : "passed",
        "time" : {
          "start" : 1733555314671,
          "stop" : 1733555362711,
          "duration" : 48040
        }
      }, {
        "uid" : "6509afbdcd8e826",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1873/#testresult/6509afbdcd8e826",
        "status" : "passed",
        "time" : {
          "start" : 1733522754582,
          "stop" : 1733522803084,
          "duration" : 48502
        }
      }, {
        "uid" : "a1d869256b2b5eed",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1872/#testresult/a1d869256b2b5eed",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733452634661,
          "stop" : 1733452728462,
          "duration" : 93801
        }
      }, {
        "uid" : "81324097f79bb7f0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1870/#testresult/81324097f79bb7f0",
        "status" : "passed",
        "time" : {
          "start" : 1733441492350,
          "stop" : 1733441540201,
          "duration" : 47851
        }
      }, {
        "uid" : "e397f37138630792",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/e397f37138630792",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733414053899,
          "stop" : 1733414146604,
          "duration" : 92705
        }
      }, {
        "uid" : "6d5390c9e6506813",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/6d5390c9e6506813",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733352092229,
          "stop" : 1733352185043,
          "duration" : 92814
        }
      }, {
        "uid" : "c99ac7eff6182606",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/c99ac7eff6182606",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733328320350,
          "stop" : 1733328413007,
          "duration" : 92657
        }
      }, {
        "uid" : "40a5d18a7171e9da",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/40a5d18a7171e9da",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733253814347,
          "stop" : 1733253907040,
          "duration" : 92693
        }
      }, {
        "uid" : "5a4a6cf8732523f4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/5a4a6cf8732523f4",
        "status" : "passed",
        "time" : {
          "start" : 1733190739329,
          "stop" : 1733190788140,
          "duration" : 48811
        }
      }, {
        "uid" : "1969aa3bcdc5fef5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/1969aa3bcdc5fef5",
        "status" : "passed",
        "time" : {
          "start" : 1732729022499,
          "stop" : 1732729070696,
          "duration" : 48197
        }
      }, {
        "uid" : "e3407d3f109ec59b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/e3407d3f109ec59b",
        "status" : "passed",
        "time" : {
          "start" : 1732749499015,
          "stop" : 1732749547802,
          "duration" : 48787
        }
      }, {
        "uid" : "a1dc396485b4b426",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/a1dc396485b4b426",
        "status" : "passed",
        "time" : {
          "start" : 1732729022499,
          "stop" : 1732729070696,
          "duration" : 48197
        }
      }, {
        "uid" : "e87093f9153d4db2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/e87093f9153d4db2",
        "status" : "passed",
        "time" : {
          "start" : 1732723562245,
          "stop" : 1732723610838,
          "duration" : 48593
        }
      }, {
        "uid" : "956ce716f5e7aea9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/956ce716f5e7aea9",
        "status" : "passed",
        "time" : {
          "start" : 1732640233512,
          "stop" : 1732640281863,
          "duration" : 48351
        }
      }, {
        "uid" : "a645079b240f5e2b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/a645079b240f5e2b",
        "status" : "broken",
        "statusDetails" : "httpx.ReadTimeout",
        "time" : {
          "start" : 1732631160359,
          "stop" : 1732631213873,
          "duration" : 53514
        }
      }, {
        "uid" : "cec971a215658682",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/cec971a215658682",
        "status" : "passed",
        "time" : {
          "start" : 1732559963021,
          "stop" : 1732560013267,
          "duration" : 50246
        }
      }, {
        "uid" : "85e0a24a4287f1e1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/85e0a24a4287f1e1",
        "status" : "passed",
        "time" : {
          "start" : 1732559963021,
          "stop" : 1732560013267,
          "duration" : 50246
        }
      }, {
        "uid" : "7f930a32d2dcf3fb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/7f930a32d2dcf3fb",
        "status" : "passed",
        "time" : {
          "start" : 1732554195756,
          "stop" : 1732554244893,
          "duration" : 49137
        }
      }, {
        "uid" : "631402387d296b26",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/631402387d296b26",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732549446423,
          "stop" : 1732549539111,
          "duration" : 92688
        }
      }, {
        "uid" : "a916fe154c8a8c60",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/a916fe154c8a8c60",
        "status" : "passed",
        "time" : {
          "start" : 1732508889063,
          "stop" : 1732508937186,
          "duration" : 48123
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "e177596d6bef486f.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}