{
  "uid" : "e554dd8ed46cf385",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello",
  "historyId" : "467e555cbdae75d46aefa9c64cb6440a",
  "time" : {
    "start" : 1733766259927,
    "stop" : 1733766372682,
    "duration" : 112755
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8cc8ed90>\ndevice = <golioth.golioth.Device object at 0xffff8cb12490>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device",
    "time" : {
      "start" : 1733766245841,
      "stop" : 1733766246802,
      "duration" : 961
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733766245384,
      "stop" : 1733766245386,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733766246803,
      "stop" : 1733766259312,
      "duration" : 12509
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733766245382,
      "stop" : 1733766245383,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733766245388,
      "stop" : 1733766245840,
      "duration" : 452
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733766245383,
      "stop" : 1733766245383,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733766245381,
      "stop" : 1733766245381,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733766245384,
      "stop" : 1733766245384,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733766245388,
      "stop" : 1733766245388,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733766259313,
      "stop" : 1733766259924,
      "duration" : 611
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733766245382,
      "stop" : 1733766245382,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733766245387,
      "stop" : 1733766245387,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8cc8ed90>\ndevice = <golioth.golioth.Device object at 0xffff8cb12490>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e527a01d43880cda",
      "name" : "log",
      "source" : "e527a01d43880cda.txt",
      "type" : "text/plain",
      "size" : 20638
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1733766373003,
      "stop" : 1733766373375,
      "duration" : 372
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733766373384,
      "stop" : 1733766373384,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733766372955,
      "stop" : 1733766373001,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733766373377,
      "stop" : 1733766373379,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "b094b13a5a3f"
  }, {
    "name" : "thread",
    "value" : "562-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "de44bedef40ae21b",
      "status" : "broken",
      "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
      "time" : {
        "start" : 1733766015956,
        "stop" : 1733766128799,
        "duration" : 112843
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 22,
        "skipped" : 0,
        "passed" : 87,
        "unknown" : 0,
        "total" : 109
      },
      "items" : [ {
        "uid" : "7f2582a6bc8baac3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/35/#testresult/7f2582a6bc8baac3",
        "status" : "passed",
        "time" : {
          "start" : 1733556158985,
          "stop" : 1733556212343,
          "duration" : 53358
        }
      }, {
        "uid" : "f7f6c9be553840de",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1873/#testresult/f7f6c9be553840de",
        "status" : "passed",
        "time" : {
          "start" : 1733523478326,
          "stop" : 1733523534627,
          "duration" : 56301
        }
      }, {
        "uid" : "3ee8a6587de4093",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1870/#testresult/3ee8a6587de4093",
        "status" : "passed",
        "time" : {
          "start" : 1733442214529,
          "stop" : 1733442268928,
          "duration" : 54399
        }
      }, {
        "uid" : "2e59a951a51e942a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/2e59a951a51e942a",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733415220471,
          "stop" : 1733415333166,
          "duration" : 112695
        }
      }, {
        "uid" : "77458ccec074d986",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/77458ccec074d986",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733353256945,
          "stop" : 1733353369684,
          "duration" : 112739
        }
      }, {
        "uid" : "194b9092c960be23",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/194b9092c960be23",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733329305460,
          "stop" : 1733329418090,
          "duration" : 112630
        }
      }, {
        "uid" : "c542804a640dbd11",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/c542804a640dbd11",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733254980952,
          "stop" : 1733255093644,
          "duration" : 112692
        }
      }, {
        "uid" : "b7fdf9bb612a8cdf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/b7fdf9bb612a8cdf",
        "status" : "passed",
        "time" : {
          "start" : 1733191475582,
          "stop" : 1733191530264,
          "duration" : 54682
        }
      }, {
        "uid" : "ed2743a59bf83bec",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/ed2743a59bf83bec",
        "status" : "passed",
        "time" : {
          "start" : 1732729866062,
          "stop" : 1732729921829,
          "duration" : 55767
        }
      }, {
        "uid" : "d65fb0cb15fbea67",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/d65fb0cb15fbea67",
        "status" : "passed",
        "time" : {
          "start" : 1732750221676,
          "stop" : 1732750281408,
          "duration" : 59732
        }
      }, {
        "uid" : "ff56d4d7ecd40775",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/ff56d4d7ecd40775",
        "status" : "passed",
        "time" : {
          "start" : 1732729866062,
          "stop" : 1732729921829,
          "duration" : 55767
        }
      }, {
        "uid" : "75d64533767738ee",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/75d64533767738ee",
        "status" : "passed",
        "time" : {
          "start" : 1732724217354,
          "stop" : 1732724270611,
          "duration" : 53257
        }
      }, {
        "uid" : "20b47b3857263e68",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/20b47b3857263e68",
        "status" : "passed",
        "time" : {
          "start" : 1732640956281,
          "stop" : 1732641010947,
          "duration" : 54666
        }
      }, {
        "uid" : "8bf158f5aba3dc32",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/8bf158f5aba3dc32",
        "status" : "passed",
        "time" : {
          "start" : 1732631891682,
          "stop" : 1732631945293,
          "duration" : 53611
        }
      }, {
        "uid" : "c98684d9324e53c8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/c98684d9324e53c8",
        "status" : "passed",
        "time" : {
          "start" : 1732560810868,
          "stop" : 1732560864265,
          "duration" : 53397
        }
      }, {
        "uid" : "867d7d749df72333",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/867d7d749df72333",
        "status" : "passed",
        "time" : {
          "start" : 1732560810868,
          "stop" : 1732560864265,
          "duration" : 53397
        }
      }, {
        "uid" : "f88c5dd6643be41d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/f88c5dd6643be41d",
        "status" : "passed",
        "time" : {
          "start" : 1732555046714,
          "stop" : 1732555100079,
          "duration" : 53365
        }
      }, {
        "uid" : "763622408f888d34",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/763622408f888d34",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732550612476,
          "stop" : 1732550725187,
          "duration" : 112711
        }
      }, {
        "uid" : "abd1839e839dad81",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/abd1839e839dad81",
        "status" : "broken",
        "statusDetails" : "httpx.ConnectTimeout",
        "time" : {
          "start" : 1732509734192,
          "stop" : 1732509741508,
          "duration" : 7316
        }
      }, {
        "uid" : "f2135a02456638f9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/f2135a02456638f9",
        "status" : "passed",
        "time" : {
          "start" : 1732408812791,
          "stop" : 1732408866606,
          "duration" : 53815
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "e554dd8ed46cf385.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}