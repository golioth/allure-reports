{
  "uid" : "51d7267a43dfd9a0",
  "name" : "test_fw_update",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update",
  "historyId" : "e35d87be40a3f24a162aaab8c9432c62",
  "time" : {
    "start" : 1733352876412,
    "stop" : 1733353075705,
    "duration" : 199293
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff98e64190>\nproject = <golioth.golioth.Project object at 0xffff99005310>\ndevice = <golioth.golioth.Device object at 0xffff98e66e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <6750dd976083b661f8110747, release_tags=[], device_tags=['6750dd966083b661f8110746'], artifact_ids=['674e19b9509873c6f7445233'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n        shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n        LOGGER.info(\"Block download has begun!\")\n    \n        shell._device.readlines_until(regex=\".*Rebooting into new image.\", timeout=600.0)\n        LOGGER.info(\"Download complete, restarting to perform update.\")\n    \n        # Test for board to run new firmware and report to Golioth\n    \n>       shell._device.readlines_until(regex=f\".*Current firmware version: {fw_info['package']} - {fw_info['version']}.\",\n                                      timeout=120.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Current firmware version: main - 255.8.9.'\nnum_of_lines = None, timeout = 120.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733352852064,
      "stop" : 1733352852065,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733352852062,
      "stop" : 1733352852063,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "artifact",
    "time" : {
      "start" : 1733352853711,
      "stop" : 1733352854094,
      "duration" : 383
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733352875586,
      "stop" : 1733352876409,
      "duration" : 823
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "release",
    "time" : {
      "start" : 1733352855324,
      "stop" : 1733352855726,
      "duration" : 402
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733352852064,
      "stop" : 1733352852064,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733352852033,
      "stop" : 1733352852034,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733352852068,
      "stop" : 1733352852463,
      "duration" : 395
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fw_info",
    "time" : {
      "start" : 1733352852034,
      "stop" : 1733352852062,
      "duration" : 28
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733352852463,
      "stop" : 1733352853329,
      "duration" : 866
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733352855727,
      "stop" : 1733352875586,
      "duration" : 19859
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733352852063,
      "stop" : 1733352852063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "blueprint_id",
    "time" : {
      "start" : 1733352853330,
      "stop" : 1733352853710,
      "duration" : 380
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733352852065,
      "stop" : 1733352852068,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733352852033,
      "stop" : 1733352852033,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733352852032,
      "stop" : 1733352852032,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tag",
    "time" : {
      "start" : 1733352854094,
      "stop" : 1733352855323,
      "duration" : 1229
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff98e64190>\nproject = <golioth.golioth.Project object at 0xffff99005310>\ndevice = <golioth.golioth.Device object at 0xffff98e66e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <6750dd976083b661f8110747, release_tags=[], device_tags=['6750dd966083b661f8110746'], artifact_ids=['674e19b9509873c6f7445233'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n        shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n        LOGGER.info(\"Block download has begun!\")\n    \n        shell._device.readlines_until(regex=\".*Rebooting into new image.\", timeout=600.0)\n        LOGGER.info(\"Download complete, restarting to perform update.\")\n    \n        # Test for board to run new firmware and report to Golioth\n    \n>       shell._device.readlines_until(regex=f\".*Current firmware version: {fw_info['package']} - {fw_info['version']}.\",\n                                      timeout=120.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Current firmware version: main - 255.8.9.'\nnum_of_lines = None, timeout = 120.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "88f229a3707086d9",
      "name" : "log",
      "source" : "88f229a3707086d9.txt",
      "type" : "text/plain",
      "size" : 190463
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "artifact::0",
    "time" : {
      "start" : 1733353077237,
      "stop" : 1733353077238,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "release::0",
    "time" : {
      "start" : 1733353076077,
      "stop" : 1733353076465,
      "duration" : 388
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733353077641,
      "stop" : 1733353077641,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fw_info::0",
    "time" : {
      "start" : 1733353077678,
      "stop" : 1733353077681,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733353077242,
      "stop" : 1733353077639,
      "duration" : 397
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733353076046,
      "stop" : 1733353076075,
      "duration" : 29
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "blueprint_id::0",
    "time" : {
      "start" : 1733353077240,
      "stop" : 1733353077240,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733353077643,
      "stop" : 1733353077644,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tag::0",
    "time" : {
      "start" : 1733353076467,
      "stop" : 1733353077235,
      "duration" : 768
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "a8ea12de1e63"
  }, {
    "name" : "thread",
    "value" : "471-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 5,
        "broken" : 57,
        "skipped" : 0,
        "passed" : 40,
        "unknown" : 0,
        "total" : 102
      },
      "items" : [ {
        "uid" : "3da897aa79192351",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/3da897aa79192351",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733328714758,
          "stop" : 1733328911525,
          "duration" : 196767
        }
      }, {
        "uid" : "eaceab9111bae1df",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/eaceab9111bae1df",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733254238430,
          "stop" : 1733254426953,
          "duration" : 188523
        }
      }, {
        "uid" : "7bb59954904c38ed",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/7bb59954904c38ed",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733191239864,
          "stop" : 1733191425112,
          "duration" : 185248
        }
      }, {
        "uid" : "5a615f0a682a0bc3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/5a615f0a682a0bc3",
        "status" : "passed",
        "time" : {
          "start" : 1732729440436,
          "stop" : 1732729581914,
          "duration" : 141478
        }
      }, {
        "uid" : "75eecfbc1ccaa05a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/75eecfbc1ccaa05a",
        "status" : "passed",
        "time" : {
          "start" : 1732749935318,
          "stop" : 1732750038792,
          "duration" : 103474
        }
      }, {
        "uid" : "59b9f0afc043ee58",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/59b9f0afc043ee58",
        "status" : "passed",
        "time" : {
          "start" : 1732729440436,
          "stop" : 1732729581914,
          "duration" : 141478
        }
      }, {
        "uid" : "85989c6a06000bf1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/85989c6a06000bf1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732724260008,
          "stop" : 1732724449968,
          "duration" : 189960
        }
      }, {
        "uid" : "b002f96c577f9dd6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/b002f96c577f9dd6",
        "status" : "passed",
        "time" : {
          "start" : 1732631602775,
          "stop" : 1732631752926,
          "duration" : 150151
        }
      }, {
        "uid" : "f6304ea342453d2f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/f6304ea342453d2f",
        "status" : "passed",
        "time" : {
          "start" : 1732631602775,
          "stop" : 1732631752926,
          "duration" : 150151
        }
      }, {
        "uid" : "abe3f73977134d3a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/abe3f73977134d3a",
        "status" : "passed",
        "time" : {
          "start" : 1732560265172,
          "stop" : 1732560365464,
          "duration" : 100292
        }
      }, {
        "uid" : "2c1ea9083227ef5e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/2c1ea9083227ef5e",
        "status" : "passed",
        "time" : {
          "start" : 1732560265172,
          "stop" : 1732560365464,
          "duration" : 100292
        }
      }, {
        "uid" : "bae12c67b7e680c8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/bae12c67b7e680c8",
        "status" : "passed",
        "time" : {
          "start" : 1732554876162,
          "stop" : 1732555034454,
          "duration" : 158292
        }
      }, {
        "uid" : "ef6a2d2af6fa0de2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/ef6a2d2af6fa0de2",
        "status" : "passed",
        "time" : {
          "start" : 1732549639945,
          "stop" : 1732549756361,
          "duration" : 116416
        }
      }, {
        "uid" : "f41f07cc37d93257",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1839//#testresult/f41f07cc37d93257",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732509342892,
          "stop" : 1732509521356,
          "duration" : 178464
        }
      }, {
        "uid" : "50a3a3378323dda",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/50a3a3378323dda",
        "status" : "passed",
        "time" : {
          "start" : 1732408314840,
          "stop" : 1732408429631,
          "duration" : 114791
        }
      }, {
        "uid" : "2c9a2f92856986ee",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/2c9a2f92856986ee",
        "status" : "passed",
        "time" : {
          "start" : 1732408314840,
          "stop" : 1732408429631,
          "duration" : 114791
        }
      }, {
        "uid" : "67f5c3be83bedac5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/67f5c3be83bedac5",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732316934990,
          "stop" : 1732317114681,
          "duration" : 179691
        }
      }, {
        "uid" : "6f635c24c7ee24e7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1835//#testresult/6f635c24c7ee24e7",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732313267873,
          "stop" : 1732313448732,
          "duration" : 180859
        }
      }, {
        "uid" : "33df9c512842ea3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1832//#testresult/33df9c512842ea3",
        "status" : "passed",
        "time" : {
          "start" : 1732301913419,
          "stop" : 1732302032583,
          "duration" : 119164
        }
      }, {
        "uid" : "f6e59e0f34f80b84",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1832//#testresult/f6e59e0f34f80b84",
        "status" : "passed",
        "time" : {
          "start" : 1732301913419,
          "stop" : 1732302032583,
          "duration" : 119164
        }
      } ]
    },
    "tags" : [ "anyio", "mikes_testbench", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "51d7267a43dfd9a0.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}