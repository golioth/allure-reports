{"uid":"c570bf9fc077d714","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"339a95d10a0a2a5287edceb1ba3f8efb","time":{"start":1732279614202,"stop":1732279614202,"duration":0},"status":"failed","statusMessage":"AssertionError: assert None != None","statusTrace":"item = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproject = <golioth.golioth.Project object at 0xffffa9792110>\nblueprint_id = None\n\n    @pytest.fixture(scope=\"module\")\n    async def artifact(project, blueprint_id):\n        # Find Artifact that matches this device and desired update version\n    \n        artifact = None\n        all_artifacts = await project.artifacts.get_all()\n        for a in all_artifacts:\n            if (a.blueprint == blueprint_id and\n                a.version == UPDATE_VERSION and\n                a.package == UPDATE_PACKAGE):\n                artifact = a\n    \n>       assert artifact != None\nE       assert None != None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732279614204,"stop":1732279614205,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732279614205,"stop":1732279614205,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732279614206,"stop":1732279614206,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1732279614206,"stop":1732279614234,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732279614235,"stop":1732279614235,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732279614236,"stop":1732279614236,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732279614236,"stop":1732279614236,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732279614237,"stop":1732279614237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732279614237,"stop":1732279614240,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732279614241,"stop":1732279614675,"duration":434},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732279614676,"stop":1732279615496,"duration":820},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1732279615497,"stop":1732279615872,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1732279615873,"stop":1732279616252,"duration":379},"status":"failed","statusMessage":"AssertionError: assert None != None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py\", line 81, in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 929, in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 921, in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/outcome/_impl.py\", line 213, in unwrap\n    raise captured_error\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 891, in _run_tests_and_fixtures\n    retval = await coro\n             ^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/modules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py\", line 54, in artifact\n    assert artifact != None\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert None != None","statusTrace":"item = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproject = <golioth.golioth.Project object at 0xffffa9792110>\nblueprint_id = None\n\n    @pytest.fixture(scope=\"module\")\n    async def artifact(project, blueprint_id):\n        # Find Artifact that matches this device and desired update version\n    \n        artifact = None\n        all_artifacts = await project.artifacts.get_all()\n        for a in all_artifacts:\n            if (a.blueprint == blueprint_id and\n                a.version == UPDATE_VERSION and\n                a.package == UPDATE_PACKAGE):\n                artifact = a\n    \n>       assert artifact != None\nE       assert None != None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py:54: AssertionError","steps":[],"attachments":[{"uid":"b67dc707d6536fb8","name":"log","source":"b67dc707d6536fb8.txt","type":"text/plain","size":13294}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"blueprint_id::0","time":{"start":1732279616695,"stop":1732279616695,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732279616697,"stop":1732279617101,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732279617103,"stop":1732279617103,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732279617105,"stop":1732279617105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1732279617112,"stop":1732279617114,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"c03ca17c32a5"},{"name":"thread","value":"405-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":62,"unknown":0,"total":71},"items":[{"uid":"fa6bdedb3ffb36e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/fa6bdedb3ffb36e3","status":"passed","time":{"start":1732274262516,"stop":1732274385554,"duration":123038}},{"uid":"4e2380cda20cf653","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/4e2380cda20cf653","status":"passed","time":{"start":1732273251001,"stop":1732273372104,"duration":121103}},{"uid":"634dd452c643a613","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/634dd452c643a613","status":"passed","time":{"start":1732231491953,"stop":1732231615469,"duration":123516}},{"uid":"c174618956625858","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/c174618956625858","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732228836071,"stop":1732228941425,"duration":105354}},{"uid":"43c8a71f6d05d894","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/43c8a71f6d05d894","status":"passed","time":{"start":1732226812543,"stop":1732226940340,"duration":127797}},{"uid":"43797cf02d82b73b","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/43797cf02d82b73b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732224414533,"stop":1732224525223,"duration":110690}},{"uid":"9538a59d409e78b","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/9538a59d409e78b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732220792795,"stop":1732220792795,"duration":0}},{"uid":"7d68874693d92779","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/7d68874693d92779","status":"passed","time":{"start":1732215569709,"stop":1732215696348,"duration":126639}},{"uid":"c07de1ffd5dfdd1","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/c07de1ffd5dfdd1","status":"passed","time":{"start":1732210796280,"stop":1732210917777,"duration":121497}},{"uid":"9190a80f3c78e1b","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/9190a80f3c78e1b","status":"passed","time":{"start":1732209146068,"stop":1732209288655,"duration":142587}},{"uid":"34bf01e60c98af9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/34bf01e60c98af9b","status":"passed","time":{"start":1732208131771,"stop":1732208259185,"duration":127414}},{"uid":"cf29ada7ebc18c6f","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/cf29ada7ebc18c6f","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}},{"uid":"4845f6a7a8a71c00","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/4845f6a7a8a71c00","status":"passed","time":{"start":1732199877035,"stop":1732200011542,"duration":134507}},{"uid":"3c87904d8911be76","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/3c87904d8911be76","status":"passed","time":{"start":1732187003561,"stop":1732187127722,"duration":124161}},{"uid":"da3aade94ffdf313","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/da3aade94ffdf313","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}},{"uid":"a08f1f62f940b8ce","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/a08f1f62f940b8ce","status":"passed","time":{"start":1732194751387,"stop":1732194877330,"duration":125943}},{"uid":"cff7b6b84d78ed1a","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/cff7b6b84d78ed1a","status":"passed","time":{"start":1732187003561,"stop":1732187127722,"duration":124161}},{"uid":"9f9a38095438563b","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/9f9a38095438563b","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}},{"uid":"672fc93be9ecac1c","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/672fc93be9ecac1c","status":"passed","time":{"start":1732187003561,"stop":1732187127722,"duration":124161}},{"uid":"22af638b0e456bb8","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/22af638b0e456bb8","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c570bf9fc077d714.json","parameterValues":["'nrf52840dk'","'zephyr'"]}