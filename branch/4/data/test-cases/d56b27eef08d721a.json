{
  "uid" : "d56b27eef08d721a",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "6d2bac95f9ef4efcbb7b3998d017c3fa",
  "time" : {
    "start" : 1736349643336,
    "stop" : 1736349658408,
    "duration" : 15072
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0x7f62365a06d0>\ndevice = <golioth.golioth.Device object at 0x7f623658d450>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*Failed to get counter \\\\(async\\\\): 0', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device",
    "time" : {
      "start" : 1736349642450,
      "stop" : 1736349643217,
      "duration" : 767
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736349642039,
      "stop" : 1736349642039,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736349643223,
      "stop" : 1736349643235,
      "duration" : 12
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736349643236,
      "stop" : 1736349643335,
      "duration" : 99
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736349642045,
      "stop" : 1736349642046,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736349642047,
      "stop" : 1736349642450,
      "duration" : 403
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736349642046,
      "stop" : 1736349642046,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736349642039,
      "stop" : 1736349642039,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736349642039,
      "stop" : 1736349642039,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736349642046,
      "stop" : 1736349642046,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736349642039,
      "stop" : 1736349642039,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736349642039,
      "stop" : 1736349642039,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0x7f62365a06d0>\ndevice = <golioth.golioth.Device object at 0x7f623658d450>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*Failed to get counter \\\\(async\\\\): 0', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dcaa4ab3e5a009a0",
      "name" : "log",
      "source" : "dcaa4ab3e5a009a0.txt",
      "type" : "text/plain",
      "size" : 15246
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1736349658978,
      "stop" : 1736349659131,
      "duration" : 153
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736349658476,
      "stop" : 1736349658977,
      "duration" : 501
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736349659133,
      "stop" : 1736349659133,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736349659131,
      "stop" : 1736349659132,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "native_sim_64"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.native_sim_64"
  }, {
    "name" : "tag",
    "value" : "GitHub Actions 21"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "16eab0b019e6"
  }, {
    "name" : "thread",
    "value" : "66283-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'native_sim_64'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 27,
        "unknown" : 0,
        "total" : 29
      },
      "items" : [ {
        "uid" : "9bec0b9c14d31e38",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/29/#testresult/9bec0b9c14d31e38",
        "status" : "passed",
        "time" : {
          "start" : 1736350789734,
          "stop" : 1736350815014,
          "duration" : 25280
        }
      }, {
        "uid" : "8bb0e131992ad8ff",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/27/#testresult/8bb0e131992ad8ff",
        "status" : "passed",
        "time" : {
          "start" : 1736278827479,
          "stop" : 1736278852685,
          "duration" : 25206
        }
      }, {
        "uid" : "d965e003f15158bd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/26/#testresult/d965e003f15158bd",
        "status" : "passed",
        "time" : {
          "start" : 1736278694216,
          "stop" : 1736278719628,
          "duration" : 25412
        }
      }, {
        "uid" : "7a4cb68fe85e88f8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/25//#testresult/7a4cb68fe85e88f8",
        "status" : "passed",
        "time" : {
          "start" : 1736269158899,
          "stop" : 1736269184195,
          "duration" : 25296
        }
      }, {
        "uid" : "b28faee784efcb1e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/24/#testresult/b28faee784efcb1e",
        "status" : "passed",
        "time" : {
          "start" : 1736264548774,
          "stop" : 1736264574151,
          "duration" : 25377
        }
      }, {
        "uid" : "e2616085fc871c7f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1/#testresult/e2616085fc871c7f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
        "time" : {
          "start" : 1736221513762,
          "stop" : 1736221523429,
          "duration" : 9667
        }
      }, {
        "uid" : "2c63451a771e7cec",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/2c63451a771e7cec",
        "status" : "passed",
        "time" : {
          "start" : 1736204775743,
          "stop" : 1736204800963,
          "duration" : 25220
        }
      }, {
        "uid" : "8b7fa094e5ee4099",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/8b7fa094e5ee4099",
        "status" : "passed",
        "time" : {
          "start" : 1736204775743,
          "stop" : 1736204800963,
          "duration" : 25220
        }
      }, {
        "uid" : "1642ccc0d430afc1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/1642ccc0d430afc1",
        "status" : "passed",
        "time" : {
          "start" : 1735944087805,
          "stop" : 1735944113048,
          "duration" : 25243
        }
      }, {
        "uid" : "fccb97d4efc27b41",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/fccb97d4efc27b41",
        "status" : "passed",
        "time" : {
          "start" : 1735922022121,
          "stop" : 1735922047385,
          "duration" : 25264
        }
      }, {
        "uid" : "6f4ca30c26425597",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/6f4ca30c26425597",
        "status" : "passed",
        "time" : {
          "start" : 1735928705057,
          "stop" : 1735928730446,
          "duration" : 25389
        }
      }, {
        "uid" : "fbc969ad028d5345",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/fbc969ad028d5345",
        "status" : "passed",
        "time" : {
          "start" : 1735922022121,
          "stop" : 1735922047385,
          "duration" : 25264
        }
      }, {
        "uid" : "61c0f85d96c4309d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/61c0f85d96c4309d",
        "status" : "passed",
        "time" : {
          "start" : 1735919957956,
          "stop" : 1735919983261,
          "duration" : 25305
        }
      }, {
        "uid" : "a774aae73618598c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/a774aae73618598c",
        "status" : "passed",
        "time" : {
          "start" : 1735854041934,
          "stop" : 1735854067151,
          "duration" : 25217
        }
      }, {
        "uid" : "45fafba576c75731",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/45fafba576c75731",
        "status" : "passed",
        "time" : {
          "start" : 1735853901550,
          "stop" : 1735853926943,
          "duration" : 25393
        }
      }, {
        "uid" : "827305c3575b09b1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/827305c3575b09b1",
        "status" : "passed",
        "time" : {
          "start" : 1735847895692,
          "stop" : 1735847920820,
          "duration" : 25128
        }
      }, {
        "uid" : "9222120e21cb6016",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/9222120e21cb6016",
        "status" : "passed",
        "time" : {
          "start" : 1735841063755,
          "stop" : 1735841088982,
          "duration" : 25227
        }
      }, {
        "uid" : "7b971d62e7d8ef97",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/7b971d62e7d8ef97",
        "status" : "passed",
        "time" : {
          "start" : 1735840923686,
          "stop" : 1735840948970,
          "duration" : 25284
        }
      }, {
        "uid" : "7f495e14b16fc370",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/7f495e14b16fc370",
        "status" : "passed",
        "time" : {
          "start" : 1735831960659,
          "stop" : 1735831986127,
          "duration" : 25468
        }
      }, {
        "uid" : "97159418fdacb872",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/97159418fdacb872",
        "status" : "passed",
        "time" : {
          "start" : 1735830427875,
          "stop" : 1735830453193,
          "duration" : 25318
        }
      } ]
    },
    "tags" : [ "native_sim_64", "GitHub Actions 21", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "d56b27eef08d721a.json",
  "parameterValues" : [ "'native_sim_64'", "'zephyr'" ]
}