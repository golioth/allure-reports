{"uid":"992885e2fdfe09e0","name":"test_set_int_range_out_max","fullName":"tests.hil.tests.settings.test_settings#test_set_int_range_out_max","historyId":"91ac386f26c488866e25e8ea181a51f9","time":{"start":1729446723340,"stop":1729446735611,"duration":12271},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf4d9150>\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1729446607479,"stop":1729446607480,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1729446607480,"stop":1729446607480,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1729446607481,"stop":1729446607481,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1729446607482,"stop":1729446607482,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729446607483,"stop":1729446607483,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729446607483,"stop":1729446607484,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1729446607484,"stop":1729446607484,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1729446607485,"stop":1729446607485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1729446607486,"stop":1729446607486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729446607486,"stop":1729446607487,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729446607487,"stop":1729446607488,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729446607487,"stop":1729446607487,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729446607488,"stop":1729446607885,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1729446607885,"stop":1729446659447,"duration":51562},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729446659449,"stop":1729446660361,"duration":912},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1729446660362,"stop":1729446673059,"duration":12697},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf4d9150>\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>\n\n    async def test_set_int_range_out_max(board, device):\n        await device.settings.set('TEST_INT_RANGE', 101)\n    \n        with pytest.raises(trio.TooSlowError):\n            assert None != await board.wait_for_regex_in_line('Received test_int_range: 101', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT_RANGE', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>\nkey = 'TEST_INT_RANGE', error = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"9e9e584d9e6beed2","name":"stdout","source":"9e9e584d9e6beed2.txt","type":"text/plain","size":1354}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1729446810356,"stop":1729446810356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729446810359,"stop":1729446810793,"duration":434},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1729446810795,"stop":1729446810797,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729446810799,"stop":1729446810801,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"005c08075718"},{"name":"thread","value":"259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"14fe3b6ee9925529","status":"passed","time":{"start":1729444901456,"stop":1729444913635,"duration":12179}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":14},"items":[{"uid":"c261a79ec2d0bfc4","reportUrl":"https://golioth.github.io/allure-reports/branch/4//#testresult/c261a79ec2d0bfc4","status":"passed","time":{"start":1729444901456,"stop":1729444913635,"duration":12179}},{"uid":"e2b25f59284f2083","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/e2b25f59284f2083","status":"passed","time":{"start":1729378057759,"stop":1729378070115,"duration":12356}},{"uid":"70c3dcb1071a9cf5","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/70c3dcb1071a9cf5","status":"passed","time":{"start":1729378057759,"stop":1729378070115,"duration":12356}},{"uid":"729e4c4414ab6fad","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/729e4c4414ab6fad","status":"passed","time":{"start":1729196912202,"stop":1729196924484,"duration":12282}},{"uid":"42be9600cdb7fc0f","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/42be9600cdb7fc0f","status":"passed","time":{"start":1729114679265,"stop":1729114691783,"duration":12518}},{"uid":"9304231a1f8a62e1","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/9304231a1f8a62e1","status":"passed","time":{"start":1729112021784,"stop":1729112034324,"duration":12540}},{"uid":"1536de0314c72ef4","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/1536de0314c72ef4","status":"passed","time":{"start":1729106861477,"stop":1729106873839,"duration":12362}},{"uid":"ca1c9dd996cde1cb","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/ca1c9dd996cde1cb","status":"passed","time":{"start":1729033136429,"stop":1729033150448,"duration":14019}},{"uid":"7af669e2cec59e17","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/7af669e2cec59e17","status":"passed","time":{"start":1729029814261,"stop":1729029827765,"duration":13504}},{"uid":"778012f788c51350","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/778012f788c51350","status":"passed","time":{"start":1729019651265,"stop":1729019664873,"duration":13608}},{"uid":"f573df935bd01247","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/f573df935bd01247","status":"passed","time":{"start":1729022373007,"stop":1729022386716,"duration":13709}},{"uid":"d37e792819b7591c","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/d37e792819b7591c","status":"passed","time":{"start":1729019651265,"stop":1729019664873,"duration":13608}},{"uid":"ffdbe80f6df21926","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/ffdbe80f6df21926","status":"passed","time":{"start":1729004808691,"stop":1729004822913,"duration":14222}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"992885e2fdfe09e0.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}