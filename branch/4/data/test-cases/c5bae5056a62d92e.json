{
  "uid" : "c5bae5056a62d92e",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "1ec1936b7990a0542c6cd1098cc4bb62",
  "time" : {
    "start" : 1736356476316,
    "stop" : 1736356496077,
    "duration" : 19761
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffad96d110>\ndevice = <golioth.golioth.Device object at 0xffffad7f73d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*lightdb_observe: Counter \\\\(async\\\\)'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_object",
    "time" : {
      "start" : 1736356447366,
      "stop" : 1736356447368,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736356448878,
      "stop" : 1736356475208,
      "duration" : 26330
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736356447369,
      "stop" : 1736356447370,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736356447859,
      "stop" : 1736356448877,
      "duration" : 1018
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736356447365,
      "stop" : 1736356447365,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736356447365,
      "stop" : 1736356447366,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736356447364,
      "stop" : 1736356447364,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736356447364,
      "stop" : 1736356447364,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736356447370,
      "stop" : 1736356447858,
      "duration" : 488
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736356447363,
      "stop" : 1736356447363,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736356447369,
      "stop" : 1736356447369,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736356475209,
      "stop" : 1736356476313,
      "duration" : 1104
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffad96d110>\ndevice = <golioth.golioth.Device object at 0xffffad7f73d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb observe\n    \n        shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=10.0)\n        shell._device.readlines_until(regex=\".*6e 75 6c 6c\\s+\\|null\", timeout=1.0)\n    \n        await device.lightdb.set(\"counter\", 87)\n    \n>       shell._device.readlines_until(regex=\".*lightdb_observe: Counter \\(async\\)\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*lightdb_observe: Counter \\\\(async\\\\)'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4c1d01655ebe179b",
      "name" : "log",
      "source" : "4c1d01655ebe179b.txt",
      "type" : "text/plain",
      "size" : 20112
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736356496771,
      "stop" : 1736356496771,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736356496367,
      "stop" : 1736356496375,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736356496377,
      "stop" : 1736356496762,
      "duration" : 385
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736356496764,
      "stop" : 1736356496766,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "d658790ee999"
  }, {
    "name" : "thread",
    "value" : "758-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 26,
        "unknown" : 0,
        "total" : 28
      },
      "items" : [ {
        "uid" : "b3de4186973469cb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/29/#testresult/b3de4186973469cb",
        "status" : "passed",
        "time" : {
          "start" : 1736362248225,
          "stop" : 1736362286915,
          "duration" : 38690
        }
      }, {
        "uid" : "a1f332bf37223636",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/27/#testresult/a1f332bf37223636",
        "status" : "passed",
        "time" : {
          "start" : 1736286979872,
          "stop" : 1736287002741,
          "duration" : 22869
        }
      }, {
        "uid" : "7711fe3fe2b8fc4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/26/#testresult/7711fe3fe2b8fc4",
        "status" : "passed",
        "time" : {
          "start" : 1736286094932,
          "stop" : 1736286105446,
          "duration" : 10514
        }
      }, {
        "uid" : "bbff8d9960709efb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/25//#testresult/bbff8d9960709efb",
        "status" : "passed",
        "time" : {
          "start" : 1736277285635,
          "stop" : 1736277296686,
          "duration" : 11051
        }
      }, {
        "uid" : "d7a753a1ef54be8a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/24/#testresult/d7a753a1ef54be8a",
        "status" : "passed",
        "time" : {
          "start" : 1736272709891,
          "stop" : 1736272743625,
          "duration" : 33734
        }
      }, {
        "uid" : "f32121202bfe2b38",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1/#testresult/f32121202bfe2b38",
        "status" : "passed",
        "time" : {
          "start" : 1736225666214,
          "stop" : 1736225676753,
          "duration" : 10539
        }
      }, {
        "uid" : "e3c5afc8273b9487",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/e3c5afc8273b9487",
        "status" : "passed",
        "time" : {
          "start" : 1736209104315,
          "stop" : 1736209115167,
          "duration" : 10852
        }
      }, {
        "uid" : "9628576433c6169d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/9628576433c6169d",
        "status" : "passed",
        "time" : {
          "start" : 1736209104315,
          "stop" : 1736209115167,
          "duration" : 10852
        }
      }, {
        "uid" : "134ce1e768ce1f12",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/134ce1e768ce1f12",
        "status" : "passed",
        "time" : {
          "start" : 1735950061244,
          "stop" : 1735950087475,
          "duration" : 26231
        }
      }, {
        "uid" : "92667551b8aed7c9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/92667551b8aed7c9",
        "status" : "passed",
        "time" : {
          "start" : 1735928154426,
          "stop" : 1735928235648,
          "duration" : 81222
        }
      }, {
        "uid" : "7508004448a10b7c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/7508004448a10b7c",
        "status" : "passed",
        "time" : {
          "start" : 1735932653784,
          "stop" : 1735932664940,
          "duration" : 11156
        }
      }, {
        "uid" : "4ee0257ad986f3d8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/4ee0257ad986f3d8",
        "status" : "passed",
        "time" : {
          "start" : 1735928154426,
          "stop" : 1735928235648,
          "duration" : 81222
        }
      }, {
        "uid" : "9ca72b065b31fa56",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/9ca72b065b31fa56",
        "status" : "passed",
        "time" : {
          "start" : 1735924126758,
          "stop" : 1735924157569,
          "duration" : 30811
        }
      }, {
        "uid" : "56dcb7d700553741",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/56dcb7d700553741",
        "status" : "passed",
        "time" : {
          "start" : 1735864884897,
          "stop" : 1735864896201,
          "duration" : 11304
        }
      }, {
        "uid" : "cdfa0f3814addb2c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/cdfa0f3814addb2c",
        "status" : "passed",
        "time" : {
          "start" : 1735863679853,
          "stop" : 1735863701129,
          "duration" : 21276
        }
      }, {
        "uid" : "17239860e259993f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/17239860e259993f",
        "status" : "passed",
        "time" : {
          "start" : 1735853314061,
          "stop" : 1735853325080,
          "duration" : 11019
        }
      }, {
        "uid" : "a2fc192e424a4a78",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/a2fc192e424a4a78",
        "status" : "passed",
        "time" : {
          "start" : 1735849461267,
          "stop" : 1735849503724,
          "duration" : 42457
        }
      }, {
        "uid" : "e17adb87b6efa9d5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/e17adb87b6efa9d5",
        "status" : "passed",
        "time" : {
          "start" : 1735848383199,
          "stop" : 1735848395071,
          "duration" : 11872
        }
      }, {
        "uid" : "2e41c47626310146",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/2e41c47626310146",
        "status" : "passed",
        "time" : {
          "start" : 1735838022710,
          "stop" : 1735838035321,
          "duration" : 12611
        }
      }, {
        "uid" : "4a4cbfca3fa46fa8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/4a4cbfca3fa46fa8",
        "status" : "passed",
        "time" : {
          "start" : 1735834085072,
          "stop" : 1735834096776,
          "duration" : 11704
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "c5bae5056a62d92e.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}