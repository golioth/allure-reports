{
  "uid" : "30c11fa2ac91738b",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "1248e936e6823218f43c51a0258045c3",
  "time" : {
    "start" : 1736349641508,
    "stop" : 1736349656579,
    "duration" : 15071
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0x7f130b2a4a10>\ndevice = <golioth.golioth.Device object at 0x7f130b295890>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*Failed to get counter \\\\(async\\\\): 0', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_name",
    "time" : {
      "start" : 1736349640164,
      "stop" : 1736349640167,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736349640700,
      "stop" : 1736349641387,
      "duration" : 687
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736349640163,
      "stop" : 1736349640163,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736349640168,
      "stop" : 1736349640168,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736349640168,
      "stop" : 1736349640699,
      "duration" : 531
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736349640167,
      "stop" : 1736349640168,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736349641404,
      "stop" : 1736349641507,
      "duration" : 103
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736349640168,
      "stop" : 1736349640168,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736349641387,
      "stop" : 1736349641404,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736349640163,
      "stop" : 1736349640164,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736349640167,
      "stop" : 1736349640167,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736349640163,
      "stop" : 1736349640163,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0x7f130b2a4a10>\ndevice = <golioth.golioth.Device object at 0x7f130b295890>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n>       shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter()\nregex = '.*Failed to get counter \\\\(async\\\\): 0', num_of_lines = None\ntimeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "100ef461048c0ade",
      "name" : "log",
      "source" : "100ef461048c0ade.txt",
      "type" : "text/plain",
      "size" : 15244
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1736349657250,
      "stop" : 1736349657478,
      "duration" : 228
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736349657479,
      "stop" : 1736349657479,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736349657480,
      "stop" : 1736349657480,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1736349656741,
      "stop" : 1736349657250,
      "duration" : 509
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "native_sim_32"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.native_sim_32"
  }, {
    "name" : "tag",
    "value" : "GitHub Actions 10"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "16570a8271e7"
  }, {
    "name" : "thread",
    "value" : "64880-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'native_sim_32'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 27,
        "unknown" : 0,
        "total" : 29
      },
      "items" : [ {
        "uid" : "11c01c6878739115",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/29/#testresult/11c01c6878739115",
        "status" : "passed",
        "time" : {
          "start" : 1736350800701,
          "stop" : 1736350826084,
          "duration" : 25383
        }
      }, {
        "uid" : "2f5c4c97e1f3704b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/27/#testresult/2f5c4c97e1f3704b",
        "status" : "passed",
        "time" : {
          "start" : 1736278828076,
          "stop" : 1736278853324,
          "duration" : 25248
        }
      }, {
        "uid" : "b5763073349b11b3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/26/#testresult/b5763073349b11b3",
        "status" : "passed",
        "time" : {
          "start" : 1736278693904,
          "stop" : 1736278719310,
          "duration" : 25406
        }
      }, {
        "uid" : "74fd2424e8841d54",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/25//#testresult/74fd2424e8841d54",
        "status" : "passed",
        "time" : {
          "start" : 1736269142572,
          "stop" : 1736269167809,
          "duration" : 25237
        }
      }, {
        "uid" : "c6dac78d724b1509",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/24/#testresult/c6dac78d724b1509",
        "status" : "passed",
        "time" : {
          "start" : 1736264545585,
          "stop" : 1736264570733,
          "duration" : 25148
        }
      }, {
        "uid" : "1766fdf8423e52d1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1/#testresult/1766fdf8423e52d1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
        "time" : {
          "start" : 1736221498438,
          "stop" : 1736221507975,
          "duration" : 9537
        }
      }, {
        "uid" : "da41e6e482b09f9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/da41e6e482b09f9",
        "status" : "passed",
        "time" : {
          "start" : 1736204776894,
          "stop" : 1736204802079,
          "duration" : 25185
        }
      }, {
        "uid" : "b296b38f3bfa1837",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/b296b38f3bfa1837",
        "status" : "passed",
        "time" : {
          "start" : 1736204776894,
          "stop" : 1736204802079,
          "duration" : 25185
        }
      }, {
        "uid" : "fb7dcc2653171135",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/fb7dcc2653171135",
        "status" : "passed",
        "time" : {
          "start" : 1735944103869,
          "stop" : 1735944129125,
          "duration" : 25256
        }
      }, {
        "uid" : "8d1db8f50b3141ff",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/8d1db8f50b3141ff",
        "status" : "passed",
        "time" : {
          "start" : 1735922031348,
          "stop" : 1735922056721,
          "duration" : 25373
        }
      }, {
        "uid" : "d107369f03683b04",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/d107369f03683b04",
        "status" : "passed",
        "time" : {
          "start" : 1735928700994,
          "stop" : 1735928726296,
          "duration" : 25302
        }
      }, {
        "uid" : "795dae5b854605e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/795dae5b854605e",
        "status" : "passed",
        "time" : {
          "start" : 1735922031348,
          "stop" : 1735922056721,
          "duration" : 25373
        }
      }, {
        "uid" : "9588c932c5d994d1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/9588c932c5d994d1",
        "status" : "passed",
        "time" : {
          "start" : 1735919960429,
          "stop" : 1735919985717,
          "duration" : 25288
        }
      }, {
        "uid" : "5687877b58578f5d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/5687877b58578f5d",
        "status" : "passed",
        "time" : {
          "start" : 1735854062962,
          "stop" : 1735854088405,
          "duration" : 25443
        }
      }, {
        "uid" : "61f1f535a39c54fc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/61f1f535a39c54fc",
        "status" : "passed",
        "time" : {
          "start" : 1735853893727,
          "stop" : 1735853919116,
          "duration" : 25389
        }
      }, {
        "uid" : "ea7a604c7fe2900a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/ea7a604c7fe2900a",
        "status" : "passed",
        "time" : {
          "start" : 1735847898208,
          "stop" : 1735847923419,
          "duration" : 25211
        }
      }, {
        "uid" : "6e82b3cf4a1ac933",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/6e82b3cf4a1ac933",
        "status" : "passed",
        "time" : {
          "start" : 1735841065521,
          "stop" : 1735841090742,
          "duration" : 25221
        }
      }, {
        "uid" : "5777a82c1016c109",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/5777a82c1016c109",
        "status" : "passed",
        "time" : {
          "start" : 1735840927352,
          "stop" : 1735840952580,
          "duration" : 25228
        }
      }, {
        "uid" : "f85e49212c3753cb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/f85e49212c3753cb",
        "status" : "passed",
        "time" : {
          "start" : 1735831948106,
          "stop" : 1735831973443,
          "duration" : 25337
        }
      }, {
        "uid" : "4d49cd2585cb952f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/4d49cd2585cb952f",
        "status" : "passed",
        "time" : {
          "start" : 1735830431927,
          "stop" : 1735830457210,
          "duration" : 25283
        }
      } ]
    },
    "tags" : [ "GitHub Actions 10", "anyio", "native_sim_32", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "30c11fa2ac91738b.json",
  "parameterValues" : [ "'native_sim_32'", "'zephyr'" ]
}