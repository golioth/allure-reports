{"uid":"91b550c80f98291f","name":"test_int_too_small","fullName":"tests.hil.tests.settings.test_settings#test_int_too_small","historyId":"9a158ab876eb6bcacb2a056562120108","time":{"start":1729446688355,"stop":1729446700507,"duration":12152},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf4d9150>\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1729446607479,"stop":1729446607480,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1729446607480,"stop":1729446607480,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1729446607481,"stop":1729446607481,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1729446607482,"stop":1729446607482,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729446607483,"stop":1729446607483,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729446607483,"stop":1729446607484,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1729446607484,"stop":1729446607484,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1729446607485,"stop":1729446607485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1729446607486,"stop":1729446607486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729446607486,"stop":1729446607487,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729446607487,"stop":1729446607488,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729446607487,"stop":1729446607487,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729446607488,"stop":1729446607885,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1729446607885,"stop":1729446659447,"duration":51562},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729446659449,"stop":1729446660361,"duration":912},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1729446660362,"stop":1729446673059,"duration":12697},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffaf4d9150>\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>\n\n    async def test_int_too_small(board, device):\n        await device.settings.set('TEST_INT', -1*(2**33))\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: -8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffaf491f10>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"706753b8c3812399","name":"stdout","source":"706753b8c3812399.txt","type":"text/plain","size":457}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1729446810356,"stop":1729446810356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729446810359,"stop":1729446810793,"duration":434},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1729446810795,"stop":1729446810797,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729446810799,"stop":1729446810801,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"005c08075718"},{"name":"thread","value":"259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"acd46e3d3600395a","status":"passed","time":{"start":1729444868238,"stop":1729444880510,"duration":12272}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":13,"unknown":0,"total":14},"items":[{"uid":"ac403cf0e2eb5843","reportUrl":"https://golioth.github.io/allure-reports/branch/4//#testresult/ac403cf0e2eb5843","status":"passed","time":{"start":1729444868238,"stop":1729444880510,"duration":12272}},{"uid":"6273746a1745da23","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/6273746a1745da23","status":"passed","time":{"start":1729378022415,"stop":1729378034938,"duration":12523}},{"uid":"edb72e34f65aa1e9","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/edb72e34f65aa1e9","status":"passed","time":{"start":1729378022415,"stop":1729378034938,"duration":12523}},{"uid":"84d53cc35fe67b58","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/84d53cc35fe67b58","status":"passed","time":{"start":1729196877840,"stop":1729196890068,"duration":12228}},{"uid":"aff6f8d4b1fd0c11","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/aff6f8d4b1fd0c11","status":"passed","time":{"start":1729114643626,"stop":1729114656150,"duration":12524}},{"uid":"bd70bbbe73adf226","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/bd70bbbe73adf226","status":"passed","time":{"start":1729111986836,"stop":1729111999387,"duration":12551}},{"uid":"d075435a60ace590","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/d075435a60ace590","status":"passed","time":{"start":1729106820107,"stop":1729106832498,"duration":12391}},{"uid":"a25e794f71e53fa3","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/a25e794f71e53fa3","status":"passed","time":{"start":1729033083487,"stop":1729033099152,"duration":15665}},{"uid":"a6d30a9e8ec1f8ca","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/a6d30a9e8ec1f8ca","status":"passed","time":{"start":1729029769100,"stop":1729029782810,"duration":13710}},{"uid":"ec52a8936e1247bb","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/ec52a8936e1247bb","status":"passed","time":{"start":1729019608767,"stop":1729019622889,"duration":14122}},{"uid":"f015417fb755ceb9","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/f015417fb755ceb9","status":"passed","time":{"start":1729022326105,"stop":1729022340020,"duration":13915}},{"uid":"e77bc9b5b6301d6","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/e77bc9b5b6301d6","status":"passed","time":{"start":1729019608767,"stop":1729019622889,"duration":14122}},{"uid":"e935a7afc4f0f334","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/e935a7afc4f0f334","status":"passed","time":{"start":1729004763019,"stop":1729004777447,"duration":14428}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"91b550c80f98291f.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}