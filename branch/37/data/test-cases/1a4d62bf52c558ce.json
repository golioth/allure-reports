{
  "uid" : "1a4d62bf52c558ce",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "a3454c74416fe64989185d5a90a344cf",
  "time" : {
    "start" : 1733807022307,
    "stop" : 1733807115146,
    "duration" : 92839
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9d90ee90>\ndevice = <golioth.golioth.Device object at 0xffff9d929ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733806993328,
      "stop" : 1733806993328,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733806993329,
      "stop" : 1733806993329,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733806993333,
      "stop" : 1733806993333,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733806993334,
      "stop" : 1733806993757,
      "duration" : 423
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733806993758,
      "stop" : 1733806994666,
      "duration" : 908
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733806994667,
      "stop" : 1733807021249,
      "duration" : 26582
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733806993330,
      "stop" : 1733806993332,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733807021250,
      "stop" : 1733807022302,
      "duration" : 1052
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733806993333,
      "stop" : 1733806993333,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733806993328,
      "stop" : 1733806993328,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733806993329,
      "stop" : 1733806993329,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733806993327,
      "stop" : 1733806993327,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff9d90ee90>\ndevice = <golioth.golioth.Device object at 0xffff9d929ed0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "916ab0153619714d",
      "name" : "log",
      "source" : "916ab0153619714d.txt",
      "type" : "text/plain",
      "size" : 15858
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1733807115883,
      "stop" : 1733807115885,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733807115478,
      "stop" : 1733807115881,
      "duration" : 403
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733807115435,
      "stop" : 1733807115476,
      "duration" : 41
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733807115890,
      "stop" : 1733807115890,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "92c0c6e811d9"
  }, {
    "name" : "thread",
    "value" : "599-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 8,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 43,
        "unknown" : 0,
        "total" : 60
      },
      "items" : [ {
        "uid" : "1ef424ae6a090176",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1881/#testresult/1ef424ae6a090176",
        "status" : "failed",
        "statusDetails" : "Failed: Prompt not found",
        "time" : {
          "start" : 1733790589928,
          "stop" : 1733790589928,
          "duration" : 0
        }
      }, {
        "uid" : "5df09b018f476e2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1880/#testresult/5df09b018f476e2",
        "status" : "passed",
        "time" : {
          "start" : 1733780923595,
          "stop" : 1733780942841,
          "duration" : 19246
        }
      }, {
        "uid" : "b49292d741a7cf51",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1880/#testresult/b49292d741a7cf51",
        "status" : "passed",
        "time" : {
          "start" : 1733780923595,
          "stop" : 1733780942841,
          "duration" : 19246
        }
      }, {
        "uid" : "fa1aa7a70f2e8990",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1878/#testresult/fa1aa7a70f2e8990",
        "status" : "passed",
        "time" : {
          "start" : 1733767651583,
          "stop" : 1733767684414,
          "duration" : 32831
        }
      }, {
        "uid" : "852915eaa219f73",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/35/#testresult/852915eaa219f73",
        "status" : "passed",
        "time" : {
          "start" : 1733557026404,
          "stop" : 1733557057803,
          "duration" : 31399
        }
      }, {
        "uid" : "ece0501fef67c640",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1873/#testresult/ece0501fef67c640",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733524475041,
          "stop" : 1733524567792,
          "duration" : 92751
        }
      }, {
        "uid" : "ab2fa2ac9a0e99c0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1870/#testresult/ab2fa2ac9a0e99c0",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733443098625,
          "stop" : 1733443191666,
          "duration" : 93041
        }
      }, {
        "uid" : "b1dd284370a3852e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/b1dd284370a3852e",
        "status" : "passed",
        "time" : {
          "start" : 1733416140479,
          "stop" : 1733416183111,
          "duration" : 42632
        }
      }, {
        "uid" : "2eb7381831aeb9a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/2eb7381831aeb9a",
        "status" : "passed",
        "time" : {
          "start" : 1733353881971,
          "stop" : 1733353901875,
          "duration" : 19904
        }
      }, {
        "uid" : "1b5c6d40fd82640f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/1b5c6d40fd82640f",
        "status" : "passed",
        "time" : {
          "start" : 1733329766027,
          "stop" : 1733329789435,
          "duration" : 23408
        }
      }, {
        "uid" : "a2537fb0a3359190",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/a2537fb0a3359190",
        "status" : "passed",
        "time" : {
          "start" : 1733255620011,
          "stop" : 1733255639647,
          "duration" : 19636
        }
      }, {
        "uid" : "f8b91fdc6d14a174",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/f8b91fdc6d14a174",
        "status" : "passed",
        "time" : {
          "start" : 1733192421765,
          "stop" : 1733192440997,
          "duration" : 19232
        }
      }, {
        "uid" : "298219247fa2b2d1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/298219247fa2b2d1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732803325384,
          "stop" : 1732803418133,
          "duration" : 92749
        }
      }, {
        "uid" : "6ccb7aec7225b132",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/6ccb7aec7225b132",
        "status" : "passed",
        "time" : {
          "start" : 1732751107153,
          "stop" : 1732751126638,
          "duration" : 19485
        }
      }, {
        "uid" : "1e7392a7f4c644c2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/1e7392a7f4c644c2",
        "status" : "passed",
        "time" : {
          "start" : 1732730777930,
          "stop" : 1732730798390,
          "duration" : 20460
        }
      }, {
        "uid" : "7ac3e8c18e706db3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/7ac3e8c18e706db3",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732725094340,
          "stop" : 1732725187137,
          "duration" : 92797
        }
      }, {
        "uid" : "86c8045b5a592160",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/86c8045b5a592160",
        "status" : "passed",
        "time" : {
          "start" : 1732632803120,
          "stop" : 1732632823070,
          "duration" : 19950
        }
      }, {
        "uid" : "b4462f70d744c55c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/b4462f70d744c55c",
        "status" : "passed",
        "time" : {
          "start" : 1732632803120,
          "stop" : 1732632823070,
          "duration" : 19950
        }
      }, {
        "uid" : "2503d71d04d232e4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/2503d71d04d232e4",
        "status" : "passed",
        "time" : {
          "start" : 1732563936547,
          "stop" : 1732563956411,
          "duration" : 19864
        }
      }, {
        "uid" : "435a3a5db86667f8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/435a3a5db86667f8",
        "status" : "passed",
        "time" : {
          "start" : 1732561669915,
          "stop" : 1732561708705,
          "duration" : 38790
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "1a4d62bf52c558ce.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}