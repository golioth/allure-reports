{"uid":"c2bcdb5f3c7d8ba9","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1732000543162,"stop":1732000575837,"duration":32675},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99f239d0>\ndevice = <golioth.golioth.Device object at 0xffff99f3a810>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732000512809,"stop":1732000512809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732000512810,"stop":1732000512810,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732000512810,"stop":1732000512810,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732000512811,"stop":1732000512812,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732000512811,"stop":1732000512811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732000512812,"stop":1732000512814,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732000512815,"stop":1732000512815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732000512815,"stop":1732000512815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732000512816,"stop":1732000513829,"duration":1013},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732000513830,"stop":1732000516114,"duration":2284},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732000516114,"stop":1732000539987,"duration":23873},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732000539987,"stop":1732000543155,"duration":3168},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99f239d0>\ndevice = <golioth.golioth.Device object at 0xffff99f3a810>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n>           shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter successfully set'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"90c835805a4f56a7","name":"log","source":"90c835805a4f56a7.txt","type":"text/plain","size":26562}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732000576130,"stop":1732000576328,"duration":198},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732000576329,"stop":1732000576971,"duration":642},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732000576973,"stop":1732000576975,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732000576980,"stop":1732000576980,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"2efc56c01209"},{"name":"thread","value":"487-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":31,"unknown":0,"total":33},"items":[{"uid":"847afa42462d929c","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/847afa42462d929c","status":"passed","time":{"start":1731969885081,"stop":1731969912276,"duration":27195}},{"uid":"eb47984f0683d50b","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/eb47984f0683d50b","status":"passed","time":{"start":1731963638325,"stop":1731963669131,"duration":30806}},{"uid":"ba661ece88d453df","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/ba661ece88d453df","status":"passed","time":{"start":1731962188497,"stop":1731962212668,"duration":24171}},{"uid":"60117517b9e0a44","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/60117517b9e0a44","status":"passed","time":{"start":1731957825155,"stop":1731957848819,"duration":23664}},{"uid":"5d0e6901b995b911","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/5d0e6901b995b911","status":"passed","time":{"start":1731954941393,"stop":1731954965329,"duration":23936}},{"uid":"92595f7f1d07b708","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/92595f7f1d07b708","status":"passed","time":{"start":1731933453179,"stop":1731933477057,"duration":23878}},{"uid":"1597afad2ee1609b","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/1597afad2ee1609b","status":"passed","time":{"start":1731922732137,"stop":1731922763823,"duration":31686}},{"uid":"da15c23671a99bac","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/da15c23671a99bac","status":"passed","time":{"start":1731905482422,"stop":1731905506167,"duration":23745}},{"uid":"edd4f5befb1ee5a5","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/edd4f5befb1ee5a5","status":"passed","time":{"start":1731713608576,"stop":1731713632492,"duration":23916}},{"uid":"aa7c787d758e0087","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/aa7c787d758e0087","status":"passed","time":{"start":1731710269810,"stop":1731710293284,"duration":23474}},{"uid":"3cbbee01995d58af","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/3cbbee01995d58af","status":"passed","time":{"start":1731706027461,"stop":1731706050639,"duration":23178}},{"uid":"ba0153f1ae959b18","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/ba0153f1ae959b18","status":"passed","time":{"start":1731694467498,"stop":1731694490975,"duration":23477}},{"uid":"54899acc73b6faba","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/54899acc73b6faba","status":"passed","time":{"start":1731689391653,"stop":1731689415761,"duration":24108}},{"uid":"194de13d79e4e8ec","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/194de13d79e4e8ec","status":"passed","time":{"start":1731624827263,"stop":1731624850631,"duration":23368}},{"uid":"82b5263a09efa49c","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/82b5263a09efa49c","status":"passed","time":{"start":1731621487682,"stop":1731621511451,"duration":23769}},{"uid":"1d40a90e486f4c4a","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/1d40a90e486f4c4a","status":"passed","time":{"start":1731616048651,"stop":1731616072559,"duration":23908}},{"uid":"dd23dee02b80ed22","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/dd23dee02b80ed22","status":"passed","time":{"start":1731613502022,"stop":1731613525416,"duration":23394}},{"uid":"793e68ca85e75d34","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/793e68ca85e75d34","status":"passed","time":{"start":1731610583040,"stop":1731610607043,"duration":24003}},{"uid":"80de86527de4cb00","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/80de86527de4cb00","status":"passed","time":{"start":1731597016331,"stop":1731597040072,"duration":23741}},{"uid":"37257aa9c9b68d69","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/37257aa9c9b68d69","status":"passed","time":{"start":1731548040060,"stop":1731548077502,"duration":37442}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c2bcdb5f3c7d8ba9.json","parameterValues":["'nrf52840dk'","'zephyr'"]}