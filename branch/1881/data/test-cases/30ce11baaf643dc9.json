{
  "uid" : "30ce11baaf643dc9",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "c9ae6dc826a01d1d44d52fc2bf414310",
  "time" : {
    "start" : 1733847650782,
    "stop" : 1733847743890,
    "duration" : 93108
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff924f4250>\ndevice = <golioth.golioth.Device object at 0xffff924a6fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "shell",
    "time" : {
      "start" : 1733847650159,
      "stop" : 1733847650779,
      "duration" : 620
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1733847636390,
      "stop" : 1733847636390,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733847636396,
      "stop" : 1733847636838,
      "duration" : 442
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733847636391,
      "stop" : 1733847636391,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733847636389,
      "stop" : 1733847636389,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733847636392,
      "stop" : 1733847636394,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1733847636395,
      "stop" : 1733847636395,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733847636391,
      "stop" : 1733847636391,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733847636395,
      "stop" : 1733847636395,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733847636838,
      "stop" : 1733847637657,
      "duration" : 819
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733847637658,
      "stop" : 1733847650158,
      "duration" : 12500
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1733847636389,
      "stop" : 1733847636390,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff924f4250>\ndevice = <golioth.golioth.Device object at 0xffff924a6fd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9ce15519a3eef06c",
      "name" : "log",
      "source" : "9ce15519a3eef06c.txt",
      "type" : "text/plain",
      "size" : 24289
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1733847744947,
      "stop" : 1733847744949,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733847744954,
      "stop" : 1733847744954,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733847744498,
      "stop" : 1733847744945,
      "duration" : 447
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733847744163,
      "stop" : 1733847744496,
      "duration" : 333
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "14101c0e5153"
  }, {
    "name" : "thread",
    "value" : "475-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "e89d32a8fec43a26",
      "status" : "broken",
      "statusDetails" : "httpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://api.golioth.io/v1/projects'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503",
      "time" : {
        "start" : 1733789516283,
        "stop" : 1733789516283,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 24,
        "skipped" : 0,
        "passed" : 91,
        "unknown" : 0,
        "total" : 115
      },
      "items" : [ {
        "uid" : "d292c23b532345de",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1880/#testresult/d292c23b532345de",
        "status" : "passed",
        "time" : {
          "start" : 1733779636234,
          "stop" : 1733779675478,
          "duration" : 39244
        }
      }, {
        "uid" : "e0a0fcfec47c302b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/37/#testresult/e0a0fcfec47c302b",
        "status" : "passed",
        "time" : {
          "start" : 1733806350484,
          "stop" : 1733806390401,
          "duration" : 39917
        }
      }, {
        "uid" : "816f83aa5366b9c2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1881/#testresult/816f83aa5366b9c2",
        "status" : "broken",
        "statusDetails" : "httpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://api.golioth.io/v1/projects'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503",
        "time" : {
          "start" : 1733789516283,
          "stop" : 1733789516283,
          "duration" : 0
        }
      }, {
        "uid" : "8b7b4932f63c7dea",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1880/#testresult/8b7b4932f63c7dea",
        "status" : "passed",
        "time" : {
          "start" : 1733779636234,
          "stop" : 1733779675478,
          "duration" : 39244
        }
      }, {
        "uid" : "684cb84b52166a24",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1880/#testresult/684cb84b52166a24",
        "status" : "passed",
        "time" : {
          "start" : 1733779636234,
          "stop" : 1733779675478,
          "duration" : 39244
        }
      }, {
        "uid" : "c5d49bd515fca6b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1878/#testresult/c5d49bd515fca6b",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733765610279,
          "stop" : 1733765703486,
          "duration" : 93207
        }
      }, {
        "uid" : "554d2e1404f65f7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/35/#testresult/554d2e1404f65f7",
        "status" : "passed",
        "time" : {
          "start" : 1733555684050,
          "stop" : 1733555724052,
          "duration" : 40002
        }
      }, {
        "uid" : "631f2f22b93d6b00",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1873/#testresult/631f2f22b93d6b00",
        "status" : "passed",
        "time" : {
          "start" : 1733523124525,
          "stop" : 1733523164511,
          "duration" : 39986
        }
      }, {
        "uid" : "d7d63212a70e4b93",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1870/#testresult/d7d63212a70e4b93",
        "status" : "passed",
        "time" : {
          "start" : 1733441861553,
          "stop" : 1733441902998,
          "duration" : 41445
        }
      }, {
        "uid" : "2135014bdc66bdb5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/2135014bdc66bdb5",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733414501667,
          "stop" : 1733414594767,
          "duration" : 93100
        }
      }, {
        "uid" : "9d9ff84eba8006e6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/9d9ff84eba8006e6",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733352538622,
          "stop" : 1733352631764,
          "duration" : 93142
        }
      }, {
        "uid" : "64dba1761020ae7c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/64dba1761020ae7c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733328767347,
          "stop" : 1733328860577,
          "duration" : 93230
        }
      }, {
        "uid" : "761246c197e811f3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/761246c197e811f3",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733254261866,
          "stop" : 1733254355024,
          "duration" : 93158
        }
      }, {
        "uid" : "8b869776ad70f082",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/8b869776ad70f082",
        "status" : "passed",
        "time" : {
          "start" : 1733191122294,
          "stop" : 1733191162843,
          "duration" : 40549
        }
      }, {
        "uid" : "30eedc92b1ae8269",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/30eedc92b1ae8269",
        "status" : "passed",
        "time" : {
          "start" : 1732729391614,
          "stop" : 1732729431412,
          "duration" : 39798
        }
      }, {
        "uid" : "44384ea62a7444f2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/44384ea62a7444f2",
        "status" : "passed",
        "time" : {
          "start" : 1732749869458,
          "stop" : 1732749909081,
          "duration" : 39623
        }
      }, {
        "uid" : "34b8c39fd0f440c5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/34b8c39fd0f440c5",
        "status" : "passed",
        "time" : {
          "start" : 1732729391614,
          "stop" : 1732729431412,
          "duration" : 39798
        }
      }, {
        "uid" : "635cade3cd7e7985",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/635cade3cd7e7985",
        "status" : "passed",
        "time" : {
          "start" : 1732723853083,
          "stop" : 1732723893392,
          "duration" : 40309
        }
      }, {
        "uid" : "b21db5d673d30fbd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/b21db5d673d30fbd",
        "status" : "passed",
        "time" : {
          "start" : 1732640603429,
          "stop" : 1732640643172,
          "duration" : 39743
        }
      }, {
        "uid" : "39baa1446367efbb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/39baa1446367efbb",
        "status" : "passed",
        "time" : {
          "start" : 1732631535824,
          "stop" : 1732631577298,
          "duration" : 41474
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "30ce11baaf643dc9.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}