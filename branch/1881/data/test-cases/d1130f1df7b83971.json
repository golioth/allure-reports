{
  "uid" : "d1130f1df7b83971",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello",
  "historyId" : "e124f10389952e3c52fb82b67fe5598b",
  "time" : {
    "start" : 1733790080727,
    "stop" : 1733790195399,
    "duration" : 114672
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa08eb150>\ndevice = <golioth.golioth.Device object at 0xffffa09021d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffa0a636d0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_url",
    "time" : {
      "start" : 1733790051712,
      "stop" : 1733790051712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1733790051708,
      "stop" : 1733790051708,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1733790051709,
      "stop" : 1733790051711,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1733790079645,
      "stop" : 1733790080720,
      "duration" : 1075
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "build_conf",
    "time" : {
      "start" : 1733790051691,
      "stop" : 1733790051707,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1733790051712,
      "stop" : 1733790051712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1733790052982,
      "stop" : 1733790079644,
      "duration" : 26662
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1733790051707,
      "stop" : 1733790051708,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1733790051690,
      "stop" : 1733790051690,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1733790051713,
      "stop" : 1733790052140,
      "duration" : 427
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1733790052141,
      "stop" : 1733790052982,
      "duration" : 841
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffa08eb150>\ndevice = <golioth.golioth.Device object at 0xffffa09021d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffa0a636d0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "883debc418e45453",
      "name" : "log",
      "source" : "883debc418e45453.txt",
      "type" : "text/plain",
      "size" : 16981
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1733790196211,
      "stop" : 1733790196211,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1733790195796,
      "stop" : 1733790195823,
      "duration" : 27
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1733790196204,
      "stop" : 1733790196206,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1733790195825,
      "stop" : 1733790196201,
      "duration" : 376
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "d380427784bc"
  }, {
    "name" : "thread",
    "value" : "503-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 13,
        "skipped" : 0,
        "passed" : 45,
        "unknown" : 0,
        "total" : 59
      },
      "items" : [ {
        "uid" : "60706df8820f6935",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1880/#testresult/60706df8820f6935",
        "status" : "passed",
        "time" : {
          "start" : 1733780567948,
          "stop" : 1733780595954,
          "duration" : 28006
        }
      }, {
        "uid" : "400c59ece3f54118",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1880/#testresult/400c59ece3f54118",
        "status" : "passed",
        "time" : {
          "start" : 1733780567948,
          "stop" : 1733780595954,
          "duration" : 28006
        }
      }, {
        "uid" : "86cdf2b5eff77a6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1878/#testresult/86cdf2b5eff77a6",
        "status" : "passed",
        "time" : {
          "start" : 1733767575675,
          "stop" : 1733767617938,
          "duration" : 42263
        }
      }, {
        "uid" : "aea88953f0b7d718",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/35/#testresult/aea88953f0b7d718",
        "status" : "passed",
        "time" : {
          "start" : 1733556607688,
          "stop" : 1733556653184,
          "duration" : 45496
        }
      }, {
        "uid" : "8549ffac645c7baf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1873/#testresult/8549ffac645c7baf",
        "status" : "passed",
        "time" : {
          "start" : 1733524044441,
          "stop" : 1733524083200,
          "duration" : 38759
        }
      }, {
        "uid" : "b49b53828513cc4f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1870/#testresult/b49b53828513cc4f",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733442813736,
          "stop" : 1733442927077,
          "duration" : 113341
        }
      }, {
        "uid" : "95e537fb0ad04f42",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1868/#testresult/95e537fb0ad04f42",
        "status" : "passed",
        "time" : {
          "start" : 1733415720410,
          "stop" : 1733415769697,
          "duration" : 49287
        }
      }, {
        "uid" : "ce12e6e47ec890d1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1865/#testresult/ce12e6e47ec890d1",
        "status" : "passed",
        "time" : {
          "start" : 1733353482429,
          "stop" : 1733353516978,
          "duration" : 34549
        }
      }, {
        "uid" : "bb7f59c93bb19b52",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1864/#testresult/bb7f59c93bb19b52",
        "status" : "passed",
        "time" : {
          "start" : 1733329359460,
          "stop" : 1733329390535,
          "duration" : 31075
        }
      }, {
        "uid" : "fa5deef9206e8ed7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1862/#testresult/fa5deef9206e8ed7",
        "status" : "passed",
        "time" : {
          "start" : 1733255197595,
          "stop" : 1733255303010,
          "duration" : 105415
        }
      }, {
        "uid" : "b938f490e1bd38da",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1860/#testresult/b938f490e1bd38da",
        "status" : "passed",
        "time" : {
          "start" : 1733192036882,
          "stop" : 1733192067923,
          "duration" : 31041
        }
      }, {
        "uid" : "c2063e4201c6c8d5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/c2063e4201c6c8d5",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732802132640,
          "stop" : 1732802245789,
          "duration" : 113149
        }
      }, {
        "uid" : "4a049e903ba48cc6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1852//#testresult/4a049e903ba48cc6",
        "status" : "passed",
        "time" : {
          "start" : 1732750741461,
          "stop" : 1732750770879,
          "duration" : 29418
        }
      }, {
        "uid" : "255afeac32297243",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1848/#testresult/255afeac32297243",
        "status" : "broken",
        "statusDetails" : "httpx.ReadTimeout",
        "time" : {
          "start" : 1732730263969,
          "stop" : 1732730299421,
          "duration" : 35452
        }
      }, {
        "uid" : "de7e210d894acb37",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1847//#testresult/de7e210d894acb37",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732724622970,
          "stop" : 1732724736144,
          "duration" : 113174
        }
      }, {
        "uid" : "d55d0b8bd51f0fba",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/d55d0b8bd51f0fba",
        "status" : "passed",
        "time" : {
          "start" : 1732632411005,
          "stop" : 1732632441008,
          "duration" : 30003
        }
      }, {
        "uid" : "d33412121cee1754",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1844//#testresult/d33412121cee1754",
        "status" : "passed",
        "time" : {
          "start" : 1732632411005,
          "stop" : 1732632441008,
          "duration" : 30003
        }
      }, {
        "uid" : "c746c01880c20b39",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/c746c01880c20b39",
        "status" : "passed",
        "time" : {
          "start" : 1732563486181,
          "stop" : 1732563516871,
          "duration" : 30690
        }
      }, {
        "uid" : "a5073502c8187e99",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1841//#testresult/a5073502c8187e99",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1732561178496,
          "stop" : 1732561293068,
          "duration" : 114572
        }
      }, {
        "uid" : "82f679da3bf6a4b2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1840//#testresult/82f679da3bf6a4b2",
        "status" : "passed",
        "time" : {
          "start" : 1732555385509,
          "stop" : 1732555461447,
          "duration" : 75938
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "d1130f1df7b83971.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}