{"uid":"b852c6972cda5b92","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"d6d167c5ecb927d8d413dac5f1f3452a","time":{"start":1759955263316,"stop":1759955281177,"duration":17861},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9ed4f380>\nproject = <golioth.golioth.Project object at 0xffff9eba9010>\ndevice = <golioth.golioth.Device object at 0xffff9ec58c20>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759955234474,"stop":1759955234474,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759955234475,"stop":1759955234475,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759955234476,"stop":1759955234476,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759955234476,"stop":1759955234476,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759955234477,"stop":1759955234477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759955234477,"stop":1759955234477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759955234478,"stop":1759955234480,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759955234478,"stop":1759955234478,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759955234481,"stop":1759955235015,"duration":534},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759955235016,"stop":1759955235760,"duration":744},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759955235760,"stop":1759955262709,"duration":26949},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759955262710,"stop":1759955263313,"duration":603},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9ed4f380>\nproject = <golioth.golioth.Project object at 0xffff9eba9010>\ndevice = <golioth.golioth.Device object at 0xffff9ec58c20>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"44fe84d5965f37f4","name":"log","source":"44fe84d5965f37f4.txt","type":"text/plain","size":26227}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759955281588,"stop":1759955281864,"duration":276},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759955281866,"stop":1759955282225,"duration":359},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759955282227,"stop":1759955282229,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759955282231,"stop":1759955282232,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9c7ccb0f6c19"},{"name":"thread","value":"639-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":18,"unknown":0,"total":19},"items":[{"uid":"156afe513e27a10e","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/156afe513e27a10e","status":"passed","time":{"start":1759778554308,"stop":1759778564165,"duration":9857}},{"uid":"128a836246c4d9e3","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/128a836246c4d9e3","status":"passed","time":{"start":1759797233904,"stop":1759797248451,"duration":14547}},{"uid":"58ce20352f7d9e7d","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/58ce20352f7d9e7d","status":"passed","time":{"start":1759786822313,"stop":1759786832091,"duration":9778}},{"uid":"767aef31134090f9","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/767aef31134090f9","status":"passed","time":{"start":1759778554308,"stop":1759778564165,"duration":9857}},{"uid":"a1298d228042cb70","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/a1298d228042cb70","status":"passed","time":{"start":1759768264563,"stop":1759768273688,"duration":9125}},{"uid":"6c563d7b6ea73e4f","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/6c563d7b6ea73e4f","status":"passed","time":{"start":1759769526530,"stop":1759769535006,"duration":8476}},{"uid":"dd677a9e18877b10","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/dd677a9e18877b10","status":"passed","time":{"start":1759768264563,"stop":1759768273688,"duration":9125}},{"uid":"18d5d2beda010ffe","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/18d5d2beda010ffe","status":"passed","time":{"start":1759523343054,"stop":1759523355080,"duration":12026}},{"uid":"954042c1def50071","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/954042c1def50071","status":"passed","time":{"start":1759523343054,"stop":1759523355080,"duration":12026}},{"uid":"52395579ab6a7d94","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/52395579ab6a7d94","status":"passed","time":{"start":1759517857982,"stop":1759517874957,"duration":16975}},{"uid":"4aa9c3885422e8e4","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/4aa9c3885422e8e4","status":"passed","time":{"start":1759245169564,"stop":1759245180289,"duration":10725}},{"uid":"2636cc905bc66548","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/2636cc905bc66548","status":"passed","time":{"start":1759373813191,"stop":1759373823157,"duration":9966}},{"uid":"7298ec6f943b8205","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/7298ec6f943b8205","status":"passed","time":{"start":1759271732389,"stop":1759271742690,"duration":10301}},{"uid":"171d06e50289a77a","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/171d06e50289a77a","status":"passed","time":{"start":1759245169564,"stop":1759245180289,"duration":10725}},{"uid":"6f36e2bcd7ece48b","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/6f36e2bcd7ece48b","status":"passed","time":{"start":1759178954382,"stop":1759178980318,"duration":25936}},{"uid":"3f7d9ef0be2b7953","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/3f7d9ef0be2b7953","status":"passed","time":{"start":1759161639257,"stop":1759161647477,"duration":8220}},{"uid":"3846fb16bb15ccf5","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/3846fb16bb15ccf5","status":"passed","time":{"start":1759111476357,"stop":1759111488432,"duration":12075}},{"uid":"95530283c85c7bcb","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/95530283c85c7bcb","status":"passed","time":{"start":1758915954181,"stop":1758915964163,"duration":9982}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","zephyr"]},"source":"b852c6972cda5b92.json","parameterValues":["'nrf9160dk'","'zephyr'"]}