{"uid":"f7dbe2ae89c94a75","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"1c3f2c0d9c38a2f03a05e8ca5e7158fa","time":{"start":1759958744662,"stop":1759958773633,"duration":28971},"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff9b53fa10>\ndevice = <golioth.golioth.Device object at 0xffff9b2d9160>\nproject = <golioth.golioth.Project object at 0xffff9b45dbe0>\nreleases = {'test_blocks': Release <68e6d6a062fb6aa144e22682, release_tags=[], device_tags=['68e6d69e62fb6aa144e2267e'], artifact...ease_tags=[], device_tags=['68e6d69e62fb6aa144e2267e'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759958656491,"stop":1759958656492,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759958656492,"stop":1759958656493,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759958656493,"stop":1759958656493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759958656494,"stop":1759958656495,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759958656494,"stop":1759958656494,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759958656495,"stop":1759958656495,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759958656496,"stop":1759958656496,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759958656496,"stop":1759958681242,"duration":24746},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759958681244,"stop":1759958681766,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759958681767,"stop":1759958682532,"duration":765},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759958682533,"stop":1759958686121,"duration":3588},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1759958686123,"stop":1759958686644,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1759958686645,"stop":1759958687406,"duration":761},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1759958687406,"stop":1759958689377,"duration":1971},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1759958744659,"stop":1759958744660,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff9b53fa10>\ndevice = <golioth.golioth.Device object at 0xffff9b2d9160>\nproject = <golioth.golioth.Project object at 0xffff9b45dbe0>\nreleases = {'test_blocks': Release <68e6d6a062fb6aa144e22682, release_tags=[], device_tags=['68e6d69e62fb6aa144e2267e'], artifact...ease_tags=[], device_tags=['68e6d69e62fb6aa144e2267e'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"44f8405d7328382","name":"stdout","source":"44f8405d7328382.txt","type":"text/plain","size":111}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1759958773930,"stop":1759958774777,"duration":847},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1759958774780,"stop":1759958776702,"duration":1922},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1759958776704,"stop":1759958777448,"duration":744},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1759958777450,"stop":1759958777450,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1759958777452,"stop":1759958777452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759958777454,"stop":1759958777839,"duration":385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759958777841,"stop":1759958777841,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759958777843,"stop":1759958777846,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"7d845199ad18"},{"name":"thread","value":"237-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a45f25f5aa64ba8e","status":"failed","statusDetails":"AssertionError: assert 9 == 6\n +  where 9 = int('9')","time":{"start":1759952456091,"stop":1759952510769,"duration":54678}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":17,"unknown":0,"total":22},"items":[{"uid":"76f41d334097f835","reportUrl":"https://golioth.github.io/allure-reports/branch/756//#testresult/76f41d334097f835","status":"failed","statusDetails":"AssertionError: assert 9 == 6\n +  where 9 = int('9')","time":{"start":1759952456091,"stop":1759952510769,"duration":54678}},{"uid":"c2c72724f84e5986","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/c2c72724f84e5986","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1759857209343,"stop":1759857245082,"duration":35739}},{"uid":"b9827d9eb69d884","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/b9827d9eb69d884","status":"passed","time":{"start":1759796825544,"stop":1759796877385,"duration":51841}},{"uid":"be6a71282f05c8aa","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/be6a71282f05c8aa","status":"failed","statusDetails":"AssertionError: assert 8 == 3\n +  where 8 = int('8')","time":{"start":1759781088784,"stop":1759781129943,"duration":41159}},{"uid":"9bc5b36dfceff2cd","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/9bc5b36dfceff2cd","status":"passed","time":{"start":1759776317665,"stop":1759776364324,"duration":46659}},{"uid":"82f18cba4d21f6f4","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/82f18cba4d21f6f4","status":"passed","time":{"start":1759763740979,"stop":1759763791167,"duration":50188}},{"uid":"95bd82b9a9eed68","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/95bd82b9a9eed68","status":"passed","time":{"start":1759765538119,"stop":1759765588090,"duration":49971}},{"uid":"1c32bc55a23ee64a","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/1c32bc55a23ee64a","status":"passed","time":{"start":1759763740979,"stop":1759763791167,"duration":50188}},{"uid":"4663a11da622cc31","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/4663a11da622cc31","status":"passed","time":{"start":1759515675747,"stop":1759515725725,"duration":49978}},{"uid":"89f6aa514d66395c","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/89f6aa514d66395c","status":"passed","time":{"start":1759368974899,"stop":1759369024675,"duration":49776}},{"uid":"4470152ba6a7e308","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/4470152ba6a7e308","status":"passed","time":{"start":1759515675747,"stop":1759515725725,"duration":49978}},{"uid":"17506a79d1d5acb9","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/17506a79d1d5acb9","status":"passed","time":{"start":1759515675747,"stop":1759515725725,"duration":49978}},{"uid":"d8b57d6e74deff6b","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/d8b57d6e74deff6b","status":"passed","time":{"start":1759244707797,"stop":1759244758037,"duration":50240}},{"uid":"3a8a5089f75542b2","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/3a8a5089f75542b2","status":"passed","time":{"start":1759373291772,"stop":1759373341355,"duration":49583}},{"uid":"923316d0405c543b","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/923316d0405c543b","status":"passed","time":{"start":1759368974899,"stop":1759369024675,"duration":49776}},{"uid":"8f828376b473fe3d","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/8f828376b473fe3d","status":"passed","time":{"start":1759268332935,"stop":1759268382274,"duration":49339}},{"uid":"14c0bb28b1936aee","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/14c0bb28b1936aee","status":"passed","time":{"start":1759244707797,"stop":1759244758037,"duration":50240}},{"uid":"a5900da98528da93","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/a5900da98528da93","status":"passed","time":{"start":1759175684550,"stop":1759175731169,"duration":46619}},{"uid":"3414df0b08e9eb47","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/3414df0b08e9eb47","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759159792452,"stop":1759159798031,"duration":5579}},{"uid":"57f8152a9303a23e","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/57f8152a9303a23e","status":"passed","time":{"start":1759104433993,"stop":1759104484168,"duration":50175}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","mikes_testbench"]},"source":"f7dbe2ae89c94a75.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}