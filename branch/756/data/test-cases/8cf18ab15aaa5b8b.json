{"uid":"8cf18ab15aaa5b8b","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"7b5bd2e87b0538b1f5ac1141f1902779","time":{"start":1759952393930,"stop":1759952422886,"duration":28956},"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff8c48fa10>\ndevice = <golioth.golioth.Device object at 0xffff8c235160>\nproject = <golioth.golioth.Project object at 0xffff8c3adbe0>\nreleases = {'test_blocks': Release <68e6bde462fb6aa144e22497, release_tags=[], device_tags=['68e6bde262fb6aa144e22494'], artifact...ease_tags=[], device_tags=['68e6bde262fb6aa144e22494'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759952322216,"stop":1759952322216,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759952322217,"stop":1759952322217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759952322218,"stop":1759952322218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759952322219,"stop":1759952322219,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759952322219,"stop":1759952322220,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759952322220,"stop":1759952322221,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759952322220,"stop":1759952322220,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759952322221,"stop":1759952347961,"duration":25740},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759952347963,"stop":1759952348533,"duration":570},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759952348534,"stop":1759952349262,"duration":728},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759952349262,"stop":1759952353749,"duration":4487},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1759952353750,"stop":1759952354253,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1759952354254,"stop":1759952354979,"duration":725},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1759952354979,"stop":1759952356841,"duration":1862},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1759952393927,"stop":1759952393927,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff8c48fa10>\ndevice = <golioth.golioth.Device object at 0xffff8c235160>\nproject = <golioth.golioth.Project object at 0xffff8c3adbe0>\nreleases = {'test_blocks': Release <68e6bde462fb6aa144e22497, release_tags=[], device_tags=['68e6bde262fb6aa144e22494'], artifact...ease_tags=[], device_tags=['68e6bde262fb6aa144e22494'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 5 == 0\nE                    +  where 5 = int('5')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"c28861c41d9e7934","name":"stdout","source":"c28861c41d9e7934.txt","type":"text/plain","size":111}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1759952423143,"stop":1759952423935,"duration":792},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1759952423937,"stop":1759952425672,"duration":1735},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1759952425674,"stop":1759952426435,"duration":761},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1759952426437,"stop":1759952426437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1759952426439,"stop":1759952426439,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759952426441,"stop":1759952426793,"duration":352},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759952426795,"stop":1759952426796,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759952426797,"stop":1759952426801,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"dff594d19345"},{"name":"thread","value":"230-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":3,"skipped":0,"passed":15,"unknown":0,"total":20},"items":[{"uid":"35135268fe349d45","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/35135268fe349d45","status":"passed","time":{"start":1759857240367,"stop":1759857291882,"duration":51515}},{"uid":"63471025d4c7c695","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/63471025d4c7c695","status":"passed","time":{"start":1759787628365,"stop":1759787678138,"duration":49773}},{"uid":"ba61ccd8c61fb973","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/ba61ccd8c61fb973","status":"passed","time":{"start":1759787628365,"stop":1759787678138,"duration":49773}},{"uid":"536808b7aaa039b8","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/536808b7aaa039b8","status":"passed","time":{"start":1759779685280,"stop":1759779732669,"duration":47389}},{"uid":"1cf55f51ddfe708a","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/1cf55f51ddfe708a","status":"passed","time":{"start":1759774693658,"stop":1759774742944,"duration":49286}},{"uid":"f2a5c7468dd90ec3","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/f2a5c7468dd90ec3","status":"passed","time":{"start":1759765552522,"stop":1759765603869,"duration":51347}},{"uid":"9b699d67ff4c78ff","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/9b699d67ff4c78ff","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759763815398,"stop":1759763844575,"duration":29177}},{"uid":"11347db870c5be0","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/11347db870c5be0","status":"passed","time":{"start":1759518995215,"stop":1759519043246,"duration":48031}},{"uid":"e084f52e4f09f742","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/e084f52e4f09f742","status":"passed","time":{"start":1759715788936,"stop":1759715836268,"duration":47332}},{"uid":"36c338a7c131c8aa","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/36c338a7c131c8aa","status":"passed","time":{"start":1759518995215,"stop":1759519043246,"duration":48031}},{"uid":"2b355fcf2f41d0e2","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/2b355fcf2f41d0e2","status":"passed","time":{"start":1759518995215,"stop":1759519043246,"duration":48031}},{"uid":"577651a610dab46d","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/577651a610dab46d","status":"passed","time":{"start":1759246726287,"stop":1759246773023,"duration":46736}},{"uid":"d2bda61643fa5fd9","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/d2bda61643fa5fd9","status":"passed","time":{"start":1759376922301,"stop":1759376969947,"duration":47646}},{"uid":"aeb763c54ea26d16","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/aeb763c54ea26d16","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759368248600,"stop":1759368248600,"duration":0}},{"uid":"993f76609e2cdcde","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/993f76609e2cdcde","status":"passed","time":{"start":1759268698550,"stop":1759268746807,"duration":48257}},{"uid":"852cbd5fc24a9d34","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/852cbd5fc24a9d34","status":"passed","time":{"start":1759246726287,"stop":1759246773023,"duration":46736}},{"uid":"e833253528d083a0","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/e833253528d083a0","status":"passed","time":{"start":1759176440787,"stop":1759176487435,"duration":46648}},{"uid":"c090c4b6c9ac73a8","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/c090c4b6c9ac73a8","status":"failed","statusDetails":"AssertionError: assert 5 == 0\n +  where 5 = int('5')","time":{"start":1759159794661,"stop":1759159822892,"duration":28231}},{"uid":"79e5cdada712ad8b","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/79e5cdada712ad8b","status":"broken","statusDetails":"ValueError: Unknown board","time":{"start":1759113004321,"stop":1759113004321,"duration":0}}]},"tags":["mikes_orange_pi","esp-idf","anyio","esp32_devkitc_wrover_espidf"]},"source":"8cf18ab15aaa5b8b.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}