{"uid":"cbc5260097867bb1","name":"test_cert_provisioning","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning","historyId":"cbbe5798356bbcd9f9da9dcb46821d09","time":{"start":1759955431774,"stop":1759955462089,"duration":30315},"status":"broken","statusMessage":"httpx.ConnectError: [Errno -5] No address associated with hostname","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n>           yield\n\n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:394: in handle_async_request\n    resp = await self._pool.handle_async_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request\n    raise exc from None\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request\n    response = await connection.handle_async_request(\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection.py:101: in handle_async_request\n    raise exc\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection.py:78: in handle_async_request\n    stream = await self._connect(request)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection.py:124: in _connect\n    stream = await self._network_backend.connect_tcp(**kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpcore/_backends/auto.py:31: in connect_tcp\n    return await self._backend.connect_tcp(\n/root/venv/lib/python3.13/site-packages/httpcore/_backends/trio.py:128: in connect_tcp\n    with map_exceptions(exc_map):\n         ^^^^^^^^^^^^^^^^^^^^^^^\n/usr/cpython-3.13.5-linux-aarch64-gnu/lib/python3.13/contextlib.py:162: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'trio.TooSlowError'>: <class 'httpcore.ConnectTimeout'>, <class 'trio.BrokenResourceError'>: <class 'httpcore.ConnectError'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ConnectError: [Errno -5] No address associated with hostname\n\n/root/venv/lib/python3.13/site-packages/httpcore/_exceptions.py:14: ConnectError\n\nThe above exception was the direct cause of the following exception:\n\nlfs_flash_empty = None\nrequest = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffff9aecb770>\nproject = <golioth.golioth.Project object at 0xffff9ad71400>\ndevice_name = 'certificate-GdHlnkvSOJPFyHqz'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00,baud=115200']\ncertificate_cred = '68e6c9c062fb6aa144e22608', wifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(lfs_flash_empty, request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/crt.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        for component in [\"crt\", \"key\"]:\n            result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                    [\"--tries=3\", \"--timeout=2\",\n                                     \"fs\", \"upload\",\n                                     f\"{project.info['id']}-{device_name}.{component}.der\", f\"{FS_SUBDIR}/{component}.der\"],\n                                    capture_output=True, text=True,\n                                    cwd=request.config.option.build_dir)\n            subprocess_logger(result, f'mcumgr {component}')\n            assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n        shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n        shell._device.readlines_until(regex=\".*Sending hello! 2\", timeout=20.0)\n    \n        # Check cloud to verify device was created\n>       device = await project.device_by_name(device_name)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:242: in device_by_name\n    devices = await self.get_devices({'deviceName': name})\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:238: in get_devices\n    resp = await self.get('devices', params=params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:80: in wrapper\n    resp: httpx.Response = await func(*args, **kwargs)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:98: in get\n    return await c.get(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1768: in get\n    return await self.request(\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1540: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1629: in send\n    response = await self._send_handling_auth(\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1657: in _send_handling_auth\n    response = await self._send_handling_redirects(\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1694: in _send_handling_redirects\n    response = await self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1730: in _send_single_request\n    response = await transport.handle_async_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:393: in handle_async_request\n    with map_httpcore_exceptions():\n         ^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/cpython-3.13.5-linux-aarch64-gnu/lib/python3.13/contextlib.py:162: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ConnectError: [Errno -5] No address associated with hostname\n\n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:118: ConnectError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1759955383385,"stop":1759955383386,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1759955383385,"stop":1759955383385,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759955383386,"stop":1759955383386,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759955383387,"stop":1759955383389,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759955383387,"stop":1759955383387,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759955383390,"stop":1759955383390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759955383391,"stop":1759955387901,"duration":4510},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759955383391,"stop":1759955383391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759955387901,"stop":1759955387902,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1759955387903,"stop":1759955392328,"duration":4425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"lfs_flash_empty","time":{"start":1759955392329,"stop":1759955401350,"duration":9021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759955401351,"stop":1759955431152,"duration":29801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759955431153,"stop":1759955431764,"duration":611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1759955431765,"stop":1759955431769,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"httpx.ConnectError: [Errno -5] No address associated with hostname","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n>           yield\n\n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:394: in handle_async_request\n    resp = await self._pool.handle_async_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request\n    raise exc from None\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request\n    response = await connection.handle_async_request(\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection.py:101: in handle_async_request\n    raise exc\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection.py:78: in handle_async_request\n    stream = await self._connect(request)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpcore/_async/connection.py:124: in _connect\n    stream = await self._network_backend.connect_tcp(**kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpcore/_backends/auto.py:31: in connect_tcp\n    return await self._backend.connect_tcp(\n/root/venv/lib/python3.13/site-packages/httpcore/_backends/trio.py:128: in connect_tcp\n    with map_exceptions(exc_map):\n         ^^^^^^^^^^^^^^^^^^^^^^^\n/usr/cpython-3.13.5-linux-aarch64-gnu/lib/python3.13/contextlib.py:162: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'trio.TooSlowError'>: <class 'httpcore.ConnectTimeout'>, <class 'trio.BrokenResourceError'>: <class 'httpcore.ConnectError'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ConnectError: [Errno -5] No address associated with hostname\n\n/root/venv/lib/python3.13/site-packages/httpcore/_exceptions.py:14: ConnectError\n\nThe above exception was the direct cause of the following exception:\n\nlfs_flash_empty = None\nrequest = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffff9aecb770>\nproject = <golioth.golioth.Project object at 0xffff9ad71400>\ndevice_name = 'certificate-GdHlnkvSOJPFyHqz'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000960047329-if00,baud=115200']\ncertificate_cred = '68e6c9c062fb6aa144e22608', wifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(lfs_flash_empty, request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/crt.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        for component in [\"crt\", \"key\"]:\n            result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                    [\"--tries=3\", \"--timeout=2\",\n                                     \"fs\", \"upload\",\n                                     f\"{project.info['id']}-{device_name}.{component}.der\", f\"{FS_SUBDIR}/{component}.der\"],\n                                    capture_output=True, text=True,\n                                    cwd=request.config.option.build_dir)\n            subprocess_logger(result, f'mcumgr {component}')\n            assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n        shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n        shell._device.readlines_until(regex=\".*Sending hello! 2\", timeout=20.0)\n    \n        # Check cloud to verify device was created\n>       device = await project.device_by_name(device_name)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:242: in device_by_name\n    devices = await self.get_devices({'deviceName': name})\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:238: in get_devices\n    resp = await self.get('devices', params=params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:80: in wrapper\n    resp: httpx.Response = await func(*args, **kwargs)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/golioth/golioth.py:98: in get\n    return await c.get(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1768: in get\n    return await self.request(\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1540: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1629: in send\n    response = await self._send_handling_auth(\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1657: in _send_handling_auth\n    response = await self._send_handling_redirects(\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1694: in _send_handling_redirects\n    response = await self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_client.py:1730: in _send_single_request\n    response = await transport.handle_async_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:393: in handle_async_request\n    with map_httpcore_exceptions():\n         ^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/cpython-3.13.5-linux-aarch64-gnu/lib/python3.13/contextlib.py:162: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ConnectError: [Errno -5] No address associated with hostname\n\n/root/venv/lib/python3.13/site-packages/httpx/_transports/default.py:118: ConnectError","steps":[],"attachments":[{"uid":"1a457364ebab6c96","name":"log","source":"1a457364ebab6c96.txt","type":"text/plain","size":22114}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759955463536,"stop":1759955463584,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1759955463587,"stop":1759955463936,"duration":349},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1759955463938,"stop":1759955464680,"duration":742},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759955464682,"stop":1759955464685,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759955464689,"stop":1759955464690,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9c7ccb0f6c19"},{"name":"thread","value":"804-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9fab6d695ad6fccd","status":"passed","time":{"start":1759955328351,"stop":1759955376652,"duration":48301}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":18,"unknown":0,"total":19},"items":[{"uid":"c3d35ecd99d51840","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/c3d35ecd99d51840","status":"passed","time":{"start":1759778686846,"stop":1759778713389,"duration":26543}},{"uid":"a62d9e0951b43bde","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/a62d9e0951b43bde","status":"passed","time":{"start":1759797364610,"stop":1759797389094,"duration":24484}},{"uid":"3243cbe13e371e61","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/3243cbe13e371e61","status":"passed","time":{"start":1759786969698,"stop":1759787012311,"duration":42613}},{"uid":"5c75c48fa4131e3f","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/5c75c48fa4131e3f","status":"passed","time":{"start":1759778686846,"stop":1759778713389,"duration":26543}},{"uid":"48859acf01ade8a2","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/48859acf01ade8a2","status":"passed","time":{"start":1759768405122,"stop":1759768428512,"duration":23390}},{"uid":"44538eacc2732b53","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/44538eacc2732b53","status":"passed","time":{"start":1759769656943,"stop":1759769680988,"duration":24045}},{"uid":"2857712bad01995c","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/2857712bad01995c","status":"passed","time":{"start":1759768405122,"stop":1759768428512,"duration":23390}},{"uid":"8f687d54c1a6cf6e","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/8f687d54c1a6cf6e","status":"passed","time":{"start":1759523476439,"stop":1759523506287,"duration":29848}},{"uid":"48db81ab697495fd","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/48db81ab697495fd","status":"passed","time":{"start":1759523476439,"stop":1759523506287,"duration":29848}},{"uid":"9ad931048740c430","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/9ad931048740c430","status":"passed","time":{"start":1759518004573,"stop":1759518031989,"duration":27416}},{"uid":"1cfd4b939bfe027b","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/1cfd4b939bfe027b","status":"passed","time":{"start":1759245297973,"stop":1759245325085,"duration":27112}},{"uid":"d9c4d159f3b34927","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/d9c4d159f3b34927","status":"passed","time":{"start":1759373939402,"stop":1759373963173,"duration":23771}},{"uid":"6f042769901f3851","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/6f042769901f3851","status":"passed","time":{"start":1759271859144,"stop":1759271883543,"duration":24399}},{"uid":"c7096582eabb90d0","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/c7096582eabb90d0","status":"passed","time":{"start":1759245297973,"stop":1759245325085,"duration":27112}},{"uid":"1ab29935cfcfe2f5","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/1ab29935cfcfe2f5","status":"passed","time":{"start":1759179100609,"stop":1759179137346,"duration":36737}},{"uid":"d5ddc416b5f6570c","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/d5ddc416b5f6570c","status":"passed","time":{"start":1759161782307,"stop":1759161809251,"duration":26944}},{"uid":"1b2110d2fd216f9c","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/1b2110d2fd216f9c","status":"passed","time":{"start":1759111609998,"stop":1759111637277,"duration":27279}},{"uid":"7e8a4ffbd2941faa","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/7e8a4ffbd2941faa","status":"passed","time":{"start":1758916081607,"stop":1758916114692,"duration":33085}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","zephyr"]},"source":"cbc5260097867bb1.json","parameterValues":["'nrf9160dk'","'zephyr'"]}