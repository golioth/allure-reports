{"uid":"1d0b2de746e55829","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"ae1c7e14b29d468f72319f0a6ff27eb0","time":{"start":1759954413075,"stop":1759955039953,"duration":626878},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff81e73b60>\nproject = <golioth.golioth.Project object at 0xffff81e06cf0>\ndevice = <golioth.golioth.Device object at 0xffff81e73230>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <68e6c5cd62fb6aa144e225ad, release_tags=[], device_tags=['68e6c5cc62fb6aa144e225ac'], artifact_ids=['68e02a76b6c731f600fa477a'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n        shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n        LOGGER.info(\"Block download has begun!\")\n    \n>       shell._device.readlines_until(regex=\".*Rebooting into new image.\", timeout=600.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Rebooting into new image.'\nnum_of_lines = None, timeout = 600.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759954373888,"stop":1759954373888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759954373889,"stop":1759954373890,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759954373889,"stop":1759954373889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1759954373890,"stop":1759954374064,"duration":174},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759954374064,"stop":1759954374065,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759954374065,"stop":1759954374065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759954374065,"stop":1759954374066,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759954374066,"stop":1759954374066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759954374066,"stop":1759954374068,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759954374069,"stop":1759954374918,"duration":849},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759954374919,"stop":1759954375646,"duration":727},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1759954375647,"stop":1759954375995,"duration":348},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1759954375995,"stop":1759954376392,"duration":397},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1759954376393,"stop":1759954381642,"duration":5249},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1759954381643,"stop":1759954382010,"duration":367},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759954382011,"stop":1759954412027,"duration":30016},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759954412027,"stop":1759954413071,"duration":1044},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff81e73b60>\nproject = <golioth.golioth.Project object at 0xffff81e06cf0>\ndevice = <golioth.golioth.Device object at 0xffff81e73230>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <68e6c5cd62fb6aa144e225ad, release_tags=[], device_tags=['68e6c5cc62fb6aa144e225ac'], artifact_ids=['68e02a76b6c731f600fa477a'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n        shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n        LOGGER.info(\"Block download has begun!\")\n    \n>       shell._device.readlines_until(regex=\".*Rebooting into new image.\", timeout=600.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Rebooting into new image.'\nnum_of_lines = None, timeout = 600.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"868c548d996747dc","name":"log","source":"868c548d996747dc.txt","type":"text/plain","size":106912}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759955040306,"stop":1759955040350,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1759955040352,"stop":1759955040730,"duration":378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1759955040732,"stop":1759955041481,"duration":749},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1759955041483,"stop":1759955041484,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1759955041486,"stop":1759955041486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759955041488,"stop":1759955041845,"duration":357},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759955041848,"stop":1759955041848,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759955041850,"stop":1759955041850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1759955041857,"stop":1759955041859,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"9c7ccb0f6c19"},{"name":"thread","value":"442-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":18,"unknown":0,"total":19},"items":[{"uid":"c1c906ff5728bbd1","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/c1c906ff5728bbd1","status":"passed","time":{"start":1759778087620,"stop":1759778365877,"duration":278257}},{"uid":"5e7c9e1a27e3ca23","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/5e7c9e1a27e3ca23","status":"passed","time":{"start":1759796811825,"stop":1759797049365,"duration":237540}},{"uid":"931e6b821ba8897","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/931e6b821ba8897","status":"passed","time":{"start":1759786194620,"stop":1759786627403,"duration":432783}},{"uid":"609ead08635c5d67","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/609ead08635c5d67","status":"passed","time":{"start":1759778087620,"stop":1759778365877,"duration":278257}},{"uid":"d564b55ede120317","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/d564b55ede120317","status":"passed","time":{"start":1759767826787,"stop":1759768080181,"duration":253394}},{"uid":"621892950d45bd8a","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/621892950d45bd8a","status":"passed","time":{"start":1759769118507,"stop":1759769342972,"duration":224465}},{"uid":"fe2f718208afaf60","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/fe2f718208afaf60","status":"passed","time":{"start":1759767826787,"stop":1759768080181,"duration":253394}},{"uid":"5ec1ba7775a745d0","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/5ec1ba7775a745d0","status":"passed","time":{"start":1759522841360,"stop":1759523154825,"duration":313465}},{"uid":"5c33983b8cf755cf","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/5c33983b8cf755cf","status":"passed","time":{"start":1759522841360,"stop":1759523154825,"duration":313465}},{"uid":"44a48ca4a25497a7","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/44a48ca4a25497a7","status":"passed","time":{"start":1759517228253,"stop":1759517570299,"duration":342046}},{"uid":"523aefac9d670b35","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/523aefac9d670b35","status":"passed","time":{"start":1759244627481,"stop":1759244982685,"duration":355204}},{"uid":"eba60b301004d0c0","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/eba60b301004d0c0","status":"passed","time":{"start":1759373373315,"stop":1759373614207,"duration":240892}},{"uid":"a74c6236741b80f2","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/a74c6236741b80f2","status":"passed","time":{"start":1759271314879,"stop":1759271545036,"duration":230157}},{"uid":"dd2ee56b8fdd0434","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/dd2ee56b8fdd0434","status":"passed","time":{"start":1759244627481,"stop":1759244982685,"duration":355204}},{"uid":"3f4d9153c35d0c5f","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/3f4d9153c35d0c5f","status":"passed","time":{"start":1759178132413,"stop":1759178730752,"duration":598339}},{"uid":"74df4dd4e4454ae","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/74df4dd4e4454ae","status":"passed","time":{"start":1759161161041,"stop":1759161451348,"duration":290307}},{"uid":"11c6d18adfe9b58b","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/11c6d18adfe9b58b","status":"passed","time":{"start":1759110866038,"stop":1759111191465,"duration":325427}},{"uid":"aad5461350607a4a","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/aad5461350607a4a","status":"passed","time":{"start":1758915497597,"stop":1758915767596,"duration":269999}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","zephyr"]},"source":"1d0b2de746e55829.json","parameterValues":["'nrf9160dk'","'zephyr'"]}