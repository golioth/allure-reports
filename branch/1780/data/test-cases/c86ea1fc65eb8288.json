{"uid":"c86ea1fc65eb8288","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"590f0375d3da0823de2fcad609f6b87b","time":{"start":1732032264102,"stop":1732032280719,"duration":16617},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9e882ed0>\nproject = <golioth.golioth.Project object at 0xffff9e9c2c10>\ndevice = <golioth.golioth.Device object at 0xffff9e870c90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732032254046,"stop":1732032254046,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732032254047,"stop":1732032254047,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732032254048,"stop":1732032254048,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732032254048,"stop":1732032254048,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732032254049,"stop":1732032254049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732032254049,"stop":1732032254049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732032254050,"stop":1732032254050,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732032254050,"stop":1732032254052,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732032254053,"stop":1732032254648,"duration":595},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732032254648,"stop":1732032255671,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732032255671,"stop":1732032263579,"duration":7908},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732032263579,"stop":1732032264099,"duration":520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9e882ed0>\nproject = <golioth.golioth.Project object at 0xffff9e9c2c10>\ndevice = <golioth.golioth.Device object at 0xffff9e870c90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        shell._device.readlines_until(regex=\".*Setting loop delay to 1 s\", timeout=90.0)\n    \n        # Set device-level setting\n    \n        await device.settings.set('LOOP_DELAY_S', 5)\n    \n>       shell._device.readlines_until(regex=\".*Setting loop delay to 5 s\", timeout=5.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Setting loop delay to 5 s'\nnum_of_lines = None, timeout = 5.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"29d3cfabdd6e8c55","name":"log","source":"29d3cfabdd6e8c55.txt","type":"text/plain","size":28230}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732032281016,"stop":1732032281196,"duration":180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732032281198,"stop":1732032281682,"duration":484},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732032281685,"stop":1732032281687,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732032281689,"stop":1732032281689,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"94887a14a892"},{"name":"thread","value":"511-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":30,"unknown":0,"total":38},"items":[{"uid":"e8ee12605c9fcd87","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/e8ee12605c9fcd87","status":"passed","time":{"start":1732027485678,"stop":1732027497157,"duration":11479}},{"uid":"76305ae181c5bbe","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/76305ae181c5bbe","status":"passed","time":{"start":1732027485678,"stop":1732027497157,"duration":11479}},{"uid":"17da30bf3d54ec9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/17da30bf3d54ec9b","status":"passed","time":{"start":1732014745618,"stop":1732014756960,"duration":11342}},{"uid":"5d3c36c200481830","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/5d3c36c200481830","status":"passed","time":{"start":1732000957284,"stop":1732000968658,"duration":11374}},{"uid":"15580669034b106b","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/15580669034b106b","status":"passed","time":{"start":1731970944696,"stop":1731970956180,"duration":11484}},{"uid":"5658d7acf3bb40e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/5658d7acf3bb40e6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731963096671,"stop":1731963096671,"duration":0}},{"uid":"d9fb1c104c0db19c","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/d9fb1c104c0db19c","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1731962369645,"stop":1731962369645,"duration":0}},{"uid":"d569bb5089632de5","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/d569bb5089632de5","status":"passed","time":{"start":1731958047994,"stop":1731958059438,"duration":11444}},{"uid":"80bdb65b707deb7b","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/80bdb65b707deb7b","status":"passed","time":{"start":1731955944706,"stop":1731955956625,"duration":11919}},{"uid":"f9f2f39c96e3b812","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/f9f2f39c96e3b812","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731933200758,"stop":1731933200758,"duration":0}},{"uid":"3fdac199259795c3","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/3fdac199259795c3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731922890113,"stop":1731922890113,"duration":0}},{"uid":"d539cb5302609883","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/d539cb5302609883","status":"passed","time":{"start":1731905865791,"stop":1731905875968,"duration":10177}},{"uid":"567ea843ab3387d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/567ea843ab3387d3","status":"passed","time":{"start":1731714326764,"stop":1731714338043,"duration":11279}},{"uid":"dccdffbf7431c0e","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/dccdffbf7431c0e","status":"passed","time":{"start":1731711444183,"stop":1731711456806,"duration":12623}},{"uid":"ef497e05a4fef97a","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/ef497e05a4fef97a","status":"passed","time":{"start":1731706992326,"stop":1731707005400,"duration":13074}},{"uid":"794595a68c4e2b50","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/794595a68c4e2b50","status":"passed","time":{"start":1731706972588,"stop":1731706984007,"duration":11419}},{"uid":"3c745f36c4f87b94","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/3c745f36c4f87b94","status":"passed","time":{"start":1731695202389,"stop":1731695212899,"duration":10510}},{"uid":"f237fff39a515003","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/f237fff39a515003","status":"passed","time":{"start":1731622432707,"stop":1731622444135,"duration":11428}},{"uid":"e510ba7d724500f1","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/e510ba7d724500f1","status":"passed","time":{"start":1731622432707,"stop":1731622444135,"duration":11428}},{"uid":"c419d003905d70a9","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/c419d003905d70a9","status":"passed","time":{"start":1731622432707,"stop":1731622444135,"duration":11428}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"c86ea1fc65eb8288.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}