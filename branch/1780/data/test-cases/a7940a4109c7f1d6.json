{"uid":"a7940a4109c7f1d6","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1732032326619,"stop":1732032349996,"duration":23377},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffae7ce190>\ndevice = <golioth.golioth.Device object at 0xffffae7e1310>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732032308823,"stop":1732032308823,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732032308824,"stop":1732032308824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732032308824,"stop":1732032308824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732032308825,"stop":1732032308825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732032308825,"stop":1732032308825,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732032308826,"stop":1732032308828,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732032308829,"stop":1732032308829,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732032308829,"stop":1732032308829,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732032308830,"stop":1732032309263,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732032309264,"stop":1732032310188,"duration":924},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732032310189,"stop":1732032325776,"duration":15587},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732032325776,"stop":1732032326616,"duration":840},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffae7ce190>\ndevice = <golioth.golioth.Device object at 0xffffae7e1310>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"462fe84527c2051a","name":"log","source":"462fe84527c2051a.txt","type":"text/plain","size":17334}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732032350296,"stop":1732032350309,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732032350311,"stop":1732032350811,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732032350813,"stop":1732032350815,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732032350820,"stop":1732032350820,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"44659caaf502"},{"name":"thread","value":"491-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":2,"skipped":0,"passed":31,"unknown":0,"total":38},"items":[{"uid":"ade537801d11e72","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/ade537801d11e72","status":"passed","time":{"start":1732029589535,"stop":1732029605165,"duration":15630}},{"uid":"3291dbb325a00c","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/3291dbb325a00c","status":"passed","time":{"start":1732028293626,"stop":1732028306922,"duration":13296}},{"uid":"3cb2cd59e7a48380","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/3cb2cd59e7a48380","status":"passed","time":{"start":1732015198474,"stop":1732015216355,"duration":17881}},{"uid":"7c1f78c22e04786a","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/7c1f78c22e04786a","status":"passed","time":{"start":1732001771420,"stop":1732001790940,"duration":19520}},{"uid":"99cb28223ca79b21","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/99cb28223ca79b21","status":"passed","time":{"start":1731970992123,"stop":1731971009513,"duration":17390}},{"uid":"3a8d8f4646dcef2a","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/3a8d8f4646dcef2a","status":"passed","time":{"start":1731968797182,"stop":1731968812084,"duration":14902}},{"uid":"dd9bf1fb9b48c1f3","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/dd9bf1fb9b48c1f3","status":"passed","time":{"start":1731963034442,"stop":1731963049320,"duration":14878}},{"uid":"d2c76742cc861bba","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/d2c76742cc861bba","status":"passed","time":{"start":1731958695638,"stop":1731958713335,"duration":17697}},{"uid":"735ba147cdfcb623","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/735ba147cdfcb623","status":"passed","time":{"start":1731955344940,"stop":1731955358380,"duration":13440}},{"uid":"51a9480fe7769862","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/51a9480fe7769862","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934439502,"stop":1731934439502,"duration":0}},{"uid":"bcca94943336b6ed","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/bcca94943336b6ed","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923362206,"stop":1731923362206,"duration":0}},{"uid":"76b6947b31692511","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/76b6947b31692511","status":"passed","time":{"start":1731906501444,"stop":1731906516833,"duration":15389}},{"uid":"692ef833645a17bb","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/692ef833645a17bb","status":"passed","time":{"start":1731714966608,"stop":1731714982228,"duration":15620}},{"uid":"6cc20c1cbcb468ae","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/6cc20c1cbcb468ae","status":"passed","time":{"start":1731711535752,"stop":1731711550218,"duration":14466}},{"uid":"76fe41132960b629","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/76fe41132960b629","status":"passed","time":{"start":1731707655397,"stop":1731707669819,"duration":14422}},{"uid":"e83a0a9e2961c8c6","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/e83a0a9e2961c8c6","status":"passed","time":{"start":1731708457730,"stop":1731708473468,"duration":15738}},{"uid":"ade3cb6378490a6","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/ade3cb6378490a6","status":"passed","time":{"start":1731695830262,"stop":1731695845006,"duration":14744}},{"uid":"6c6e4c645dae1393","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/6c6e4c645dae1393","status":"passed","time":{"start":1731690153787,"stop":1731690169399,"duration":15612}},{"uid":"bc93121aa58c2caf","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/bc93121aa58c2caf","status":"passed","time":{"start":1731624764766,"stop":1731624779505,"duration":14739}},{"uid":"2409307e18c876c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/2409307e18c876c4","status":"passed","time":{"start":1731622969380,"stop":1731622982768,"duration":13388}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"a7940a4109c7f1d6.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}