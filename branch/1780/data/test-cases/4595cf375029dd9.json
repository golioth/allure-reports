{"uid":"4595cf375029dd9","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"728c1ad8cfe5fc9c60fb1445998f2048","time":{"start":1732034267804,"stop":1732034380530,"duration":112726},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff80d0ac90>\ndevice = <golioth.golioth.Device object at 0xffff80d20410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732034238551,"stop":1732034238551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732034238552,"stop":1732034238552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732034238552,"stop":1732034238552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732034238553,"stop":1732034238553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732034238553,"stop":1732034238553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732034238554,"stop":1732034238556,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732034238557,"stop":1732034238557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732034238557,"stop":1732034238557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732034238558,"stop":1732034238962,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732034238963,"stop":1732034239860,"duration":897},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732034239860,"stop":1732034266709,"duration":26849},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732034266709,"stop":1732034267799,"duration":1090},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff80d0ac90>\ndevice = <golioth.golioth.Device object at 0xffff80d20410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7b62fa31ca95f94d","name":"log","source":"7b62fa31ca95f94d.txt","type":"text/plain","size":14175}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732034380853,"stop":1732034381060,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732034381062,"stop":1732034381509,"duration":447},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732034381511,"stop":1732034381513,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732034381518,"stop":1732034381518,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e68c92d4bf63"},{"name":"thread","value":"963-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"538303c5d61c3c3c","status":"passed","time":{"start":1732034127636,"stop":1732034159643,"duration":32007}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":19,"unknown":0,"total":24},"items":[{"uid":"f223556c3331130a","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/f223556c3331130a","status":"passed","time":{"start":1731972714769,"stop":1731972739592,"duration":24823}},{"uid":"1030cae5584af587","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/1030cae5584af587","status":"passed","time":{"start":1731964885012,"stop":1731964910994,"duration":25982}},{"uid":"e1ab44124f8534c2","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/e1ab44124f8534c2","status":"passed","time":{"start":1731960165333,"stop":1731960206678,"duration":41345}},{"uid":"22bd6771362a7750","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/22bd6771362a7750","status":"passed","time":{"start":1731957091228,"stop":1731957123404,"duration":32176}},{"uid":"bf7d56886f58a757","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/bf7d56886f58a757","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731908530671,"stop":1731908643421,"duration":112750}},{"uid":"abd5efebca8e563f","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/abd5efebca8e563f","status":"passed","time":{"start":1731717184747,"stop":1731717236921,"duration":52174}},{"uid":"e5747cc5ada3bcd9","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/e5747cc5ada3bcd9","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","time":{"start":1731713153749,"stop":1731713192322,"duration":38573}},{"uid":"1dc66c99c2b13cb3","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/1dc66c99c2b13cb3","status":"passed","time":{"start":1731710917259,"stop":1731710957982,"duration":40723}},{"uid":"87a3181a68aaba51","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/87a3181a68aaba51","status":"passed","time":{"start":1731710005372,"stop":1731710029791,"duration":24419}},{"uid":"5615c6879de3f798","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/5615c6879de3f798","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731698270521,"stop":1731698383308,"duration":112787}},{"uid":"aaa4de2723f9d718","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/aaa4de2723f9d718","status":"passed","time":{"start":1731615304703,"stop":1731615329168,"duration":24465}},{"uid":"3d61d42ae8b090e7","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/3d61d42ae8b090e7","status":"passed","time":{"start":1731597796821,"stop":1731597835470,"duration":38649}},{"uid":"fbaa6513724d2680","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/fbaa6513724d2680","status":"passed","time":{"start":1731550384985,"stop":1731550427307,"duration":42322}},{"uid":"360563e19a18bcc","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/360563e19a18bcc","status":"passed","time":{"start":1731545108572,"stop":1731545133648,"duration":25076}},{"uid":"e18491ec705daaa3","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/e18491ec705daaa3","status":"passed","time":{"start":1731542341890,"stop":1731542366179,"duration":24289}},{"uid":"795ae8725e8f3666","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/795ae8725e8f3666","status":"passed","time":{"start":1731541406172,"stop":1731541441168,"duration":34996}},{"uid":"c55f1a6e75292370","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/c55f1a6e75292370","status":"passed","time":{"start":1731529129261,"stop":1731529168820,"duration":39559}},{"uid":"d70913019d20b6bd","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/d70913019d20b6bd","status":"passed","time":{"start":1731524107975,"stop":1731524146306,"duration":38331}},{"uid":"b611cfd7ff4ea720","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/b611cfd7ff4ea720","status":"passed","time":{"start":1731524107975,"stop":1731524146306,"duration":38331}},{"uid":"f14901b036e98449","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/f14901b036e98449","status":"passed","time":{"start":1731521947854,"stop":1731521991245,"duration":43391}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4595cf375029dd9.json","parameterValues":["'nrf9160dk'","'zephyr'"]}