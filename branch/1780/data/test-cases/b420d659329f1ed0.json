{"uid":"b420d659329f1ed0","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1732032237774,"stop":1732032261745,"duration":23971},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff951f1f10>\nproject = <golioth.golioth.Project object at 0xffff953a1fd0>\ndevice = <golioth.golioth.Device object at 0xffff95201250>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732032218350,"stop":1732032218350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732032218351,"stop":1732032218351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732032218351,"stop":1732032218351,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732032218352,"stop":1732032218352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732032218352,"stop":1732032218352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732032218353,"stop":1732032218353,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732032218353,"stop":1732032218353,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732032218354,"stop":1732032218356,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732032218357,"stop":1732032218764,"duration":407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732032218764,"stop":1732032219692,"duration":928},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732032219692,"stop":1732032236874,"duration":17182},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732032236875,"stop":1732032237771,"duration":896},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff951f1f10>\nproject = <golioth.golioth.Project object at 0xffff953a1fd0>\ndevice = <golioth.golioth.Device object at 0xffff95201250>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9592899314049f48","name":"log","source":"9592899314049f48.txt","type":"text/plain","size":18928}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732032261985,"stop":1732032262011,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732032262013,"stop":1732032262500,"duration":487},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732032262502,"stop":1732032262505,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732032262507,"stop":1732032262507,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"44659caaf502"},{"name":"thread","value":"460-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":5,"skipped":0,"passed":28,"unknown":0,"total":38},"items":[{"uid":"14329a0df1c792f5","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/14329a0df1c792f5","status":"passed","time":{"start":1732029657692,"stop":1732029667412,"duration":9720}},{"uid":"ffb977ce48a5dca1","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/ffb977ce48a5dca1","status":"passed","time":{"start":1732028365069,"stop":1732028377005,"duration":11936}},{"uid":"bf561a16a8757092","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/bf561a16a8757092","status":"passed","time":{"start":1732015271107,"stop":1732015283140,"duration":12033}},{"uid":"cef99b2ac0f069d7","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/cef99b2ac0f069d7","status":"passed","time":{"start":1732001846244,"stop":1732001856557,"duration":10313}},{"uid":"acfff7a69e536c3e","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/acfff7a69e536c3e","status":"passed","time":{"start":1731971064744,"stop":1731971077827,"duration":13083}},{"uid":"96b866029f920ed4","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/96b866029f920ed4","status":"passed","time":{"start":1731968869848,"stop":1731968882123,"duration":12275}},{"uid":"7d5a73dc7d26b809","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/7d5a73dc7d26b809","status":"passed","time":{"start":1731963105040,"stop":1731963115539,"duration":10499}},{"uid":"cb34d2e917aab067","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/cb34d2e917aab067","status":"passed","time":{"start":1731958768362,"stop":1731958776173,"duration":7811}},{"uid":"c6484e959ffa2bc","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/c6484e959ffa2bc","status":"passed","time":{"start":1731955412719,"stop":1731955422941,"duration":10222}},{"uid":"2c185219c072344b","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/2c185219c072344b","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934524833,"stop":1731934524833,"duration":0}},{"uid":"d7dae2d8e4248225","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/d7dae2d8e4248225","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923442418,"stop":1731923442418,"duration":0}},{"uid":"8439d17050ea2890","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/8439d17050ea2890","status":"passed","time":{"start":1731906569503,"stop":1731906579291,"duration":9788}},{"uid":"6724ea074dce9637","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/6724ea074dce9637","status":"passed","time":{"start":1731715034561,"stop":1731715043541,"duration":8980}},{"uid":"5955cd65fe8e3a95","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/5955cd65fe8e3a95","status":"passed","time":{"start":1731711603619,"stop":1731711613237,"duration":9618}},{"uid":"59402dbcc681943f","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/59402dbcc681943f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731707721140,"stop":1731707815276,"duration":94136}},{"uid":"2f4912d7f094e6ea","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/2f4912d7f094e6ea","status":"passed","time":{"start":1731708611259,"stop":1731708623227,"duration":11968}},{"uid":"10609a38f6f714f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/10609a38f6f714f4","status":"passed","time":{"start":1731695898737,"stop":1731695907447,"duration":8710}},{"uid":"1657873834b8b7b9","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/1657873834b8b7b9","status":"passed","time":{"start":1731690229963,"stop":1731690240793,"duration":10830}},{"uid":"a94f9dfe2dd5333d","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/a94f9dfe2dd5333d","status":"passed","time":{"start":1731624836358,"stop":1731624846225,"duration":9867}},{"uid":"963f822eccfad043","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/963f822eccfad043","status":"passed","time":{"start":1731623033221,"stop":1731623042887,"duration":9666}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b420d659329f1ed0.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}