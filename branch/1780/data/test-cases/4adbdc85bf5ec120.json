{"uid":"4adbdc85bf5ec120","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1732032416310,"stop":1732032438983,"duration":22673},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7d723390>\ndevice = <golioth.golioth.Device object at 0xffff7d735590>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732032398835,"stop":1732032398835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732032398836,"stop":1732032398836,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732032398836,"stop":1732032398836,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732032398837,"stop":1732032398837,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732032398837,"stop":1732032398838,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732032398838,"stop":1732032398840,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732032398841,"stop":1732032398841,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732032398841,"stop":1732032398841,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732032398842,"stop":1732032399291,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732032399291,"stop":1732032400330,"duration":1039},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732032400331,"stop":1732032415432,"duration":15101},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732032415433,"stop":1732032416307,"duration":874},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7d723390>\ndevice = <golioth.golioth.Device object at 0xffff7d735590>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"a58c3e643f4c8187","name":"log","source":"a58c3e643f4c8187.txt","type":"text/plain","size":12904}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732032439325,"stop":1732032439355,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732032439357,"stop":1732032439761,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732032439763,"stop":1732032439766,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732032439770,"stop":1732032439771,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"44659caaf502"},{"name":"thread","value":"525-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a7f90cd7a7329bb","status":"passed","time":{"start":1732032372332,"stop":1732032394446,"duration":22114}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":6,"skipped":0,"passed":27,"unknown":0,"total":38},"items":[{"uid":"51d8b99d4158461d","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/51d8b99d4158461d","status":"passed","time":{"start":1732029786667,"stop":1732029809068,"duration":22401}},{"uid":"c2d4a1962ed0c584","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/c2d4a1962ed0c584","status":"passed","time":{"start":1732028500097,"stop":1732028525287,"duration":25190}},{"uid":"9741db48feb08e76","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/9741db48feb08e76","status":"passed","time":{"start":1732015399412,"stop":1732015423042,"duration":23630}},{"uid":"33aee4c5379a7bd0","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/33aee4c5379a7bd0","status":"passed","time":{"start":1732001974234,"stop":1732002001781,"duration":27547}},{"uid":"156faceb6e7c3ac1","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/156faceb6e7c3ac1","status":"passed","time":{"start":1731971200376,"stop":1731971223272,"duration":22896}},{"uid":"cf17a61e4f32b9f9","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/cf17a61e4f32b9f9","status":"passed","time":{"start":1731969007585,"stop":1731969033152,"duration":25567}},{"uid":"f6f9bf653d133a68","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/f6f9bf653d133a68","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731963230300,"stop":1731963252835,"duration":22535}},{"uid":"78f78ef6de5ca1d2","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/78f78ef6de5ca1d2","status":"passed","time":{"start":1731958900409,"stop":1731958920055,"duration":19646}},{"uid":"7757e233b98c1d33","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/7757e233b98c1d33","status":"passed","time":{"start":1731955542497,"stop":1731955566322,"duration":23825}},{"uid":"dd466c3a1b7dd97d","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/dd466c3a1b7dd97d","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934654026,"stop":1731934654026,"duration":0}},{"uid":"ff62c97f73b5dd88","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/ff62c97f73b5dd88","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923564100,"stop":1731923564100,"duration":0}},{"uid":"9e6e1ff22b2abdc7","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/9e6e1ff22b2abdc7","status":"passed","time":{"start":1731906699331,"stop":1731906722940,"duration":23609}},{"uid":"4373ec519df31008","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/4373ec519df31008","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731715165543,"stop":1731715278331,"duration":112788}},{"uid":"c327dc212232c1a8","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/c327dc212232c1a8","status":"passed","time":{"start":1731711733290,"stop":1731711756994,"duration":23704}},{"uid":"756d0a717e7f8915","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/756d0a717e7f8915","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731707935085,"stop":1731707957657,"duration":22572}},{"uid":"164e3d867e002432","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/164e3d867e002432","status":"passed","time":{"start":1731708831576,"stop":1731708854483,"duration":22907}},{"uid":"eadf50b1fbb1a6c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/eadf50b1fbb1a6c5","status":"passed","time":{"start":1731696024865,"stop":1731696049355,"duration":24490}},{"uid":"4349aa922f4735b1","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/4349aa922f4735b1","status":"passed","time":{"start":1731690360407,"stop":1731690386007,"duration":25600}},{"uid":"ebbb59b0d5df3820","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/ebbb59b0d5df3820","status":"passed","time":{"start":1731624971145,"stop":1731624994080,"duration":22935}},{"uid":"bcaa7ddfcab68a7d","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/bcaa7ddfcab68a7d","status":"passed","time":{"start":1731623114912,"stop":1731623139427,"duration":24515}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"4adbdc85bf5ec120.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}