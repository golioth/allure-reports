{"uid":"6d205f38e20b1164","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"d6d2d14ea0fc70fc132a4ce39ee3d167","time":{"start":1732147071114,"stop":1732147090608,"duration":19494},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff920673d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067490>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92066d90>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9200b2d0>\ndevice = <golioth.golioth.Device object at 0xffff92026750>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff920673d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067490>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92066d90>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732147042047,"stop":1732147042047,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732147042048,"stop":1732147042048,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732147042049,"stop":1732147042049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732147042049,"stop":1732147042049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732147042050,"stop":1732147042050,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732147042050,"stop":1732147042052,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732147042053,"stop":1732147042053,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732147042053,"stop":1732147042053,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732147042054,"stop":1732147042686,"duration":632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732147042686,"stop":1732147044015,"duration":1329},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732147044016,"stop":1732147067942,"duration":23926},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732147067942,"stop":1732147071107,"duration":3165},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff920673d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067490>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92066d90>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9200b2d0>\ndevice = <golioth.golioth.Device object at 0xffff92026750>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff920673d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067410>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067490>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92067390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff92066d90>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"8da20270d0040001","name":"log","source":"8da20270d0040001.txt","type":"text/plain","size":19912}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732147090791,"stop":1732147090829,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732147090831,"stop":1732147091306,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732147091308,"stop":1732147091311,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732147091316,"stop":1732147091316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"090d113bd9dd"},{"name":"thread","value":"439-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":47,"unknown":0,"total":49},"items":[{"uid":"a52335b100a8128a","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/a52335b100a8128a","status":"passed","time":{"start":1732143873092,"stop":1732143892021,"duration":18929}},{"uid":"4cb226d73b9e500b","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/4cb226d73b9e500b","status":"passed","time":{"start":1732142245015,"stop":1732142263739,"duration":18724}},{"uid":"127c0ced2b108afd","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/127c0ced2b108afd","status":"passed","time":{"start":1732134172821,"stop":1732134191300,"duration":18479}},{"uid":"6965e08e58150de8","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/6965e08e58150de8","status":"passed","time":{"start":1732094109534,"stop":1732094128080,"duration":18546}},{"uid":"2bac1f8a1adeccb4","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/2bac1f8a1adeccb4","status":"passed","time":{"start":1732094109534,"stop":1732094128080,"duration":18546}},{"uid":"a834c74b96206cde","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/a834c74b96206cde","status":"passed","time":{"start":1732126203785,"stop":1732126222240,"duration":18455}},{"uid":"f388508af28c2194","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/f388508af28c2194","status":"passed","time":{"start":1732094109534,"stop":1732094128080,"duration":18546}},{"uid":"cf54f967c0fca102","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/cf54f967c0fca102","status":"passed","time":{"start":1732055595148,"stop":1732055614043,"duration":18895}},{"uid":"76e3bbd66bcdfa55","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/76e3bbd66bcdfa55","status":"passed","time":{"start":1732052242215,"stop":1732052261095,"duration":18880}},{"uid":"a8cec477c20382fa","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/a8cec477c20382fa","status":"passed","time":{"start":1732047767657,"stop":1732047786535,"duration":18878}},{"uid":"60216adfc9a58c0f","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/60216adfc9a58c0f","status":"passed","time":{"start":1732043149176,"stop":1732043167623,"duration":18447}},{"uid":"b81b83e439c4ea3f","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/b81b83e439c4ea3f","status":"passed","time":{"start":1732031065234,"stop":1732031089105,"duration":23871}},{"uid":"15710d3f94c557c2","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/15710d3f94c557c2","status":"passed","time":{"start":1732014312682,"stop":1732014331352,"duration":18670}},{"uid":"bd40f027ccae1faa","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/bd40f027ccae1faa","status":"passed","time":{"start":1732014312682,"stop":1732014331352,"duration":18670}},{"uid":"9922b5610fe31e76","reportUrl":"https://golioth.github.io/allure-reports/branch/1779//#testresult/9922b5610fe31e76","status":"passed","time":{"start":1732014312682,"stop":1732014331352,"duration":18670}},{"uid":"c32a88fb58b10f7e","reportUrl":"https://golioth.github.io/allure-reports/branch/1774//#testresult/c32a88fb58b10f7e","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1732000492817,"stop":1732000492817,"duration":0}},{"uid":"876205405360f2ce","reportUrl":"https://golioth.github.io/allure-reports/branch/1776//#testresult/876205405360f2ce","status":"passed","time":{"start":1731969772880,"stop":1731969791686,"duration":18806}},{"uid":"d82ab64452927b88","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/d82ab64452927b88","status":"passed","time":{"start":1731963524922,"stop":1731963543887,"duration":18965}},{"uid":"bc8fc854087d300","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/bc8fc854087d300","status":"passed","time":{"start":1731962075692,"stop":1731962094725,"duration":19033}},{"uid":"568bd40a971a2ae3","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/568bd40a971a2ae3","status":"passed","time":{"start":1731957712729,"stop":1731957731978,"duration":19249}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"6d205f38e20b1164.json","parameterValues":["'nrf52840dk'","'zephyr'"]}