{"uid":"33dc151e4647caa1","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"467e555cbdae75d46aefa9c64cb6440a","time":{"start":1732202072635,"stop":1732202185286,"duration":112651},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff859677d0>\ndevice = <golioth.golioth.Device object at 0xffff85942dd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":7,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732202057740,"stop":1732202057740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732202057741,"stop":1732202057741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732202057741,"stop":1732202057741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732202057742,"stop":1732202057742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732202057742,"stop":1732202057743,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732202057743,"stop":1732202057745,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732202057746,"stop":1732202057746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732202057746,"stop":1732202057746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732202057747,"stop":1732202058252,"duration":505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732202058253,"stop":1732202059262,"duration":1009},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732202059262,"stop":1732202071981,"duration":12719},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732202071981,"stop":1732202072632,"duration":651},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff859677d0>\ndevice = <golioth.golioth.Device object at 0xffff85942dd0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9e05fbf34b007b96","name":"log","source":"9e05fbf34b007b96.txt","type":"text/plain","size":24534}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732202185634,"stop":1732202185895,"duration":261},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732202185897,"stop":1732202186330,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732202186333,"stop":1732202186335,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732202186340,"stop":1732202186340,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d88d6c14982d"},{"name":"thread","value":"586-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"425a47eabcef3930","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732201940235,"stop":1732202052997,"duration":112762}},{"uid":"efd6f5e917d694e2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732194745099,"stop":1732194857849,"duration":112750}},{"uid":"903136cb99974f9a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732194613210,"stop":1732194725953,"duration":112743}},{"uid":"3fc6200474366f88","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732188657804,"stop":1732188770562,"duration":112758}},{"uid":"e30fb0aa4f7b5da8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732188525994,"stop":1732188638696,"duration":112702}},{"uid":"344eb6dd4f2f865e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732150188388,"stop":1732150301201,"duration":112813}},{"uid":"3a6ce25573d54e68","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732149853780,"stop":1732149966647,"duration":112867}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":51,"unknown":0,"total":60},"items":[{"uid":"e15f43dd0d100a81","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/e15f43dd0d100a81","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732200422187,"stop":1732200534982,"duration":112795}},{"uid":"d22d7063ba0cbc24","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d22d7063ba0cbc24","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732198528662,"stop":1732198641513,"duration":112851}},{"uid":"d2e7f811a2dd008f","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/d2e7f811a2dd008f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732194745099,"stop":1732194857849,"duration":112750}},{"uid":"773cea71267543a3","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/773cea71267543a3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732193095625,"stop":1732193208491,"duration":112866}},{"uid":"8c535d52f9d4a989","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/8c535d52f9d4a989","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732188657804,"stop":1732188770562,"duration":112758}},{"uid":"5362e273de6f0dad","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/5362e273de6f0dad","status":"passed","time":{"start":1732186633331,"stop":1732186688105,"duration":54774}},{"uid":"3c7312320df3f55","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/3c7312320df3f55","status":"passed","time":{"start":1732143321338,"stop":1732143375993,"duration":54655}},{"uid":"44581d3435fdacef","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/44581d3435fdacef","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732150188388,"stop":1732150301201,"duration":112813}},{"uid":"9da51bc01c2a1e23","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/9da51bc01c2a1e23","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732148111728,"stop":1732148224554,"duration":112826}},{"uid":"cd98e6ff1d4eca66","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/cd98e6ff1d4eca66","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732145280776,"stop":1732145393536,"duration":112760}},{"uid":"1457e46939dd9637","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/1457e46939dd9637","status":"passed","time":{"start":1732143321338,"stop":1732143375993,"duration":54655}},{"uid":"9ebf90b86c435bee","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/9ebf90b86c435bee","status":"passed","time":{"start":1732135292075,"stop":1732135346693,"duration":54618}},{"uid":"7b0126c067d71461","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/7b0126c067d71461","status":"passed","time":{"start":1732045262745,"stop":1732045318407,"duration":55662}},{"uid":"80740eaf2569ef7e","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/80740eaf2569ef7e","status":"passed","time":{"start":1732045262745,"stop":1732045318407,"duration":55662}},{"uid":"bd79b75eeebe72f7","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/bd79b75eeebe72f7","status":"passed","time":{"start":1732127280598,"stop":1732127334697,"duration":54099}},{"uid":"da3526d1b74c741b","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/da3526d1b74c741b","status":"passed","time":{"start":1732124480570,"stop":1732124533904,"duration":53334}},{"uid":"b0db76cc7539f52f","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/b0db76cc7539f52f","status":"passed","time":{"start":1732045262745,"stop":1732045318407,"duration":55662}},{"uid":"80d66c1181263f6d","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/80d66c1181263f6d","status":"passed","time":{"start":1732049020143,"stop":1732049073882,"duration":53739}},{"uid":"b2fdf7f5793c9ffa","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/b2fdf7f5793c9ffa","status":"passed","time":{"start":1732049020143,"stop":1732049073882,"duration":53739}},{"uid":"e492862c47e468a3","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/e492862c47e468a3","status":"passed","time":{"start":1732049020143,"stop":1732049073882,"duration":53739}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"33dc151e4647caa1.json","parameterValues":["'rak5010'","'zephyr'"]}