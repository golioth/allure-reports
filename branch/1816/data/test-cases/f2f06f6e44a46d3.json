{"uid":"f2f06f6e44a46d3","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1732221422927,"stop":1732221422927,"duration":0},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732221422931,"stop":1732221422931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732221422932,"stop":1732221422932,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732221422932,"stop":1732221422933,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732221422933,"stop":1732221422934,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732221422933,"stop":1732221422933,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732221422934,"stop":1732221422936,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732221422937,"stop":1732221422937,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732221422937,"stop":1732221422937,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732221422938,"stop":1732221423368,"duration":430},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732221423369,"stop":1732221424291,"duration":922},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732221424292,"stop":1732221426999,"duration":2707},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","steps":[],"attachments":[{"uid":"392f79ebfc45d357","name":"log","source":"392f79ebfc45d357.txt","type":"text/plain","size":9359}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1732221427262,"stop":1732221427668,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732221427670,"stop":1732221427672,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732221427677,"stop":1732221427677,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5490ed00283a"},{"name":"thread","value":"453-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4cff03f2fcc8caf","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221413917,"stop":1732221413917,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":8,"skipped":0,"passed":51,"unknown":0,"total":65},"items":[{"uid":"80e2c0b06838994e","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/80e2c0b06838994e","status":"passed","time":{"start":1732216919244,"stop":1732216943491,"duration":24247}},{"uid":"52620f8b5eb41986","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/52620f8b5eb41986","status":"passed","time":{"start":1732197179176,"stop":1732197202288,"duration":23112}},{"uid":"3205121d8fffd556","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/3205121d8fffd556","status":"passed","time":{"start":1732210301275,"stop":1732210325960,"duration":24685}},{"uid":"80291ef15a4d295c","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/80291ef15a4d295c","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1732209367906,"stop":1732209391641,"duration":23735}},{"uid":"397f186389866129","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/397f186389866129","status":"passed","time":{"start":1732147947695,"stop":1732147971834,"duration":24139}},{"uid":"1b609fab341491ce","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/1b609fab341491ce","status":"passed","time":{"start":1732197179176,"stop":1732197202288,"duration":23112}},{"uid":"7f2ae8887fd5a80b","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/7f2ae8887fd5a80b","status":"passed","time":{"start":1732148807497,"stop":1732148832478,"duration":24981}},{"uid":"1d0da3ae8994cb27","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/1d0da3ae8994cb27","status":"passed","time":{"start":1732147947695,"stop":1732147971834,"duration":24139}},{"uid":"8a747a85fcadf114","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/8a747a85fcadf114","status":"passed","time":{"start":1732197179176,"stop":1732197202288,"duration":23112}},{"uid":"5be42d80ec25e7c9","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/5be42d80ec25e7c9","status":"passed","time":{"start":1732148807497,"stop":1732148832478,"duration":24981}},{"uid":"8be657dee6272882","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/8be657dee6272882","status":"passed","time":{"start":1732147947695,"stop":1732147971834,"duration":24139}},{"uid":"79132a1b128f921b","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/79132a1b128f921b","status":"passed","time":{"start":1732148807497,"stop":1732148832478,"duration":24981}},{"uid":"e59ad7719be96e74","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/e59ad7719be96e74","status":"passed","time":{"start":1732147947695,"stop":1732147971834,"duration":24139}},{"uid":"780f51d065458b6f","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/780f51d065458b6f","status":"passed","time":{"start":1732154033671,"stop":1732154054289,"duration":20618}},{"uid":"82be01daa52f1ad5","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/82be01daa52f1ad5","status":"passed","time":{"start":1732148807497,"stop":1732148832478,"duration":24981}},{"uid":"1fdf5e31443e078d","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/1fdf5e31443e078d","status":"passed","time":{"start":1732147947695,"stop":1732147971834,"duration":24139}},{"uid":"2c6e6ba8c664d48c","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/2c6e6ba8c664d48c","status":"passed","time":{"start":1732135594962,"stop":1732135615364,"duration":20402}},{"uid":"1071e2d556684934","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/1071e2d556684934","status":"passed","time":{"start":1732135638837,"stop":1732135661217,"duration":22380}},{"uid":"8339b718c815b444","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/8339b718c815b444","status":"passed","time":{"start":1732132890259,"stop":1732132914129,"duration":23870}},{"uid":"27212b1f3d8f4d2a","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/27212b1f3d8f4d2a","status":"passed","time":{"start":1732127018839,"stop":1732127039611,"duration":20772}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f2f06f6e44a46d3.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}