{"uid":"167bd39f80bc2fac","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1732221357593,"stop":1732221357593,"duration":0},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_logging>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732221357596,"stop":1732221357596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732221357596,"stop":1732221357596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732221357597,"stop":1732221357597,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732221357597,"stop":1732221357597,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732221357598,"stop":1732221357600,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732221357598,"stop":1732221357598,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732221357601,"stop":1732221357601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732221357602,"stop":1732221357602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732221357602,"stop":1732221358003,"duration":401},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732221358003,"stop":1732221358826,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732221358827,"stop":1732221361534,"duration":2707},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_logging>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","steps":[],"attachments":[{"uid":"988478369558bfc6","name":"log","source":"988478369558bfc6.txt","type":"text/plain","size":9362}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1732221361803,"stop":1732221362228,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732221362230,"stop":1732221362233,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732221362238,"stop":1732221362238,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5490ed00283a"},{"name":"thread","value":"361-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":4,"skipped":0,"passed":56,"unknown":0,"total":65},"items":[{"uid":"b0df9a874c1325e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/b0df9a874c1325e6","status":"passed","time":{"start":1732216580561,"stop":1732216600498,"duration":19937}},{"uid":"a2e3025364adfe87","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/a2e3025364adfe87","status":"passed","time":{"start":1732196674904,"stop":1732196692555,"duration":17651}},{"uid":"533e599f33ab6b4c","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/533e599f33ab6b4c","status":"passed","time":{"start":1732209828677,"stop":1732209851362,"duration":22685}},{"uid":"3be8a3079b55de08","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/3be8a3079b55de08","status":"passed","time":{"start":1732209045823,"stop":1732209064425,"duration":18602}},{"uid":"6626566f8a05d158","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/6626566f8a05d158","status":"passed","time":{"start":1732147506122,"stop":1732147523302,"duration":17180}},{"uid":"de9ccd99e523d313","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/de9ccd99e523d313","status":"passed","time":{"start":1732196674904,"stop":1732196692555,"duration":17651}},{"uid":"733b93a988580cd6","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/733b93a988580cd6","status":"passed","time":{"start":1732148277286,"stop":1732148298591,"duration":21305}},{"uid":"c53dcc307d025e6c","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/c53dcc307d025e6c","status":"passed","time":{"start":1732147506122,"stop":1732147523302,"duration":17180}},{"uid":"69e678510d19bd70","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/69e678510d19bd70","status":"passed","time":{"start":1732196674904,"stop":1732196692555,"duration":17651}},{"uid":"24abb4f7d5179045","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/24abb4f7d5179045","status":"passed","time":{"start":1732148277286,"stop":1732148298591,"duration":21305}},{"uid":"9364fd62d1d4e75","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/9364fd62d1d4e75","status":"passed","time":{"start":1732147506122,"stop":1732147523302,"duration":17180}},{"uid":"3a56229ae5a75ad3","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/3a56229ae5a75ad3","status":"passed","time":{"start":1732148277286,"stop":1732148298591,"duration":21305}},{"uid":"f7a2e1900c182055","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/f7a2e1900c182055","status":"passed","time":{"start":1732147506122,"stop":1732147523302,"duration":17180}},{"uid":"c150f4c987ef53e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/c150f4c987ef53e3","status":"passed","time":{"start":1732153698453,"stop":1732153713138,"duration":14685}},{"uid":"11eb2857ef5a232d","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/11eb2857ef5a232d","status":"passed","time":{"start":1732148277286,"stop":1732148298591,"duration":21305}},{"uid":"2485cb1b2efb130c","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/2485cb1b2efb130c","status":"passed","time":{"start":1732147506122,"stop":1732147523302,"duration":17180}},{"uid":"986f1bc326e63dc9","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/986f1bc326e63dc9","status":"passed","time":{"start":1732135258831,"stop":1732135275313,"duration":16482}},{"uid":"d97b2316cdc2aee4","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/d97b2316cdc2aee4","status":"passed","time":{"start":1732135164782,"stop":1732135180712,"duration":15930}},{"uid":"77f9a71dc4594560","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/77f9a71dc4594560","status":"passed","time":{"start":1732132350041,"stop":1732132368165,"duration":18124}},{"uid":"4a26d4dd473cc366","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/4a26d4dd473cc366","status":"passed","time":{"start":1732126521608,"stop":1732126544593,"duration":22985}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"167bd39f80bc2fac.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}