{
  "uid" : "c3301079460c7c0e",
  "name" : "test_cert_provisioning",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning",
  "historyId" : "458eb174ce44d77bb1e837d47827844b",
  "time" : {
    "start" : 1734606999836,
    "stop" : 1734607000080,
    "duration" : 244
  },
  "status" : "broken",
  "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'mcumgr'",
  "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f2930772aa0>\nproject = <golioth.golioth.Project object at 0x7f2930680490>\ndevice_name = 'certificate-wMuCXqoEfazweMTi'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '67640097db61987ad345e6d7', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n>       result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.10/subprocess.py:503: in run\n    with Popen(*popenargs, **kwargs) as process:\n/usr/lib/python3.10/subprocess.py:971: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: 255 args: ['mcumgr', '--conntype=udp', '--connstring=127...>\nargs = ['mcumgr', '--conntype=udp', '--connstring=127.0.0.1:1337', '--tries=3', '--timeout=2', 'fs', ...]\nexecutable = b'mcumgr', preexec_fn = None, close_fds = True, pass_fds = ()\ncwd = '/__w/golioth-firmware-sdk/golioth-firmware-sdk/twister-out/native_sim_native_64/certificate_provisioning/sample.golioth.certificate_provisioning'\nenv = None, startupinfo = None, creationflags = 0, shell = False, p2cread = -1\np2cwrite = -1, c2pread = 13, c2pwrite = 14, errread = 15, errwrite = 16\nrestore_signals = True, gid = None, gids = None, uid = None, umask = -1\nstart_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _posixsubprocess.fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        gid, gids, uid, umask,\n                        preexec_fn)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                child_exec_never_called = (err_msg == \"noexec\")\n                if child_exec_never_called:\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n>               raise child_exception_type(errno_num, err_msg, err_filename)\nE               FileNotFoundError: [Errno 2] No such file or directory: 'mcumgr'\n\n/usr/lib/python3.10/subprocess.py:1863: FileNotFoundError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "project",
    "time" : {
      "start" : 1734606999353,
      "stop" : 1734606999688,
      "duration" : 335
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734606999352,
      "stop" : 1734606999352,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734606999352,
      "stop" : 1734606999352,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "mcumgr_conn_args",
    "time" : {
      "start" : 1734606999835,
      "stop" : 1734606999835,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734606999352,
      "stop" : 1734606999352,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734606999352,
      "stop" : 1734606999352,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734606999688,
      "stop" : 1734606999689,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "certificate_cred",
    "time" : {
      "start" : 1734606999689,
      "stop" : 1734606999823,
      "duration" : 134
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734606999826,
      "stop" : 1734606999835,
      "duration" : 9
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734606999352,
      "stop" : 1734606999352,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734606999823,
      "stop" : 1734606999826,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734606999352,
      "stop" : 1734606999353,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734606999352,
      "stop" : 1734606999352,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'mcumgr'",
    "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f2930772aa0>\nproject = <golioth.golioth.Project object at 0x7f2930680490>\ndevice_name = 'certificate-wMuCXqoEfazweMTi'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '67640097db61987ad345e6d7', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n>       result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.10/subprocess.py:503: in run\n    with Popen(*popenargs, **kwargs) as process:\n/usr/lib/python3.10/subprocess.py:971: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: 255 args: ['mcumgr', '--conntype=udp', '--connstring=127...>\nargs = ['mcumgr', '--conntype=udp', '--connstring=127.0.0.1:1337', '--tries=3', '--timeout=2', 'fs', ...]\nexecutable = b'mcumgr', preexec_fn = None, close_fds = True, pass_fds = ()\ncwd = '/__w/golioth-firmware-sdk/golioth-firmware-sdk/twister-out/native_sim_native_64/certificate_provisioning/sample.golioth.certificate_provisioning'\nenv = None, startupinfo = None, creationflags = 0, shell = False, p2cread = -1\np2cwrite = -1, c2pread = 13, c2pwrite = 14, errread = 15, errwrite = 16\nrestore_signals = True, gid = None, gids = None, uid = None, umask = -1\nstart_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _posixsubprocess.fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        gid, gids, uid, umask,\n                        preexec_fn)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                child_exec_never_called = (err_msg == \"noexec\")\n                if child_exec_never_called:\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n>               raise child_exception_type(errno_num, err_msg, err_filename)\nE               FileNotFoundError: [Errno 2] No such file or directory: 'mcumgr'\n\n/usr/lib/python3.10/subprocess.py:1863: FileNotFoundError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "57f331332b2da243",
      "name" : "log",
      "source" : "57f331332b2da243.txt",
      "type" : "text/plain",
      "size" : 13983
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1734607001007,
      "stop" : 1734607001008,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "device_name::0",
    "time" : {
      "start" : 1734607000834,
      "stop" : 1734607001006,
      "duration" : 172
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "certificate_cred::0",
    "time" : {
      "start" : 1734607000719,
      "stop" : 1734607000833,
      "duration" : 114
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734607000205,
      "stop" : 1734607000719,
      "duration" : 514
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734607001008,
      "stop" : 1734607001008,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "native_sim_64"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.native_sim_64"
  }, {
    "name" : "tag",
    "value" : "GitHub Actions 7"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "b41d4cc898d8"
  }, {
    "name" : "thread",
    "value" : "42837-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'native_sim_64'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 33,
        "unknown" : 0,
        "total" : 35
      },
      "items" : [ {
        "uid" : "d8b08dfd9c4bf755",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1958/#testresult/d8b08dfd9c4bf755",
        "status" : "passed",
        "time" : {
          "start" : 1734587462500,
          "stop" : 1734587479130,
          "duration" : 16630
        }
      }, {
        "uid" : "1ec4284b288d57ee",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1956/#testresult/1ec4284b288d57ee",
        "status" : "passed",
        "time" : {
          "start" : 1734554288538,
          "stop" : 1734554305373,
          "duration" : 16835
        }
      }, {
        "uid" : "db374fb9ca6806db",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1954/#testresult/db374fb9ca6806db",
        "status" : "passed",
        "time" : {
          "start" : 1734551149530,
          "stop" : 1734551166269,
          "duration" : 16739
        }
      }, {
        "uid" : "744ece43b3e578aa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1952/#testresult/744ece43b3e578aa",
        "status" : "passed",
        "time" : {
          "start" : 1734534326177,
          "stop" : 1734534342989,
          "duration" : 16812
        }
      }, {
        "uid" : "c373d7d714244508",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/c373d7d714244508",
        "status" : "passed",
        "time" : {
          "start" : 1734455396047,
          "stop" : 1734455412869,
          "duration" : 16822
        }
      }, {
        "uid" : "4eeab95240481dd6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/4eeab95240481dd6",
        "status" : "passed",
        "time" : {
          "start" : 1734455396047,
          "stop" : 1734455412869,
          "duration" : 16822
        }
      }, {
        "uid" : "bda3c8dd8fb65bea",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/bda3c8dd8fb65bea",
        "status" : "passed",
        "time" : {
          "start" : 1734455396047,
          "stop" : 1734455412869,
          "duration" : 16822
        }
      }, {
        "uid" : "67937bd69fac1e23",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1947/#testresult/67937bd69fac1e23",
        "status" : "passed",
        "time" : {
          "start" : 1734450030278,
          "stop" : 1734450046951,
          "duration" : 16673
        }
      }, {
        "uid" : "a212baeed3d2dac2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1945/#testresult/a212baeed3d2dac2",
        "status" : "passed",
        "time" : {
          "start" : 1734441459273,
          "stop" : 1734441476124,
          "duration" : 16851
        }
      }, {
        "uid" : "6a03ff78c35104fa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/6a03ff78c35104fa",
        "status" : "passed",
        "time" : {
          "start" : 1734376397943,
          "stop" : 1734376414864,
          "duration" : 16921
        }
      }, {
        "uid" : "8de5413ea03a9cdd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/8de5413ea03a9cdd",
        "status" : "passed",
        "time" : {
          "start" : 1734376397943,
          "stop" : 1734376414864,
          "duration" : 16921
        }
      }, {
        "uid" : "cab16b4884cbad75",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/41/#testresult/cab16b4884cbad75",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
        "time" : {
          "start" : 1734237000341,
          "stop" : 1734237006586,
          "duration" : 6245
        }
      }, {
        "uid" : "6cd6c5bb433c2f01",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/6cd6c5bb433c2f01",
        "status" : "passed",
        "time" : {
          "start" : 1734125987299,
          "stop" : 1734126003890,
          "duration" : 16591
        }
      }, {
        "uid" : "6dd52ca7ec838f6d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/6dd52ca7ec838f6d",
        "status" : "passed",
        "time" : {
          "start" : 1734043581711,
          "stop" : 1734043598227,
          "duration" : 16516
        }
      }, {
        "uid" : "e12159f5d8055313",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/e12159f5d8055313",
        "status" : "passed",
        "time" : {
          "start" : 1734042621443,
          "stop" : 1734042638259,
          "duration" : 16816
        }
      }, {
        "uid" : "6d03ca746869ddcf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/6d03ca746869ddcf",
        "status" : "passed",
        "time" : {
          "start" : 1734022422423,
          "stop" : 1734022439050,
          "duration" : 16627
        }
      }, {
        "uid" : "8fd3745cbd40de20",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/8fd3745cbd40de20",
        "status" : "passed",
        "time" : {
          "start" : 1734017112929,
          "stop" : 1734017129495,
          "duration" : 16566
        }
      }, {
        "uid" : "6cc7765fc3dcda56",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/6cc7765fc3dcda56",
        "status" : "passed",
        "time" : {
          "start" : 1734016904202,
          "stop" : 1734016921071,
          "duration" : 16869
        }
      }, {
        "uid" : "216d8168d644a46b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/216d8168d644a46b",
        "status" : "passed",
        "time" : {
          "start" : 1733937027156,
          "stop" : 1733937043974,
          "duration" : 16818
        }
      }, {
        "uid" : "2e2fc9b04e8e06af",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/2e2fc9b04e8e06af",
        "status" : "passed",
        "time" : {
          "start" : 1733958033028,
          "stop" : 1733958049680,
          "duration" : 16652
        }
      } ]
    },
    "tags" : [ "native_sim_64", "anyio", "GitHub Actions 7", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "c3301079460c7c0e.json",
  "parameterValues" : [ "'native_sim_64'", "'zephyr'" ]
}