{
  "uid" : "b3ea65b8cee189f0",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "3038e6d5fffa4527a437bf078474dadf",
  "time" : {
    "start" : 1736284448872,
    "stop" : 1736284496425,
    "duration" : 47553
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff4a5d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff90158d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6ae10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6bdd0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae8d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae890>])",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8ff49f50>\ndevice = <golioth.golioth.Device object at 0xffff9019e1d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff4a5d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff90158d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6ae10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6bdd0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae8d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae890>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1736284433681,
      "stop" : 1736284433681,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1736284448229,
      "stop" : 1736284448869,
      "duration" : 640
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1736284433682,
      "stop" : 1736284433682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1736284433681,
      "stop" : 1736284433681,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1736284433690,
      "stop" : 1736284433690,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1736284433688,
      "stop" : 1736284433688,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1736284433683,
      "stop" : 1736284433683,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1736284435178,
      "stop" : 1736284448228,
      "duration" : 13050
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1736284433691,
      "stop" : 1736284434259,
      "duration" : 568
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1736284434259,
      "stop" : 1736284435177,
      "duration" : 918
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1736284433682,
      "stop" : 1736284433682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1736284433684,
      "stop" : 1736284433687,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff4a5d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff90158d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6ae10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6bdd0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae8d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae890>])",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff8ff49f50>\ndevice = <golioth.golioth.Device object at 0xffff9019e1d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff4a5d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff90158d90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6ae10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8ff6bdd0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae8d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff8fdae890>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a6cb7e05d9f75eba",
      "name" : "log",
      "source" : "a6cb7e05d9f75eba.txt",
      "type" : "text/plain",
      "size" : 27658
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1736284496621,
      "stop" : 1736284496803,
      "duration" : 182
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1736284497186,
      "stop" : 1736284497189,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1736284496805,
      "stop" : 1736284497184,
      "duration" : 379
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1736284497194,
      "stop" : 1736284497194,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "rak5010"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.rak5010"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "fc19283af8d6"
  }, {
    "name" : "thread",
    "value" : "376-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'rak5010'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 25,
        "unknown" : 0,
        "total" : 26
      },
      "items" : [ {
        "uid" : "57243a081a769bbe",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/26/#testresult/57243a081a769bbe",
        "status" : "passed",
        "time" : {
          "start" : 1736283439249,
          "stop" : 1736283487833,
          "duration" : 48584
        }
      }, {
        "uid" : "fb402ff00a9ae23",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/25//#testresult/fb402ff00a9ae23",
        "status" : "passed",
        "time" : {
          "start" : 1736275592217,
          "stop" : 1736275640420,
          "duration" : 48203
        }
      }, {
        "uid" : "5557b63f03a9ae14",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/24/#testresult/5557b63f03a9ae14",
        "status" : "passed",
        "time" : {
          "start" : 1736270362689,
          "stop" : 1736270393918,
          "duration" : 31229
        }
      }, {
        "uid" : "b4efa8be7bf40f57",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1/#testresult/b4efa8be7bf40f57",
        "status" : "passed",
        "time" : {
          "start" : 1736223859024,
          "stop" : 1736223886384,
          "duration" : 27360
        }
      }, {
        "uid" : "401d2bb32f04efde",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/401d2bb32f04efde",
        "status" : "passed",
        "time" : {
          "start" : 1736206776483,
          "stop" : 1736206825033,
          "duration" : 48550
        }
      }, {
        "uid" : "d9f33010fad52f2c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/20/#testresult/d9f33010fad52f2c",
        "status" : "passed",
        "time" : {
          "start" : 1736206776483,
          "stop" : 1736206825033,
          "duration" : 48550
        }
      }, {
        "uid" : "966fe84159c9895",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/13/#testresult/966fe84159c9895",
        "status" : "passed",
        "time" : {
          "start" : 1735946533648,
          "stop" : 1735946582069,
          "duration" : 48421
        }
      }, {
        "uid" : "169393f8d705c7cb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/169393f8d705c7cb",
        "status" : "passed",
        "time" : {
          "start" : 1735926249368,
          "stop" : 1735926276122,
          "duration" : 26754
        }
      }, {
        "uid" : "4a89f1cffd5ed67c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/12/#testresult/4a89f1cffd5ed67c",
        "status" : "passed",
        "time" : {
          "start" : 1735930810498,
          "stop" : 1735930858780,
          "duration" : 48282
        }
      }, {
        "uid" : "a39f82926b211d43",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/10/#testresult/a39f82926b211d43",
        "status" : "passed",
        "time" : {
          "start" : 1735926249368,
          "stop" : 1735926276122,
          "duration" : 26754
        }
      }, {
        "uid" : "7eb0d87c69b8a33",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/9/#testresult/7eb0d87c69b8a33",
        "status" : "passed",
        "time" : {
          "start" : 1735923160947,
          "stop" : 1735923208961,
          "duration" : 48014
        }
      }, {
        "uid" : "dbe3fbfee0d7d586",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/5/#testresult/dbe3fbfee0d7d586",
        "status" : "passed",
        "time" : {
          "start" : 1735861217149,
          "stop" : 1735861265018,
          "duration" : 47869
        }
      }, {
        "uid" : "3fe5d7d7832b4809",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/4/#testresult/3fe5d7d7832b4809",
        "status" : "passed",
        "time" : {
          "start" : 1735858932796,
          "stop" : 1735858981496,
          "duration" : 48700
        }
      }, {
        "uid" : "d64db7aee3463325",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/3/#testresult/d64db7aee3463325",
        "status" : "passed",
        "time" : {
          "start" : 1735851396131,
          "stop" : 1735851445069,
          "duration" : 48938
        }
      }, {
        "uid" : "a3847eb0a7eec593",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/2000/#testresult/a3847eb0a7eec593",
        "status" : "passed",
        "time" : {
          "start" : 1735846539730,
          "stop" : 1735846588536,
          "duration" : 48806
        }
      }, {
        "uid" : "d5f939254711ac86",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1999/#testresult/d5f939254711ac86",
        "status" : "passed",
        "time" : {
          "start" : 1735845392653,
          "stop" : 1735845441584,
          "duration" : 48931
        }
      }, {
        "uid" : "2e2e6b4ad8245ec4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1997/#testresult/2e2e6b4ad8245ec4",
        "status" : "passed",
        "time" : {
          "start" : 1735836366841,
          "stop" : 1735836415035,
          "duration" : 48194
        }
      }, {
        "uid" : "fec8c2fb7fe9f6a0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1993/#testresult/fec8c2fb7fe9f6a0",
        "status" : "passed",
        "time" : {
          "start" : 1735832264404,
          "stop" : 1735832312705,
          "duration" : 48301
        }
      }, {
        "uid" : "7efa2e51f9488adf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1992/#testresult/7efa2e51f9488adf",
        "status" : "passed",
        "time" : {
          "start" : 1735827950468,
          "stop" : 1735827999406,
          "duration" : 48938
        }
      }, {
        "uid" : "b8416e985a4bb2c4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1989/#testresult/b8416e985a4bb2c4",
        "status" : "passed",
        "time" : {
          "start" : 1735676895055,
          "stop" : 1735676944397,
          "duration" : 49342
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "rak5010", "zephyr" ]
  },
  "source" : "b3ea65b8cee189f0.json",
  "parameterValues" : [ "'rak5010'", "'zephyr'" ]
}