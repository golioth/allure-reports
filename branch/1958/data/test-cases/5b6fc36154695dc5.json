{
  "uid" : "5b6fc36154695dc5",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "1ec1936b7990a0542c6cd1098cc4bb62",
  "time" : {
    "start" : 1734591730250,
    "stop" : 1734591823533,
    "duration" : 93283
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7d7ebc90>\ndevice = <golioth.golioth.Device object at 0xffff7d80b010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1734591700685,
      "stop" : 1734591700685,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734591700682,
      "stop" : 1734591700684,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734591700685,
      "stop" : 1734591700685,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734591700681,
      "stop" : 1734591700681,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734591700680,
      "stop" : 1734591700680,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734591700686,
      "stop" : 1734591701205,
      "duration" : 519
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734591700679,
      "stop" : 1734591700679,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734591729182,
      "stop" : 1734591730244,
      "duration" : 1062
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734591701205,
      "stop" : 1734591702052,
      "duration" : 847
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734591700680,
      "stop" : 1734591700680,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734591700681,
      "stop" : 1734591700681,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734591702053,
      "stop" : 1734591729181,
      "duration" : 27128
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffff7d7ebc90>\ndevice = <golioth.golioth.Device object at 0xffff7d80b010>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8c4f8e08e8cea359",
      "name" : "log",
      "source" : "8c4f8e08e8cea359.txt",
      "type" : "text/plain",
      "size" : 18001
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734591824193,
      "stop" : 1734591824193,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734591824186,
      "stop" : 1734591824188,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734591823799,
      "stop" : 1734591824184,
      "duration" : 385
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734591823789,
      "stop" : 1734591823797,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "00c348b2fee2"
  }, {
    "name" : "thread",
    "value" : "798-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 27,
        "unknown" : 0,
        "total" : 36
      },
      "items" : [ {
        "uid" : "5db300002228ddc9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1956/#testresult/5db300002228ddc9",
        "status" : "passed",
        "time" : {
          "start" : 1734560233907,
          "stop" : 1734560245160,
          "duration" : 11253
        }
      }, {
        "uid" : "c0a722359fc16d2e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1954/#testresult/c0a722359fc16d2e",
        "status" : "passed",
        "time" : {
          "start" : 1734555795939,
          "stop" : 1734555823232,
          "duration" : 27293
        }
      }, {
        "uid" : "890bd5bf4e8ab28e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1952/#testresult/890bd5bf4e8ab28e",
        "status" : "passed",
        "time" : {
          "start" : 1734538679029,
          "stop" : 1734538689371,
          "duration" : 10342
        }
      }, {
        "uid" : "8f9b68443a7b2fc6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/8f9b68443a7b2fc6",
        "status" : "passed",
        "time" : {
          "start" : 1734466040709,
          "stop" : 1734466064695,
          "duration" : 23986
        }
      }, {
        "uid" : "abebd7ccea835d69",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/abebd7ccea835d69",
        "status" : "passed",
        "time" : {
          "start" : 1734459796078,
          "stop" : 1734459807712,
          "duration" : 11634
        }
      }, {
        "uid" : "fac33799e9975df8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1948/#testresult/fac33799e9975df8",
        "status" : "passed",
        "time" : {
          "start" : 1734459796078,
          "stop" : 1734459807712,
          "duration" : 11634
        }
      }, {
        "uid" : "7a5c80fba1122f3d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1947/#testresult/7a5c80fba1122f3d",
        "status" : "passed",
        "time" : {
          "start" : 1734454798354,
          "stop" : 1734454833381,
          "duration" : 35027
        }
      }, {
        "uid" : "9d2ad0fee5d382f2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1945/#testresult/9d2ad0fee5d382f2",
        "status" : "passed",
        "time" : {
          "start" : 1734448918970,
          "stop" : 1734448938989,
          "duration" : 20019
        }
      }, {
        "uid" : "ad434457de335bb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/ad434457de335bb",
        "status" : "passed",
        "time" : {
          "start" : 1734413964771,
          "stop" : 1734413975898,
          "duration" : 11127
        }
      }, {
        "uid" : "a4686c3b4468e873",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/a4686c3b4468e873",
        "status" : "passed",
        "time" : {
          "start" : 1734380350080,
          "stop" : 1734380361976,
          "duration" : 11896
        }
      }, {
        "uid" : "b9ef39469ebcc4cf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/40/#testresult/b9ef39469ebcc4cf",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734238042089,
          "stop" : 1734238042089,
          "duration" : 0
        }
      }, {
        "uid" : "4e75d44f88345bc7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/4e75d44f88345bc7",
        "status" : "passed",
        "time" : {
          "start" : 1734130045318,
          "stop" : 1734130056937,
          "duration" : 11619
        }
      }, {
        "uid" : "346695cc09c3c0f2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/346695cc09c3c0f2",
        "status" : "passed",
        "time" : {
          "start" : 1734050328363,
          "stop" : 1734050357641,
          "duration" : 29278
        }
      }, {
        "uid" : "9445e6c2535b9151",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/9445e6c2535b9151",
        "status" : "passed",
        "time" : {
          "start" : 1734046534079,
          "stop" : 1734046570116,
          "duration" : 36037
        }
      }, {
        "uid" : "64616ad0800d8234",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/64616ad0800d8234",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734035189713,
          "stop" : 1734035189713,
          "duration" : 0
        }
      }, {
        "uid" : "ee2a84b47ff7d85a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/ee2a84b47ff7d85a",
        "status" : "passed",
        "time" : {
          "start" : 1734031281478,
          "stop" : 1734031309737,
          "duration" : 28259
        }
      }, {
        "uid" : "e70ea61d567bc1da",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/e70ea61d567bc1da",
        "status" : "passed",
        "time" : {
          "start" : 1734027441415,
          "stop" : 1734027474965,
          "duration" : 33550
        }
      }, {
        "uid" : "9ac59cc85cdda40e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/9ac59cc85cdda40e",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734026722316,
          "stop" : 1734026815484,
          "duration" : 93168
        }
      }, {
        "uid" : "5b288edf13f20add",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/5b288edf13f20add",
        "status" : "passed",
        "time" : {
          "start" : 1733948045761,
          "stop" : 1733948058851,
          "duration" : 13090
        }
      }, {
        "uid" : "3aadea08644eacad",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/3aadea08644eacad",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733963188550,
          "stop" : 1733963281861,
          "duration" : 93311
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "5b6fc36154695dc5.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}