{"uid":"d4bfc3a951b4b3f7","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1731971099722,"stop":1731971122339,"duration":22617},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa4469dd0>\ndevice = <golioth.golioth.Device object at 0xffffa4478f10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731971081750,"stop":1731971081750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731971081751,"stop":1731971081751,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731971081751,"stop":1731971081751,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731971081752,"stop":1731971081753,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731971081752,"stop":1731971081752,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731971081753,"stop":1731971081755,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731971081756,"stop":1731971081756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731971081756,"stop":1731971081757,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731971081757,"stop":1731971082259,"duration":502},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731971082259,"stop":1731971083293,"duration":1034},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731971083293,"stop":1731971098793,"duration":15500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731971098793,"stop":1731971099719,"duration":926},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa4469dd0>\ndevice = <golioth.golioth.Device object at 0xffffa4478f10>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"d25fae6b5d95cb7b","name":"log","source":"d25fae6b5d95cb7b.txt","type":"text/plain","size":12902}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731971122683,"stop":1731971122701,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731971122703,"stop":1731971123087,"duration":384},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731971123089,"stop":1731971123091,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731971123096,"stop":1731971123096,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"69a2ed9c1da2"},{"name":"thread","value":"469-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":2,"skipped":0,"passed":26,"unknown":0,"total":33},"items":[{"uid":"589ed2e8dc77c9dc","reportUrl":"https://golioth.github.io/allure-reports/branch/1770//#testresult/589ed2e8dc77c9dc","status":"passed","time":{"start":1731968905234,"stop":1731968929569,"duration":24335}},{"uid":"e3524a8dcfa1877b","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/e3524a8dcfa1877b","status":"passed","time":{"start":1731963137078,"stop":1731963158566,"duration":21488}},{"uid":"fb6baa38e855dadf","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/fb6baa38e855dadf","status":"passed","time":{"start":1731958798261,"stop":1731958820728,"duration":22467}},{"uid":"c647dcc586af4f8f","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/c647dcc586af4f8f","status":"passed","time":{"start":1731955445565,"stop":1731955466721,"duration":21156}},{"uid":"6e368686fdcc9171","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/6e368686fdcc9171","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731934567478,"stop":1731934567478,"duration":0}},{"uid":"e94417f284f963c2","reportUrl":"https://golioth.github.io/allure-reports/branch/1761//#testresult/e94417f284f963c2","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731923482640,"stop":1731923482640,"duration":0}},{"uid":"6611280fb3e37248","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/6611280fb3e37248","status":"passed","time":{"start":1731906600992,"stop":1731906622139,"duration":21147}},{"uid":"c84fc3fe13b3efc9","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/c84fc3fe13b3efc9","status":"passed","time":{"start":1731715065122,"stop":1731715088973,"duration":23851}},{"uid":"2da893bb079442ba","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/2da893bb079442ba","status":"passed","time":{"start":1731711634767,"stop":1731711657003,"duration":22236}},{"uid":"355100fdd01cb93","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/355100fdd01cb93","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731707837351,"stop":1731707859975,"duration":22624}},{"uid":"87cc5214955a8976","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/87cc5214955a8976","status":"passed","time":{"start":1731708644727,"stop":1731708665899,"duration":21172}},{"uid":"7e1676c73d9b2282","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/7e1676c73d9b2282","status":"passed","time":{"start":1731695929094,"stop":1731695951648,"duration":22554}},{"uid":"13a899aec82e3b32","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/13a899aec82e3b32","status":"passed","time":{"start":1731690263769,"stop":1731690283554,"duration":19785}},{"uid":"91b2bbb2cb689da","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/91b2bbb2cb689da","status":"passed","time":{"start":1731624869414,"stop":1731624889513,"duration":20099}},{"uid":"63ffcdb24ae64e","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/63ffcdb24ae64e","status":"passed","time":{"start":1731623063926,"stop":1731623085694,"duration":21768}},{"uid":"617e9e988476a5d5","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/617e9e988476a5d5","status":"passed","time":{"start":1731616640271,"stop":1731616662528,"duration":22257}},{"uid":"5ceaf1665a353799","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/5ceaf1665a353799","status":"passed","time":{"start":1731614386806,"stop":1731614410660,"duration":23854}},{"uid":"d4882c64972d2f5c","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/d4882c64972d2f5c","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1731611416794,"stop":1731611416794,"duration":0}},{"uid":"b9081d3ef8e830f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/b9081d3ef8e830f4","status":"passed","time":{"start":1731598688319,"stop":1731598713006,"duration":24687}},{"uid":"9c70f84e12e16124","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/9c70f84e12e16124","status":"passed","time":{"start":1731549323455,"stop":1731549344528,"duration":21073}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d4bfc3a951b4b3f7.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}