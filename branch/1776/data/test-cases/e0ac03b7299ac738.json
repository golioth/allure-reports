{"uid":"e0ac03b7299ac738","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1731971706036,"stop":1731971820500,"duration":114464},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9718110>\ndevice = <golioth.golioth.Device object at 0xffffa971af10>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffa9888590>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731971677636,"stop":1731971677637,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1731971677637,"stop":1731971677652,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731971677653,"stop":1731971677653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731971677654,"stop":1731971677657,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731971677654,"stop":1731971677654,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731971677657,"stop":1731971677658,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731971677658,"stop":1731971677658,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731971677659,"stop":1731971678144,"duration":485},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731971678145,"stop":1731971679149,"duration":1004},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731971679150,"stop":1731971704935,"duration":25785},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1731971704935,"stop":1731971706033,"duration":1098},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa9718110>\ndevice = <golioth.golioth.Device object at 0xffffa971af10>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffa9888590>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"843970755395fefa","name":"log","source":"843970755395fefa.txt","type":"text/plain","size":16172}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1731971820823,"stop":1731971820872,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1731971820874,"stop":1731971821349,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731971821351,"stop":1731971821353,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731971821358,"stop":1731971821358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8e2f8624b8d3"},{"name":"thread","value":"415-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":5,"skipped":0,"passed":17,"unknown":0,"total":23},"items":[{"uid":"3196ac95e172c6c5","reportUrl":"https://golioth.github.io/allure-reports/branch/1769//#testresult/3196ac95e172c6c5","status":"passed","time":{"start":1731964034373,"stop":1731964064854,"duration":30481}},{"uid":"496fa0b584bd657e","reportUrl":"https://golioth.github.io/allure-reports/branch/1767//#testresult/496fa0b584bd657e","status":"passed","time":{"start":1731959016640,"stop":1731959059697,"duration":43057}},{"uid":"a8e3a07e54023dcc","reportUrl":"https://golioth.github.io/allure-reports/branch/1764//#testresult/a8e3a07e54023dcc","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731955954249,"stop":1731956067244,"duration":112995}},{"uid":"e161a4d07e55a01e","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/e161a4d07e55a01e","status":"passed","time":{"start":1731907562551,"stop":1731907611985,"duration":49434}},{"uid":"6f3e73d8af449875","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/6f3e73d8af449875","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731715906837,"stop":1731716019900,"duration":113063}},{"uid":"491aa0372460130a","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/491aa0372460130a","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1731712105665,"stop":1731712143155,"duration":37490}},{"uid":"74a13e736d14b5db","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/74a13e736d14b5db","status":"passed","time":{"start":1731709633677,"stop":1731709690009,"duration":56332}},{"uid":"da5dba8946d6716","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/da5dba8946d6716","status":"passed","time":{"start":1731709304513,"stop":1731709334463,"duration":29950}},{"uid":"19aa6a587984fcb9","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/19aa6a587984fcb9","status":"passed","time":{"start":1731697064826,"stop":1731697115741,"duration":50915}},{"uid":"9904e97e84799306","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/9904e97e84799306","status":"passed","time":{"start":1731614391148,"stop":1731614433873,"duration":42725}},{"uid":"71a71be8668eb37b","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/71a71be8668eb37b","status":"passed","time":{"start":1731596769464,"stop":1731596799747,"duration":30283}},{"uid":"ffb85c106d5a026c","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/ffb85c106d5a026c","status":"passed","time":{"start":1731549370873,"stop":1731549418679,"duration":47806}},{"uid":"a105a2be37e7de6f","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/a105a2be37e7de6f","status":"passed","time":{"start":1731544176436,"stop":1731544206004,"duration":29568}},{"uid":"2db821d21c475dfa","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/2db821d21c475dfa","status":"passed","time":{"start":1731541491700,"stop":1731541529146,"duration":37446}},{"uid":"37518f38c0456334","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/37518f38c0456334","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1731540111546,"stop":1731540224692,"duration":113146}},{"uid":"74b9c78d8c3261e7","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/74b9c78d8c3261e7","status":"passed","time":{"start":1731528093793,"stop":1731528143060,"duration":49267}},{"uid":"58886f3b748dbbe","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/58886f3b748dbbe","status":"passed","time":{"start":1731523052540,"stop":1731523102991,"duration":50451}},{"uid":"da301bf115f6f191","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/da301bf115f6f191","status":"passed","time":{"start":1731523052540,"stop":1731523102991,"duration":50451}},{"uid":"b649fcf7c3cc23f","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/b649fcf7c3cc23f","status":"passed","time":{"start":1731520812895,"stop":1731520859240,"duration":46345}},{"uid":"e7f4e4cdaae5f727","reportUrl":"https://golioth.github.io/allure-reports/branch/1725//#testresult/e7f4e4cdaae5f727","status":"passed","time":{"start":1731428911817,"stop":1731428942050,"duration":30233}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e0ac03b7299ac738.json","parameterValues":["'nrf9160dk'","'zephyr'"]}