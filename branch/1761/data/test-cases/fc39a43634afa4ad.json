{"uid":"fc39a43634afa4ad","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6fabbbcd9afd469e2e0bf8673f87e50e","time":{"start":1731922875035,"stop":1731922875035,"duration":0},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_lightdb_delete>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1731922875038,"stop":1731922875038,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1731922875039,"stop":1731922875039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1731922875039,"stop":1731922875039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1731922875040,"stop":1731922875040,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1731922875041,"stop":1731922875043,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1731922875041,"stop":1731922875041,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1731922875044,"stop":1731922875044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1731922875044,"stop":1731922875045,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1731922875045,"stop":1731922875463,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1731922875463,"stop":1731922876352,"duration":889},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1731922876353,"stop":1731922878614,"duration":2261},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 90, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","statusTrace":"item = <Function test_lightdb_delete>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        else:\n            hil_board = os.environ['hil_board']\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException","steps":[],"attachments":[{"uid":"ca94f9d92262d77f","name":"log","source":"ca94f9d92262d77f.txt","type":"text/plain","size":9437}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1731922878884,"stop":1731922879275,"duration":391},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1731922879277,"stop":1731922879279,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1731922879284,"stop":1731922879284,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"653f0aa4396f"},{"name":"thread","value":"395-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":23,"unknown":0,"total":27},"items":[{"uid":"42cf51cc193ebe2a","reportUrl":"https://golioth.github.io/allure-reports/branch/1760//#testresult/42cf51cc193ebe2a","status":"passed","time":{"start":1731905812401,"stop":1731905828638,"duration":16237}},{"uid":"3639a8c6340dff9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1756//#testresult/3639a8c6340dff9b","status":"passed","time":{"start":1731714272626,"stop":1731714289222,"duration":16596}},{"uid":"16d0a6e254b93f35","reportUrl":"https://golioth.github.io/allure-reports/branch/1755//#testresult/16d0a6e254b93f35","status":"passed","time":{"start":1731711247420,"stop":1731711264566,"duration":17146}},{"uid":"54bcafad4d450499","reportUrl":"https://golioth.github.io/allure-reports/branch/1753//#testresult/54bcafad4d450499","status":"passed","time":{"start":1731706935863,"stop":1731706951734,"duration":15871}},{"uid":"c08901a9a0a615db","reportUrl":"https://golioth.github.io/allure-reports/branch/1754//#testresult/c08901a9a0a615db","status":"passed","time":{"start":1731706923828,"stop":1731706939239,"duration":15411}},{"uid":"b9d163e4c1716833","reportUrl":"https://golioth.github.io/allure-reports/branch/1749//#testresult/b9d163e4c1716833","status":"passed","time":{"start":1731695067596,"stop":1731695082849,"duration":15253}},{"uid":"ee9ce48fcec23fb8","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/ee9ce48fcec23fb8","status":"passed","time":{"start":1731622377882,"stop":1731622393235,"duration":15353}},{"uid":"50fff9eb5f12f967","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/50fff9eb5f12f967","status":"passed","time":{"start":1731622377882,"stop":1731622393235,"duration":15353}},{"uid":"8547ae3407b7bce3","reportUrl":"https://golioth.github.io/allure-reports/branch/1747//#testresult/8547ae3407b7bce3","status":"passed","time":{"start":1731622377882,"stop":1731622393235,"duration":15353}},{"uid":"382c5b63dc94f095","reportUrl":"https://golioth.github.io/allure-reports/branch/1744//#testresult/382c5b63dc94f095","status":"passed","time":{"start":1731616313830,"stop":1731616330102,"duration":16272}},{"uid":"49992f13f7ff5a5a","reportUrl":"https://golioth.github.io/allure-reports/branch/1743//#testresult/49992f13f7ff5a5a","status":"passed","time":{"start":1731613522955,"stop":1731613538585,"duration":15630}},{"uid":"9d2c5dcf1642447c","reportUrl":"https://golioth.github.io/allure-reports/branch/1742//#testresult/9d2c5dcf1642447c","status":"passed","time":{"start":1731610588295,"stop":1731610603561,"duration":15266}},{"uid":"37432e5ed6bc9ebd","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/37432e5ed6bc9ebd","status":"passed","time":{"start":1731596933609,"stop":1731596948985,"duration":15376}},{"uid":"758a1283e5a51ef9","reportUrl":"https://golioth.github.io/allure-reports/branch/1739//#testresult/758a1283e5a51ef9","status":"passed","time":{"start":1731548676464,"stop":1731548691886,"duration":15422}},{"uid":"5761a0be0ed63866","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/5761a0be0ed63866","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731563672330,"stop":1731563672330,"duration":0}},{"uid":"e0b5df70a7eaa7dd","reportUrl":"https://golioth.github.io/allure-reports/branch/1737//#testresult/e0b5df70a7eaa7dd","status":"passed","time":{"start":1731542639336,"stop":1731542654636,"duration":15300}},{"uid":"a3d356032a3e7161","reportUrl":"https://golioth.github.io/allure-reports/branch/1733//#testresult/a3d356032a3e7161","status":"passed","time":{"start":1731539530776,"stop":1731539551096,"duration":20320}},{"uid":"99ca7a6efe0cda1c","reportUrl":"https://golioth.github.io/allure-reports/branch/1732//#testresult/99ca7a6efe0cda1c","status":"passed","time":{"start":1731536341816,"stop":1731536357258,"duration":15442}},{"uid":"ba5b6aaef456e05","reportUrl":"https://golioth.github.io/allure-reports/branch/1731//#testresult/ba5b6aaef456e05","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1731535875788,"stop":1731535875788,"duration":0}},{"uid":"1c40f8abaf8e4820","reportUrl":"https://golioth.github.io/allure-reports/branch/1730//#testresult/1c40f8abaf8e4820","status":"passed","time":{"start":1731519968047,"stop":1731519984326,"duration":16279}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"fc39a43634afa4ad.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}