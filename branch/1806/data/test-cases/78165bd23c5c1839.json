{"uid":"78165bd23c5c1839","name":"test_cert_provisioning","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning","historyId":"d3aaa9f3b54361e7a59e70881b33f3cb","time":{"start":1732204647471,"stop":1732204741938,"duration":94467},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f8c32e8d3d0>\nproject = <golioth.golioth.Project object at 0x7f8c32df0550>\ndevice_name = 'certificate-siolxJmQUWXqkpEo'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '673f5867bb6157cf6cdf4772', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732204647009,"stop":1732204647009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732204647009,"stop":1732204647009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732204647009,"stop":1732204647009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732204647009,"stop":1732204647009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732204647009,"stop":1732204647010,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732204647009,"stop":1732204647009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732204647009,"stop":1732204647009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732204647010,"stop":1732204647232,"duration":222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1732204647232,"stop":1732204647461,"duration":229},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732204647232,"stop":1732204647232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732204647461,"stop":1732204647463,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732204647463,"stop":1732204647471,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1732204647471,"stop":1732204647471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f8c32e8d3d0>\nproject = <golioth.golioth.Project object at 0x7f8c32df0550>\ndevice_name = 'certificate-siolxJmQUWXqkpEo'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '673f5867bb6157cf6cdf4772', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"893d208489e43a9e","name":"log","source":"893d208489e43a9e.txt","type":"text/plain","size":28498}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732204742059,"stop":1732204742581,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1732204742581,"stop":1732204742809,"duration":228},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1732204742809,"stop":1732204743034,"duration":225},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732204743034,"stop":1732204743035,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732204743035,"stop":1732204743035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_32"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_32"},{"name":"tag","value":"GitHub Actions 56"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8f4482c15050"},{"name":"thread","value":"27226-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_32'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":31,"unknown":0,"total":32},"items":[{"uid":"d3512116ef1a0626","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/d3512116ef1a0626","status":"passed","time":{"start":1732139475508,"stop":1732139492645,"duration":17137}},{"uid":"5c399711415709da","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/5c399711415709da","status":"passed","time":{"start":1732192096597,"stop":1732192113594,"duration":16997}},{"uid":"ce77db3ec3eaed3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/ce77db3ec3eaed3a","status":"passed","time":{"start":1732139586507,"stop":1732139603557,"duration":17050}},{"uid":"6fc37bd94535b786","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/6fc37bd94535b786","status":"passed","time":{"start":1732139475508,"stop":1732139492645,"duration":17137}},{"uid":"3cbbbcd1c05d3b7b","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/3cbbbcd1c05d3b7b","status":"passed","time":{"start":1732192096597,"stop":1732192113594,"duration":16997}},{"uid":"c18b3e60e94ea8aa","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/c18b3e60e94ea8aa","status":"passed","time":{"start":1732139586507,"stop":1732139603557,"duration":17050}},{"uid":"397070c0c74bf6b4","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/397070c0c74bf6b4","status":"passed","time":{"start":1732139475508,"stop":1732139492645,"duration":17137}},{"uid":"306de4e04048fd13","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/306de4e04048fd13","status":"passed","time":{"start":1732139586507,"stop":1732139603557,"duration":17050}},{"uid":"8b27839fbc8a123d","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/8b27839fbc8a123d","status":"passed","time":{"start":1732139475508,"stop":1732139492645,"duration":17137}},{"uid":"e6bcee354d8459ef","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/e6bcee354d8459ef","status":"passed","time":{"start":1732139189875,"stop":1732139206908,"duration":17033}},{"uid":"5e2187a1059b2023","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/5e2187a1059b2023","status":"passed","time":{"start":1732139586507,"stop":1732139603557,"duration":17050}},{"uid":"b55e65939c93310","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/b55e65939c93310","status":"passed","time":{"start":1732139475508,"stop":1732139492645,"duration":17137}},{"uid":"6f99ac7348abafe2","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/6f99ac7348abafe2","status":"passed","time":{"start":1732139313953,"stop":1732139330822,"duration":16869}},{"uid":"8473cbfad451095b","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/8473cbfad451095b","status":"passed","time":{"start":1732139189875,"stop":1732139206908,"duration":17033}},{"uid":"85877398936ea37c","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/85877398936ea37c","status":"passed","time":{"start":1732132733296,"stop":1732132750492,"duration":17196}},{"uid":"59d9fb2d24c73550","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/59d9fb2d24c73550","status":"passed","time":{"start":1732041856127,"stop":1732041873044,"duration":16917}},{"uid":"e204e5c48388b471","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/e204e5c48388b471","status":"passed","time":{"start":1732041856127,"stop":1732041873044,"duration":16917}},{"uid":"e06b9e80424b2296","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/e06b9e80424b2296","status":"passed","time":{"start":1732122496259,"stop":1732122513096,"duration":16837}},{"uid":"4b36061d3c6900df","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/4b36061d3c6900df","status":"passed","time":{"start":1732122205195,"stop":1732122222418,"duration":17223}},{"uid":"5c74d3c6d1806039","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/5c74d3c6d1806039","status":"passed","time":{"start":1732041856127,"stop":1732041873044,"duration":16917}}]},"tags":["GitHub Actions 56","anyio","native_sim_32","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"78165bd23c5c1839.json","parameterValues":["'native_sim_32'","'zephyr'"]}