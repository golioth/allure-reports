{"uid":"7d291bb6cc47ab6e","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"934caf5f97c3bf444d136e05890d35c9","time":{"start":1759785482930,"stop":1759785506198,"duration":23268},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb855b4d0>\ndevice = <golioth.golioth.Device object at 0xffffb84657f0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n>       shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\"counte r\":27}'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759785455911,"stop":1759785455912,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759785455912,"stop":1759785455912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759785455913,"stop":1759785455913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759785455913,"stop":1759785455913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759785455914,"stop":1759785455916,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759785455914,"stop":1759785455914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759785455917,"stop":1759785455918,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759785455917,"stop":1759785455917,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759785455918,"stop":1759785456387,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759785456388,"stop":1759785457076,"duration":688},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759785457077,"stop":1759785480087,"duration":23010},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759785480087,"stop":1759785482922,"duration":2835},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb855b4d0>\ndevice = <golioth.golioth.Device object at 0xffffb84657f0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n>       shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\"counte r\":27}'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"87c1b91b25179e4b","name":"log","source":"87c1b91b25179e4b.txt","type":"text/plain","size":21282}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759785506525,"stop":1759785506561,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759785506563,"stop":1759785506884,"duration":321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759785506886,"stop":1759785506888,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759785506893,"stop":1759785506893,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"285ee580d806"},{"name":"thread","value":"991-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":13,"unknown":0,"total":18},"items":[{"uid":"7acbb4f9c9509a8","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/7acbb4f9c9509a8","status":"passed","time":{"start":1759780653789,"stop":1759780682590,"duration":28801}},{"uid":"2012950b0374c792","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/2012950b0374c792","status":"passed","time":{"start":1759774502934,"stop":1759774531978,"duration":29044}},{"uid":"e7c1462f73742bb9","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/e7c1462f73742bb9","status":"passed","time":{"start":1759769703016,"stop":1759769732470,"duration":29454}},{"uid":"2eee206f5423677d","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/2eee206f5423677d","status":"passed","time":{"start":1759765756071,"stop":1759765784113,"duration":28042}},{"uid":"6907f3892523e542","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/6907f3892523e542","status":"passed","time":{"start":1759717922670,"stop":1759717950757,"duration":28087}},{"uid":"36f67c94f86ab930","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/36f67c94f86ab930","status":"passed","time":{"start":1759716527614,"stop":1759716555660,"duration":28046}},{"uid":"eee9b758e72821ed","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/eee9b758e72821ed","status":"passed","time":{"start":1759522880475,"stop":1759522908469,"duration":27994}},{"uid":"1b568cb4f7735866","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/1b568cb4f7735866","status":"passed","time":{"start":1759516013614,"stop":1759516042661,"duration":29047}},{"uid":"f8b89be50ed0ca4d","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/f8b89be50ed0ca4d","status":"passed","time":{"start":1759245451660,"stop":1759245480711,"duration":29051}},{"uid":"3d868d586fd561d9","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/3d868d586fd561d9","status":"passed","time":{"start":1759378459277,"stop":1759378487262,"duration":27985}},{"uid":"2341319b2d67c056","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/2341319b2d67c056","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759370554717,"stop":1759370566948,"duration":12231}},{"uid":"870f875c523deb5c","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/870f875c523deb5c","status":"passed","time":{"start":1759269595831,"stop":1759269628942,"duration":33111}},{"uid":"b4c50f7e93f43833","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/b4c50f7e93f43833","status":"passed","time":{"start":1759245451660,"stop":1759245480711,"duration":29051}},{"uid":"94da9ea5829b3404","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/94da9ea5829b3404","status":"passed","time":{"start":1759177716642,"stop":1759177763913,"duration":47271}},{"uid":"306625855a4ac08f","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/306625855a4ac08f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1759160763262,"stop":1759160763262,"duration":0}},{"uid":"4e4e4226adcae945","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/4e4e4226adcae945","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1759106103108,"stop":1759106103108,"duration":0}},{"uid":"70d5eb5183931a22","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/70d5eb5183931a22","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1758915160664,"stop":1758915160664,"duration":0}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","zephyr"]},"source":"7d291bb6cc47ab6e.json","parameterValues":["'nrf52840dk'","'zephyr'"]}