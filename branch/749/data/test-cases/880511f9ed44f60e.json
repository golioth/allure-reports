{"uid":"880511f9ed44f60e","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"7dfbb6db44c2ebd1f3bd3bdd6b974505","time":{"start":1759799457843,"stop":1759799487636,"duration":29793},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a41b4d0>\ndevice = <golioth.golioth.Device object at 0xffff9a12d7f0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n>       shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\"counte r\":27}'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1759799442910,"stop":1759799442910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759799442911,"stop":1759799442911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759799442912,"stop":1759799442912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759799442912,"stop":1759799442912,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759799442913,"stop":1759799442915,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759799442913,"stop":1759799442913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759799442916,"stop":1759799442917,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759799442916,"stop":1759799442916,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759799442917,"stop":1759799443426,"duration":509},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759799443426,"stop":1759799444137,"duration":711},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759799444138,"stop":1759799455472,"duration":11334},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759799455472,"stop":1759799457836,"duration":2364},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a41b4d0>\ndevice = <golioth.golioth.Device object at 0xffff9a12d7f0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n>       shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\nregex = '.*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\"counte r\":27}'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"8cb72c1811f48298","name":"log","source":"8cb72c1811f48298.txt","type":"text/plain","size":22134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759799487932,"stop":1759799488127,"duration":195},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759799488129,"stop":1759799488487,"duration":358},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759799488489,"stop":1759799488491,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759799488496,"stop":1759799488496,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"frdm_rw612"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.frdm_rw612"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"3422800a7d01"},{"name":"thread","value":"691-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'frdm_rw612'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"56f352065cea057d","status":"passed","time":{"start":1759788240851,"stop":1759788276028,"duration":35177}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":17,"unknown":0,"total":19},"items":[{"uid":"39daf691bc1e7d1a","reportUrl":"https://golioth.github.io/allure-reports/branch/749//#testresult/39daf691bc1e7d1a","status":"passed","time":{"start":1759788240851,"stop":1759788276028,"duration":35177}},{"uid":"ccfcf9a8d57edd33","reportUrl":"https://golioth.github.io/allure-reports/branch/748//#testresult/ccfcf9a8d57edd33","status":"passed","time":{"start":1759786957809,"stop":1759786983624,"duration":25815}},{"uid":"1bba3788f668d10a","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/1bba3788f668d10a","status":"passed","time":{"start":1759767032593,"stop":1759767062043,"duration":29450}},{"uid":"ef20c5aeff45b3fc","reportUrl":"https://golioth.github.io/allure-reports/branch/744//#testresult/ef20c5aeff45b3fc","status":"passed","time":{"start":1759771551204,"stop":1759771580253,"duration":29049}},{"uid":"c28dbf21f1070688","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/c28dbf21f1070688","status":"passed","time":{"start":1759767032593,"stop":1759767062043,"duration":29450}},{"uid":"f2c575b7b344f8ea","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/f2c575b7b344f8ea","status":"passed","time":{"start":1759719090870,"stop":1759719116761,"duration":25891}},{"uid":"933cac89f2305d8d","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/933cac89f2305d8d","status":"passed","time":{"start":1759718042481,"stop":1759718068321,"duration":25840}},{"uid":"628ad6932b26a536","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/628ad6932b26a536","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1759523609003,"stop":1759523644830,"duration":35827}},{"uid":"b2c811484f0f179a","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/b2c811484f0f179a","status":"passed","time":{"start":1759518262226,"stop":1759518291945,"duration":29719}},{"uid":"28fb93cf59c9eb9d","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/28fb93cf59c9eb9d","status":"passed","time":{"start":1759246364810,"stop":1759246389516,"duration":24706}},{"uid":"fbec1e2c986afb60","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/fbec1e2c986afb60","status":"passed","time":{"start":1759377574059,"stop":1759377601455,"duration":27396}},{"uid":"87ff84408bd18fe6","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/87ff84408bd18fe6","status":"passed","time":{"start":1759371099780,"stop":1759371128438,"duration":28658}},{"uid":"3bdf69a8d7ad4503","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/3bdf69a8d7ad4503","status":"passed","time":{"start":1759269442260,"stop":1759269469755,"duration":27495}},{"uid":"36b10278b8d6cc8d","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/36b10278b8d6cc8d","status":"passed","time":{"start":1759246364810,"stop":1759246389516,"duration":24706}},{"uid":"ad86d78d916f12bc","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/ad86d78d916f12bc","status":"passed","time":{"start":1759178329027,"stop":1759178358482,"duration":29455}},{"uid":"b72d30a693391799","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/b72d30a693391799","status":"passed","time":{"start":1759161662969,"stop":1759161688814,"duration":25845}},{"uid":"6b1976ea5e0484bb","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/6b1976ea5e0484bb","status":"passed","time":{"start":1759114891777,"stop":1759114920836,"duration":29059}},{"uid":"2c71a2d5e32738dd","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/2c71a2d5e32738dd","status":"passed","time":{"start":1758916486978,"stop":1758916514829,"duration":27851}}]},"tags":["anyio","frdm_rw612","mikes_testbench","zephyr"]},"source":"880511f9ed44f60e.json","parameterValues":["'frdm_rw612'","'zephyr'"]}