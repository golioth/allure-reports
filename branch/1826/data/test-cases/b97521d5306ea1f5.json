{"uid":"b97521d5306ea1f5","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"c9ae6dc826a01d1d44d52fc2bf414310","time":{"start":1732287402986,"stop":1732287496190,"duration":93204},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff97767c90>\ndevice = <golioth.golioth.Device object at 0xffff9774a510>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732287388578,"stop":1732287388578,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_psk","time":{"start":1732287388579,"stop":1732287388579,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_ssid","time":{"start":1732287388579,"stop":1732287388579,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"twister_harness_config","time":{"start":1732287388580,"stop":1732287388581,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_name","time":{"start":1732287388580,"stop":1732287388580,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object","time":{"start":1732287388581,"stop":1732287388583,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_url","time":{"start":1732287388584,"stop":1732287388585,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_key","time":{"start":1732287388584,"stop":1732287388584,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project","time":{"start":1732287388585,"stop":1732287389026,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device","time":{"start":1732287389027,"stop":1732287389861,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"dut","time":{"start":1732287389862,"stop":1732287402366,"duration":12504},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"shell","time":{"start":1732287402367,"stop":1732287402983,"duration":616},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff97767c90>\ndevice = <golioth.golioth.Device object at 0xffff9774a510>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"f377ee156e84a13b","name":"log","source":"f377ee156e84a13b.txt","type":"text/plain","size":24443}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"dut::0","time":{"start":1732287496465,"stop":1732287496510,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device::0","time":{"start":1732287496511,"stop":1732287496877,"duration":366},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project::0","time":{"start":1732287496879,"stop":1732287496882,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object::0","time":{"start":1732287496886,"stop":1732287496887,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57e748c154fb"},{"name":"thread","value":"447-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":61,"unknown":0,"total":76},"items":[{"uid":"cc3fd6e6d424891e","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/cc3fd6e6d424891e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732284092826,"stop":1732284185920,"duration":93094}},{"uid":"29e23af77e1b9f4e","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/29e23af77e1b9f4e","status":"passed","time":{"start":1732280528142,"stop":1732280567833,"duration":39691}},{"uid":"574ae0b5e6176a54","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/574ae0b5e6176a54","status":"passed","time":{"start":1732274874313,"stop":1732274913658,"duration":39345}},{"uid":"f7c105917dff62b3","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/f7c105917dff62b3","status":"passed","time":{"start":1732273646277,"stop":1732273690046,"duration":43769}},{"uid":"c23efbe5d88a64a2","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/c23efbe5d88a64a2","status":"passed","time":{"start":1732232496233,"stop":1732232548414,"duration":52181}},{"uid":"a92f49364c189cc3","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/a92f49364c189cc3","status":"passed","time":{"start":1732225633842,"stop":1732225673737,"duration":39895}},{"uid":"24adffdb7488c906","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/24adffdb7488c906","status":"passed","time":{"start":1732227946627,"stop":1732227990232,"duration":43605}},{"uid":"55e9185ffb01b8db","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/55e9185ffb01b8db","status":"passed","time":{"start":1732225633842,"stop":1732225673737,"duration":39895}},{"uid":"15d3d74e2816bf2a","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/15d3d74e2816bf2a","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'","time":{"start":1732221382109,"stop":1732221382110,"duration":1}},{"uid":"21e363417acb837","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/21e363417acb837","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732217665410,"stop":1732217758566,"duration":93156}},{"uid":"9c30bee89c7a7d96","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/9c30bee89c7a7d96","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732212026208,"stop":1732212119424,"duration":93216}},{"uid":"6b2962c436cce528","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/6b2962c436cce528","status":"passed","time":{"start":1732210588390,"stop":1732210628154,"duration":39764}},{"uid":"767faedcc5080ac6","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/767faedcc5080ac6","status":"passed","time":{"start":1732209315023,"stop":1732209356812,"duration":41789}},{"uid":"20c1fbbca49023d1","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/20c1fbbca49023d1","status":"passed","time":{"start":1732205955812,"stop":1732205996667,"duration":40855}},{"uid":"82143a56b9fca2c1","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/82143a56b9fca2c1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732203317502,"stop":1732203410739,"duration":93237}},{"uid":"90d1d107c7f67607","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/90d1d107c7f67607","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732201420807,"stop":1732201513917,"duration":93110}},{"uid":"948b0c3f56f7e2fe","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/948b0c3f56f7e2fe","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199703081,"stop":1732199796288,"duration":93207}},{"uid":"9ba3fae640043473","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/9ba3fae640043473","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732197742490,"stop":1732197835749,"duration":93259}},{"uid":"272b02d7ad09a7b9","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/272b02d7ad09a7b9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732194207205,"stop":1732194300476,"duration":93271}},{"uid":"8b17bae109c9c99c","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/8b17bae109c9c99c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192556731,"stop":1732192649816,"duration":93085}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"b97521d5306ea1f5.json","parameterValues":["'rak5010'","'zephyr'"]}