{"uid":"b2eca74747ab0c19","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6de3eafb2765c88fcbba2d44b75da8e7","time":{"start":1732287290862,"stop":1732287384468,"duration":93606},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9ceff990>\ndevice = <golioth.golioth.Device object at 0xffff9cee2090>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732287276403,"stop":1732287276403,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_ssid","time":{"start":1732287276404,"stop":1732287276404,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_name","time":{"start":1732287276405,"stop":1732287276405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_psk","time":{"start":1732287276405,"stop":1732287276405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"twister_harness_config","time":{"start":1732287276406,"stop":1732287276406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object","time":{"start":1732287276406,"stop":1732287276408,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_key","time":{"start":1732287276409,"stop":1732287276409,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project","time":{"start":1732287276410,"stop":1732287276822,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_url","time":{"start":1732287276410,"stop":1732287276410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device","time":{"start":1732287276822,"stop":1732287277637,"duration":815},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"dut","time":{"start":1732287277638,"stop":1732287290245,"duration":12607},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"shell","time":{"start":1732287290245,"stop":1732287290859,"duration":614},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9ceff990>\ndevice = <golioth.golioth.Device object at 0xffff9cee2090>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e1970d5fec269372","name":"log","source":"e1970d5fec269372.txt","type":"text/plain","size":26730}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"dut::0","time":{"start":1732287384766,"stop":1732287384879,"duration":113},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device::0","time":{"start":1732287384881,"stop":1732287385289,"duration":408},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project::0","time":{"start":1732287385291,"stop":1732287385293,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object::0","time":{"start":1732287385298,"stop":1732287385298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"57e748c154fb"},{"name":"thread","value":"427-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":61,"unknown":0,"total":76},"items":[{"uid":"2208466fac14f362","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/2208466fac14f362","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732283980492,"stop":1732284074180,"duration":93688}},{"uid":"5d73b55f54c0f605","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/5d73b55f54c0f605","status":"passed","time":{"start":1732280442364,"stop":1732280487667,"duration":45303}},{"uid":"56d428edde576db2","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/56d428edde576db2","status":"passed","time":{"start":1732274787765,"stop":1732274833781,"duration":46016}},{"uid":"94a795545e296a62","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/94a795545e296a62","status":"passed","time":{"start":1732273560253,"stop":1732273606005,"duration":45752}},{"uid":"b9345aedd4f3af9c","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/b9345aedd4f3af9c","status":"passed","time":{"start":1732232409993,"stop":1732232455644,"duration":45651}},{"uid":"1d295310e213f5f7","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/1d295310e213f5f7","status":"passed","time":{"start":1732225547635,"stop":1732225593389,"duration":45754}},{"uid":"bc44a338de313267","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/bc44a338de313267","status":"passed","time":{"start":1732227859569,"stop":1732227905974,"duration":46405}},{"uid":"8dd5bd43f80e82fb","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/8dd5bd43f80e82fb","status":"passed","time":{"start":1732225547635,"stop":1732225593389,"duration":45754}},{"uid":"1aa1cf0eb39b09e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/1aa1cf0eb39b09e3","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'","time":{"start":1732221303431,"stop":1732221303431,"duration":0}},{"uid":"748227e305b2ae4c","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/748227e305b2ae4c","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732217553320,"stop":1732217646978,"duration":93658}},{"uid":"27a54804c8f43f08","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/27a54804c8f43f08","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732211913776,"stop":1732212007396,"duration":93620}},{"uid":"e6736ddc3f3decac","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/e6736ddc3f3decac","status":"passed","time":{"start":1732210502674,"stop":1732210548046,"duration":45372}},{"uid":"904cdd10ceec9e6a","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/904cdd10ceec9e6a","status":"passed","time":{"start":1732209229327,"stop":1732209274654,"duration":45327}},{"uid":"dbf870ffe1c716b9","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/dbf870ffe1c716b9","status":"passed","time":{"start":1732205868996,"stop":1732205915375,"duration":46379}},{"uid":"63e99d85a189fe47","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/63e99d85a189fe47","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732203183073,"stop":1732203276725,"duration":93652}},{"uid":"aa05b2ec58c29fd6","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/aa05b2ec58c29fd6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732201308388,"stop":1732201402005,"duration":93617}},{"uid":"3ffcd9344d3592d6","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/3ffcd9344d3592d6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199591131,"stop":1732199684634,"duration":93503}},{"uid":"8c617e64465863c6","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/8c617e64465863c6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732197608122,"stop":1732197701968,"duration":93846}},{"uid":"f64a9ad7503abdd3","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/f64a9ad7503abdd3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732194094811,"stop":1732194188412,"duration":93601}},{"uid":"61543564ecad57e9","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/61543564ecad57e9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192444650,"stop":1732192538168,"duration":93518}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"b2eca74747ab0c19.json","parameterValues":["'rak5010'","'zephyr'"]}