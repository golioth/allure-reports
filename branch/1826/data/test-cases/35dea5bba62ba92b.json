{"uid":"35dea5bba62ba92b","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"edf5f1012f71cfc9f14f014f109d19a8","time":{"start":1732286581909,"stop":1732286581909,"duration":0},"status":"failed","statusMessage":"AssertionError: assert None != None","statusTrace":"item = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproject = <golioth.golioth.Project object at 0xffffa7ef2d90>\nblueprint_id = None\n\n    @pytest.fixture(scope=\"module\")\n    async def artifact(project, blueprint_id):\n        # Find Artifact that matches this device and desired update version\n    \n        artifact = None\n        all_artifacts = await project.artifacts.get_all()\n        for a in all_artifacts:\n            if (a.blueprint == blueprint_id and\n                a.version == UPDATE_VERSION and\n                a.package == UPDATE_PACKAGE):\n                artifact = a\n    \n>       assert artifact != None\nE       assert None != None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732286581912,"stop":1732286581913,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_ssid","time":{"start":1732286581913,"stop":1732286581913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"wifi_psk","time":{"start":1732286581914,"stop":1732286581914,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"fw_info","time":{"start":1732286581914,"stop":1732286581942,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_key","time":{"start":1732286581943,"stop":1732286581943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"api_url","time":{"start":1732286581943,"stop":1732286581944,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_name","time":{"start":1732286581944,"stop":1732286581944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object","time":{"start":1732286581945,"stop":1732286581948,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"twister_harness_config","time":{"start":1732286581945,"stop":1732286581945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project","time":{"start":1732286581949,"stop":1732286582349,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device","time":{"start":1732286582350,"stop":1732286583252,"duration":902},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"blueprint_id","time":{"start":1732286583253,"stop":1732286583621,"duration":368},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"artifact","time":{"start":1732286583622,"stop":1732286584024,"duration":402},"status":"failed","statusMessage":"AssertionError: assert None != None\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py\", line 81, in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 929, in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 921, in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/outcome/_impl.py\", line 213, in unwrap\n    raise captured_error\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 891, in _run_tests_and_fixtures\n    retval = await coro\n             ^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/modules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py\", line 54, in artifact\n    assert artifact != None\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert None != None","statusTrace":"item = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nproject = <golioth.golioth.Project object at 0xffffa7ef2d90>\nblueprint_id = None\n\n    @pytest.fixture(scope=\"module\")\n    async def artifact(project, blueprint_id):\n        # Find Artifact that matches this device and desired update version\n    \n        artifact = None\n        all_artifacts = await project.artifacts.get_all()\n        for a in all_artifacts:\n            if (a.blueprint == blueprint_id and\n                a.version == UPDATE_VERSION and\n                a.package == UPDATE_PACKAGE):\n                artifact = a\n    \n>       assert artifact != None\nE       assert None != None\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/conftest.py:54: AssertionError","steps":[],"attachments":[{"uid":"71b0bf6f6c503805","name":"log","source":"71b0bf6f6c503805.txt","type":"text/plain","size":13293}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"blueprint_id::0","time":{"start":1732286584461,"stop":1732286584461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device::0","time":{"start":1732286584463,"stop":1732286584858,"duration":395},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"project::0","time":{"start":1732286584860,"stop":1732286584860,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"device_object::0","time":{"start":1732286584862,"stop":1732286584862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"fw_info::0","time":{"start":1732286584870,"stop":1732286584872,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"8e704c6cdd61"},{"name":"thread","value":"363-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":8,"skipped":0,"passed":55,"unknown":0,"total":75},"items":[{"uid":"db466aa92536cfe6","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/db466aa92536cfe6","status":"passed","time":{"start":1732282914371,"stop":1732282962472,"duration":48101}},{"uid":"917cd495e3bc6bd1","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/917cd495e3bc6bd1","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732279710424,"stop":1732279710424,"duration":0}},{"uid":"2c794394a06fbd46","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/2c794394a06fbd46","status":"passed","time":{"start":1732274016587,"stop":1732274064930,"duration":48343}},{"uid":"abdf148879f2e037","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/abdf148879f2e037","status":"passed","time":{"start":1732273201133,"stop":1732273248557,"duration":47424}},{"uid":"e38de5f10f3cd412","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/e38de5f10f3cd412","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732231691524,"stop":1732231691524,"duration":0}},{"uid":"7efe70e347aebe73","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/7efe70e347aebe73","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732228393275,"stop":1732228393275,"duration":0}},{"uid":"cb52f8d64e707d1b","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/cb52f8d64e707d1b","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732227773390,"stop":1732227773390,"duration":0}},{"uid":"6a99b5e38db60d1","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/6a99b5e38db60d1","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732225061182,"stop":1732225061182,"duration":0}},{"uid":"f9ed8759fbc2adfb","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/f9ed8759fbc2adfb","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732221100355,"stop":1732221100355,"duration":0}},{"uid":"c7fb1aed75024e5","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/c7fb1aed75024e5","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732216177158,"stop":1732216177158,"duration":0}},{"uid":"d1cd974059c9feff","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/d1cd974059c9feff","status":"passed","time":{"start":1732209928756,"stop":1732210015812,"duration":87056}},{"uid":"1d08fee5131d096e","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/1d08fee5131d096e","status":"passed","time":{"start":1732209167610,"stop":1732209231173,"duration":63563}},{"uid":"b222368a4030ea64","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/b222368a4030ea64","status":"passed","time":{"start":1732208376565,"stop":1732208425185,"duration":48620}},{"uid":"73da25ef3fd228b7","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/73da25ef3fd228b7","status":"passed","time":{"start":1732146231780,"stop":1732146299468,"duration":67688}},{"uid":"c13055b7206f5fb1","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/c13055b7206f5fb1","status":"passed","time":{"start":1732199334190,"stop":1732199405480,"duration":71290}},{"uid":"6c98e20173658496","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/6c98e20173658496","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732199158246,"stop":1732199158246,"duration":0}},{"uid":"46e1b70a32be147f","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/46e1b70a32be147f","status":"passed","time":{"start":1732146231780,"stop":1732146299468,"duration":67688}},{"uid":"ca6bc85ae14d018c","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/ca6bc85ae14d018c","status":"passed","time":{"start":1732195756447,"stop":1732195820719,"duration":64272}},{"uid":"6a07f03730bd7ed7","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/6a07f03730bd7ed7","status":"failed","statusDetails":"AssertionError: assert None != None","time":{"start":1732192721375,"stop":1732192721375,"duration":0}},{"uid":"5f3a7eb678b01600","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/5f3a7eb678b01600","status":"passed","time":{"start":1732146231780,"stop":1732146299468,"duration":67688}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"35dea5bba62ba92b.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}