{
  "uid" : "c5d1452476426b71",
  "name" : "test_lightdb_delete",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete",
  "historyId" : "f1e2c2234d7dcc518bcd25346bf33416",
  "time" : {
    "start" : 1734413837841,
    "stop" : 1734413931430,
    "duration" : 93589
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffaaf2b510>\ndevice = <golioth.golioth.Device object at 0xffffaaf42990>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dut",
    "time" : {
      "start" : 1734413809995,
      "stop" : 1734413836765,
      "duration" : 26770
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734413808608,
      "stop" : 1734413808608,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734413808606,
      "stop" : 1734413808607,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734413808609,
      "stop" : 1734413808609,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734413808614,
      "stop" : 1734413809042,
      "duration" : 428
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734413808613,
      "stop" : 1734413808613,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734413808607,
      "stop" : 1734413808607,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734413836766,
      "stop" : 1734413837835,
      "duration" : 1069
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734413808608,
      "stop" : 1734413808609,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734413808610,
      "stop" : 1734413808612,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734413808612,
      "stop" : 1734413808613,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734413809042,
      "stop" : 1734413809994,
      "duration" : 952
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffaaf2b510>\ndevice = <golioth.golioth.Device object at 0xffffaaf42990>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "be6c9956b6caec88",
      "name" : "log",
      "source" : "be6c9956b6caec88.txt",
      "type" : "text/plain",
      "size" : 20766
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1734413931793,
      "stop" : 1734413931842,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734413932278,
      "stop" : 1734413932280,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734413932285,
      "stop" : 1734413932286,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734413931844,
      "stop" : 1734413932276,
      "duration" : 432
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "ac488d28f951"
  }, {
    "name" : "thread",
    "value" : "739-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "4ac73ec4478a97ce",
      "status" : "passed",
      "time" : {
        "start" : 1734380301336,
        "stop" : 1734380317510,
        "duration" : 16174
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 18,
        "unknown" : 0,
        "total" : 27
      },
      "items" : [ {
        "uid" : "f2fa160c561cc11",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1943/#testresult/f2fa160c561cc11",
        "status" : "passed",
        "time" : {
          "start" : 1734380301336,
          "stop" : 1734380317510,
          "duration" : 16174
        }
      }, {
        "uid" : "e386d6af748d60dd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/40/#testresult/e386d6af748d60dd",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734238034271,
          "stop" : 1734238034271,
          "duration" : 0
        }
      }, {
        "uid" : "e59fab9410648c92",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/e59fab9410648c92",
        "status" : "passed",
        "time" : {
          "start" : 1734129996253,
          "stop" : 1734130012620,
          "duration" : 16367
        }
      }, {
        "uid" : "4a3d14713162eaa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/4a3d14713162eaa",
        "status" : "passed",
        "time" : {
          "start" : 1734050263304,
          "stop" : 1734050295204,
          "duration" : 31900
        }
      }, {
        "uid" : "756d2c7a64f0685e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/756d2c7a64f0685e",
        "status" : "passed",
        "time" : {
          "start" : 1734046471660,
          "stop" : 1734046501080,
          "duration" : 29420
        }
      }, {
        "uid" : "98e3d52a807cbaca",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/98e3d52a807cbaca",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734035181985,
          "stop" : 1734035181985,
          "duration" : 0
        }
      }, {
        "uid" : "9370eaa6b5158dce",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/9370eaa6b5158dce",
        "status" : "passed",
        "time" : {
          "start" : 1734031218422,
          "stop" : 1734031248303,
          "duration" : 29881
        }
      }, {
        "uid" : "17c5c0cd589c7d26",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/17c5c0cd589c7d26",
        "status" : "passed",
        "time" : {
          "start" : 1734027376528,
          "stop" : 1734027408626,
          "duration" : 32098
        }
      }, {
        "uid" : "1e3bd4f04e516ea0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/1e3bd4f04e516ea0",
        "status" : "passed",
        "time" : {
          "start" : 1734026597128,
          "stop" : 1734026689512,
          "duration" : 92384
        }
      }, {
        "uid" : "7fcd8799bd87c5f6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/7fcd8799bd87c5f6",
        "status" : "passed",
        "time" : {
          "start" : 1733947921385,
          "stop" : 1733948013053,
          "duration" : 91668
        }
      }, {
        "uid" : "dc433074d5a1b778",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/dc433074d5a1b778",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733963062104,
          "stop" : 1733963155578,
          "duration" : 93474
        }
      }, {
        "uid" : "e9a83463c6a817eb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/e9a83463c6a817eb",
        "status" : "passed",
        "time" : {
          "start" : 1733959666316,
          "stop" : 1733959749303,
          "duration" : 82987
        }
      }, {
        "uid" : "904f999db2e8be97",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/904f999db2e8be97",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733954912912,
          "stop" : 1733954912912,
          "duration" : 0
        }
      }, {
        "uid" : "6255af7aab2493f1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/6255af7aab2493f1",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733951480367,
          "stop" : 1733951573937,
          "duration" : 93570
        }
      }, {
        "uid" : "9d266ed4ea88b558",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/9d266ed4ea88b558",
        "status" : "passed",
        "time" : {
          "start" : 1733951242127,
          "stop" : 1733951285057,
          "duration" : 42930
        }
      }, {
        "uid" : "580c802bba7b5159",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/580c802bba7b5159",
        "status" : "passed",
        "time" : {
          "start" : 1733948943155,
          "stop" : 1733948967784,
          "duration" : 24629
        }
      }, {
        "uid" : "5e3c9d920eeb7733",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/5e3c9d920eeb7733",
        "status" : "passed",
        "time" : {
          "start" : 1733947921385,
          "stop" : 1733948013053,
          "duration" : 91668
        }
      }, {
        "uid" : "70adddeaa6b50a06",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/70adddeaa6b50a06",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733932219495,
          "stop" : 1733932313096,
          "duration" : 93601
        }
      }, {
        "uid" : "dc57b132ff37c951",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/dc57b132ff37c951",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733930667558,
          "stop" : 1733930761225,
          "duration" : 93667
        }
      }, {
        "uid" : "b929ba5ff1cdc78e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/b929ba5ff1cdc78e",
        "status" : "passed",
        "time" : {
          "start" : 1733892589709,
          "stop" : 1733892619213,
          "duration" : 29504
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "c5d1452476426b71.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}