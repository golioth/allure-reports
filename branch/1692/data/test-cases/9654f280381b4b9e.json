{"uid":"9654f280381b4b9e","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"b2900ea6ee9c25336d02db93f859b162","time":{"start":1729717132078,"stop":1729717148838,"duration":16760},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3996dc4f10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995332e90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995331f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f399558c390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe9d0>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f3995323510>\ndevice = <golioth.golioth.Device object at 0x7f3995319450>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3996dc4f10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995332e90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995331f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f399558c390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe9d0>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"device_name","time":{"start":1729717131166,"stop":1729717131166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729717131166,"stop":1729717131167,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1729717131166,"stop":1729717131166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729717131166,"stop":1729717131166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729717131166,"stop":1729717131166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729717131166,"stop":1729717131166,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729717131167,"stop":1729717131167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729717131167,"stop":1729717131167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729717131168,"stop":1729717131434,"duration":266},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729717131434,"stop":1729717132065,"duration":631},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729717132065,"stop":1729717132068,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729717132068,"stop":1729717132077,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3996dc4f10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995332e90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995331f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f399558c390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe9d0>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7f3995323510>\ndevice = <golioth.golioth.Device object at 0x7f3995319450>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3996dc4f10>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995332e90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f3995331f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f399558c390>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe810>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7f39952fe9d0>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"c83994162e7d2e91","name":"log","source":"c83994162e7d2e91.txt","type":"text/plain","size":18417}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729717149136,"stop":1729717149680,"duration":544},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729717149680,"stop":1729717150134,"duration":454},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729717150135,"stop":1729717150135,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729717150136,"stop":1729717150136,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_32"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_32"},{"name":"tag","value":"GitHub Actions 44"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"48f5bfc2ecfa"},{"name":"thread","value":"49908-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_32'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":21,"unknown":0,"total":22},"items":[{"uid":"efdd5b8bdf1c9c79","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/efdd5b8bdf1c9c79","status":"passed","time":{"start":1729525822432,"stop":1729525839211,"duration":16779}},{"uid":"d4f3b8efa449390b","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/d4f3b8efa449390b","status":"passed","time":{"start":1729525822432,"stop":1729525839211,"duration":16779}},{"uid":"5bc45523e6567aaf","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/5bc45523e6567aaf","status":"passed","time":{"start":1729525429768,"stop":1729525446518,"duration":16750}},{"uid":"f2014696e2fa2f19","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/f2014696e2fa2f19","status":"passed","time":{"start":1729377603385,"stop":1729377619855,"duration":16470}},{"uid":"7e0b78358f1ebd40","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/7e0b78358f1ebd40","status":"passed","time":{"start":1729377603385,"stop":1729377619855,"duration":16470}},{"uid":"69907eee690717d","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/69907eee690717d","status":"passed","time":{"start":1729196317293,"stop":1729196334033,"duration":16740}},{"uid":"673efa4e3d1def68","reportUrl":"https://golioth.github.io/allure-reports/branch/1671//#testresult/673efa4e3d1def68","status":"passed","time":{"start":1729194073802,"stop":1729194090322,"duration":16520}},{"uid":"4d106425e258c33e","reportUrl":"https://golioth.github.io/allure-reports/branch/1670//#testresult/4d106425e258c33e","status":"passed","time":{"start":1729191975546,"stop":1729191992299,"duration":16753}},{"uid":"29230c56fa784520","reportUrl":"https://golioth.github.io/allure-reports/branch/1669//#testresult/29230c56fa784520","status":"passed","time":{"start":1729190795063,"stop":1729190811917,"duration":16854}},{"uid":"e553b75658552b83","reportUrl":"https://golioth.github.io/allure-reports/branch/1668//#testresult/e553b75658552b83","status":"passed","time":{"start":1729189517118,"stop":1729189533974,"duration":16856}},{"uid":"90427f22f90cc7e8","reportUrl":"https://golioth.github.io/allure-reports/branch/1667//#testresult/90427f22f90cc7e8","status":"passed","time":{"start":1729188103857,"stop":1729188120412,"duration":16555}},{"uid":"1313776dd12a8bb1","reportUrl":"https://golioth.github.io/allure-reports/branch/1666//#testresult/1313776dd12a8bb1","status":"passed","time":{"start":1729184990652,"stop":1729185007029,"duration":16377}},{"uid":"8f78500f715a1875","reportUrl":"https://golioth.github.io/allure-reports/branch/1665//#testresult/8f78500f715a1875","status":"passed","time":{"start":1729183978565,"stop":1729183994990,"duration":16425}},{"uid":"a5da6c66e6c0a496","reportUrl":"https://golioth.github.io/allure-reports/branch/1664//#testresult/a5da6c66e6c0a496","status":"passed","time":{"start":1729182354357,"stop":1729182370997,"duration":16640}},{"uid":"b922cd112946900e","reportUrl":"https://golioth.github.io/allure-reports/branch/1662//#testresult/b922cd112946900e","status":"passed","time":{"start":1729177239836,"stop":1729177256395,"duration":16559}},{"uid":"a600aadcdbef82e3","reportUrl":"https://golioth.github.io/allure-reports/branch/1661//#testresult/a600aadcdbef82e3","status":"passed","time":{"start":1729174810231,"stop":1729174826858,"duration":16627}},{"uid":"d3dece459fa68bd6","reportUrl":"https://golioth.github.io/allure-reports/branch/1660//#testresult/d3dece459fa68bd6","status":"passed","time":{"start":1729129546033,"stop":1729129562531,"duration":16498}},{"uid":"d2efa6e03aa0699a","reportUrl":"https://golioth.github.io/allure-reports/branch/1657//#testresult/d2efa6e03aa0699a","status":"passed","time":{"start":1729128361260,"stop":1729128377667,"duration":16407}},{"uid":"8f12b748ad9c6c92","reportUrl":"https://golioth.github.io/allure-reports/branch/1655//#testresult/8f12b748ad9c6c92","status":"passed","time":{"start":1729119976925,"stop":1729119993620,"duration":16695}},{"uid":"b636d92ab8f36fd","reportUrl":"https://golioth.github.io/allure-reports/branch/1654//#testresult/b636d92ab8f36fd","status":"passed","time":{"start":1729118258487,"stop":1729118275263,"duration":16776}}]},"tags":["GitHub Actions 44","anyio","native_sim_32","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"9654f280381b4b9e.json","parameterValues":["'native_sim_32'","'zephyr'"]}