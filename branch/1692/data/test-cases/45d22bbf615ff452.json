{"uid":"45d22bbf615ff452","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"05bf37cce2d49044eee3daa5509a1354","time":{"start":1729718685309,"stop":1729718717218,"duration":31909},"status":"failed","statusMessage":"AssertionError: assert 22 == 21.5","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb8645fd0>\ndevice = <golioth.golioth.Device object at 0xffffb8654ed0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 22 == 21.5\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729718656767,"stop":1729718656767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729718656768,"stop":1729718656768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729718656768,"stop":1729718656768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729718656769,"stop":1729718656770,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729718656769,"stop":1729718656769,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729718656770,"stop":1729718656772,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729718656773,"stop":1729718656773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729718656773,"stop":1729718656773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729718656774,"stop":1729718657364,"duration":590},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729718657365,"stop":1729718658516,"duration":1151},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729718658516,"stop":1729718681896,"duration":23380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729718681897,"stop":1729718685302,"duration":3405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 22 == 21.5","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb8645fd0>\ndevice = <golioth.golioth.Device object at 0xffffb8654ed0>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Verify temp messages\n    \n        temp = 20.0\n        async with contextlib.aclosing(device.stream.iter()) as stream_iter:\n            async for value in stream_iter:\n                LOGGER.info(\"ts: {0}, temp: {1}\".format(value['timestamp'], value['data']['temp']))\n>               assert (value[\"data\"][\"temp\"] == temp)\nE               assert 22 == 21.5\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:34: AssertionError","steps":[],"attachments":[{"uid":"40bb0a7c7ecec65d","name":"log","source":"40bb0a7c7ecec65d.txt","type":"text/plain","size":15760}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729718717478,"stop":1729718717513,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729718717515,"stop":1729718717973,"duration":458},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729718717975,"stop":1729718717977,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729718717982,"stop":1729718717983,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1ee42bd47e30"},{"name":"thread","value":"912-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":14,"unknown":0,"total":16},"items":[{"uid":"7e3f6df1abe6c712","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/7e3f6df1abe6c712","status":"passed","time":{"start":1729529443809,"stop":1729529466930,"duration":23121}},{"uid":"1b295cb5fb0f5c10","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/1b295cb5fb0f5c10","status":"passed","time":{"start":1729529443809,"stop":1729529466930,"duration":23121}},{"uid":"2ad7da0a8214e43a","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/2ad7da0a8214e43a","status":"passed","time":{"start":1729527006454,"stop":1729527029613,"duration":23159}},{"uid":"235bc348ff0c2484","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/235bc348ff0c2484","status":"passed","time":{"start":1729387226675,"stop":1729387248998,"duration":22323}},{"uid":"f30ab914e929062f","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/f30ab914e929062f","status":"passed","time":{"start":1729379116991,"stop":1729379139199,"duration":22208}},{"uid":"732aa975fe1589f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/732aa975fe1589f4","status":"passed","time":{"start":1729198499350,"stop":1729198522327,"duration":22977}},{"uid":"328b9e886e0dfc8c","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/328b9e886e0dfc8c","status":"passed","time":{"start":1729116362431,"stop":1729116384551,"duration":22120}},{"uid":"edb0f41116e683ac","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/edb0f41116e683ac","status":"passed","time":{"start":1729113669912,"stop":1729113692094,"duration":22182}},{"uid":"24501dfa8cbb3d37","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/24501dfa8cbb3d37","status":"passed","time":{"start":1729107812883,"stop":1729107835946,"duration":23063}},{"uid":"f6988b776cb959f3","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/f6988b776cb959f3","status":"passed","time":{"start":1729034084459,"stop":1729034107404,"duration":22945}},{"uid":"66e95e256f3a70de","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/66e95e256f3a70de","status":"passed","time":{"start":1729031445693,"stop":1729031467951,"duration":22258}},{"uid":"efa04a7e8cf3ac40","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/efa04a7e8cf3ac40","status":"passed","time":{"start":1729026825056,"stop":1729026847532,"duration":22476}},{"uid":"a178e6f5be9a1895","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/a178e6f5be9a1895","status":"passed","time":{"start":1729023295669,"stop":1729023317756,"duration":22087}},{"uid":"77d44b762a2b27a3","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/77d44b762a2b27a3","status":"failed","statusDetails":"AssertionError: assert 22 == 21.5","time":{"start":1729020669190,"stop":1729020702886,"duration":33696}},{"uid":"8852ba5dfd97c204","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/8852ba5dfd97c204","status":"passed","time":{"start":1729005818361,"stop":1729005840767,"duration":22406}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"45d22bbf615ff452.json","parameterValues":["'nrf52840dk'","'zephyr'"]}