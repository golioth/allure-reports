{"uid":"e870b04c8594ea63","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"96de05db26bbf7cd6fc9a7f7321c08df","time":{"start":1729717109261,"stop":1729717125811,"duration":16550},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d2d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4ff50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d81990>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c12010>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fa199c36cd0>\ndevice = <golioth.golioth.Device object at 0x7fa199c28c90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d2d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4ff50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d81990>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c12010>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1729717108450,"stop":1729717108450,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729717108450,"stop":1729717108451,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1729717108450,"stop":1729717108450,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729717108451,"stop":1729717108451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729717108451,"stop":1729717108452,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729717108451,"stop":1729717108451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729717108452,"stop":1729717108641,"duration":189},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729717108452,"stop":1729717108452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729717108452,"stop":1729717108452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729717108641,"stop":1729717109081,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729717109081,"stop":1729717109083,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729717109083,"stop":1729717109260,"duration":177},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d2d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4ff50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d81990>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c12010>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fa199c36cd0>\ndevice = <golioth.golioth.Device object at 0x7fa199c28c90>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d2d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4d750>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c4ff50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d837d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199d81990>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0x7fa199c12010>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"b0fdf8d1cc05a24","name":"log","source":"b0fdf8d1cc05a24.txt","type":"text/plain","size":18427}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729717126138,"stop":1729717126663,"duration":525},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729717126663,"stop":1729717126983,"duration":320},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729717126984,"stop":1729717126985,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729717126986,"stop":1729717126986,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"native_sim_64"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.native_sim_64"},{"name":"tag","value":"GitHub Actions 28"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"08b734050d15"},{"name":"thread","value":"49865-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'native_sim_64'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":21,"unknown":0,"total":22},"items":[{"uid":"82b93178d4d1358e","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/82b93178d4d1358e","status":"passed","time":{"start":1729525825854,"stop":1729525842813,"duration":16959}},{"uid":"2daf7a91a555178f","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/2daf7a91a555178f","status":"passed","time":{"start":1729525825854,"stop":1729525842813,"duration":16959}},{"uid":"a080da43a3cf3457","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/a080da43a3cf3457","status":"passed","time":{"start":1729525418367,"stop":1729525435264,"duration":16897}},{"uid":"b6491f695471519","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/b6491f695471519","status":"passed","time":{"start":1729377619448,"stop":1729377636261,"duration":16813}},{"uid":"8b283950e676ab9a","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/8b283950e676ab9a","status":"passed","time":{"start":1729377619448,"stop":1729377636261,"duration":16813}},{"uid":"e1804e4e0b0a2550","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/e1804e4e0b0a2550","status":"passed","time":{"start":1729196331510,"stop":1729196348283,"duration":16773}},{"uid":"d713a56a7d7289f1","reportUrl":"https://golioth.github.io/allure-reports/branch/1671//#testresult/d713a56a7d7289f1","status":"passed","time":{"start":1729194083490,"stop":1729194100288,"duration":16798}},{"uid":"552712f3ae576ca5","reportUrl":"https://golioth.github.io/allure-reports/branch/1670//#testresult/552712f3ae576ca5","status":"passed","time":{"start":1729191985508,"stop":1729192002191,"duration":16683}},{"uid":"e274f608350b1a08","reportUrl":"https://golioth.github.io/allure-reports/branch/1669//#testresult/e274f608350b1a08","status":"passed","time":{"start":1729190789275,"stop":1729190806015,"duration":16740}},{"uid":"4c6e5b2bd74f0e69","reportUrl":"https://golioth.github.io/allure-reports/branch/1668//#testresult/4c6e5b2bd74f0e69","status":"passed","time":{"start":1729189510089,"stop":1729189526932,"duration":16843}},{"uid":"4c1695da6bda362e","reportUrl":"https://golioth.github.io/allure-reports/branch/1667//#testresult/4c1695da6bda362e","status":"passed","time":{"start":1729188096937,"stop":1729188113742,"duration":16805}},{"uid":"77b71868c05e50ed","reportUrl":"https://golioth.github.io/allure-reports/branch/1666//#testresult/77b71868c05e50ed","status":"passed","time":{"start":1729184988452,"stop":1729185005105,"duration":16653}},{"uid":"9b2656d03d663310","reportUrl":"https://golioth.github.io/allure-reports/branch/1665//#testresult/9b2656d03d663310","status":"passed","time":{"start":1729183978551,"stop":1729183994998,"duration":16447}},{"uid":"797682b318fe8266","reportUrl":"https://golioth.github.io/allure-reports/branch/1664//#testresult/797682b318fe8266","status":"passed","time":{"start":1729182345449,"stop":1729182362024,"duration":16575}},{"uid":"bd7149b43b3005d1","reportUrl":"https://golioth.github.io/allure-reports/branch/1662//#testresult/bd7149b43b3005d1","status":"passed","time":{"start":1729177238319,"stop":1729177254914,"duration":16595}},{"uid":"9185adbb1248de4d","reportUrl":"https://golioth.github.io/allure-reports/branch/1661//#testresult/9185adbb1248de4d","status":"passed","time":{"start":1729174804951,"stop":1729174821612,"duration":16661}},{"uid":"de2f77ed1e0a2dbb","reportUrl":"https://golioth.github.io/allure-reports/branch/1660//#testresult/de2f77ed1e0a2dbb","status":"passed","time":{"start":1729129538051,"stop":1729129554649,"duration":16598}},{"uid":"6141a4a3258375d9","reportUrl":"https://golioth.github.io/allure-reports/branch/1657//#testresult/6141a4a3258375d9","status":"passed","time":{"start":1729128377359,"stop":1729128394091,"duration":16732}},{"uid":"1c517b097bf64612","reportUrl":"https://golioth.github.io/allure-reports/branch/1655//#testresult/1c517b097bf64612","status":"passed","time":{"start":1729119990641,"stop":1729120007530,"duration":16889}},{"uid":"eb7e87d8238cdd89","reportUrl":"https://golioth.github.io/allure-reports/branch/1654//#testresult/eb7e87d8238cdd89","status":"passed","time":{"start":1729118245462,"stop":1729118262080,"duration":16618}}]},"tags":["GitHub Actions 28","native_sim_64","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"e870b04c8594ea63.json","parameterValues":["'native_sim_64'","'zephyr'"]}