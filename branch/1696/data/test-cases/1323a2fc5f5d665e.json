{"uid":"1323a2fc5f5d665e","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1729790574244,"stop":1729790603718,"duration":29474},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87aa8590>\ndevice = <golioth.golioth.Device object at 0xffff87aab5d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff87c185d0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729790545346,"stop":1729790545346,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1729790545347,"stop":1729790545363,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729790545363,"stop":1729790545364,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729790545364,"stop":1729790545364,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729790545365,"stop":1729790545367,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729790545368,"stop":1729790545368,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729790545368,"stop":1729790545368,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729790545369,"stop":1729790545899,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729790545900,"stop":1729790547108,"duration":1208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729790547109,"stop":1729790573137,"duration":26028},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729790573137,"stop":1729790574241,"duration":1104},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff87aa8590>\ndevice = <golioth.golioth.Device object at 0xffff87aab5d0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff87c185d0>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","steps":[],"attachments":[{"uid":"c05ad17a470ec6c2","name":"log","source":"c05ad17a470ec6c2.txt","type":"text/plain","size":20700}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729790603931,"stop":1729790603957,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729790603959,"stop":1729790604422,"duration":463},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729790604424,"stop":1729790604427,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729790604431,"stop":1729790604432,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"aee801f2dd17"},{"name":"thread","value":"415-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":18,"unknown":0,"total":20},"items":[{"uid":"daa8a68d4896e92","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/daa8a68d4896e92","status":"passed","time":{"start":1729779801124,"stop":1729779832052,"duration":30928}},{"uid":"770a338be374341e","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/770a338be374341e","status":"passed","time":{"start":1729726012760,"stop":1729726059054,"duration":46294}},{"uid":"932d2b0f45edfe04","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/932d2b0f45edfe04","status":"passed","time":{"start":1729723069497,"stop":1729723099341,"duration":29844}},{"uid":"fc3d8eee9825401b","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/fc3d8eee9825401b","status":"passed","time":{"start":1729720235337,"stop":1729720265801,"duration":30464}},{"uid":"f04caad6746474e0","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/f04caad6746474e0","status":"passed","time":{"start":1729531061088,"stop":1729531104436,"duration":43348}},{"uid":"10b01ea38a065ff1","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/10b01ea38a065ff1","status":"passed","time":{"start":1729531061088,"stop":1729531104436,"duration":43348}},{"uid":"f6cb88af447f0513","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/f6cb88af447f0513","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729529889272,"stop":1729530003849,"duration":114577}},{"uid":"1a9371b333eca6db","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/1a9371b333eca6db","status":"passed","time":{"start":1729381470594,"stop":1729381506198,"duration":35604}},{"uid":"c400357e0d29a6f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/c400357e0d29a6f4","status":"passed","time":{"start":1729381470594,"stop":1729381506198,"duration":35604}},{"uid":"e4d318aa35b32223","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/e4d318aa35b32223","status":"passed","time":{"start":1729199372384,"stop":1729199404158,"duration":31774}},{"uid":"e92aa989dc3a41de","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/e92aa989dc3a41de","status":"passed","time":{"start":1729117587140,"stop":1729117634783,"duration":47643}},{"uid":"325dba6847c91670","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/325dba6847c91670","status":"passed","time":{"start":1729115131234,"stop":1729115177692,"duration":46458}},{"uid":"d004cf266abebd97","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/d004cf266abebd97","status":"passed","time":{"start":1729109181405,"stop":1729109210633,"duration":29228}},{"uid":"78c523fdcf722239","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/78c523fdcf722239","status":"passed","time":{"start":1729035588532,"stop":1729035619605,"duration":31073}},{"uid":"997b96c707c1e55f","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/997b96c707c1e55f","status":"passed","time":{"start":1729032227952,"stop":1729032328649,"duration":100697}},{"uid":"7de1719e735f0a44","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/7de1719e735f0a44","status":"passed","time":{"start":1729027089739,"stop":1729027121510,"duration":31771}},{"uid":"690ff66f5474acab","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/690ff66f5474acab","status":"passed","time":{"start":1729025204276,"stop":1729025233931,"duration":29655}},{"uid":"8a897a8f7468a981","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/8a897a8f7468a981","status":"passed","time":{"start":1729022064555,"stop":1729022094975,"duration":30420}},{"uid":"8d85e0e365961811","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/8d85e0e365961811","status":"passed","time":{"start":1729007924407,"stop":1729007956206,"duration":31799}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1323a2fc5f5d665e.json","parameterValues":["'nrf9160dk'","'zephyr'"]}