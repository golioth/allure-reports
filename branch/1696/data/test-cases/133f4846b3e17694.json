{"uid":"133f4846b3e17694","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1729789336348,"stop":1729789385011,"duration":48663},"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff996319d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99640e50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99661b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9a3ce1d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99684f50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99686410>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99643cd0>\ndevice = <golioth.golioth.Device object at 0xffff996313d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff996319d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99640e50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99661b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9a3ce1d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99684f50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99686410>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729789299712,"stop":1729789299712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729789299712,"stop":1729789299713,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729789299713,"stop":1729789299714,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729789299713,"stop":1729789299713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729789299714,"stop":1729789299714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729789299715,"stop":1729789299717,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729789299717,"stop":1729789299718,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729789299718,"stop":1729789299718,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729789299719,"stop":1729789300239,"duration":520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729789300239,"stop":1729789301294,"duration":1055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729789301295,"stop":1729789335738,"duration":34443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729789335739,"stop":1729789336345,"duration":606},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff996319d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99640e50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99661b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9a3ce1d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99684f50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99686410>])","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff99643cd0>\ndevice = <golioth.golioth.Device object at 0xffff996313d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n>       verify_log_messages(logs)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = []\n\n    def verify_log_messages(logs):\n    \n        expected_logs = [\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"main: Debug info! 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_1: Log 1: 0\"}),\n                         LogEntry( { 'level': LogLevel.DBG, 'message': \"func_2: Log 2: 0\"}),\n                         LogEntry( { 'level': LogLevel.WRN, 'message': \"Warn: 0\"}),\n                         LogEntry( { 'level': LogLevel.ERR, 'message': \"Err: 0\"}),\n                         # A current known issue is that hexdump doesn't include second line on cloud\n                         # logs. We still test for this message and verify INF type is working.\n                         LogEntry( { 'level': LogLevel.INF, 'message': \"Counter hexdump\"})\n                         ]\n    \n        LOGGER.info(\"Searching log messages:\")\n    \n        for m in logs:\n            message = m.message\n    \n            for i, e in enumerate(expected_logs):\n                if m.message == e.message and m.level == e.level:\n                    message = \"### MATCH FOUND! ---> {0}\".format(m.message)\n                    expected_logs.pop(i)\n                    break\n    \n            LOGGER.info(message)\n    \n            if len(expected_logs) == 0:\n                break\n    \n        num_missing = len(expected_logs)\n        if num_missing > 0:\n            LOGGER.error(\"XXX Unable to find {0} Log messages:\".format(num_missing))\n            for m in expected_logs:\n                LOGGER.error(\"XXX Not FOUND ---> {0}\".format(m.message))\n        else:\n            LOGGER.info(\"### All expected Log messages found!\")\n    \n>       assert len(expected_logs) == 0, 'Unable to find all Log messages on server'\nE       AssertionError: Unable to find all Log messages on server\nE       assert 6 == 0\nE        +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff996319d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99640e50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99661b50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff9a3ce1d0>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99684f50>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff99686410>])\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:50: AssertionError","steps":[],"attachments":[{"uid":"744c621bca6ad000","name":"log","source":"744c621bca6ad000.txt","type":"text/plain","size":33856}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729789385203,"stop":1729789385208,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729789385210,"stop":1729789385716,"duration":506},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729789385718,"stop":1729789385720,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729789385725,"stop":1729789385725,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a0459fb07668"},{"name":"thread","value":"363-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":20},"items":[{"uid":"6003997826212d3f","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/6003997826212d3f","status":"passed","time":{"start":1729724290911,"stop":1729724339165,"duration":48254}},{"uid":"d4e9d2a54bbd6204","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/d4e9d2a54bbd6204","status":"passed","time":{"start":1729724290911,"stop":1729724339165,"duration":48254}},{"uid":"7f481addc12b1f7b","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/7f481addc12b1f7b","status":"passed","time":{"start":1729721872836,"stop":1729721921081,"duration":48245}},{"uid":"96bcc9ac28d3106d","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/96bcc9ac28d3106d","status":"passed","time":{"start":1729718953660,"stop":1729719017585,"duration":63925}},{"uid":"7dce389918858c8e","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/7dce389918858c8e","status":"passed","time":{"start":1729529844209,"stop":1729529892442,"duration":48233}},{"uid":"28a9252c7012bc90","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/28a9252c7012bc90","status":"passed","time":{"start":1729529844209,"stop":1729529892442,"duration":48233}},{"uid":"6ccd3ff6a444dfc3","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/6ccd3ff6a444dfc3","status":"passed","time":{"start":1729527323570,"stop":1729527371637,"duration":48067}},{"uid":"c9a32a3cbb6a7ef","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/c9a32a3cbb6a7ef","status":"passed","time":{"start":1729379478519,"stop":1729379526581,"duration":48062}},{"uid":"1eb53db7981b038f","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/1eb53db7981b038f","status":"passed","time":{"start":1729379478519,"stop":1729379526581,"duration":48062}},{"uid":"6c47d971a26fa1f0","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/6c47d971a26fa1f0","status":"passed","time":{"start":1729198171237,"stop":1729198219883,"duration":48646}},{"uid":"1ae7711fdeda0132","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/1ae7711fdeda0132","status":"passed","time":{"start":1729116556956,"stop":1729116605399,"duration":48443}},{"uid":"292fc69e42efa45c","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/292fc69e42efa45c","status":"passed","time":{"start":1729114128017,"stop":1729114176061,"duration":48044}},{"uid":"db35971ed273dc1e","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/db35971ed273dc1e","status":"passed","time":{"start":1729108014250,"stop":1729108062686,"duration":48436}},{"uid":"a58f476da70ede76","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/a58f476da70ede76","status":"passed","time":{"start":1729034387356,"stop":1729034436428,"duration":49072}},{"uid":"c1be8d47d1d0ee11","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/c1be8d47d1d0ee11","status":"passed","time":{"start":1729031044372,"stop":1729031092674,"duration":48302}},{"uid":"307da3f4f5a253e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/307da3f4f5a253e6","status":"passed","time":{"start":1729020882160,"stop":1729020930764,"duration":48604}},{"uid":"cbff12f3a60cfbca","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/cbff12f3a60cfbca","status":"passed","time":{"start":1729024007152,"stop":1729024055034,"duration":47882}},{"uid":"833697c256f5f235","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/833697c256f5f235","status":"passed","time":{"start":1729020882160,"stop":1729020930764,"duration":48604}},{"uid":"6be22f9c5e804715","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/6be22f9c5e804715","status":"passed","time":{"start":1729005874524,"stop":1729005922599,"duration":48075}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"133f4846b3e17694.json","parameterValues":["'rak5010'","'zephyr'"]}