{"uid":"820a7f775e51132f","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"033bde6843906cfc60e943571f867eee","time":{"start":1729789684104,"stop":1729789707582,"duration":23478},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb3d8a610>\ndevice = <golioth.golioth.Device object at 0xffffb3da1950>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1729789663932,"stop":1729789663932,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1729789663933,"stop":1729789663933,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1729789663933,"stop":1729789663933,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1729789663934,"stop":1729789663934,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1729789663934,"stop":1729789663934,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1729789663935,"stop":1729789663937,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1729789663938,"stop":1729789663938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1729789663938,"stop":1729789663938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1729789663939,"stop":1729789664365,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1729789664366,"stop":1729789665370,"duration":1004},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1729789665371,"stop":1729789683196,"duration":17825},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1729789683196,"stop":1729789684101,"duration":905},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb3d8a610>\ndevice = <golioth.golioth.Device object at 0xffffb3da1950>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"accd57959fa16ba1","name":"log","source":"accd57959fa16ba1.txt","type":"text/plain","size":17335}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1729789707882,"stop":1729789707889,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1729789707891,"stop":1729789708303,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1729789708305,"stop":1729789708308,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1729789708312,"stop":1729789708313,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a20cc3d459a2"},{"name":"thread","value":"461-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":18,"unknown":0,"total":20},"items":[{"uid":"d0520a0dfac4437f","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/d0520a0dfac4437f","status":"passed","time":{"start":1729781466893,"stop":1729781482630,"duration":15737}},{"uid":"b38f388d3cbafb6e","reportUrl":"https://golioth.github.io/allure-reports/branch/1694//#testresult/b38f388d3cbafb6e","status":"passed","time":{"start":1729725468843,"stop":1729725485567,"duration":16724}},{"uid":"e3d331dfda7e1db1","reportUrl":"https://golioth.github.io/allure-reports/branch/1693//#testresult/e3d331dfda7e1db1","status":"passed","time":{"start":1729723046670,"stop":1729723060368,"duration":13698}},{"uid":"aaee37f50cae638","reportUrl":"https://golioth.github.io/allure-reports/branch/1692//#testresult/aaee37f50cae638","status":"passed","time":{"start":1729719675605,"stop":1729719692940,"duration":17335}},{"uid":"30ca00a86f9655fb","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/30ca00a86f9655fb","status":"passed","time":{"start":1729625303704,"stop":1729625317061,"duration":13357}},{"uid":"bea1a0d73c7fa2af","reportUrl":"https://golioth.github.io/allure-reports/branch/1687//#testresult/bea1a0d73c7fa2af","status":"passed","time":{"start":1729530155889,"stop":1729530169230,"duration":13341}},{"uid":"40f513067d1a2edd","reportUrl":"https://golioth.github.io/allure-reports/branch/1686//#testresult/40f513067d1a2edd","status":"passed","time":{"start":1729527718735,"stop":1729527733554,"duration":14819}},{"uid":"51821f55a068cde9","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/51821f55a068cde9","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1729388655915,"stop":1729388679307,"duration":23392}},{"uid":"bb12e078e1394060","reportUrl":"https://golioth.github.io/allure-reports/branch/1682//#testresult/bb12e078e1394060","status":"passed","time":{"start":1729379981120,"stop":1729379993487,"duration":12367}},{"uid":"696d5fb8e7afe8c8","reportUrl":"https://golioth.github.io/allure-reports/branch/1673//#testresult/696d5fb8e7afe8c8","status":"passed","time":{"start":1729198450123,"stop":1729198464942,"duration":14819}},{"uid":"689eb5e1f74a195e","reportUrl":"https://golioth.github.io/allure-reports/branch/1651//#testresult/689eb5e1f74a195e","status":"passed","time":{"start":1729117084305,"stop":1729117097704,"duration":13399}},{"uid":"b9222c36ca0361d1","reportUrl":"https://golioth.github.io/allure-reports/branch/1650//#testresult/b9222c36ca0361d1","status":"passed","time":{"start":1729114228849,"stop":1729114245408,"duration":16559}},{"uid":"a7c4a7fd5d2441ee","reportUrl":"https://golioth.github.io/allure-reports/branch/1648//#testresult/a7c4a7fd5d2441ee","status":"passed","time":{"start":1729108683658,"stop":1729108700253,"duration":16595}},{"uid":"a2b7ef98835fbbfc","reportUrl":"https://golioth.github.io/allure-reports/branch/1646//#testresult/a2b7ef98835fbbfc","status":"passed","time":{"start":1729035042695,"stop":1729035058133,"duration":15438}},{"uid":"bc746dcd33fe8482","reportUrl":"https://golioth.github.io/allure-reports/branch/1645//#testresult/bc746dcd33fe8482","status":"passed","time":{"start":1729032566146,"stop":1729032583550,"duration":17404}},{"uid":"36d438fe31eb12fc","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/36d438fe31eb12fc","status":"passed","time":{"start":1729029525835,"stop":1729029539276,"duration":13441}},{"uid":"d7942883848f5b74","reportUrl":"https://golioth.github.io/allure-reports/branch/1642//#testresult/d7942883848f5b74","status":"passed","time":{"start":1729024394081,"stop":1729024407356,"duration":13275}},{"uid":"b7ff125270379d0b","reportUrl":"https://golioth.github.io/allure-reports/branch/1641//#testresult/b7ff125270379d0b","status":"passed","time":{"start":1729021472932,"stop":1729021485271,"duration":12339}},{"uid":"72a0960badf61806","reportUrl":"https://golioth.github.io/allure-reports/branch/1638//#testresult/72a0960badf61806","status":"passed","time":{"start":1729006755179,"stop":1729006769564,"duration":14385}}]},"tags":["anyio","tims_orange_pi","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"820a7f775e51132f.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}