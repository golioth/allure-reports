{
  "uid" : "faa9b3157196a734",
  "name" : "test_logging",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging",
  "historyId" : "a3454c74416fe64989185d5a90a344cf",
  "time" : {
    "start" : 1734026218170,
    "stop" : 1734026311382,
    "duration" : 93212
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
  "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb055b490>\ndevice = <golioth.golioth.Device object at 0xffffb057a7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_object",
    "time" : {
      "start" : 1734026188899,
      "stop" : 1734026188901,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734026189342,
      "stop" : 1734026190226,
      "duration" : 884
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734026188898,
      "stop" : 1734026188898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734026188896,
      "stop" : 1734026188896,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734026188897,
      "stop" : 1734026188897,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734026188901,
      "stop" : 1734026188902,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734026190227,
      "stop" : 1734026217076,
      "duration" : 26849
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734026188896,
      "stop" : 1734026188897,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734026188898,
      "stop" : 1734026188898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734026188902,
      "stop" : 1734026189342,
      "duration" : 440
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734026217076,
      "stop" : 1734026218163,
      "duration" : 1087
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734026188902,
      "stop" : 1734026188902,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
    "statusTrace" : "shell = <twister_harness.helpers.shell.Shell object at 0xffffb055b490>\ndevice = <golioth.golioth.Device object at 0xffffb057a7d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e2ebbe71a49a6863",
      "name" : "log",
      "source" : "e2ebbe71a49a6863.txt",
      "type" : "text/plain",
      "size" : 14283
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734026312094,
      "stop" : 1734026312094,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734026311676,
      "stop" : 1734026312085,
      "duration" : 409
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734026311638,
      "stop" : 1734026311674,
      "duration" : 36
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734026312087,
      "stop" : 1734026312089,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_testbench"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "fa9e5dda9aa0"
  }, {
    "name" : "thread",
    "value" : "594-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 10,
        "unknown" : 0,
        "total" : 18
      },
      "items" : [ {
        "uid" : "e981be4b1ee3b521",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/e981be4b1ee3b521",
        "status" : "passed",
        "time" : {
          "start" : 1733947747268,
          "stop" : 1733947766676,
          "duration" : 19408
        }
      }, {
        "uid" : "2e7136eb0fb04462",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/2e7136eb0fb04462",
        "status" : "passed",
        "time" : {
          "start" : 1733962816933,
          "stop" : 1733962845705,
          "duration" : 28772
        }
      }, {
        "uid" : "f4d73d9a652497ab",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/f4d73d9a652497ab",
        "status" : "passed",
        "time" : {
          "start" : 1733959422340,
          "stop" : 1733959441651,
          "duration" : 19311
        }
      }, {
        "uid" : "88aacb2a731fcbfa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/88aacb2a731fcbfa",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733954885500,
          "stop" : 1733954885500,
          "duration" : 0
        }
      }, {
        "uid" : "68c40a77f0a69cd3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/68c40a77f0a69cd3",
        "status" : "failed",
        "statusDetails" : "Failed: Prompt not found",
        "time" : {
          "start" : 1733951219862,
          "stop" : 1733951219862,
          "duration" : 0
        }
      }, {
        "uid" : "ed191ab6a35cd455",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/ed191ab6a35cd455",
        "status" : "passed",
        "time" : {
          "start" : 1733950984449,
          "stop" : 1733951021604,
          "duration" : 37155
        }
      }, {
        "uid" : "e632a05c5f6cfb07",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/e632a05c5f6cfb07",
        "status" : "passed",
        "time" : {
          "start" : 1733948676832,
          "stop" : 1733948717139,
          "duration" : 40307
        }
      }, {
        "uid" : "81a2b2a9b691789e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/81a2b2a9b691789e",
        "status" : "passed",
        "time" : {
          "start" : 1733947747268,
          "stop" : 1733947766676,
          "duration" : 19408
        }
      }, {
        "uid" : "b3199524c0b7218e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/b3199524c0b7218e",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733931908841,
          "stop" : 1733932001607,
          "duration" : 92766
        }
      }, {
        "uid" : "77af23f4262a5097",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/77af23f4262a5097",
        "status" : "failed",
        "statusDetails" : "Failed: Prompt not found",
        "time" : {
          "start" : 1733930405050,
          "stop" : 1733930405050,
          "duration" : 0
        }
      }, {
        "uid" : "de5048f741bb9a67",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/de5048f741bb9a67",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733892310409,
          "stop" : 1733892403108,
          "duration" : 92699
        }
      }, {
        "uid" : "c583e4d6ea6732f2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/c583e4d6ea6732f2",
        "status" : "failed",
        "statusDetails" : "Failed: Prompt not found",
        "time" : {
          "start" : 1733891283042,
          "stop" : 1733891283042,
          "duration" : 0
        }
      }, {
        "uid" : "38a94e927c3303b1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/38a94e927c3303b1",
        "status" : "passed",
        "time" : {
          "start" : 1733879223968,
          "stop" : 1733879261363,
          "duration" : 37395
        }
      }, {
        "uid" : "685b47e94a81ee17",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/685b47e94a81ee17",
        "status" : "passed",
        "time" : {
          "start" : 1733878797399,
          "stop" : 1733878884406,
          "duration" : 87007
        }
      }, {
        "uid" : "5bb01a9e6f3ae299",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/5bb01a9e6f3ae299",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733868442846,
          "stop" : 1733868535661,
          "duration" : 92815
        }
      }, {
        "uid" : "7ff6e6ae107858bb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1888/#testresult/7ff6e6ae107858bb",
        "status" : "passed",
        "time" : {
          "start" : 1733867909100,
          "stop" : 1733867938358,
          "duration" : 29258
        }
      }, {
        "uid" : "dc0f3ad24abdcf2c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1884/#testresult/dc0f3ad24abdcf2c",
        "status" : "passed",
        "time" : {
          "start" : 1733855651480,
          "stop" : 1733855686775,
          "duration" : 35295
        }
      } ]
    },
    "tags" : [ "nrf9160dk", "anyio", "mikes_testbench", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "faa9b3157196a734.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}