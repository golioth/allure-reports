{"uid":"9c8f0d828ab59db2","name":"test_hello","fullName":"examples.esp_idf.cpp.pytest.test_sample#test_hello","historyId":"01825beeab41f1aa93031b146a613606","time":{"start":1761334501421,"stop":1761334516889,"duration":15468},"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff9a193770>\ndevice = <golioth.golioth.Device object at 0xffff9a09c440>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1761334471886,"stop":1761334471886,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1761334471887,"stop":1761334471887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1761334471888,"stop":1761334471888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1761334471889,"stop":1761334471889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1761334471889,"stop":1761334471889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1761334471890,"stop":1761334471890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1761334471890,"stop":1761334471890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1761334471891,"stop":1761334500569,"duration":28678},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1761334471922,"stop":1761334471922,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1761334471923,"stop":1761334471923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1761334471923,"stop":1761334471923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1761334471924,"stop":1761334471924,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1761334471924,"stop":1761334471924,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1761334500570,"stop":1761334500952,"duration":382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1761334500952,"stop":1761334501418,"duration":466},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = len([])","statusTrace":"board = <pytest_hil.espidfboard.ESPIDFBoard object at 0xffff9a193770>\ndevice = <golioth.golioth.Device object at 0xffff9a09c440>\n\n    async def test_hello(board, device):\n        # Set Golioth credential\n        golioth_cred = (await device.credentials.list())[0]\n        await board.set_golioth_psk_credentials(golioth_cred.identity, golioth_cred.key)\n    \n        # Record timestamp and wait for fourth hello message\n        start = datetime.now(timezone.utc)\n        await board.wait_for_regex_in_line('.*Hello, Golioth 2!', timeout_s=90.0)\n    \n        # Check logs for hello messages\n        end = datetime.now(timezone.utc)\n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n        r = re.compile(\".*Hello, Golioth 1!\")\n        matching_log = list(filter(r.match, [str(l) for l in logs]))\n>       assert len(matching_log) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\nexamples/esp_idf/cpp/pytest/test_sample.py:24: AssertionError","steps":[],"attachments":[{"uid":"acca414920695cc3","name":"stdout","source":"acca414920695cc3.txt","type":"text/plain","size":9624}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"device::0","time":{"start":1761334517055,"stop":1761334517403,"duration":348},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1761334517405,"stop":1761334517405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1761334517407,"stop":1761334517410,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"93b2c09a7e87"},{"name":"thread","value":"245-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.cpp.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":10,"unknown":0,"total":12},"items":[{"uid":"6695bb2614935f3a","reportUrl":"https://golioth.github.io/allure-reports/branch/823//#testresult/6695bb2614935f3a","status":"passed","time":{"start":1761326635822,"stop":1761326650141,"duration":14319}},{"uid":"931b2e406236e062","reportUrl":"https://golioth.github.io/allure-reports/branch/822//#testresult/931b2e406236e062","status":"broken","statusDetails":"httpx.ReadTimeout","time":{"start":1761318079706,"stop":1761318097376,"duration":17670}},{"uid":"c86c94fa7e982703","reportUrl":"https://golioth.github.io/allure-reports/branch/813//#testresult/c86c94fa7e982703","status":"passed","time":{"start":1761257994086,"stop":1761258007778,"duration":13692}},{"uid":"361c9f3cfbcc9110","reportUrl":"https://golioth.github.io/allure-reports/branch/809//#testresult/361c9f3cfbcc9110","status":"passed","time":{"start":1761248513800,"stop":1761248526808,"duration":13008}},{"uid":"2805120270a291b2","reportUrl":"https://golioth.github.io/allure-reports/branch/790//#testresult/2805120270a291b2","status":"passed","time":{"start":1761074832112,"stop":1761074845870,"duration":13758}},{"uid":"5cb1e77c04b46479","reportUrl":"https://golioth.github.io/allure-reports/branch/790//#testresult/5cb1e77c04b46479","status":"passed","time":{"start":1761074832112,"stop":1761074845870,"duration":13758}},{"uid":"7e8ace592a0117d","reportUrl":"https://golioth.github.io/allure-reports/branch/788//#testresult/7e8ace592a0117d","status":"passed","time":{"start":1761069254541,"stop":1761069267875,"duration":13334}},{"uid":"dedf9bb01eab53c2","reportUrl":"https://golioth.github.io/allure-reports/branch/788//#testresult/dedf9bb01eab53c2","status":"passed","time":{"start":1761064757679,"stop":1761064771187,"duration":13508}},{"uid":"553e8a0b3f847625","reportUrl":"https://golioth.github.io/allure-reports/branch/787//#testresult/553e8a0b3f847625","status":"passed","time":{"start":1761056198097,"stop":1761056212553,"duration":14456}},{"uid":"4b91d48d73abc587","reportUrl":"https://golioth.github.io/allure-reports/branch/784//#testresult/4b91d48d73abc587","status":"passed","time":{"start":1760994161502,"stop":1760994176148,"duration":14646}},{"uid":"f7d20be5abc03f3","reportUrl":"https://golioth.github.io/allure-reports/branch/783//#testresult/f7d20be5abc03f3","status":"passed","time":{"start":1760991424611,"stop":1760991438019,"duration":13408}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","mikes_testbench"]},"source":"9c8f0d828ab59db2.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}