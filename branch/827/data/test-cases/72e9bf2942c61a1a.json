{"uid":"72e9bf2942c61a1a","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"c3c56fd394e8a51c6a7b951f90915fb9","time":{"start":1761335623324,"stop":1761335689040,"duration":65716},"status":"failed","statusMessage":"AssertionError: assert 2 == 1","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa502ee40>\ndevice = <golioth.golioth.Device object at 0xffffa4d646e0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 2 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1761335608029,"stop":1761335608030,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1761335608030,"stop":1761335608030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1761335608031,"stop":1761335608031,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1761335608031,"stop":1761335608031,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1761335608032,"stop":1761335608032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1761335608032,"stop":1761335608034,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1761335608035,"stop":1761335608035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1761335608036,"stop":1761335608500,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1761335608036,"stop":1761335608036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1761335608500,"stop":1761335609148,"duration":648},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1761335609149,"stop":1761335622679,"duration":13530},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1761335622679,"stop":1761335623321,"duration":642},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 2 == 1","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa502ee40>\ndevice = <golioth.golioth.Device object at 0xffffa4d646e0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 2 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","steps":[],"attachments":[{"uid":"f2a37a39b93ccc92","name":"log","source":"f2a37a39b93ccc92.txt","type":"text/plain","size":31739}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1761335689278,"stop":1761335689476,"duration":198},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1761335689478,"stop":1761335689801,"duration":323},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1761335689803,"stop":1761335689805,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1761335689810,"stop":1761335689810,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"5b4c375449c9"},{"name":"thread","value":"642-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":10,"unknown":0,"total":12},"items":[{"uid":"6058202638a6c364","reportUrl":"https://golioth.github.io/allure-reports/branch/823//#testresult/6058202638a6c364","status":"passed","time":{"start":1761327247533,"stop":1761327302800,"duration":55267}},{"uid":"47762024fd6c35dc","reportUrl":"https://golioth.github.io/allure-reports/branch/822//#testresult/47762024fd6c35dc","status":"passed","time":{"start":1761319202850,"stop":1761319268189,"duration":65339}},{"uid":"72ad63b283ac0d5","reportUrl":"https://golioth.github.io/allure-reports/branch/813//#testresult/72ad63b283ac0d5","status":"passed","time":{"start":1761260000790,"stop":1761260071636,"duration":70846}},{"uid":"240a1677703971b7","reportUrl":"https://golioth.github.io/allure-reports/branch/809//#testresult/240a1677703971b7","status":"passed","time":{"start":1761248996544,"stop":1761249049853,"duration":53309}},{"uid":"f3b531668c0f16bf","reportUrl":"https://golioth.github.io/allure-reports/branch/790//#testresult/f3b531668c0f16bf","status":"passed","time":{"start":1761080865819,"stop":1761080919802,"duration":53983}},{"uid":"f1a1ac79a892c4d7","reportUrl":"https://golioth.github.io/allure-reports/branch/790//#testresult/f1a1ac79a892c4d7","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1761078034695,"stop":1761078101786,"duration":67091}},{"uid":"de24f903c7a685b0","reportUrl":"https://golioth.github.io/allure-reports/branch/788//#testresult/de24f903c7a685b0","status":"passed","time":{"start":1761070180033,"stop":1761070235276,"duration":55243}},{"uid":"227996e52450d051","reportUrl":"https://golioth.github.io/allure-reports/branch/788//#testresult/227996e52450d051","status":"passed","time":{"start":1761066041231,"stop":1761066094809,"duration":53578}},{"uid":"180ef7c7787465e2","reportUrl":"https://golioth.github.io/allure-reports/branch/787//#testresult/180ef7c7787465e2","status":"passed","time":{"start":1761059015735,"stop":1761059070220,"duration":54485}},{"uid":"18874d63a2e93cb6","reportUrl":"https://golioth.github.io/allure-reports/branch/784//#testresult/18874d63a2e93cb6","status":"passed","time":{"start":1760994662522,"stop":1760994717036,"duration":54514}},{"uid":"86e65cf4be53fc52","reportUrl":"https://golioth.github.io/allure-reports/branch/783//#testresult/86e65cf4be53fc52","status":"passed","time":{"start":1760992573056,"stop":1760992627854,"duration":54798}}]},"tags":["mikes_orange_pi","anyio","rak5010","zephyr"]},"source":"72e9bf2942c61a1a.json","parameterValues":["'rak5010'","'zephyr'"]}