{
  "uid" : "79288968c79d8e60",
  "name" : "test_cert_provisioning",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning",
  "historyId" : "d3aaa9f3b54361e7a59e70881b33f3cb",
  "time" : {
    "start" : 1734236930691,
    "stop" : 1734236936915,
    "duration" : 6224
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
  "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f5c598ab910>\nproject = <golioth.golioth.Project object at 0x7f5c599d4650>\ndevice_name = 'certificate-XKAFGbrGrQbDnITD'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '675e5b024d083fbbf9c2296d', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734236930063,
      "stop" : 1734236930063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734236930366,
      "stop" : 1734236930366,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734236930063,
      "stop" : 1734236930064,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734236930063,
      "stop" : 1734236930063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734236930680,
      "stop" : 1734236930681,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734236930063,
      "stop" : 1734236930063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred",
    "time" : {
      "start" : 1734236930367,
      "stop" : 1734236930680,
      "duration" : 313
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734236930063,
      "stop" : 1734236930063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734236930063,
      "stop" : 1734236930063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734236930064,
      "stop" : 1734236930366,
      "duration" : 302
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734236930063,
      "stop" : 1734236930063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734236930681,
      "stop" : 1734236930690,
      "duration" : 9
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mcumgr_conn_args",
    "time" : {
      "start" : 1734236930690,
      "stop" : 1734236930690,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
    "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f5c598ab910>\nproject = <golioth.golioth.Project object at 0x7f5c599d4650>\ndevice_name = 'certificate-XKAFGbrGrQbDnITD'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '675e5b024d083fbbf9c2296d', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5829ab6f916f4cdd",
      "name" : "log",
      "source" : "5829ab6f916f4cdd.txt",
      "type" : "text/plain",
      "size" : 17358
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_name::0",
    "time" : {
      "start" : 1734236937110,
      "stop" : 1734236937370,
      "duration" : 260
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734236937372,
      "stop" : 1734236937372,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut::0",
    "time" : {
      "start" : 1734236936976,
      "stop" : 1734236936978,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred::0",
    "time" : {
      "start" : 1734236936979,
      "stop" : 1734236937110,
      "duration" : 131
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734236937371,
      "stop" : 1734236937372,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "native_sim_32"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.native_sim_32"
  }, {
    "name" : "tag",
    "value" : "GitHub Actions 51"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "88d3b7b5bd4f"
  }, {
    "name" : "thread",
    "value" : "27218-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'native_sim_32'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 22,
        "unknown" : 0,
        "total" : 23
      },
      "items" : [ {
        "uid" : "f7795d08b2c2b229",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/f7795d08b2c2b229",
        "status" : "passed",
        "time" : {
          "start" : 1734125987628,
          "stop" : 1734126004607,
          "duration" : 16979
        }
      }, {
        "uid" : "6c1e585e614d7fad",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/6c1e585e614d7fad",
        "status" : "passed",
        "time" : {
          "start" : 1734043578117,
          "stop" : 1734043594948,
          "duration" : 16831
        }
      }, {
        "uid" : "2326184ed95797e0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/2326184ed95797e0",
        "status" : "passed",
        "time" : {
          "start" : 1734042621549,
          "stop" : 1734042638312,
          "duration" : 16763
        }
      }, {
        "uid" : "e4ea21bb8a3e71d9",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/e4ea21bb8a3e71d9",
        "status" : "passed",
        "time" : {
          "start" : 1734022427894,
          "stop" : 1734022444870,
          "duration" : 16976
        }
      }, {
        "uid" : "e56cb046b624f34b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/e56cb046b624f34b",
        "status" : "passed",
        "time" : {
          "start" : 1734017121351,
          "stop" : 1734017138075,
          "duration" : 16724
        }
      }, {
        "uid" : "490c456210ce8bc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/490c456210ce8bc",
        "status" : "passed",
        "time" : {
          "start" : 1734016907920,
          "stop" : 1734016924726,
          "duration" : 16806
        }
      }, {
        "uid" : "3759377ffa16cdae",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/3759377ffa16cdae",
        "status" : "passed",
        "time" : {
          "start" : 1733937004355,
          "stop" : 1733937021126,
          "duration" : 16771
        }
      }, {
        "uid" : "6a156fd00d2940e7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/6a156fd00d2940e7",
        "status" : "passed",
        "time" : {
          "start" : 1733958030764,
          "stop" : 1733958047609,
          "duration" : 16845
        }
      }, {
        "uid" : "aa5a7dc7457f2fcf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/aa5a7dc7457f2fcf",
        "status" : "passed",
        "time" : {
          "start" : 1733946405451,
          "stop" : 1733946422470,
          "duration" : 17019
        }
      }, {
        "uid" : "d8e3ffd8eebee8e0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/d8e3ffd8eebee8e0",
        "status" : "passed",
        "time" : {
          "start" : 1733937400742,
          "stop" : 1733937417798,
          "duration" : 17056
        }
      }, {
        "uid" : "8c96133d7793889b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/8c96133d7793889b",
        "status" : "passed",
        "time" : {
          "start" : 1733937290904,
          "stop" : 1733937307726,
          "duration" : 16822
        }
      }, {
        "uid" : "3adc935a8d4aa7ed",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/3adc935a8d4aa7ed",
        "status" : "passed",
        "time" : {
          "start" : 1733937039783,
          "stop" : 1733937056822,
          "duration" : 17039
        }
      }, {
        "uid" : "f7e36085e2572883",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/f7e36085e2572883",
        "status" : "passed",
        "time" : {
          "start" : 1733937004355,
          "stop" : 1733937021126,
          "duration" : 16771
        }
      }, {
        "uid" : "b05c1a29413799cd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/b05c1a29413799cd",
        "status" : "passed",
        "time" : {
          "start" : 1733884422137,
          "stop" : 1733884439521,
          "duration" : 17384
        }
      }, {
        "uid" : "abbc08b9c8720dfa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/abbc08b9c8720dfa",
        "status" : "passed",
        "time" : {
          "start" : 1733884157998,
          "stop" : 1733884174847,
          "duration" : 16849
        }
      }, {
        "uid" : "3951280bef2f402d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/3951280bef2f402d",
        "status" : "passed",
        "time" : {
          "start" : 1733884422137,
          "stop" : 1733884439521,
          "duration" : 17384
        }
      }, {
        "uid" : "28ed6c03eaf7e850",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/28ed6c03eaf7e850",
        "status" : "passed",
        "time" : {
          "start" : 1733884157998,
          "stop" : 1733884174847,
          "duration" : 16849
        }
      }, {
        "uid" : "78b57f6c2c48bd0d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/78b57f6c2c48bd0d",
        "status" : "passed",
        "time" : {
          "start" : 1733871673015,
          "stop" : 1733871689929,
          "duration" : 16914
        }
      }, {
        "uid" : "4c2be708d980d724",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/4c2be708d980d724",
        "status" : "passed",
        "time" : {
          "start" : 1733871675668,
          "stop" : 1733871692849,
          "duration" : 17181
        }
      }, {
        "uid" : "598bca8cf31125bd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/598bca8cf31125bd",
        "status" : "passed",
        "time" : {
          "start" : 1733860890637,
          "stop" : 1733860907390,
          "duration" : 16753
        }
      } ]
    },
    "tags" : [ "anyio", "native_sim_32", "GitHub Actions 51", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "79288968c79d8e60.json",
  "parameterValues" : [ "'native_sim_32'", "'zephyr'" ]
}