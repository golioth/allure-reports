{
  "uid" : "cab16b4884cbad75",
  "name" : "test_cert_provisioning",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning",
  "historyId" : "458eb174ce44d77bb1e837d47827844b",
  "time" : {
    "start" : 1734237000341,
    "stop" : 1734237006586,
    "duration" : 6245
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
  "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f66fc6ab5d0>\nproject = <golioth.golioth.Project object at 0x7f66fc785910>\ndevice_name = 'certificate-GXWanCUDQmJygcgO'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '675e5b484d083fbbf9c22971', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1734236999692,
      "stop" : 1734236999692,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734236999692,
      "stop" : 1734236999692,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734237000331,
      "stop" : 1734237000332,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734236999692,
      "stop" : 1734236999692,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mcumgr_conn_args",
    "time" : {
      "start" : 1734237000340,
      "stop" : 1734237000340,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "shell",
    "time" : {
      "start" : 1734237000332,
      "stop" : 1734237000340,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734236999693,
      "stop" : 1734236999952,
      "duration" : 259
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred",
    "time" : {
      "start" : 1734236999953,
      "stop" : 1734237000331,
      "duration" : 378
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734236999692,
      "stop" : 1734236999692,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734236999952,
      "stop" : 1734236999952,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734236999692,
      "stop" : 1734236999692,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734236999692,
      "stop" : 1734236999692,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734236999692,
      "stop" : 1734236999692,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.",
    "statusTrace" : "request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0x7f66fc6ab5d0>\nproject = <golioth.golioth.Project object at 0x7f66fc785910>\ndevice_name = 'certificate-GXWanCUDQmJygcgO'\nmcumgr_conn_args = ['--conntype=udp', '--connstring=127.0.0.1:1337']\ncertificate_cred = '675e5b484d083fbbf9c22971', wifi_ssid = None, wifi_psk = None\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:179: in readlines_until\n    line = self.readline(0.1, print_output)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), timeout = 0.1, print_output = True\n\n    def readline(self, timeout: float | None = None, print_output: bool = True) -> str:\n        \"\"\"\n        Read line from device output. If timeout is not provided, then use\n        base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if self.is_device_connected() or not self._device_read_queue.empty():\n            data = self._read_from_queue(timeout)\n        else:\n            msg = 'No connection to the device and no more data to read.'\n            logger.error(msg)\n>           raise TwisterHarnessException('No connection to the device and no more data to read.')\nE           twister_harness.exceptions.TwisterHarnessException: No connection to the device and no more data to read.\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:146: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6cbfb24726e44628",
      "name" : "log",
      "source" : "6cbfb24726e44628.txt",
      "type" : "text/plain",
      "size" : 17361
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "dut::0",
    "time" : {
      "start" : 1734237006626,
      "stop" : 1734237006627,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734237007324,
      "stop" : 1734237007324,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "certificate_cred::0",
    "time" : {
      "start" : 1734237006627,
      "stop" : 1734237006848,
      "duration" : 221
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734237007325,
      "stop" : 1734237007325,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name::0",
    "time" : {
      "start" : 1734237006849,
      "stop" : 1734237007323,
      "duration" : 474
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "native_sim_64"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.native_sim_64"
  }, {
    "name" : "tag",
    "value" : "GitHub Actions 42"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "47deb63c7c0f"
  }, {
    "name" : "thread",
    "value" : "27096-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'native_sim_64'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 22,
        "unknown" : 0,
        "total" : 23
      },
      "items" : [ {
        "uid" : "6cd6c5bb433c2f01",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/6cd6c5bb433c2f01",
        "status" : "passed",
        "time" : {
          "start" : 1734125987299,
          "stop" : 1734126003890,
          "duration" : 16591
        }
      }, {
        "uid" : "6dd52ca7ec838f6d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/6dd52ca7ec838f6d",
        "status" : "passed",
        "time" : {
          "start" : 1734043581711,
          "stop" : 1734043598227,
          "duration" : 16516
        }
      }, {
        "uid" : "e12159f5d8055313",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/e12159f5d8055313",
        "status" : "passed",
        "time" : {
          "start" : 1734042621443,
          "stop" : 1734042638259,
          "duration" : 16816
        }
      }, {
        "uid" : "6d03ca746869ddcf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/6d03ca746869ddcf",
        "status" : "passed",
        "time" : {
          "start" : 1734022422423,
          "stop" : 1734022439050,
          "duration" : 16627
        }
      }, {
        "uid" : "8fd3745cbd40de20",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/8fd3745cbd40de20",
        "status" : "passed",
        "time" : {
          "start" : 1734017112929,
          "stop" : 1734017129495,
          "duration" : 16566
        }
      }, {
        "uid" : "6cc7765fc3dcda56",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/6cc7765fc3dcda56",
        "status" : "passed",
        "time" : {
          "start" : 1734016904202,
          "stop" : 1734016921071,
          "duration" : 16869
        }
      }, {
        "uid" : "216d8168d644a46b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/216d8168d644a46b",
        "status" : "passed",
        "time" : {
          "start" : 1733937027156,
          "stop" : 1733937043974,
          "duration" : 16818
        }
      }, {
        "uid" : "2e2fc9b04e8e06af",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/2e2fc9b04e8e06af",
        "status" : "passed",
        "time" : {
          "start" : 1733958033028,
          "stop" : 1733958049680,
          "duration" : 16652
        }
      }, {
        "uid" : "144bf41a7002b6ef",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/144bf41a7002b6ef",
        "status" : "passed",
        "time" : {
          "start" : 1733946415101,
          "stop" : 1733946431925,
          "duration" : 16824
        }
      }, {
        "uid" : "5d72e8ae5b22bb1e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/5d72e8ae5b22bb1e",
        "status" : "passed",
        "time" : {
          "start" : 1733937396672,
          "stop" : 1733937413440,
          "duration" : 16768
        }
      }, {
        "uid" : "8a5a1de29ecdff65",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/8a5a1de29ecdff65",
        "status" : "passed",
        "time" : {
          "start" : 1733937291125,
          "stop" : 1733937307745,
          "duration" : 16620
        }
      }, {
        "uid" : "53b49c36c812a5a7",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/53b49c36c812a5a7",
        "status" : "passed",
        "time" : {
          "start" : 1733937050620,
          "stop" : 1733937067513,
          "duration" : 16893
        }
      }, {
        "uid" : "4336c1ac2799c4cc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/4336c1ac2799c4cc",
        "status" : "passed",
        "time" : {
          "start" : 1733937027156,
          "stop" : 1733937043974,
          "duration" : 16818
        }
      }, {
        "uid" : "b54f519fd2036cab",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/b54f519fd2036cab",
        "status" : "passed",
        "time" : {
          "start" : 1733884421475,
          "stop" : 1733884438143,
          "duration" : 16668
        }
      }, {
        "uid" : "52036b19d3cf44e8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/52036b19d3cf44e8",
        "status" : "passed",
        "time" : {
          "start" : 1733884163007,
          "stop" : 1733884179958,
          "duration" : 16951
        }
      }, {
        "uid" : "fc14a4c841a15153",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/fc14a4c841a15153",
        "status" : "passed",
        "time" : {
          "start" : 1733884421475,
          "stop" : 1733884438143,
          "duration" : 16668
        }
      }, {
        "uid" : "41f39a9ee47a40da",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/41f39a9ee47a40da",
        "status" : "passed",
        "time" : {
          "start" : 1733884163007,
          "stop" : 1733884179958,
          "duration" : 16951
        }
      }, {
        "uid" : "18206d966a6921fb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/18206d966a6921fb",
        "status" : "passed",
        "time" : {
          "start" : 1733871675858,
          "stop" : 1733871692816,
          "duration" : 16958
        }
      }, {
        "uid" : "b0dc4be7b96204d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1893/#testresult/b0dc4be7b96204d",
        "status" : "passed",
        "time" : {
          "start" : 1733871683863,
          "stop" : 1733871700404,
          "duration" : 16541
        }
      }, {
        "uid" : "558a6c4d8e312082",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1887/#testresult/558a6c4d8e312082",
        "status" : "passed",
        "time" : {
          "start" : 1733860894591,
          "stop" : 1733860911605,
          "duration" : 17014
        }
      } ]
    },
    "tags" : [ "native_sim_64", "anyio", "GitHub Actions 42", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "cab16b4884cbad75.json",
  "parameterValues" : [ "'native_sim_64'", "'zephyr'" ]
}