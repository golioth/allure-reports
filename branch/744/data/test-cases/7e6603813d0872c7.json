{"uid":"7e6603813d0872c7","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"cb1422e4370021e6294c8318ca9786ac","time":{"start":1759773329588,"stop":1759773374697,"duration":45109},"status":"failed","statusMessage":"AssertionError: assert 9 == 4\n +  where 9 = int('9')","statusTrace":"board = <pytest_hil.esp32_devkitc_wrover.ESP32DevKitCWROVER object at 0xffff81ee7230>\ndevice = <golioth.golioth.Device object at 0xffff81cc1d30>\nproject = <golioth.golioth.Project object at 0xffff81e596a0>\nreleases = {'test_blocks': Release <68e40283b6c731f600fa69b4, release_tags=[], device_tags=['68e40282b6c731f600fa69b1'], artifact...ease_tags=[], device_tags=['68e40282b6c731f600fa69b1'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 9 == 4\nE                    +  where 9 = int('9')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1759773284303,"stop":1759773284303,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759773284304,"stop":1759773284304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759773284305,"stop":1759773284305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759773284306,"stop":1759773284306,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759773284306,"stop":1759773284307,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759773284307,"stop":1759773284308,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759773284308,"stop":1759773284308,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759773284309,"stop":1759773306007,"duration":21698},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759773306008,"stop":1759773310800,"duration":4792},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759773310800,"stop":1759773311533,"duration":733},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759773311533,"stop":1759773313345,"duration":1812},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1759773313346,"stop":1759773313789,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1759773313790,"stop":1759773314532,"duration":742},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1759773314532,"stop":1759773316359,"duration":1827},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1759773329585,"stop":1759773329585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 9 == 4\n +  where 9 = int('9')","statusTrace":"board = <pytest_hil.esp32_devkitc_wrover.ESP32DevKitCWROVER object at 0xffff81ee7230>\ndevice = <golioth.golioth.Device object at 0xffff81cc1d30>\nproject = <golioth.golioth.Project object at 0xffff81e596a0>\nreleases = {'test_blocks': Release <68e40283b6c731f600fa69b4, release_tags=[], device_tags=['68e40282b6c731f600fa69b1'], artifact...ease_tags=[], device_tags=['68e40282b6c731f600fa69b1'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 9 == 4\nE                    +  where 9 = int('9')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"e145bd98aef53b58","name":"stdout","source":"e145bd98aef53b58.txt","type":"text/plain","size":511}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1759773375012,"stop":1759773375705,"duration":693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1759773375707,"stop":1759773377448,"duration":1741},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1759773377450,"stop":1759773378149,"duration":699},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1759773378152,"stop":1759773378152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1759773378154,"stop":1759773378154,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759773378156,"stop":1759773378510,"duration":354},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759773378512,"stop":1759773378512,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759773378514,"stop":1759773378524,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"88a5d2d2f94d"},{"name":"thread","value":"228-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":11,"unknown":0,"total":14},"items":[{"uid":"ca3094c3863dc4e0","reportUrl":"https://golioth.github.io/allure-reports/branch/743//#testresult/ca3094c3863dc4e0","status":"passed","time":{"start":1759763820939,"stop":1759763868560,"duration":47621}},{"uid":"2546ec54ad4b8cd1","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/2546ec54ad4b8cd1","status":"passed","time":{"start":1759514854183,"stop":1759514901816,"duration":47633}},{"uid":"c71bb4dfea1dd4df","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/c71bb4dfea1dd4df","status":"passed","time":{"start":1759375352129,"stop":1759375399326,"duration":47197}},{"uid":"98135b0559523ee","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/98135b0559523ee","status":"passed","time":{"start":1759514854183,"stop":1759514901816,"duration":47633}},{"uid":"76f91c4e2a477011","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/76f91c4e2a477011","status":"passed","time":{"start":1759514854183,"stop":1759514901816,"duration":47633}},{"uid":"e7e5dee35577e186","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/e7e5dee35577e186","status":"passed","time":{"start":1759246937818,"stop":1759246985569,"duration":47751}},{"uid":"cb67ecd02ac6fff9","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/cb67ecd02ac6fff9","status":"passed","time":{"start":1759380020805,"stop":1759380068473,"duration":47668}},{"uid":"d8101077734f537d","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/d8101077734f537d","status":"passed","time":{"start":1759375352129,"stop":1759375399326,"duration":47197}},{"uid":"cd34f46a85f2640a","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/cd34f46a85f2640a","status":"passed","time":{"start":1759271896264,"stop":1759271943566,"duration":47302}},{"uid":"90acbdc3e26631eb","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/90acbdc3e26631eb","status":"passed","time":{"start":1759246937818,"stop":1759246985569,"duration":47751}},{"uid":"bde17a6845afc48d","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/bde17a6845afc48d","status":"broken","statusDetails":"httpx.ConnectError: [Errno -5] No address associated with hostname","time":{"start":1759180042814,"stop":1759180056345,"duration":13531}},{"uid":"7d1025c994036a0b","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/7d1025c994036a0b","status":"passed","time":{"start":1759163127539,"stop":1759163175328,"duration":47789}},{"uid":"d51066da72f0c7e1","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/d51066da72f0c7e1","status":"broken","statusDetails":"ValueError: Unknown board","time":{"start":1759122961365,"stop":1759122961365,"duration":0}}]},"tags":["anyio","sams_orange_pi","esp32_devkitc_wrover","zephyr"]},"source":"7e6603813d0872c7.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}