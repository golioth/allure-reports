{"uid":"b6dce535a9973ada","name":"test_fw_update","fullName":"examples.esp_idf.fw_update.pytest.test_sample#test_fw_update","historyId":"48c502b7c3a18589bd5b8c82c76807ee","time":{"start":1732724222227,"stop":1732724222227,"duration":0},"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1278: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '0', 'fw_update.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1280: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--allure-board\") or item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:110: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:720: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732724222231,"stop":1732724222231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1732724222232,"stop":1732724222260,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1732724222261,"stop":1732724222261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1732724222261,"stop":1732724222261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732724222262,"stop":1732724222263,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1732724222262,"stop":1732724222262,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1732724222263,"stop":1732724222264,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732724222263,"stop":1732724222263,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1732724222264,"stop":1732724222264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1732724222264,"stop":1732724222264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732724222273,"stop":1732724222274,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732724222274,"stop":1732724222275,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732724222274,"stop":1732724222274,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_name","time":{"start":1732724222275,"stop":1732724222275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1732724222275,"stop":1732724222316,"duration":41},"status":"broken","statusMessage":"SystemExit: 2\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py\", line 81, in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 929, in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 921, in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/outcome/_impl.py\", line 213, in unwrap\n    raise captured_error\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 891, in _run_tests_and_fixtures\n    retval = await coro\n             ^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/plugin.py\", line 110, in board\n    async with board.started():\n  File \"/usr/lib/python3.11/contextlib.py\", line 204, in __aenter__\n    return await anext(self.gen)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/board.py\", line 28, in started\n    self.program(self.fw_image)\n  File \"/usr/local/lib/python3.11/dist-packages/espboard.py\", line 19, in program\n    esptool.main(cmd)\n  File \"/usr/local/lib/python3.11/dist-packages/esptool/__init__.py\", line 720, in main\n    args = parser.parse_args(argv)\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1874, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1907, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2101, in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2078, in consume_positionals\n    take_action(action, args)\n  File \"/usr/lib/python3.11/argparse.py\", line 1983, in take_action\n    action(self, namespace, argument_values, option_string)\n  File \"/usr/lib/python3.11/argparse.py\", line 1246, in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1909, in parse_known_args\n    self.error(str(err))\n  File \"/usr/lib/python3.11/argparse.py\", line 2633, in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n  File \"/usr/lib/python3.11/argparse.py\", line 2620, in exit\n    _sys.exit(status)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1278: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '0', 'fw_update.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1280: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--allure-board\") or item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:110: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:720: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","steps":[],"attachments":[{"uid":"6c10908b30ccc051","name":"stderr","source":"6c10908b30ccc051.txt","type":"text/plain","size":867}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"fw_info::0","time":{"start":1732724224000,"stop":1732724224002,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32_devkitc_wrover_espidf"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"908f02e37e65"},{"name":"thread","value":"280-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":93,"unknown":0,"total":97},"items":[{"uid":"e81d22033ace9e62","reportUrl":"https://golioth.github.io/allure-reports/branch/1844//#testresult/e81d22033ace9e62","status":"passed","time":{"start":1732631961365,"stop":1732632100010,"duration":138645}},{"uid":"4ad2e1d998617469","reportUrl":"https://golioth.github.io/allure-reports/branch/1844//#testresult/4ad2e1d998617469","status":"passed","time":{"start":1732631961365,"stop":1732632100010,"duration":138645}},{"uid":"c6d7eb6c72d6cdf9","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/c6d7eb6c72d6cdf9","status":"passed","time":{"start":1732560661404,"stop":1732560782869,"duration":121465}},{"uid":"a70d4b6e34a47f5c","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/a70d4b6e34a47f5c","status":"passed","time":{"start":1732560661404,"stop":1732560782869,"duration":121465}},{"uid":"7e2e09e8b15bf67b","reportUrl":"https://golioth.github.io/allure-reports/branch/1840//#testresult/7e2e09e8b15bf67b","status":"passed","time":{"start":1732554880801,"stop":1732555004101,"duration":123300}},{"uid":"fa2cd66a7a6716d8","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/fa2cd66a7a6716d8","status":"passed","time":{"start":1732509626091,"stop":1732509754489,"duration":128398}},{"uid":"b933f1af4de9ceae","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/b933f1af4de9ceae","status":"passed","time":{"start":1732509626091,"stop":1732509754489,"duration":128398}},{"uid":"28860799a3d55306","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/28860799a3d55306","status":"passed","time":{"start":1732313573459,"stop":1732313702457,"duration":128998}},{"uid":"88140ea036616e21","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/88140ea036616e21","status":"passed","time":{"start":1732313573459,"stop":1732313702457,"duration":128998}},{"uid":"cb14c200a406cb50","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/cb14c200a406cb50","status":"passed","time":{"start":1732313573459,"stop":1732313702457,"duration":128998}},{"uid":"f23475f3a4c6dfa2","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/f23475f3a4c6dfa2","status":"passed","time":{"start":1732313573459,"stop":1732313702457,"duration":128998}},{"uid":"42b36d5cad76358f","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/42b36d5cad76358f","status":"passed","time":{"start":1732302739175,"stop":1732302888028,"duration":148853}},{"uid":"79f8424699e2e6a6","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/79f8424699e2e6a6","status":"passed","time":{"start":1732302739175,"stop":1732302888028,"duration":148853}},{"uid":"fdf704f9c39d3330","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/fdf704f9c39d3330","status":"passed","time":{"start":1732302739175,"stop":1732302888028,"duration":148853}},{"uid":"391c81468c3e7f62","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/391c81468c3e7f62","status":"passed","time":{"start":1732292931586,"stop":1732293057951,"duration":126365}},{"uid":"5179abecac290c04","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/5179abecac290c04","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732229117905,"stop":1732229222408,"duration":104503}},{"uid":"26f679cf9483c572","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/26f679cf9483c572","status":"passed","time":{"start":1732292931586,"stop":1732293057951,"duration":126365}},{"uid":"dccda02b894653d4","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/dccda02b894653d4","status":"passed","time":{"start":1732228338937,"stop":1732228471183,"duration":132246}},{"uid":"449179104bc8a5c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/449179104bc8a5c4","status":"passed","time":{"start":1732290650278,"stop":1732290794281,"duration":144003}},{"uid":"e6b33ffcea808767","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/e6b33ffcea808767","status":"passed","time":{"start":1732197495459,"stop":1732197631582,"duration":136123}}]},"tags":["esp-idf","anyio","esp32_devkitc_wrover_espidf","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')"]},"source":"b6dce535a9973ada.json","parameterValues":["'esp32_devkitc_wrover_espidf'","'esp-idf'"]}