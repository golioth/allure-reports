{"uid":"b3a9b8e46dc6d65a","name":"test_fw_update","fullName":"examples.esp_idf.fw_update.pytest.test_sample#test_fw_update","historyId":"48d0816a206ae6718f292d04b6749e18","time":{"start":1732723866323,"stop":1732723866323,"duration":0},"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1278: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '0', 'fw_update.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1280: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--allure-board\") or item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:110: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:720: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732723866326,"stop":1732723866327,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1732723866327,"stop":1732723866356,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1732723866356,"stop":1732723866357,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1732723866357,"stop":1732723866358,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1732723866358,"stop":1732723866358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732723866359,"stop":1732723866359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732723866359,"stop":1732723866359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1732723866360,"stop":1732723866360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1732723866360,"stop":1732723866360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1732723866361,"stop":1732723866369,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732723866370,"stop":1732723866370,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732723866370,"stop":1732723866371,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_name","time":{"start":1732723866371,"stop":1732723866371,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732723866371,"stop":1732723866371,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1732723866372,"stop":1732723866412,"duration":40},"status":"broken","statusMessage":"SystemExit: 2\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py\", line 81, in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 929, in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 921, in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/outcome/_impl.py\", line 213, in unwrap\n    raise captured_error\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 891, in _run_tests_and_fixtures\n    retval = await coro\n             ^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/plugin.py\", line 110, in board\n    async with board.started():\n  File \"/usr/lib/python3.11/contextlib.py\", line 204, in __aenter__\n    return await anext(self.gen)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/board.py\", line 28, in started\n    self.program(self.fw_image)\n  File \"/usr/local/lib/python3.11/dist-packages/espboard.py\", line 19, in program\n    esptool.main(cmd)\n  File \"/usr/local/lib/python3.11/dist-packages/esptool/__init__.py\", line 720, in main\n    args = parser.parse_args(argv)\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1874, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1907, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2101, in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2078, in consume_positionals\n    take_action(action, args)\n  File \"/usr/lib/python3.11/argparse.py\", line 1983, in take_action\n    action(self, namespace, argument_values, option_string)\n  File \"/usr/lib/python3.11/argparse.py\", line 1246, in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1909, in parse_known_args\n    self.error(str(err))\n  File \"/usr/lib/python3.11/argparse.py\", line 2633, in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n  File \"/usr/lib/python3.11/argparse.py\", line 2620, in exit\n    _sys.exit(status)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1278: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '0', 'fw_update.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1280: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--allure-board\") or item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:110: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:720: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","steps":[],"attachments":[{"uid":"64a95f282de82f0","name":"stderr","source":"64a95f282de82f0.txt","type":"text/plain","size":867}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"fw_info::0","time":{"start":1732723868079,"stop":1732723868082,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d2e27ca6272d"},{"name":"thread","value":"278-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":91,"unknown":0,"total":96},"items":[{"uid":"b49d68bdb1714558","reportUrl":"https://golioth.github.io/allure-reports/branch/1844//#testresult/b49d68bdb1714558","status":"passed","time":{"start":1732639654497,"stop":1732640028914,"duration":374417}},{"uid":"59edd2f3233c314","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/59edd2f3233c314","status":"passed","time":{"start":1732563615502,"stop":1732563901536,"duration":286034}},{"uid":"dd9d2a8eea801c09","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/dd9d2a8eea801c09","status":"passed","time":{"start":1732560093285,"stop":1732560203180,"duration":109895}},{"uid":"4d8da28464c5dc85","reportUrl":"https://golioth.github.io/allure-reports/branch/1840//#testresult/4d8da28464c5dc85","status":"passed","time":{"start":1732554437014,"stop":1732554548836,"duration":111822}},{"uid":"e93b456b68d8356c","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/e93b456b68d8356c","status":"passed","time":{"start":1732508914666,"stop":1732509233101,"duration":318435}},{"uid":"8aed1cdb77d6ea50","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/8aed1cdb77d6ea50","status":"passed","time":{"start":1732508914666,"stop":1732509233101,"duration":318435}},{"uid":"e29986bb100071d5","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/e29986bb100071d5","status":"passed","time":{"start":1732317059436,"stop":1732317171446,"duration":112010}},{"uid":"ba098dcf92ca5f93","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/ba098dcf92ca5f93","status":"passed","time":{"start":1732317059436,"stop":1732317171446,"duration":112010}},{"uid":"ccc2557d0e35862d","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/ccc2557d0e35862d","status":"passed","time":{"start":1732317059436,"stop":1732317171446,"duration":112010}},{"uid":"a7caec7c22207229","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/a7caec7c22207229","status":"failed","statusDetails":"Failed: Timeout >600.0s","time":{"start":1732312384140,"stop":1732312954743,"duration":570603}},{"uid":"1c84f0a8ba587f2","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/1c84f0a8ba587f2","status":"passed","time":{"start":1732301961871,"stop":1732302077710,"duration":115839}},{"uid":"aa39e2262aeba2d","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/aa39e2262aeba2d","status":"passed","time":{"start":1732301961871,"stop":1732302077710,"duration":115839}},{"uid":"826a0d4fd0ecdddc","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/826a0d4fd0ecdddc","status":"passed","time":{"start":1732301961871,"stop":1732302077710,"duration":115839}},{"uid":"69c1ca31b3723d56","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/69c1ca31b3723d56","status":"passed","time":{"start":1732292432084,"stop":1732292733287,"duration":301203}},{"uid":"ec8dbc0e9f3c6fd4","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/ec8dbc0e9f3c6fd4","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732229756521,"stop":1732229860911,"duration":104390}},{"uid":"993eebe41c5fe827","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/993eebe41c5fe827","status":"passed","time":{"start":1732292432084,"stop":1732292733287,"duration":301203}},{"uid":"d7aa849250934eeb","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/d7aa849250934eeb","status":"passed","time":{"start":1732228317448,"stop":1732228621525,"duration":304077}},{"uid":"86a615ac0ef4a692","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/86a615ac0ef4a692","status":"passed","time":{"start":1732289665398,"stop":1732289966496,"duration":301098}},{"uid":"c4c5d242b1c1a092","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/c4c5d242b1c1a092","status":"passed","time":{"start":1732195094433,"stop":1732195357141,"duration":262708}},{"uid":"13758722a8b018b1","reportUrl":"https://golioth.github.io/allure-reports/branch/1826//#testresult/13758722a8b018b1","status":"passed","time":{"start":1732287328659,"stop":1732287462614,"duration":133955}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","jons_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')"]},"source":"b3a9b8e46dc6d65a.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}