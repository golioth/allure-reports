{"uid":"7ac3e8c18e706db3","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"a3454c74416fe64989185d5a90a344cf","time":{"start":1732725094340,"stop":1732725187137,"duration":92797},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9432f110>\ndevice = <golioth.golioth.Device object at 0xffff9434a590>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732725065211,"stop":1732725065211,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732725065212,"stop":1732725065212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732725065212,"stop":1732725065212,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732725065213,"stop":1732725065213,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732725065213,"stop":1732725065213,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732725065214,"stop":1732725065216,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732725065217,"stop":1732725065217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732725065217,"stop":1732725065217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732725065218,"stop":1732725065634,"duration":416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732725065634,"stop":1732725066503,"duration":869},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732725066504,"stop":1732725093286,"duration":26782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732725093286,"stop":1732725094338,"duration":1052},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9432f110>\ndevice = <golioth.golioth.Device object at 0xffff9434a590>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"9b52839eb0b9dd12","name":"log","source":"9b52839eb0b9dd12.txt","type":"text/plain","size":15029}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732725187420,"stop":1732725187456,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732725187458,"stop":1732725187869,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732725187871,"stop":1732725187874,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732725187879,"stop":1732725187879,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"11a98ce5e427"},{"name":"thread","value":"602-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":5,"skipped":0,"passed":32,"unknown":0,"total":44},"items":[{"uid":"86c8045b5a592160","reportUrl":"https://golioth.github.io/allure-reports/branch/1844//#testresult/86c8045b5a592160","status":"passed","time":{"start":1732632803120,"stop":1732632823070,"duration":19950}},{"uid":"b4462f70d744c55c","reportUrl":"https://golioth.github.io/allure-reports/branch/1844//#testresult/b4462f70d744c55c","status":"passed","time":{"start":1732632803120,"stop":1732632823070,"duration":19950}},{"uid":"2503d71d04d232e4","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/2503d71d04d232e4","status":"passed","time":{"start":1732563936547,"stop":1732563956411,"duration":19864}},{"uid":"435a3a5db86667f8","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/435a3a5db86667f8","status":"passed","time":{"start":1732561669915,"stop":1732561708705,"duration":38790}},{"uid":"2bada2b3dd163eb6","reportUrl":"https://golioth.github.io/allure-reports/branch/1840//#testresult/2bada2b3dd163eb6","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1732555848185,"stop":1732555848185,"duration":0}},{"uid":"1d2ab88ae7e021e6","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/1d2ab88ae7e021e6","status":"passed","time":{"start":1732549802429,"stop":1732549822245,"duration":19816}},{"uid":"4701ac7a824d234e","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/4701ac7a824d234e","status":"passed","time":{"start":1732467399115,"stop":1732467446831,"duration":47716}},{"uid":"e3fa7359d2cb9ad4","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/e3fa7359d2cb9ad4","status":"passed","time":{"start":1732408483447,"stop":1732408518880,"duration":35433}},{"uid":"aa344ce89ccd4166","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/aa344ce89ccd4166","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732318104999,"stop":1732318197800,"duration":92801}},{"uid":"9c3d4e84829f60da","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/9c3d4e84829f60da","status":"passed","time":{"start":1732314326558,"stop":1732314361864,"duration":35306}},{"uid":"5800e42fcf101af7","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/5800e42fcf101af7","status":"passed","time":{"start":1732296671009,"stop":1732296690964,"duration":19955}},{"uid":"5e3674f6c1089190","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/5e3674f6c1089190","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732293715443,"stop":1732293808370,"duration":92927}},{"uid":"86f2406a347abf08","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/86f2406a347abf08","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732221658874,"stop":1732221658874,"duration":0}},{"uid":"661878f9823648c4","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/661878f9823648c4","status":"passed","time":{"start":1732136286219,"stop":1732136305529,"duration":19310}},{"uid":"1fcfab8d1f359e2d","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/1fcfab8d1f359e2d","status":"failed","statusDetails":"Failed: Prompt not found","time":{"start":1732128063124,"stop":1732128063124,"duration":0}},{"uid":"a0cd6bc06e26b0b8","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/a0cd6bc06e26b0b8","status":"passed","time":{"start":1732126734336,"stop":1732126780509,"duration":46173}},{"uid":"ea3aa485a9e27639","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/ea3aa485a9e27639","status":"passed","time":{"start":1732049905007,"stop":1732049941176,"duration":36169}},{"uid":"312b27e2fb4c8fb8","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/312b27e2fb4c8fb8","status":"passed","time":{"start":1732049905007,"stop":1732049941176,"duration":36169}},{"uid":"cab4f8e78a6e0277","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/cab4f8e78a6e0277","status":"passed","time":{"start":1732049905007,"stop":1732049941176,"duration":36169}},{"uid":"50d53dcec6825638","reportUrl":"https://golioth.github.io/allure-reports/branch/1780//#testresult/50d53dcec6825638","status":"passed","time":{"start":1732033641801,"stop":1732033678834,"duration":37033}}]},"tags":["mikes_orange_pi","nrf9160dk","anyio","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"7ac3e8c18e706db3.json","parameterValues":["'nrf9160dk'","'zephyr'"]}