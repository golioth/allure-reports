{"uid":"2781f7300081eb90","name":"test_fw_update","fullName":"examples.esp_idf.fw_update.pytest.test_sample#test_fw_update","historyId":"bfea7ee151c214e37fa31ad7f88138aa","time":{"start":1732723336707,"stop":1732723336707,"duration":0},"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1278: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '0', 'fw_update.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1280: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--allure-board\") or item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:110: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:720: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732723336710,"stop":1732723336711,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1732723336711,"stop":1732723336740,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1732723336740,"stop":1732723336741,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1732723336741,"stop":1732723336741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1732723336742,"stop":1732723336742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732723336742,"stop":1732723336742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732723336743,"stop":1732723336743,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1732723336743,"stop":1732723336743,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1732723336744,"stop":1732723336752,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1732723336744,"stop":1732723336744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732723336753,"stop":1732723336753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732723336754,"stop":1732723336754,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732723336754,"stop":1732723336754,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_name","time":{"start":1732723336755,"stop":1732723336755,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1732723336755,"stop":1732723336795,"duration":40},"status":"broken","statusMessage":"SystemExit: 2\n","statusTrace":"  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py\", line 81, in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 929, in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 921, in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/outcome/_impl.py\", line 213, in unwrap\n    raise captured_error\n  File \"/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py\", line 891, in _run_tests_and_fixtures\n    retval = await coro\n             ^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/plugin.py\", line 110, in board\n    async with board.started():\n  File \"/usr/lib/python3.11/contextlib.py\", line 204, in __aenter__\n    return await anext(self.gen)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/board.py\", line 28, in started\n    self.program(self.fw_image)\n  File \"/usr/local/lib/python3.11/dist-packages/espboard.py\", line 19, in program\n    esptool.main(cmd)\n  File \"/usr/local/lib/python3.11/dist-packages/esptool/__init__.py\", line 720, in main\n    args = parser.parse_args(argv)\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1874, in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1907, in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2101, in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 2078, in consume_positionals\n    take_action(action, args)\n  File \"/usr/lib/python3.11/argparse.py\", line 1983, in take_action\n    action(self, namespace, argument_values, option_string)\n  File \"/usr/lib/python3.11/argparse.py\", line 1246, in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/argparse.py\", line 1909, in parse_known_args\n    self.error(str(err))\n  File \"/usr/lib/python3.11/argparse.py\", line 2633, in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n  File \"/usr/lib/python3.11/argparse.py\", line 2620, in exit\n    _sys.exit(status)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"SystemExit: 2","statusTrace":"self = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n>               argfile = open(values[i + 1], \"rb\")\nE               FileNotFoundError: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1278: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nargs = ['-e', '0', 'fw_update.bin']\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n    \n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n    \n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n    \n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n    \n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n>               namespace, args = self._parse_known_args(args, namespace)\n\n/usr/lib/python3.11/argparse.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.11/argparse.py:2122: in _parse_known_args\n    stop_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = AddrFilenamePairAction(option_strings=[], dest='addr_filename', nargs='+', const=None, default=None, type=None, choices=None, required=True, help='Address followed by binary filename, separated by space', metavar='<address> <filename>')\nparser = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nnamespace = Namespace(addr_filename=None, erase_all=True, flash_freq='keep', flash_mode='keep', flash_size='keep', spi_connection=...=False, encrypt_files=None, ignore_flash_encryption_efuse_setting=False, force=False, compress=None, no_compress=False)\nvalues = ['0', 'fw_update.bin'], option_string = None\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # validate pair arguments\n        pairs = []\n        for i in range(0, len(values), 2):\n            try:\n                address = int(values[i], 0)\n            except ValueError:\n                raise argparse.ArgumentError(\n                    self, 'Address \"%s\" must be a number' % values[i]\n                )\n            try:\n                argfile = open(values[i + 1], \"rb\")\n            except IOError as e:\n>               raise argparse.ArgumentError(self, e)\nE               argparse.ArgumentError: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\n\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:1280: ArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nitem = <Function test_fw_update>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        board_name = item.config.getoption(\"--allure-board\") or item.config.getoption(\"--board\")\n        platform_name = item.config.getoption(\"--platform\")\n        suitename = item.config.getoption(\"--custom-suitename\") or \"hil\"\n    \n        allure.dynamic.tag(board_name)\n        allure.dynamic.tag(platform_name)\n        allure.dynamic.parameter(\"board_name\", board_name)\n        allure.dynamic.parameter(\"platform_name\", platform_name)\n        allure.dynamic.parent_suite(f\"{suitename}.{platform_name}.{board_name}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/anyio/pytest_plugin.py:81: in wrapper\n    yield from runner.run_asyncgen_fixture(func, kwargs)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:929: in run_asyncgen_fixture\n    fixturevalue: T_Retval = self._call_in_runner_task(asyncgen.asend, None)\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:921: in _call_in_runner_task\n    return outcome_holder[0].unwrap()\n/usr/local/lib/python3.11/dist-packages/outcome/_impl.py:213: in unwrap\n    raise captured_error\n/usr/local/lib/python3.11/dist-packages/anyio/_backends/_trio.py:891: in _run_tests_and_fixtures\n    retval = await coro\n/usr/local/lib/python3.11/dist-packages/plugin.py:110: in board\n    async with board.started():\n/usr/lib/python3.11/contextlib.py:204: in __aenter__\n    return await anext(self.gen)\n/usr/local/lib/python3.11/dist-packages/board.py:28: in started\n    self.program(self.fw_image)\n/usr/local/lib/python3.11/dist-packages/espboard.py:19: in program\n    esptool.main(cmd)\n/usr/local/lib/python3.11/dist-packages/esptool/__init__.py:720: in main\n    args = parser.parse_args(argv)\n/usr/lib/python3.11/argparse.py:1874: in parse_args\n    args, argv = self.parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:1907: in parse_known_args\n    namespace, args = self._parse_known_args(args, namespace)\n/usr/lib/python3.11/argparse.py:2101: in _parse_known_args\n    positionals_end_index = consume_positionals(start_index)\n/usr/lib/python3.11/argparse.py:2078: in consume_positionals\n    take_action(action, args)\n/usr/lib/python3.11/argparse.py:1983: in take_action\n    action(self, namespace, argument_values, option_string)\n/usr/lib/python3.11/argparse.py:1246: in __call__\n    subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n/usr/lib/python3.11/argparse.py:1909: in parse_known_args\n    self.error(str(err))\n/usr/lib/python3.11/argparse.py:2633: in error\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ArgumentParser(prog='esptool write_flash', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\nstatus = 2\nmessage = \"esptool write_flash: error: argument <address> <filename>: [Errno 2] No such file or directory: 'fw_update.bin'\\n\"\n\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n>       _sys.exit(status)\nE       SystemExit: 2\n\n/usr/lib/python3.11/argparse.py:2620: SystemExit","steps":[],"attachments":[{"uid":"f193c98df7daec5e","name":"stderr","source":"f193c98df7daec5e.txt","type":"text/plain","size":867}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"fw_info::0","time":{"start":1732723338486,"stop":1732723338489,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"sample.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d9edf9b23cab"},{"name":"thread","value":"280-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"examples.esp_idf.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":93,"unknown":0,"total":97},"items":[{"uid":"52393e8f1943941d","reportUrl":"https://golioth.github.io/allure-reports/branch/1844//#testresult/52393e8f1943941d","status":"passed","time":{"start":1732630671169,"stop":1732631066772,"duration":395603}},{"uid":"cc8be8b7d3d05331","reportUrl":"https://golioth.github.io/allure-reports/branch/1844//#testresult/cc8be8b7d3d05331","status":"passed","time":{"start":1732630671169,"stop":1732631066772,"duration":395603}},{"uid":"67df2e4ebbb58cfb","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/67df2e4ebbb58cfb","status":"passed","time":{"start":1732559471183,"stop":1732559893588,"duration":422405}},{"uid":"56d5714f2ef879d0","reportUrl":"https://golioth.github.io/allure-reports/branch/1841//#testresult/56d5714f2ef879d0","status":"passed","time":{"start":1732559471183,"stop":1732559893588,"duration":422405}},{"uid":"d7f7b8c6ea16454d","reportUrl":"https://golioth.github.io/allure-reports/branch/1840//#testresult/d7f7b8c6ea16454d","status":"passed","time":{"start":1732553722940,"stop":1732554080352,"duration":357412}},{"uid":"5cc8e89c1c8675a0","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/5cc8e89c1c8675a0","status":"passed","time":{"start":1732508076757,"stop":1732508365760,"duration":289003}},{"uid":"c083d7e05a7660a1","reportUrl":"https://golioth.github.io/allure-reports/branch/1839//#testresult/c083d7e05a7660a1","status":"passed","time":{"start":1732508076757,"stop":1732508365760,"duration":289003}},{"uid":"97778a18cb5d4742","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/97778a18cb5d4742","status":"passed","time":{"start":1732311442294,"stop":1732311841142,"duration":398848}},{"uid":"3adb7f190195eecb","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/3adb7f190195eecb","status":"passed","time":{"start":1732311442294,"stop":1732311841142,"duration":398848}},{"uid":"dfb3f08a056854d3","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/dfb3f08a056854d3","status":"passed","time":{"start":1732311442294,"stop":1732311841142,"duration":398848}},{"uid":"17a661e8c10de6fe","reportUrl":"https://golioth.github.io/allure-reports/branch/1835//#testresult/17a661e8c10de6fe","status":"passed","time":{"start":1732311442294,"stop":1732311841142,"duration":398848}},{"uid":"ab448ac762df9147","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/ab448ac762df9147","status":"passed","time":{"start":1732300897666,"stop":1732301302212,"duration":404546}},{"uid":"f6b6c87d33c5d75c","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/f6b6c87d33c5d75c","status":"passed","time":{"start":1732300897666,"stop":1732301302212,"duration":404546}},{"uid":"6005a9355a6b6583","reportUrl":"https://golioth.github.io/allure-reports/branch/1832//#testresult/6005a9355a6b6583","status":"passed","time":{"start":1732300897666,"stop":1732301302212,"duration":404546}},{"uid":"b6b0014edef2941","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/b6b0014edef2941","status":"passed","time":{"start":1732291515941,"stop":1732291854332,"duration":338391}},{"uid":"56d5f1a33e30f649","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/56d5f1a33e30f649","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732296073146,"stop":1732296177329,"duration":104183}},{"uid":"777ddc08bec01f6b","reportUrl":"https://golioth.github.io/allure-reports/branch/1828//#testresult/777ddc08bec01f6b","status":"passed","time":{"start":1732291515941,"stop":1732291854332,"duration":338391}},{"uid":"c95ae54a3e17b156","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/c95ae54a3e17b156","status":"passed","time":{"start":1732227441200,"stop":1732227770343,"duration":329143}},{"uid":"d94e8e226dd46f19","reportUrl":"https://golioth.github.io/allure-reports/branch/1827//#testresult/d94e8e226dd46f19","status":"passed","time":{"start":1732288839905,"stop":1732289123712,"duration":283807}},{"uid":"5db3e812a0a34aa","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/5db3e812a0a34aa","status":"passed","time":{"start":1732194227708,"stop":1732194543105,"duration":315397}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"2781f7300081eb90.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}