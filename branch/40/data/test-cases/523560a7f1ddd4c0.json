{
  "uid" : "523560a7f1ddd4c0",
  "name" : "test_stream",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream",
  "historyId" : "760eff61a6b23948f80921df65cbf7f5",
  "time" : {
    "start" : 1734237411282,
    "stop" : 1734237411282,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_stream>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734237411286,
      "stop" : 1734237411286,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734237411288,
      "stop" : 1734237411288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734237411285,
      "stop" : 1734237411285,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734237411759,
      "stop" : 1734237412622,
      "duration" : 863
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734237411292,
      "stop" : 1734237411759,
      "duration" : 467
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734237411288,
      "stop" : 1734237411290,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734237411292,
      "stop" : 1734237411292,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734237411286,
      "stop" : 1734237411287,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734237411291,
      "stop" : 1734237411291,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734237412623,
      "stop" : 1734237415736,
      "duration" : 3113
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 90, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734237411287,
      "stop" : 1734237411287,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_stream>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4427003a4a3370f1",
      "name" : "log",
      "source" : "4427003a4a3370f1.txt",
      "type" : "text/plain",
      "size" : 9435
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1734237416006,
      "stop" : 1734237416387,
      "duration" : 381
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734237416389,
      "stop" : 1734237416392,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734237416397,
      "stop" : 1734237416397,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "2988e5dbe7e5"
  }, {
    "name" : "thread",
    "value" : "437-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'mimxrt1024_evk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 24,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "a3b9587227595041",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/a3b9587227595041",
        "status" : "passed",
        "time" : {
          "start" : 1734128815963,
          "stop" : 1734128839838,
          "duration" : 23875
        }
      }, {
        "uid" : "3dde1fef16d2ce7d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/3dde1fef16d2ce7d",
        "status" : "passed",
        "time" : {
          "start" : 1734048313331,
          "stop" : 1734048336955,
          "duration" : 23624
        }
      }, {
        "uid" : "fa53a5fe292d735d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/fa53a5fe292d735d",
        "status" : "passed",
        "time" : {
          "start" : 1734045544068,
          "stop" : 1734045566522,
          "duration" : 22454
        }
      }, {
        "uid" : "c49b159d52f26abc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/c49b159d52f26abc",
        "status" : "passed",
        "time" : {
          "start" : 1734034164776,
          "stop" : 1734034187241,
          "duration" : 22465
        }
      }, {
        "uid" : "ad077c35cb33020e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/ad077c35cb33020e",
        "status" : "passed",
        "time" : {
          "start" : 1734029777585,
          "stop" : 1734029800021,
          "duration" : 22436
        }
      }, {
        "uid" : "7bb856e757d02bb6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/7bb856e757d02bb6",
        "status" : "passed",
        "time" : {
          "start" : 1734026191627,
          "stop" : 1734026215064,
          "duration" : 23437
        }
      }, {
        "uid" : "338366d4f076c824",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/338366d4f076c824",
        "status" : "passed",
        "time" : {
          "start" : 1734023777458,
          "stop" : 1734023800099,
          "duration" : 22641
        }
      }, {
        "uid" : "73a14e447e627e59",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/73a14e447e627e59",
        "status" : "passed",
        "time" : {
          "start" : 1733941986280,
          "stop" : 1733942005354,
          "duration" : 19074
        }
      }, {
        "uid" : "30aa917d6892b586",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/30aa917d6892b586",
        "status" : "passed",
        "time" : {
          "start" : 1733962021457,
          "stop" : 1733962045915,
          "duration" : 24458
        }
      }, {
        "uid" : "a9a9f82f06cb06ff",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/a9a9f82f06cb06ff",
        "status" : "passed",
        "time" : {
          "start" : 1733958293863,
          "stop" : 1733958316225,
          "duration" : 22362
        }
      }, {
        "uid" : "4c16f26bfd8b0f80",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/4c16f26bfd8b0f80",
        "status" : "passed",
        "time" : {
          "start" : 1733952380004,
          "stop" : 1733952403348,
          "duration" : 23344
        }
      }, {
        "uid" : "4bcac17f7f2371c1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/4bcac17f7f2371c1",
        "status" : "passed",
        "time" : {
          "start" : 1733949734862,
          "stop" : 1733949761077,
          "duration" : 26215
        }
      }, {
        "uid" : "61b300baf094a4a2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/61b300baf094a4a2",
        "status" : "passed",
        "time" : {
          "start" : 1733947769270,
          "stop" : 1733947791705,
          "duration" : 22435
        }
      }, {
        "uid" : "2b77389cf93ff544",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/2b77389cf93ff544",
        "status" : "passed",
        "time" : {
          "start" : 1733943863584,
          "stop" : 1733943886805,
          "duration" : 23221
        }
      }, {
        "uid" : "9d14cf8e60366988",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/9d14cf8e60366988",
        "status" : "passed",
        "time" : {
          "start" : 1733941986280,
          "stop" : 1733942005354,
          "duration" : 19074
        }
      }, {
        "uid" : "769ab13bf4b1d3a2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/769ab13bf4b1d3a2",
        "status" : "passed",
        "time" : {
          "start" : 1733889720152,
          "stop" : 1733889743594,
          "duration" : 23442
        }
      }, {
        "uid" : "a6ba866e0306ed7b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/a6ba866e0306ed7b",
        "status" : "passed",
        "time" : {
          "start" : 1733888112940,
          "stop" : 1733888139399,
          "duration" : 26459
        }
      }, {
        "uid" : "1a0b040a3aaea55d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/1a0b040a3aaea55d",
        "status" : "passed",
        "time" : {
          "start" : 1733889720152,
          "stop" : 1733889743594,
          "duration" : 23442
        }
      }, {
        "uid" : "63f66749ce1f547b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/63f66749ce1f547b",
        "status" : "passed",
        "time" : {
          "start" : 1733888112940,
          "stop" : 1733888139399,
          "duration" : 26459
        }
      }, {
        "uid" : "63c50968c062845f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/63c50968c062845f",
        "status" : "passed",
        "time" : {
          "start" : 1733877268145,
          "stop" : 1733877291399,
          "duration" : 23254
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "mimxrt1024_evk", "zephyr" ]
  },
  "source" : "523560a7f1ddd4c0.json",
  "parameterValues" : [ "'mimxrt1024_evk'", "'zephyr'" ]
}