{
  "uid" : "d7733464403682ea",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "466fcb31cd63d28758a28daeb9320ffb",
  "time" : {
    "start" : 1734237393630,
    "stop" : 1734237393630,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_lightdb_observe>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734237393636,
      "stop" : 1734237393636,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734237394093,
      "stop" : 1734237394916,
      "duration" : 823
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734237393640,
      "stop" : 1734237393640,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734237393639,
      "stop" : 1734237393639,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734237393636,
      "stop" : 1734237393638,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734237393633,
      "stop" : 1734237393633,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734237393635,
      "stop" : 1734237393635,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734237393635,
      "stop" : 1734237393635,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734237394917,
      "stop" : 1734237398431,
      "duration" : 3514
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 90, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734237393634,
      "stop" : 1734237393634,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734237393640,
      "stop" : 1734237394092,
      "duration" : 452
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_lightdb_observe>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "208efab7e33dfd93",
      "name" : "log",
      "source" : "208efab7e33dfd93.txt",
      "type" : "text/plain",
      "size" : 9453
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device::0",
    "time" : {
      "start" : 1734237398703,
      "stop" : 1734237399122,
      "duration" : 419
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734237399131,
      "stop" : 1734237399132,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734237399124,
      "stop" : 1734237399126,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "2988e5dbe7e5"
  }, {
    "name" : "thread",
    "value" : "417-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'mimxrt1024_evk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 24,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "2483c06a6c2542c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/2483c06a6c2542c",
        "status" : "passed",
        "time" : {
          "start" : 1734128765565,
          "stop" : 1734128776374,
          "duration" : 10809
        }
      }, {
        "uid" : "28999b9f04206a36",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/28999b9f04206a36",
        "status" : "passed",
        "time" : {
          "start" : 1734048263857,
          "stop" : 1734048274510,
          "duration" : 10653
        }
      }, {
        "uid" : "ffe49ecbda412d22",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/ffe49ecbda412d22",
        "status" : "passed",
        "time" : {
          "start" : 1734045496058,
          "stop" : 1734045505777,
          "duration" : 9719
        }
      }, {
        "uid" : "9a0866a8abd63957",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/9a0866a8abd63957",
        "status" : "passed",
        "time" : {
          "start" : 1734034115606,
          "stop" : 1734034126070,
          "duration" : 10464
        }
      }, {
        "uid" : "38ce002923907bee",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/38ce002923907bee",
        "status" : "passed",
        "time" : {
          "start" : 1734029728568,
          "stop" : 1734029739395,
          "duration" : 10827
        }
      }, {
        "uid" : "127956fda3e12a62",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/127956fda3e12a62",
        "status" : "passed",
        "time" : {
          "start" : 1734026144377,
          "stop" : 1734026154214,
          "duration" : 9837
        }
      }, {
        "uid" : "77fa40ebac4cecac",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/77fa40ebac4cecac",
        "status" : "passed",
        "time" : {
          "start" : 1734023728793,
          "stop" : 1734023739660,
          "duration" : 10867
        }
      }, {
        "uid" : "fb5f0decdfe4fb94",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/fb5f0decdfe4fb94",
        "status" : "passed",
        "time" : {
          "start" : 1733941938922,
          "stop" : 1733941948631,
          "duration" : 9709
        }
      }, {
        "uid" : "d0b323af905b1404",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/d0b323af905b1404",
        "status" : "passed",
        "time" : {
          "start" : 1733961971693,
          "stop" : 1733961983873,
          "duration" : 12180
        }
      }, {
        "uid" : "8c9cf47081a66f3a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/8c9cf47081a66f3a",
        "status" : "passed",
        "time" : {
          "start" : 1733958243499,
          "stop" : 1733958253416,
          "duration" : 9917
        }
      }, {
        "uid" : "92ff7eebb096b9f1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/92ff7eebb096b9f1",
        "status" : "passed",
        "time" : {
          "start" : 1733952332386,
          "stop" : 1733952342167,
          "duration" : 9781
        }
      }, {
        "uid" : "6c0109c9d1e6a2f5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/6c0109c9d1e6a2f5",
        "status" : "passed",
        "time" : {
          "start" : 1733949673991,
          "stop" : 1733949684510,
          "duration" : 10519
        }
      }, {
        "uid" : "f8cf2432904c9781",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/f8cf2432904c9781",
        "status" : "passed",
        "time" : {
          "start" : 1733947722670,
          "stop" : 1733947732213,
          "duration" : 9543
        }
      }, {
        "uid" : "5e0ff6c7ab8007b0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/5e0ff6c7ab8007b0",
        "status" : "passed",
        "time" : {
          "start" : 1733943816014,
          "stop" : 1733943825412,
          "duration" : 9398
        }
      }, {
        "uid" : "7395309a7fbf93de",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/7395309a7fbf93de",
        "status" : "passed",
        "time" : {
          "start" : 1733941938922,
          "stop" : 1733941948631,
          "duration" : 9709
        }
      }, {
        "uid" : "7767088b3b0504ac",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/7767088b3b0504ac",
        "status" : "passed",
        "time" : {
          "start" : 1733889670864,
          "stop" : 1733889683316,
          "duration" : 12452
        }
      }, {
        "uid" : "4350ff78eee87a25",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/4350ff78eee87a25",
        "status" : "passed",
        "time" : {
          "start" : 1733888065308,
          "stop" : 1733888074799,
          "duration" : 9491
        }
      }, {
        "uid" : "58281ec1112d348c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/58281ec1112d348c",
        "status" : "passed",
        "time" : {
          "start" : 1733889670864,
          "stop" : 1733889683316,
          "duration" : 12452
        }
      }, {
        "uid" : "aa729c2346f25f23",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/aa729c2346f25f23",
        "status" : "passed",
        "time" : {
          "start" : 1733888065308,
          "stop" : 1733888074799,
          "duration" : 9491
        }
      }, {
        "uid" : "2e8359a3a8d3c924",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/2e8359a3a8d3c924",
        "status" : "passed",
        "time" : {
          "start" : 1733877221769,
          "stop" : 1733877231421,
          "duration" : 9652
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "mimxrt1024_evk", "zephyr" ]
  },
  "source" : "d7733464403682ea.json",
  "parameterValues" : [ "'mimxrt1024_evk'", "'zephyr'" ]
}