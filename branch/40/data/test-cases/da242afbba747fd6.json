{
  "uid" : "da242afbba747fd6",
  "name" : "test_settings",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings",
  "historyId" : "55c411133217cd01256580dbf97484b9",
  "time" : {
    "start" : 1734237719129,
    "stop" : 1734237719129,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_settings>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_key",
    "time" : {
      "start" : 1734237719134,
      "stop" : 1734237719134,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734237719136,
      "stop" : 1734237719136,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734237719139,
      "stop" : 1734237719560,
      "duration" : 421
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734237719133,
      "stop" : 1734237719133,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734237719136,
      "stop" : 1734237719138,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734237719561,
      "stop" : 1734237720418,
      "duration" : 857
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734237719133,
      "stop" : 1734237719134,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734237719135,
      "stop" : 1734237719135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734237719135,
      "stop" : 1734237719135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734237719132,
      "stop" : 1734237719132,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734237720419,
      "stop" : 1734237723126,
      "duration" : 2707
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_settings>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "39a14f587e8dab16",
      "name" : "log",
      "source" : "39a14f587e8dab16.txt",
      "type" : "text/plain",
      "size" : 9364
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1734237723812,
      "stop" : 1734237723815,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734237723817,
      "stop" : 1734237723817,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734237723398,
      "stop" : 1734237723810,
      "duration" : 412
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "96fab0392808"
  }, {
    "name" : "thread",
    "value" : "445-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 23,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "71fe4ba9e85f0077",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/71fe4ba9e85f0077",
        "status" : "passed",
        "time" : {
          "start" : 1734128661917,
          "stop" : 1734128671724,
          "duration" : 9807
        }
      }, {
        "uid" : "9feb986dbeb88df4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/9feb986dbeb88df4",
        "status" : "passed",
        "time" : {
          "start" : 1734048958433,
          "stop" : 1734048968049,
          "duration" : 9616
        }
      }, {
        "uid" : "8c51271c2644d860",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/8c51271c2644d860",
        "status" : "passed",
        "time" : {
          "start" : 1734045193678,
          "stop" : 1734045204495,
          "duration" : 10817
        }
      }, {
        "uid" : "5e965d5b0cd8715a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/5e965d5b0cd8715a",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734034045511,
          "stop" : 1734034045511,
          "duration" : 0
        }
      }, {
        "uid" : "d29f176e21f9bc72",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/d29f176e21f9bc72",
        "status" : "passed",
        "time" : {
          "start" : 1734029819843,
          "stop" : 1734029827606,
          "duration" : 7763
        }
      }, {
        "uid" : "ce14c148bf2a10c8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/ce14c148bf2a10c8",
        "status" : "passed",
        "time" : {
          "start" : 1734025394065,
          "stop" : 1734025402839,
          "duration" : 8774
        }
      }, {
        "uid" : "bd8226eb457f510c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/bd8226eb457f510c",
        "status" : "passed",
        "time" : {
          "start" : 1734023775714,
          "stop" : 1734023784696,
          "duration" : 8982
        }
      }, {
        "uid" : "b82f7a3fecbcfe08",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/b82f7a3fecbcfe08",
        "status" : "passed",
        "time" : {
          "start" : 1733982489704,
          "stop" : 1733982497253,
          "duration" : 7549
        }
      }, {
        "uid" : "5e1b6350cf257964",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/5e1b6350cf257964",
        "status" : "passed",
        "time" : {
          "start" : 1733961850396,
          "stop" : 1733961863235,
          "duration" : 12839
        }
      }, {
        "uid" : "f217a04b1d3a8596",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/f217a04b1d3a8596",
        "status" : "passed",
        "time" : {
          "start" : 1733958210369,
          "stop" : 1733958222100,
          "duration" : 11731
        }
      }, {
        "uid" : "d740545b9e35ab3e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/d740545b9e35ab3e",
        "status" : "passed",
        "time" : {
          "start" : 1733952985638,
          "stop" : 1733952996792,
          "duration" : 11154
        }
      }, {
        "uid" : "78353f33e12b2608",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/78353f33e12b2608",
        "status" : "passed",
        "time" : {
          "start" : 1733949904273,
          "stop" : 1733949916149,
          "duration" : 11876
        }
      }, {
        "uid" : "6405d1055b07838a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/6405d1055b07838a",
        "status" : "passed",
        "time" : {
          "start" : 1733947885621,
          "stop" : 1733947894489,
          "duration" : 8868
        }
      }, {
        "uid" : "7fe4d5a007bd00dc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/7fe4d5a007bd00dc",
        "status" : "passed",
        "time" : {
          "start" : 1733942858949,
          "stop" : 1733942869968,
          "duration" : 11019
        }
      }, {
        "uid" : "25ad3b77c669e00b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/25ad3b77c669e00b",
        "status" : "passed",
        "time" : {
          "start" : 1733942612145,
          "stop" : 1733942623780,
          "duration" : 11635
        }
      }, {
        "uid" : "8a6e582aa80541b6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/8a6e582aa80541b6",
        "status" : "passed",
        "time" : {
          "start" : 1733930991776,
          "stop" : 1733931001581,
          "duration" : 9805
        }
      }, {
        "uid" : "8b57688b3c7fa9ed",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/8b57688b3c7fa9ed",
        "status" : "passed",
        "time" : {
          "start" : 1733930188774,
          "stop" : 1733930198753,
          "duration" : 9979
        }
      }, {
        "uid" : "87d849c9f67177ac",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/87d849c9f67177ac",
        "status" : "passed",
        "time" : {
          "start" : 1733890084730,
          "stop" : 1733890092534,
          "duration" : 7804
        }
      }, {
        "uid" : "4daa9f64e15e6c93",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/4daa9f64e15e6c93",
        "status" : "passed",
        "time" : {
          "start" : 1733888276849,
          "stop" : 1733888288526,
          "duration" : 11677
        }
      }, {
        "uid" : "8f129f6ab16096d2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/8f129f6ab16096d2",
        "status" : "passed",
        "time" : {
          "start" : 1733877586548,
          "stop" : 1733877597560,
          "duration" : 11012
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "da242afbba747fd6.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}