{
  "uid" : "1077a04311090a2b",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello",
  "historyId" : "9ea8ee677231e39a8691323ca77f58b7",
  "time" : {
    "start" : 1734237438056,
    "stop" : 1734237438056,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734237438060,
      "stop" : 1734237438060,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734237438063,
      "stop" : 1734237438065,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734237438066,
      "stop" : 1734237438066,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734237438061,
      "stop" : 1734237438061,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734237438061,
      "stop" : 1734237438061,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734237438066,
      "stop" : 1734237438067,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734237439418,
      "stop" : 1734237442631,
      "duration" : 3213
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 90, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734237438067,
      "stop" : 1734237438525,
      "duration" : 458
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734237438526,
      "stop" : 1734237439417,
      "duration" : 891
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734237438062,
      "stop" : 1734237438062,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734237438062,
      "stop" : 1734237438063,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d53e49be1cc1c5d3",
      "name" : "log",
      "source" : "d53e49be1cc1c5d3.txt",
      "type" : "text/plain",
      "size" : 9437
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734237443367,
      "stop" : 1734237443367,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734237443360,
      "stop" : 1734237443362,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734237442894,
      "stop" : 1734237443357,
      "duration" : 463
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.mimxrt1024_evk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "2988e5dbe7e5"
  }, {
    "name" : "thread",
    "value" : "476-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'mimxrt1024_evk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "833e6634e33333fa",
      "status" : "broken",
      "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
      "time" : {
        "start" : 1734237429079,
        "stop" : 1734237429079,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 24,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "becf26dc045b409d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/becf26dc045b409d",
        "status" : "passed",
        "time" : {
          "start" : 1734128926437,
          "stop" : 1734128950813,
          "duration" : 24376
        }
      }, {
        "uid" : "276eb92f97bee4b6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/276eb92f97bee4b6",
        "status" : "passed",
        "time" : {
          "start" : 1734048423523,
          "stop" : 1734048448050,
          "duration" : 24527
        }
      }, {
        "uid" : "76cf26b50f492e30",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/76cf26b50f492e30",
        "status" : "passed",
        "time" : {
          "start" : 1734045653496,
          "stop" : 1734045676813,
          "duration" : 23317
        }
      }, {
        "uid" : "3ba3fe0c7fabadfa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/3ba3fe0c7fabadfa",
        "status" : "passed",
        "time" : {
          "start" : 1734034274204,
          "stop" : 1734034298539,
          "duration" : 24335
        }
      }, {
        "uid" : "d76408323ff62bae",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/d76408323ff62bae",
        "status" : "passed",
        "time" : {
          "start" : 1734029887673,
          "stop" : 1734029911206,
          "duration" : 23533
        }
      }, {
        "uid" : "b7243fc560b07537",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/b7243fc560b07537",
        "status" : "passed",
        "time" : {
          "start" : 1734026299531,
          "stop" : 1734026322945,
          "duration" : 23414
        }
      }, {
        "uid" : "65dec68c63705dad",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/65dec68c63705dad",
        "status" : "passed",
        "time" : {
          "start" : 1734023888460,
          "stop" : 1734023912071,
          "duration" : 23611
        }
      }, {
        "uid" : "fa939f461e7f6cef",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/fa939f461e7f6cef",
        "status" : "passed",
        "time" : {
          "start" : 1733942092512,
          "stop" : 1733942115959,
          "duration" : 23447
        }
      }, {
        "uid" : "c1dcc20b68b94865",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/c1dcc20b68b94865",
        "status" : "passed",
        "time" : {
          "start" : 1733962133185,
          "stop" : 1733962160546,
          "duration" : 27361
        }
      }, {
        "uid" : "f6bfafe94911557",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/f6bfafe94911557",
        "status" : "passed",
        "time" : {
          "start" : 1733958402584,
          "stop" : 1733958426073,
          "duration" : 23489
        }
      }, {
        "uid" : "a276601f89103e1a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/a276601f89103e1a",
        "status" : "passed",
        "time" : {
          "start" : 1733952488060,
          "stop" : 1733952511579,
          "duration" : 23519
        }
      }, {
        "uid" : "84beb92420572aec",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/84beb92420572aec",
        "status" : "passed",
        "time" : {
          "start" : 1733949810069,
          "stop" : 1733949829363,
          "duration" : 19294
        }
      }, {
        "uid" : "a6b86ca3e4e6b004",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/a6b86ca3e4e6b004",
        "status" : "passed",
        "time" : {
          "start" : 1733947881388,
          "stop" : 1733947905645,
          "duration" : 24257
        }
      }, {
        "uid" : "ad78135973b6e706",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/ad78135973b6e706",
        "status" : "passed",
        "time" : {
          "start" : 1733943973801,
          "stop" : 1733943997843,
          "duration" : 24042
        }
      }, {
        "uid" : "432fa6372e341960",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/432fa6372e341960",
        "status" : "passed",
        "time" : {
          "start" : 1733942092512,
          "stop" : 1733942115959,
          "duration" : 23447
        }
      }, {
        "uid" : "64b75cf328518156",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/64b75cf328518156",
        "status" : "passed",
        "time" : {
          "start" : 1733889834153,
          "stop" : 1733889853866,
          "duration" : 19713
        }
      }, {
        "uid" : "d8c06968b2dd05a8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/d8c06968b2dd05a8",
        "status" : "passed",
        "time" : {
          "start" : 1733888192068,
          "stop" : 1733888216388,
          "duration" : 24320
        }
      }, {
        "uid" : "99e6399510c5058e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/99e6399510c5058e",
        "status" : "passed",
        "time" : {
          "start" : 1733889834153,
          "stop" : 1733889853866,
          "duration" : 19713
        }
      }, {
        "uid" : "b2bf33cdc9f21612",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/b2bf33cdc9f21612",
        "status" : "passed",
        "time" : {
          "start" : 1733888192068,
          "stop" : 1733888216388,
          "duration" : 24320
        }
      }, {
        "uid" : "9bc9d49a705ef9dc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/9bc9d49a705ef9dc",
        "status" : "passed",
        "time" : {
          "start" : 1733877377443,
          "stop" : 1733877400629,
          "duration" : 23186
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "mimxrt1024_evk", "zephyr" ]
  },
  "source" : "1077a04311090a2b.json",
  "parameterValues" : [ "'mimxrt1024_evk'", "'zephyr'" ]
}