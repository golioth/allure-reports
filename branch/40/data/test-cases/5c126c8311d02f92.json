{
  "uid" : "5c126c8311d02f92",
  "name" : "test_hello",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello",
  "historyId" : "728c1ad8cfe5fc9c60fb1445998f2048",
  "time" : {
    "start" : 1734238073793,
    "stop" : 1734238073793,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "device_object",
    "time" : {
      "start" : 1734238073800,
      "stop" : 1734238073802,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734238073804,
      "stop" : 1734238074262,
      "duration" : 458
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734238074263,
      "stop" : 1734238075103,
      "duration" : 840
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734238073799,
      "stop" : 1734238073799,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734238075103,
      "stop" : 1734238077614,
      "duration" : 2511
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 90, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734238073798,
      "stop" : 1734238073798,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734238073797,
      "stop" : 1734238073797,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734238073800,
      "stop" : 1734238073800,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734238073804,
      "stop" : 1734238073804,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734238073798,
      "stop" : 1734238073798,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734238073803,
      "stop" : 1734238073803,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_hello>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:90: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "88dd079e2acca56c",
      "name" : "log",
      "source" : "88dd079e2acca56c.txt",
      "type" : "text/plain",
      "size" : 9413
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734238078284,
      "stop" : 1734238078284,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project::0",
    "time" : {
      "start" : 1734238078277,
      "stop" : 1734238078279,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734238077880,
      "stop" : 1734238078274,
      "duration" : 394
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.nrf9160dk"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "42b2fe79e2af"
  }, {
    "name" : "thread",
    "value" : "647-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'nrf9160dk'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "85a41543f313c032",
      "status" : "broken",
      "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
      "time" : {
        "start" : 1734237991230,
        "stop" : 1734237991230,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 18,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "ac27b044d7e52a4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/ac27b044d7e52a4",
        "status" : "passed",
        "time" : {
          "start" : 1734130340590,
          "stop" : 1734130366660,
          "duration" : 26070
        }
      }, {
        "uid" : "dddb931a4b229a13",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/dddb931a4b229a13",
        "status" : "passed",
        "time" : {
          "start" : 1734050719332,
          "stop" : 1734050763789,
          "duration" : 44457
        }
      }, {
        "uid" : "ac991baf2b73ec18",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/ac991baf2b73ec18",
        "status" : "passed",
        "time" : {
          "start" : 1734046917003,
          "stop" : 1734046954747,
          "duration" : 37744
        }
      }, {
        "uid" : "25d89cbf75430b43",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/25d89cbf75430b43",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734035213586,
          "stop" : 1734035213586,
          "duration" : 0
        }
      }, {
        "uid" : "d08fd2a21246cd55",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/d08fd2a21246cd55",
        "status" : "passed",
        "time" : {
          "start" : 1734031732751,
          "stop" : 1734031768148,
          "duration" : 35397
        }
      }, {
        "uid" : "4897568be80a2359",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/4897568be80a2359",
        "status" : "passed",
        "time" : {
          "start" : 1734027799786,
          "stop" : 1734027841201,
          "duration" : 41415
        }
      }, {
        "uid" : "2e8149049bf36154",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/2e8149049bf36154",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1734027148413,
          "stop" : 1734027261117,
          "duration" : 112704
        }
      }, {
        "uid" : "f05c461578fe42d6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/f05c461578fe42d6",
        "status" : "passed",
        "time" : {
          "start" : 1733948317427,
          "stop" : 1733948346116,
          "duration" : 28689
        }
      }, {
        "uid" : "e3831efdf8fd60c5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/e3831efdf8fd60c5",
        "status" : "passed",
        "time" : {
          "start" : 1733963664170,
          "stop" : 1733963708488,
          "duration" : 44318
        }
      }, {
        "uid" : "5e71bdfee401647b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/5e71bdfee401647b",
        "status" : "passed",
        "time" : {
          "start" : 1733960367564,
          "stop" : 1733960400491,
          "duration" : 32927
        }
      }, {
        "uid" : "4e86e25f299d44c0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/4e86e25f299d44c0",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1733954944648,
          "stop" : 1733954944648,
          "duration" : 0
        }
      }, {
        "uid" : "cf98ff4e02578a43",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/cf98ff4e02578a43",
        "status" : "passed",
        "time" : {
          "start" : 1733951943039,
          "stop" : 1733951967405,
          "duration" : 24366
        }
      }, {
        "uid" : "b5e5e86a429d8342",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/b5e5e86a429d8342",
        "status" : "passed",
        "time" : {
          "start" : 1733951789346,
          "stop" : 1733951869788,
          "duration" : 80442
        }
      }, {
        "uid" : "1de3f07ced660d70",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/1de3f07ced660d70",
        "status" : "passed",
        "time" : {
          "start" : 1733949349104,
          "stop" : 1733949381847,
          "duration" : 32743
        }
      }, {
        "uid" : "e28c9fcc8d98e5bf",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/e28c9fcc8d98e5bf",
        "status" : "passed",
        "time" : {
          "start" : 1733948317427,
          "stop" : 1733948346116,
          "duration" : 28689
        }
      }, {
        "uid" : "8e45878fb5a36495",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/8e45878fb5a36495",
        "status" : "passed",
        "time" : {
          "start" : 1733932768659,
          "stop" : 1733932793044,
          "duration" : 24385
        }
      }, {
        "uid" : "703403a451d7764c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/703403a451d7764c",
        "status" : "passed",
        "time" : {
          "start" : 1733931280029,
          "stop" : 1733931304377,
          "duration" : 24348
        }
      }, {
        "uid" : "c7cd1184178f5c66",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/c7cd1184178f5c66",
        "status" : "passed",
        "time" : {
          "start" : 1733892990722,
          "stop" : 1733893042288,
          "duration" : 51566
        }
      }, {
        "uid" : "e549023620634d69",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/e549023620634d69",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred",
        "time" : {
          "start" : 1733891978496,
          "stop" : 1733892091257,
          "duration" : 112761
        }
      }, {
        "uid" : "8c5782394ceb514e",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/8c5782394ceb514e",
        "status" : "passed",
        "time" : {
          "start" : 1733879934993,
          "stop" : 1733879967770,
          "duration" : 32777
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "nrf9160dk", "anyio", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "5c126c8311d02f92.json",
  "parameterValues" : [ "'nrf9160dk'", "'zephyr'" ]
}