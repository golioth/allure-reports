{
  "uid" : "c97aaec71880ec59",
  "name" : "test_lightdb_get",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get",
  "historyId" : "a7312cf31d6314ecf7ffd5a0a0af0ddc",
  "time" : {
    "start" : 1734237687240,
    "stop" : 1734237687240,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_lightdb_get>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734237687244,
      "stop" : 1734237687245,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734237687243,
      "stop" : 1734237687243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734237688510,
      "stop" : 1734237691217,
      "duration" : 2707
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734237687250,
      "stop" : 1734237687250,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734237687246,
      "stop" : 1734237687246,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734237687250,
      "stop" : 1734237687692,
      "duration" : 442
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734237687693,
      "stop" : 1734237688509,
      "duration" : 816
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734237687249,
      "stop" : 1734237687249,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734237687245,
      "stop" : 1734237687245,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734237687246,
      "stop" : 1734237687248,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734237687244,
      "stop" : 1734237687244,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_lightdb_get>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "be3a73bf5d333bdd",
      "name" : "log",
      "source" : "be3a73bf5d333bdd.txt",
      "type" : "text/plain",
      "size" : 9370
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1734237691880,
      "stop" : 1734237691882,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734237691489,
      "stop" : 1734237691878,
      "duration" : 389
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734237691887,
      "stop" : 1734237691887,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "96fab0392808"
  }, {
    "name" : "thread",
    "value" : "401-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 23,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "b8611028c7b4656b",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/b8611028c7b4656b",
        "status" : "passed",
        "time" : {
          "start" : 1734128492747,
          "stop" : 1734128519781,
          "duration" : 27034
        }
      }, {
        "uid" : "260e19e195e508a1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/260e19e195e508a1",
        "status" : "passed",
        "time" : {
          "start" : 1734048784740,
          "stop" : 1734048814101,
          "duration" : 29361
        }
      }, {
        "uid" : "558c862aa54c0a8d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/558c862aa54c0a8d",
        "status" : "passed",
        "time" : {
          "start" : 1734045036097,
          "stop" : 1734045061195,
          "duration" : 25098
        }
      }, {
        "uid" : "9052e41c04f355c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/9052e41c04f355c",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734034013630,
          "stop" : 1734034013630,
          "duration" : 0
        }
      }, {
        "uid" : "5d23cef7e5e82fd3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/5d23cef7e5e82fd3",
        "status" : "passed",
        "time" : {
          "start" : 1734029652418,
          "stop" : 1734029679546,
          "duration" : 27128
        }
      }, {
        "uid" : "1f9b18e03df9dbc4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/1f9b18e03df9dbc4",
        "status" : "passed",
        "time" : {
          "start" : 1734025222537,
          "stop" : 1734025257885,
          "duration" : 35348
        }
      }, {
        "uid" : "ea478344f73db15a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/ea478344f73db15a",
        "status" : "passed",
        "time" : {
          "start" : 1734023851683,
          "stop" : 1734023876713,
          "duration" : 25030
        }
      }, {
        "uid" : "cbddebb2843e5664",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/cbddebb2843e5664",
        "status" : "passed",
        "time" : {
          "start" : 1733982319127,
          "stop" : 1733982351885,
          "duration" : 32758
        }
      }, {
        "uid" : "db48867d89f3642f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/db48867d89f3642f",
        "status" : "passed",
        "time" : {
          "start" : 1733961679475,
          "stop" : 1733961709681,
          "duration" : 30206
        }
      }, {
        "uid" : "2dae89de42717b17",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/2dae89de42717b17",
        "status" : "passed",
        "time" : {
          "start" : 1733958045542,
          "stop" : 1733958076105,
          "duration" : 30563
        }
      }, {
        "uid" : "eb36fd10db114fa",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/eb36fd10db114fa",
        "status" : "passed",
        "time" : {
          "start" : 1733952825729,
          "stop" : 1733952854683,
          "duration" : 28954
        }
      }, {
        "uid" : "5b22f1af0894e2a5",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/5b22f1af0894e2a5",
        "status" : "passed",
        "time" : {
          "start" : 1733949746244,
          "stop" : 1733949774019,
          "duration" : 27775
        }
      }, {
        "uid" : "7b82bb59599523dc",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/7b82bb59599523dc",
        "status" : "passed",
        "time" : {
          "start" : 1733947720776,
          "stop" : 1733947745867,
          "duration" : 25091
        }
      }, {
        "uid" : "4af5a301216cdc3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/4af5a301216cdc3",
        "status" : "passed",
        "time" : {
          "start" : 1733942687582,
          "stop" : 1733942715766,
          "duration" : 28184
        }
      }, {
        "uid" : "ad1bf70b7423e554",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/ad1bf70b7423e554",
        "status" : "passed",
        "time" : {
          "start" : 1733942444274,
          "stop" : 1733942469402,
          "duration" : 25128
        }
      }, {
        "uid" : "a110e210a53181e1",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/a110e210a53181e1",
        "status" : "passed",
        "time" : {
          "start" : 1733930822877,
          "stop" : 1733930850895,
          "duration" : 28018
        }
      }, {
        "uid" : "1cc40c43f90719dd",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/1cc40c43f90719dd",
        "status" : "passed",
        "time" : {
          "start" : 1733930020093,
          "stop" : 1733930048688,
          "duration" : 28595
        }
      }, {
        "uid" : "fa2d43d5440f5745",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/fa2d43d5440f5745",
        "status" : "passed",
        "time" : {
          "start" : 1733889912342,
          "stop" : 1733889937427,
          "duration" : 25085
        }
      }, {
        "uid" : "64cf12c2c7f9c1f",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/64cf12c2c7f9c1f",
        "status" : "passed",
        "time" : {
          "start" : 1733888107938,
          "stop" : 1733888135172,
          "duration" : 27234
        }
      }, {
        "uid" : "38a10257b6240e0d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/38a10257b6240e0d",
        "status" : "passed",
        "time" : {
          "start" : 1733877418506,
          "stop" : 1733877445835,
          "duration" : 27329
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "c97aaec71880ec59.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}