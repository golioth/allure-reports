{
  "uid" : "e3aa6626cfba6ff3",
  "name" : "test_lightdb_observe",
  "fullName" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe",
  "historyId" : "e38d27876e1f6f82f90ed39e64311b25",
  "time" : {
    "start" : 1734237711169,
    "stop" : 1734237711170,
    "duration" : 1
  },
  "status" : "broken",
  "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
  "statusTrace" : "item = <Function test_lightdb_observe>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "wifi_psk",
    "time" : {
      "start" : 1734237711174,
      "stop" : 1734237711174,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_key",
    "time" : {
      "start" : 1734237711179,
      "stop" : 1734237711179,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_name",
    "time" : {
      "start" : 1734237711174,
      "stop" : 1734237711175,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "dut",
    "time" : {
      "start" : 1734237712469,
      "stop" : 1734237715175,
      "duration" : 2706
    },
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py\", line 62, in dut\n    device_object.launch()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py\", line 84, in launch\n    self._flash_and_run()\n  File \"/__w/golioth-firmware-sdk/golioth-firmware-sdk/zephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py\", line 136, in _flash_and_run\n    raise TwisterHarnessException(msg)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "project",
    "time" : {
      "start" : 1734237711180,
      "stop" : 1734237711589,
      "duration" : 409
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "anyio_backend",
    "time" : {
      "start" : 1734237711173,
      "stop" : 1734237711173,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "twister_harness_config",
    "time" : {
      "start" : 1734237711175,
      "stop" : 1734237711175,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object",
    "time" : {
      "start" : 1734237711176,
      "stop" : 1734237711178,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device",
    "time" : {
      "start" : 1734237711589,
      "stop" : 1734237712468,
      "duration" : 879
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1734237711179,
      "stop" : 1734237711179,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "wifi_ssid",
    "time" : {
      "start" : 1734237711173,
      "stop" : 1734237711173,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
    "statusTrace" : "item = <Function test_lightdb_observe>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_runtest_setup(item):\n        if item.config.getoption(\"--hil-board\") is not None:\n            hil_board = item.config.getoption(\"--hil-board\")\n        elif 'hil_board' in os.environ:\n            hil_board = os.environ['hil_board']\n        else:\n            hil_board = item.config.option.device_serial\n    \n        allure.dynamic.tag(hil_board)\n        allure.dynamic.tag(\"zephyr\")\n        allure.dynamic.parameter(\"board_name\", hil_board)\n        allure.dynamic.parameter(\"platform_name\", \"zephyr\")\n        allure.dynamic.parent_suite(f\"sample.zephyr.{hil_board}\")\n    \n        if runner_name is not None:\n            allure.dynamic.tag(item.config.getoption(\"--runner-name\"))\n    \n>       yield\n\n/usr/local/lib/python3.11/dist-packages/plugin.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/fixtures.py:62: in dut\n    device_object.launch()\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:84: in launch\n    self._flash_and_run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter()\n\n    def _flash_and_run(self) -> None:\n        \"\"\"Flash application on a device.\"\"\"\n        if not self.command:\n            msg = 'Flash command is empty, please verify if it was generated properly.'\n            logger.error(msg)\n            raise TwisterHarnessException(msg)\n    \n        if self.device_config.pre_script:\n            self._run_custom_script(self.device_config.pre_script, self.base_timeout)\n    \n        if self.device_config.id:\n            logger.debug('Flashing device %s', self.device_config.id)\n        log_command(logger, 'Flashing command', self.command, level=logging.DEBUG)\n    \n        process = stdout = None\n        try:\n            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env)\n            stdout, _ = process.communicate(timeout=self._flashing_timeout)\n        except subprocess.TimeoutExpired as exc:\n            process.kill()\n            msg = f'Timeout occurred ({self._flashing_timeout}s) during flashing.'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        except subprocess.SubprocessError as exc:\n            msg = f'Flashing subprocess failed due to SubprocessError {exc}'\n            logger.error(msg)\n            raise TwisterHarnessTimeoutException(msg) from exc\n        finally:\n            if stdout is not None:\n                stdout_decoded = stdout.decode(errors='ignore')\n                with open(self.device_log_path, 'a+') as log_file:\n                    log_file.write(stdout_decoded)\n            if self.device_config.post_flash_script:\n                self._run_custom_script(self.device_config.post_flash_script, self.base_timeout)\n            if process is not None and process.returncode == 0:\n                logger.debug('Flashing finished')\n            else:\n                msg = f'Could not flash device {self.device_config.id}'\n                logger.error(msg)\n>               raise TwisterHarnessException(msg)\nE               twister_harness.exceptions.TwisterHarnessException: Could not flash device None\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/hardware_adapter.py:136: TwisterHarnessException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e6457a4d3997636e",
      "name" : "log",
      "source" : "e6457a4d3997636e.txt",
      "type" : "text/plain",
      "size" : 9378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "project::0",
    "time" : {
      "start" : 1734237715828,
      "stop" : 1734237715830,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device_object::0",
    "time" : {
      "start" : 1734237715836,
      "stop" : 1734237715836,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "device::0",
    "time" : {
      "start" : 1734237715447,
      "stop" : 1734237715826,
      "duration" : 379
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "zephyr"
  }, {
    "name" : "parentSuite",
    "value" : "sample.zephyr.esp32_devkitc_wrover"
  }, {
    "name" : "tag",
    "value" : "mikes_orange_pi"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('anyio_backend')"
  }, {
    "name" : "tag",
    "value" : "anyio"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "96fab0392808"
  }, {
    "name" : "thread",
    "value" : "434-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "board_name",
    "value" : "'esp32_devkitc_wrover'"
  }, {
    "name" : "platform_name",
    "value" : "'zephyr'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 23,
        "unknown" : 0,
        "total" : 25
      },
      "items" : [ {
        "uid" : "93468546b1e98b45",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1931/#testresult/93468546b1e98b45",
        "status" : "passed",
        "time" : {
          "start" : 1734128626509,
          "stop" : 1734128637496,
          "duration" : 10987
        }
      }, {
        "uid" : "6e6ccd274b8e87cb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1928/#testresult/6e6ccd274b8e87cb",
        "status" : "passed",
        "time" : {
          "start" : 1734048925607,
          "stop" : 1734048935455,
          "duration" : 9848
        }
      }, {
        "uid" : "12a5bc26fb4d5de4",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1927/#testresult/12a5bc26fb4d5de4",
        "status" : "passed",
        "time" : {
          "start" : 1734045166454,
          "stop" : 1734045172971,
          "duration" : 6517
        }
      }, {
        "uid" : "a067a2efc8836642",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1926/#testresult/a067a2efc8836642",
        "status" : "broken",
        "statusDetails" : "twister_harness.exceptions.TwisterHarnessException: Could not flash device None",
        "time" : {
          "start" : 1734034037578,
          "stop" : 1734034037578,
          "duration" : 0
        }
      }, {
        "uid" : "f12c9298cf2f815c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1921/#testresult/f12c9298cf2f815c",
        "status" : "passed",
        "time" : {
          "start" : 1734029782464,
          "stop" : 1734029799315,
          "duration" : 16851
        }
      }, {
        "uid" : "efc5f50520252ef6",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1914/#testresult/efc5f50520252ef6",
        "status" : "passed",
        "time" : {
          "start" : 1734025361050,
          "stop" : 1734025372735,
          "duration" : 11685
        }
      }, {
        "uid" : "9435c1571f7164c3",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1913/#testresult/9435c1571f7164c3",
        "status" : "passed",
        "time" : {
          "start" : 1734023744353,
          "stop" : 1734023755012,
          "duration" : 10659
        }
      }, {
        "uid" : "9a034d44f0e7e6cb",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/9a034d44f0e7e6cb",
        "status" : "passed",
        "time" : {
          "start" : 1733982457665,
          "stop" : 1733982466925,
          "duration" : 9260
        }
      }, {
        "uid" : "b7f644f18ea7ced0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1908/#testresult/b7f644f18ea7ced0",
        "status" : "passed",
        "time" : {
          "start" : 1733961819779,
          "stop" : 1733961827279,
          "duration" : 7500
        }
      }, {
        "uid" : "171517fdd3ed6a5a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1907/#testresult/171517fdd3ed6a5a",
        "status" : "passed",
        "time" : {
          "start" : 1733958180799,
          "stop" : 1733958187267,
          "duration" : 6468
        }
      }, {
        "uid" : "65582040feb0be56",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1903/#testresult/65582040feb0be56",
        "status" : "passed",
        "time" : {
          "start" : 1733952954598,
          "stop" : 1733952965027,
          "duration" : 10429
        }
      }, {
        "uid" : "499a51d11cdcd67d",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1900/#testresult/499a51d11cdcd67d",
        "status" : "passed",
        "time" : {
          "start" : 1733949873210,
          "stop" : 1733949883170,
          "duration" : 9960
        }
      }, {
        "uid" : "fc829c04cd252eb8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1899/#testresult/fc829c04cd252eb8",
        "status" : "passed",
        "time" : {
          "start" : 1733947853390,
          "stop" : 1733947862500,
          "duration" : 9110
        }
      }, {
        "uid" : "cd1d83fe57f182e2",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1898/#testresult/cd1d83fe57f182e2",
        "status" : "passed",
        "time" : {
          "start" : 1733942829153,
          "stop" : 1733942835974,
          "duration" : 6821
        }
      }, {
        "uid" : "b9ec850cd930c0d0",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1897/#testresult/b9ec850cd930c0d0",
        "status" : "passed",
        "time" : {
          "start" : 1733942577274,
          "stop" : 1733942589051,
          "duration" : 11777
        }
      }, {
        "uid" : "c4f69cdbfed48636",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/c4f69cdbfed48636",
        "status" : "passed",
        "time" : {
          "start" : 1733930959088,
          "stop" : 1733930969097,
          "duration" : 10009
        }
      }, {
        "uid" : "835e8f8e3b28462c",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/835e8f8e3b28462c",
        "status" : "passed",
        "time" : {
          "start" : 1733930155897,
          "stop" : 1733930165957,
          "duration" : 10060
        }
      }, {
        "uid" : "3a33d2d441cc2e0a",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1896/#testresult/3a33d2d441cc2e0a",
        "status" : "passed",
        "time" : {
          "start" : 1733890049479,
          "stop" : 1733890061059,
          "duration" : 11580
        }
      }, {
        "uid" : "248f4847e32a4ed8",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1895/#testresult/248f4847e32a4ed8",
        "status" : "passed",
        "time" : {
          "start" : 1733888244187,
          "stop" : 1733888253907,
          "duration" : 9720
        }
      }, {
        "uid" : "67a45253db88c5ce",
        "reportUrl" : "https://golioth.github.io/allure-reports/branch/1892/#testresult/67a45253db88c5ce",
        "status" : "passed",
        "time" : {
          "start" : 1733877556019,
          "stop" : 1733877563737,
          "duration" : 7718
        }
      } ]
    },
    "tags" : [ "mikes_orange_pi", "anyio", "esp32_devkitc_wrover", "@pytest.mark.usefixtures('anyio_backend')", "zephyr" ]
  },
  "source" : "e3aa6626cfba6ff3.json",
  "parameterValues" : [ "'esp32_devkitc_wrover'", "'zephyr'" ]
}