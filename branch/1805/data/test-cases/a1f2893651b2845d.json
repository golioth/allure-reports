{"uid":"a1f2893651b2845d","name":"test_no_args","fullName":"tests.hil.tests.rpc.test_rpc#test_no_args","historyId":"8550db7a61e240971014d0cb2b88a59c","time":{"start":1732283706754,"stop":1732283712096,"duration":5342},"status":"broken","statusMessage":"golioth.golioth.RPCTimeout: RPC timeout","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:377: in handle_async_request\n    resp = await self._pool.handle_async_request(req)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:216: in handle_async_request\n    raise exc from None\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection_pool.py:196: in handle_async_request\n    response = await connection.handle_async_request(\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/connection.py:101: in handle_async_request\n    return await self._connection.handle_async_request(request)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:143: in handle_async_request\n    raise exc\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:113: in handle_async_request\n    ) = await self._receive_response_headers(**kwargs)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:186: in _receive_response_headers\n    event = await self._receive_event(timeout=timeout)\n/usr/local/lib/python3.11/dist-packages/httpcore/_async/http11.py:224: in _receive_event\n    data = await self._network_stream.read(\n/usr/local/lib/python3.11/dist-packages/httpcore/_backends/trio.py:32: in read\n    with map_exceptions(exc_map):\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'trio.TooSlowError'>: <class 'httpcore.ReadTimeout'>, <class 'trio.BrokenResourceError'>: <class 'httpcore.ReadError'>, <class 'trio.ClosedResourceError'>: <class 'httpcore.ReadError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ReadTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpcore/_exceptions.py:14: ReadTimeout\n\nThe above exception was the direct cause of the following exception:\n\nself = <golioth.golioth.DeviceRPC object at 0xffff851a8f50>\nmethod = 'no_response', params = []\n\n    async def call(self, method: str, params: Union[list, dict]):\n        async with self.http_client as c:\n            try:\n>               response = await c.post('rpc', json={\n                    \"method\": method,\n                    \"params\": params,\n                })\n\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1905: in post\n    return await self.request(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1585: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1674: in send\n    response = await self._send_handling_auth(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1702: in _send_handling_auth\n    response = await self._send_handling_redirects(\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1739: in _send_handling_redirects\n    response = await self._send_single_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_client.py:1776: in _send_single_request\n    response = await transport.handle_async_request(request)\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:376: in handle_async_request\n    with map_httpcore_exceptions():\n/usr/lib/python3.11/contextlib.py:155: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ReadTimeout\n\n/usr/local/lib/python3.11/dist-packages/httpx/_transports/default.py:89: ReadTimeout\n\nThe above exception was the direct cause of the following exception:\n\nboard = <rak5010.RAK5010 object at 0xffff8518b250>\ndevice = <golioth.golioth.Device object at 0xffff851a8250>\n\n    async def test_no_args(board, device):\n>       await device.rpc.no_response()\n\ntests/hil/tests/rpc/test_rpc.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:656: in call_method\n    return await self.call(name, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <golioth.golioth.DeviceRPC object at 0xffff851a8f50>\nmethod = 'no_response', params = []\n\n    async def call(self, method: str, params: Union[list, dict]):\n        async with self.http_client as c:\n            try:\n                response = await c.post('rpc', json={\n                    \"method\": method,\n                    \"params\": params,\n                })\n            except httpx.ReadTimeout as e:\n>               raise RPCTimeout() from e\nE               golioth.golioth.RPCTimeout: RPC timeout\n\n/usr/local/lib/python3.11/dist-packages/golioth/golioth.py:638: RPCTimeout","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732283647902,"stop":1732283647902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1732283647903,"stop":1732283647903,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1732283647903,"stop":1732283647904,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1732283647904,"stop":1732283647904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732283647905,"stop":1732283647905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732283647906,"stop":1732283647906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1732283647906,"stop":1732283647907,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1732283647907,"stop":1732283647908,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1732283647907,"stop":1732283647907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732283647908,"stop":1732283647909,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732283647908,"stop":1732283647908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732283647909,"stop":1732283647909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732283647909,"stop":1732283648552,"duration":643},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1732283648553,"stop":1732283690042,"duration":41489},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732283690043,"stop":1732283690956,"duration":913},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1732283690957,"stop":1732283700221,"duration":9264},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"setup::0","time":{"start":1732283756284,"stop":1732283756284,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732283756286,"stop":1732283757009,"duration":723},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1732283757011,"stop":1732283757013,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732283757015,"stop":1732283757017,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_rpc"},{"name":"host","value":"f04648bba51e"},{"name":"thread","value":"227-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.rpc.test_rpc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d1b398026960c044","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1732212945362,"stop":1732212950704,"duration":5342}},{"uid":"a3081774a1e42fd9","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732204311667,"stop":1732204311667,"duration":0}},{"uid":"5a95386ee14192c5","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732196323872,"stop":1732196323872,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":19,"skipped":0,"passed":52,"unknown":0,"total":71},"items":[{"uid":"182d9582562f9d35","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/182d9582562f9d35","status":"passed","time":{"start":1732279445934,"stop":1732279447487,"duration":1553}},{"uid":"8282d475d17eb69b","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/8282d475d17eb69b","status":"passed","time":{"start":1732275962292,"stop":1732275963860,"duration":1568}},{"uid":"f2072ff2a372a3f4","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/f2072ff2a372a3f4","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732274319087,"stop":1732274319087,"duration":0}},{"uid":"64f4a0e18776ddc6","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/64f4a0e18776ddc6","status":"passed","time":{"start":1732231398936,"stop":1732231400542,"duration":1606}},{"uid":"f1e801d58d0c82ce","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/f1e801d58d0c82ce","status":"passed","time":{"start":1732230444672,"stop":1732230445628,"duration":956}},{"uid":"acb4accd0b9cb36a","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/acb4accd0b9cb36a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732226915064,"stop":1732226915064,"duration":0}},{"uid":"76faad44fb00857d","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/76faad44fb00857d","status":"passed","time":{"start":1732224542242,"stop":1732224543203,"duration":961}},{"uid":"a1eae5455e0d2560","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/a1eae5455e0d2560","status":"broken","statusDetails":"golioth.golioth.RPCTimeout: RPC timeout","time":{"start":1732212945362,"stop":1732212950704,"duration":5342}},{"uid":"e26aafb21ad65772","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/e26aafb21ad65772","status":"passed","time":{"start":1732207087041,"stop":1732207087997,"duration":956}},{"uid":"79b8cf9fe2573a04","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/79b8cf9fe2573a04","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732206947037,"stop":1732206947037,"duration":0}},{"uid":"73a03521dd6712aa","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/73a03521dd6712aa","status":"passed","time":{"start":1732204866204,"stop":1732204867775,"duration":1571}},{"uid":"ae0cb2d01917cd23","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/ae0cb2d01917cd23","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732204311667,"stop":1732204311667,"duration":0}},{"uid":"a416ea7b19079721","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/a416ea7b19079721","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732202015222,"stop":1732202015222,"duration":0}},{"uid":"a91f251939359cf5","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/a91f251939359cf5","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732199690361,"stop":1732199690361,"duration":0}},{"uid":"b1dfdd990b24200a","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/b1dfdd990b24200a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732196323872,"stop":1732196323872,"duration":0}},{"uid":"3354672a0bb33117","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/3354672a0bb33117","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732194599583,"stop":1732194599583,"duration":0}},{"uid":"cf1ec8e5f7ee093a","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/cf1ec8e5f7ee093a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732193483188,"stop":1732193483188,"duration":0}},{"uid":"39f0bc333c92d896","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/39f0bc333c92d896","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732189486172,"stop":1732189486172,"duration":0}},{"uid":"7a3149f7bd9e2f02","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/7a3149f7bd9e2f02","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732187433856,"stop":1732187433856,"duration":0}},{"uid":"d278d65d6d6b10a8","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/d278d65d6d6b10a8","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1732154214514,"stop":1732154214514,"duration":0}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"a1f2893651b2845d.json","parameterValues":["'rak5010'","'zephyr'"]}