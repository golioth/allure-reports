{"uid":"e067d8f4450f4544","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1732202781121,"stop":1732202873925,"duration":92804},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7fc5b850>\ndevice = <golioth.golioth.Device object at 0xffff7fc35910>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732202744322,"stop":1732202744322,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732202744323,"stop":1732202744323,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732202744324,"stop":1732202744324,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732202744324,"stop":1732202744324,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732202744325,"stop":1732202744325,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732202744325,"stop":1732202744327,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732202744328,"stop":1732202744328,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732202744329,"stop":1732202744329,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732202744329,"stop":1732202744781,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732202744782,"stop":1732202745716,"duration":934},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732202745717,"stop":1732202780511,"duration":34794},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732202780512,"stop":1732202781118,"duration":606},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff7fc5b850>\ndevice = <golioth.golioth.Device object at 0xffff7fc35910>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b47a99744add5fd6","name":"log","source":"b47a99744add5fd6.txt","type":"text/plain","size":24348}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732202874137,"stop":1732202874144,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732202874146,"stop":1732202874590,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732202874592,"stop":1732202874594,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732202874599,"stop":1732202874599,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ef8d46356a98"},{"name":"thread","value":"363-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2945f2fcabc5af7","status":"passed","time":{"start":1732197302441,"stop":1732197371147,"duration":68706}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":52,"unknown":0,"total":61},"items":[{"uid":"6f160753d755cd3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/6f160753d755cd3a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732200903446,"stop":1732200996238,"duration":92792}},{"uid":"42d0767f535833e0","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/42d0767f535833e0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199256551,"stop":1732199349287,"duration":92736}},{"uid":"7e2167b9dac3c047","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/7e2167b9dac3c047","status":"passed","time":{"start":1732197302441,"stop":1732197371147,"duration":68706}},{"uid":"d8bb80ec03885c14","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/d8bb80ec03885c14","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732193759667,"stop":1732193852430,"duration":92763}},{"uid":"e001c7003e7a1f35","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/e001c7003e7a1f35","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192109255,"stop":1732192201980,"duration":92725}},{"uid":"fb17b3c4dd189326","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/fb17b3c4dd189326","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732187491541,"stop":1732187584281,"duration":92740}},{"uid":"a32d6b94757ba2b2","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/a32d6b94757ba2b2","status":"passed","time":{"start":1732185513102,"stop":1732185572290,"duration":59188}},{"uid":"e3fd79f525d9b2ae","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/e3fd79f525d9b2ae","status":"passed","time":{"start":1732142676178,"stop":1732142723808,"duration":47630}},{"uid":"8f33e8a7e252d878","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/8f33e8a7e252d878","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732148865822,"stop":1732148958667,"duration":92845}},{"uid":"f06e4237194c8398","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/f06e4237194c8398","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732146788662,"stop":1732146881356,"duration":92694}},{"uid":"c1fcb1b525370f89","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/c1fcb1b525370f89","status":"passed","time":{"start":1732144376381,"stop":1732144424986,"duration":48605}},{"uid":"19d005ebc36f8bd6","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/19d005ebc36f8bd6","status":"passed","time":{"start":1732142676178,"stop":1732142723808,"duration":47630}},{"uid":"f8170bf5aa216cd5","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/f8170bf5aa216cd5","status":"passed","time":{"start":1732134623392,"stop":1732134671408,"duration":48016}},{"uid":"f989260cf2e0565","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/f989260cf2e0565","status":"passed","time":{"start":1732044404882,"stop":1732044454956,"duration":50074}},{"uid":"8432234d2829baae","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/8432234d2829baae","status":"passed","time":{"start":1732044404882,"stop":1732044454956,"duration":50074}},{"uid":"b471a49660f094eb","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/b471a49660f094eb","status":"passed","time":{"start":1732126416886,"stop":1732126472199,"duration":55313}},{"uid":"4c5ae077c95583c0","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/4c5ae077c95583c0","status":"passed","time":{"start":1732123936304,"stop":1732123984927,"duration":48623}},{"uid":"629b01132050e1c1","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/629b01132050e1c1","status":"passed","time":{"start":1732044404882,"stop":1732044454956,"duration":50074}},{"uid":"a5eab4da4c1dbc8","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/a5eab4da4c1dbc8","status":"passed","time":{"start":1732048476644,"stop":1732048525068,"duration":48424}},{"uid":"279bf37bf1876966","reportUrl":"https://golioth.github.io/allure-reports/branch/1787//#testresult/279bf37bf1876966","status":"passed","time":{"start":1732048476644,"stop":1732048525068,"duration":48424}}]},"tags":["anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"e067d8f4450f4544.json","parameterValues":["'rak5010'","'zephyr'"]}