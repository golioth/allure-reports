{"uid":"d01fc41cb19bde54","name":"test_cert_provisioning","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample#test_cert_provisioning","historyId":"f1787be5aa3fdb49d75e368517a17900","time":{"start":1732210372318,"stop":1732210466273,"duration":93955},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffb72b29d0>\nproject = <golioth.golioth.Project object at 0xffffb73ec250>\ndevice_name = 'certificate-VKieIXzeWnDjfxMQ'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000726615885-if00,baud=115200']\ncertificate_cred = '673f6ebbbb6157cf6cdf4d64', wifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732210361944,"stop":1732210361944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732210361945,"stop":1732210361946,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732210361945,"stop":1732210361945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732210361946,"stop":1732210361946,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732210361947,"stop":1732210361947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732210361947,"stop":1732210361947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732210361948,"stop":1732210361950,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732210361950,"stop":1732210362450,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732210362450,"stop":1732210362451,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred","time":{"start":1732210362452,"stop":1732210363085,"duration":633},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732210363086,"stop":1732210371680,"duration":8594},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732210371681,"stop":1732210372314,"duration":633},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mcumgr_conn_args","time":{"start":1732210372315,"stop":1732210372315,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"request = <FixtureRequest for <Function test_cert_provisioning>>\nshell = <twister_harness.helpers.shell.Shell object at 0xffffb72b29d0>\nproject = <golioth.golioth.Project object at 0xffffb73ec250>\ndevice_name = 'certificate-VKieIXzeWnDjfxMQ'\nmcumgr_conn_args = ['--conntype=serial', '--connstring=dev=/dev/serial/by-id/usb-SEGGER_J-Link_000726615885-if00,baud=115200']\ncertificate_cred = '673f6ebbbb6157cf6cdf4d64', wifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***'\nwifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_cert_provisioning(request, shell,\n                                     project, device_name,\n                                     mcumgr_conn_args, certificate_cred,\n                                     wifi_ssid, wifi_psk):\n        # Check cloud to verify device does not exist\n    \n        with pytest.raises(Exception):\n            device = await project.device_by_name(device_name)\n    \n        # Generate device certificates\n    \n        subprocess.run([WEST_TOPDIR / \"modules/lib/golioth-firmware-sdk/scripts/certificates/generate_device_certificate.sh\",\n                        project.info['id'], device_name],\n                       cwd=request.config.option.build_dir)\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Set Golioth credential\n    \n        shell._device.readlines_until(regex=\".*Could not stat /lfs1/credentials/client_cert.der\", timeout=180.0)\n    \n        shell.exec_command('fs mkdir /lfs1/credentials')\n        shell.exec_command('log halt')\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.crt.der\", FS_CRT_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr crt')\n        assert result.returncode == 0\n    \n        result = subprocess.run([\"mcumgr\"] + mcumgr_conn_args +\n                                [\"--tries=3\", \"--timeout=2\",\n                                 \"fs\", \"upload\",\n                                 f\"{project.info['id']}-{device_name}.key.der\", FS_KEY_PATH],\n                                capture_output=True, text=True,\n                                cwd=request.config.option.build_dir)\n        subprocess_logger(result, 'mcumgr key')\n        assert result.returncode == 0\n    \n        shell.exec_command('log go')\n        shell._device.clear_buffer()\n    \n        # Await connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/certificate_provisioning/pytest/test_sample.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"65a05f96fce0c28","name":"log","source":"65a05f96fce0c28.txt","type":"text/plain","size":25193}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732210466617,"stop":1732210466824,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"certificate_cred::0","time":{"start":1732210466826,"stop":1732210467322,"duration":496},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name::0","time":{"start":1732210467324,"stop":1732210467762,"duration":438},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732210467764,"stop":1732210467766,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732210467768,"stop":1732210467768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"aa1393e16640"},{"name":"thread","value":"592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.certificate_provisioning.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cf0f0dc4bccbc351","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199657788,"stop":1732199751862,"duration":94074}},{"uid":"a30e61f3f7b7ac15","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732196074781,"stop":1732196168725,"duration":93944}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":26,"unknown":0,"total":32},"items":[{"uid":"8f5b01af58b65ac8","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/8f5b01af58b65ac8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732209567526,"stop":1732209660479,"duration":92953}},{"uid":"345efce45d9c5312","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/345efce45d9c5312","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732208723074,"stop":1732208817128,"duration":94054}},{"uid":"904d8bd7fa5b4870","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/904d8bd7fa5b4870","status":"passed","time":{"start":1732146560588,"stop":1732146581876,"duration":21288}},{"uid":"9f5c6683a3df4b43","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/9f5c6683a3df4b43","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199657788,"stop":1732199751862,"duration":94074}},{"uid":"a0d94fda5a71a162","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/a0d94fda5a71a162","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199398494,"stop":1732199491504,"duration":93010}},{"uid":"6f6320813c1a5ade","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/6f6320813c1a5ade","status":"passed","time":{"start":1732146560588,"stop":1732146581876,"duration":21288}},{"uid":"20917ba964188d20","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/20917ba964188d20","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732196074781,"stop":1732196168725,"duration":93944}},{"uid":"27aa9a7388717fb0","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/27aa9a7388717fb0","status":"passed","time":{"start":1732192977708,"stop":1732192997461,"duration":19753}},{"uid":"a3ef8ec65de0bb8b","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/a3ef8ec65de0bb8b","status":"passed","time":{"start":1732146560588,"stop":1732146581876,"duration":21288}},{"uid":"6254fc7eb06ee2a8","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/6254fc7eb06ee2a8","status":"passed","time":{"start":1732187013815,"stop":1732187039877,"duration":26062}},{"uid":"1e90bc9f6db07710","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/1e90bc9f6db07710","status":"passed","time":{"start":1732146560588,"stop":1732146581876,"duration":21288}},{"uid":"c7ff233dcf9e04","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/c7ff233dcf9e04","status":"passed","time":{"start":1732154326060,"stop":1732154346678,"duration":20618}},{"uid":"4848460ac662c0eb","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/4848460ac662c0eb","status":"passed","time":{"start":1732148170228,"stop":1732148190590,"duration":20362}},{"uid":"14a63a272d9ccec8","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/14a63a272d9ccec8","status":"passed","time":{"start":1732146560588,"stop":1732146581876,"duration":21288}},{"uid":"37015ee553f7b29a","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/37015ee553f7b29a","status":"passed","time":{"start":1732144815625,"stop":1732144837234,"duration":21609}},{"uid":"42b0ac18087a0012","reportUrl":"https://golioth.github.io/allure-reports/branch/1792//#testresult/42b0ac18087a0012","status":"passed","time":{"start":1732134693537,"stop":1732134713768,"duration":20231}},{"uid":"dd11b8628b9b7c76","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/dd11b8628b9b7c76","status":"passed","time":{"start":1732094006449,"stop":1732094034219,"duration":27770}},{"uid":"de18a107641d9dcc","reportUrl":"https://golioth.github.io/allure-reports/branch/1785//#testresult/de18a107641d9dcc","status":"passed","time":{"start":1732094006449,"stop":1732094034219,"duration":27770}},{"uid":"9c5244fba992637f","reportUrl":"https://golioth.github.io/allure-reports/branch/1791//#testresult/9c5244fba992637f","status":"passed","time":{"start":1732125738985,"stop":1732125758888,"duration":19903}},{"uid":"7056e56039eb4776","reportUrl":"https://golioth.github.io/allure-reports/branch/1790//#testresult/7056e56039eb4776","status":"passed","time":{"start":1732123970180,"stop":1732123991648,"duration":21468}}]},"tags":["anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"d01fc41cb19bde54.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}