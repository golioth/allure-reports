{"uid":"d586d88120438f43","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"3038e6d5fffa4527a437bf078474dadf","time":{"start":1732283644843,"stop":1732283737650,"duration":92807},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9cc9b810>\ndevice = <golioth.golioth.Device object at 0xffff9cc75e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1732283630245,"stop":1732283630246,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732283630246,"stop":1732283630246,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732283630247,"stop":1732283630247,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732283630247,"stop":1732283630247,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732283630248,"stop":1732283630248,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732283630248,"stop":1732283630250,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732283630251,"stop":1732283630251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732283630252,"stop":1732283630682,"duration":430},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732283630252,"stop":1732283630252,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732283630683,"stop":1732283631615,"duration":932},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732283631616,"stop":1732283644232,"duration":12616},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732283644233,"stop":1732283644840,"duration":607},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9cc9b810>\ndevice = <golioth.golioth.Device object at 0xffff9cc75e90>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"3c61c2f6d9cb72e3","name":"log","source":"3c61c2f6d9cb72e3.txt","type":"text/plain","size":22580}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732283737933,"stop":1732283737964,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732283737966,"stop":1732283738551,"duration":585},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732283738553,"stop":1732283738555,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732283738560,"stop":1732283738561,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"1198823cf92a"},{"name":"thread","value":"370-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"26edc42d620aef06","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732211578289,"stop":1732211671101,"duration":92812}},{"uid":"5d7f9456267ed304","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732202781121,"stop":1732202873925,"duration":92804}},{"uid":"6d0dd7425852ac8b","status":"passed","time":{"start":1732197302441,"stop":1732197371147,"duration":68706}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":12,"skipped":0,"passed":61,"unknown":0,"total":75},"items":[{"uid":"541eb781936d5c55","reportUrl":"https://golioth.github.io/allure-reports/branch/1824//#testresult/541eb781936d5c55","status":"passed","time":{"start":1732280157709,"stop":1732280206238,"duration":48529}},{"uid":"dc21202ad644bd07","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/dc21202ad644bd07","status":"passed","time":{"start":1732274504596,"stop":1732274552446,"duration":47850}},{"uid":"6c7f904136bf0871","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/6c7f904136bf0871","status":"passed","time":{"start":1732273276286,"stop":1732273324986,"duration":48700}},{"uid":"8d19ab11b98166cd","reportUrl":"https://golioth.github.io/allure-reports/branch/1819//#testresult/8d19ab11b98166cd","status":"passed","time":{"start":1732232122518,"stop":1732232171954,"duration":49436}},{"uid":"418b361fe2bf49e5","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/418b361fe2bf49e5","status":"passed","time":{"start":1732225262415,"stop":1732225310913,"duration":48498}},{"uid":"d171b05c76164c8a","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/d171b05c76164c8a","status":"failed","statusDetails":"AssertionError: Unable to find all Log messages on server\nassert 6 == 0\n +  where 6 = len([<[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eec6610>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a210>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f00a450>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7ee77f90>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7f045950>, <[KeyError('timestamp') raised in repr()] LogEntry object at 0xffff7eea72d0>])","time":{"start":1732227575588,"stop":1732227623922,"duration":48334}},{"uid":"ac9037001511415d","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/ac9037001511415d","status":"passed","time":{"start":1732225262415,"stop":1732225310913,"duration":48498}},{"uid":"eb654a2605b74527","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/eb654a2605b74527","status":"broken","statusDetails":"serial.serialutil.SerialException: [Errno 2] could not open port /dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-ZEPHYR_RAK5010_Zephyr_A79B173FF273CE6E-if00'","time":{"start":1732221244990,"stop":1732221244990,"duration":0}},{"uid":"bb4af8136b99b36d","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/bb4af8136b99b36d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732217217413,"stop":1732217310253,"duration":92840}},{"uid":"9e287131aba49ee5","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/9e287131aba49ee5","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732211578289,"stop":1732211671101,"duration":92812}},{"uid":"92ccefa0f13bc4d9","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/92ccefa0f13bc4d9","status":"passed","time":{"start":1732210218510,"stop":1732210267201,"duration":48691}},{"uid":"d2525537d4093f6d","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/d2525537d4093f6d","status":"passed","time":{"start":1732208942330,"stop":1732208991358,"duration":49028}},{"uid":"7f62ea55cb9f357c","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/7f62ea55cb9f357c","status":"passed","time":{"start":1732205583571,"stop":1732205632448,"duration":48877}},{"uid":"e067d8f4450f4544","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/e067d8f4450f4544","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732202781121,"stop":1732202873925,"duration":92804}},{"uid":"6f160753d755cd3a","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/6f160753d755cd3a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732200903446,"stop":1732200996238,"duration":92792}},{"uid":"42d0767f535833e0","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/42d0767f535833e0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732199256551,"stop":1732199349287,"duration":92736}},{"uid":"7e2167b9dac3c047","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/7e2167b9dac3c047","status":"passed","time":{"start":1732197302441,"stop":1732197371147,"duration":68706}},{"uid":"d8bb80ec03885c14","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/d8bb80ec03885c14","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732193759667,"stop":1732193852430,"duration":92763}},{"uid":"e001c7003e7a1f35","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/e001c7003e7a1f35","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732192109255,"stop":1732192201980,"duration":92725}},{"uid":"fb17b3c4dd189326","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/fb17b3c4dd189326","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732187491541,"stop":1732187584281,"duration":92740}}]},"tags":["mikes_orange_pi","anyio","@pytest.mark.usefixtures('anyio_backend')","rak5010","zephyr"]},"source":"d586d88120438f43.json","parameterValues":["'rak5010'","'zephyr'"]}