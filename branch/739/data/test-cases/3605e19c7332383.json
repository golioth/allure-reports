{"uid":"3605e19c7332383","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"0d7d7795198a0cd0112ceb1b422620e8","time":{"start":1759718974002,"stop":1759718993356,"duration":19354},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9f9cb0e0>\ndevice = <golioth.golioth.Device object at 0xffff9f8d5550>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.now(datetime.UTC)\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:52: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":8,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1759718958948,"stop":1759718958948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759718958949,"stop":1759718958949,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759718958949,"stop":1759718958949,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759718958950,"stop":1759718958950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759718958950,"stop":1759718958950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759718958951,"stop":1759718958955,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759718958955,"stop":1759718958956,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759718958956,"stop":1759718958956,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759718958957,"stop":1759718959434,"duration":477},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759718959435,"stop":1759718960096,"duration":661},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759718960097,"stop":1759718971265,"duration":11168},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759718971266,"stop":1759718973995,"duration":2729},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9f9cb0e0>\ndevice = <golioth.golioth.Device object at 0xffff9f8d5550>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.now(datetime.UTC)\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.now(datetime.UTC)\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:52: AssertionError","steps":[],"attachments":[{"uid":"768cfcebe0c49bfe","name":"log","source":"768cfcebe0c49bfe.txt","type":"text/plain","size":17001}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759718993530,"stop":1759718993746,"duration":216},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759718993748,"stop":1759718994080,"duration":332},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759718994082,"stop":1759718994084,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759718994089,"stop":1759718994089,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"frdm_rw612"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.frdm_rw612"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b218d1c9eee4"},{"name":"thread","value":"603-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'frdm_rw612'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4522d0e06baba952","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1759718931394,"stop":1759718953731,"duration":22337}},{"uid":"766bdb79f3b4ed54","status":"passed","time":{"start":1759718885501,"stop":1759718911037,"duration":25536}},{"uid":"ffed240861dc56f5","status":"passed","time":{"start":1759523563454,"stop":1759523588139,"duration":24685}},{"uid":"14d6b77d1eed7e2b","status":"passed","time":{"start":1759523523861,"stop":1759523543286,"duration":19425}},{"uid":"d5c556a04554d8ba","status":"passed","time":{"start":1759523481944,"stop":1759523503466,"duration":21522}},{"uid":"160d55d13b6d5fb8","status":"passed","time":{"start":1759518217497,"stop":1759518240179,"duration":22682}},{"uid":"340941ca96c92cb1","status":"passed","time":{"start":1759518173508,"stop":1759518196073,"duration":22565}},{"uid":"d92ce833b1d56b6f","status":"passed","time":{"start":1759518130021,"stop":1759518152560,"duration":22539}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":13},"items":[{"uid":"1a88ad26aeafdae2","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/1a88ad26aeafdae2","status":"passed","time":{"start":1759717965769,"stop":1759717985154,"duration":19385}},{"uid":"a79af665eb1c8ca6","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/a79af665eb1c8ca6","status":"passed","time":{"start":1759523563454,"stop":1759523588139,"duration":24685}},{"uid":"91787316262cf0a5","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/91787316262cf0a5","status":"passed","time":{"start":1759518217497,"stop":1759518240179,"duration":22682}},{"uid":"e58aa14983a8dfea","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/e58aa14983a8dfea","status":"passed","time":{"start":1759246229563,"stop":1759246258615,"duration":29052}},{"uid":"e118c5d0b69edeb","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/e118c5d0b69edeb","status":"passed","time":{"start":1759377494612,"stop":1759377514724,"duration":20112}},{"uid":"30ddd83dd4110d53","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/30ddd83dd4110d53","status":"passed","time":{"start":1759370971137,"stop":1759370993526,"duration":22389}},{"uid":"f5c523c95fe922f1","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/f5c523c95fe922f1","status":"passed","time":{"start":1759269355743,"stop":1759269381093,"duration":25350}},{"uid":"882ae8fa294e29d1","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/882ae8fa294e29d1","status":"passed","time":{"start":1759246229563,"stop":1759246258615,"duration":29052}},{"uid":"538197a07c92a63d","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/538197a07c92a63d","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1759178287552,"stop":1759178307764,"duration":20212}},{"uid":"f32e4ec565e2bf19","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/f32e4ec565e2bf19","status":"passed","time":{"start":1759161533275,"stop":1759161558589,"duration":25314}},{"uid":"5ca5fe29ccb374ac","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/5ca5fe29ccb374ac","status":"passed","time":{"start":1759114851248,"stop":1759114871557,"duration":20309}},{"uid":"b764bc639b48f9a5","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/b764bc639b48f9a5","status":"passed","time":{"start":1758916394571,"stop":1758916421420,"duration":26849}}]},"tags":["anyio","sams_orange_pi","frdm_rw612","zephyr"]},"source":"3605e19c7332383.json","parameterValues":["'frdm_rw612'","'zephyr'"]}