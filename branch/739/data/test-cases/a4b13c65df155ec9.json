{"uid":"a4b13c65df155ec9","name":"test_reason_and_state","fullName":"tests.hil.tests.ota.test_ota#test_reason_and_state","historyId":"efe21cbbb5934f0489b65e4b580675bb","time":{"start":1759720097093,"stop":1759720187330,"duration":90237},"status":"failed","statusMessage":"AssertionError: assert 8 == 9\n +  where 8 = int('8')","statusTrace":"board = <pytest_hil.rak5010.RAK5010 object at 0xffff99aa7230>\ndevice = <golioth.golioth.Device object at 0xffff998a8980>\nproject = <golioth.golioth.Project object at 0xffff99aa7b60>\nreleases = {'test_blocks': Release <68e3325cb6c731f600fa57ff, release_tags=[], device_tags=['68e3325ab6c731f600fa57fc'], artifact...ease_tags=[], device_tags=['68e3325ab6c731f600fa57fc'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 8 == 9\nE                    +  where 8 = int('8')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1759719964983,"stop":1759719964984,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1759719964984,"stop":1759719964985,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759719964985,"stop":1759719964985,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759719964986,"stop":1759719964986,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759719964987,"stop":1759719964987,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759719964987,"stop":1759719964987,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1759719964988,"stop":1759719986576,"duration":21588},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759719964988,"stop":1759719964988,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759719986578,"stop":1759719987529,"duration":951},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759719987530,"stop":1759719988173,"duration":643},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759719988173,"stop":1759720026092,"duration":37919},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts","time":{"start":1759720026094,"stop":1759720026559,"duration":465},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1759720026560,"stop":1759720027251,"duration":691},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases","time":{"start":1759720027251,"stop":1759720029184,"duration":1933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases_teardown","time":{"start":1759720097090,"stop":1759720097090,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 8 == 9\n +  where 8 = int('8')","statusTrace":"board = <pytest_hil.rak5010.RAK5010 object at 0xffff99aa7230>\ndevice = <golioth.golioth.Device object at 0xffff998a8980>\nproject = <golioth.golioth.Project object at 0xffff99aa7b60>\nreleases = {'test_blocks': Release <68e3325cb6c731f600fa57ff, release_tags=[], device_tags=['68e3325ab6c731f600fa57fc'], artifact...ease_tags=[], device_tags=['68e3325ab6c731f600fa57fc'], artifact_ids=['65f224ee02bfe41201d4b3c9'], rollout=False>, ...}\n\n    async def test_reason_and_state(board, device, project, releases):\n        await project.releases.rollout_set(releases[\"test_reasons\"].id, True)\n        # Test reason and state code updates\n    \n        for i, r in enumerate(golioth_ota_reason):\n            retries_left = 20\n    \n            while retries_left:\n                await trio.sleep(1)\n                retries_left -= 1\n    \n                await device.refresh()\n    \n                try:\n                    latest_reason_code = int(device.metadata['update']['lobster']['reasonCode'])\n                except:\n                    if retries_left == 0:\n                        assert false, \"Unable to get reason/state using REST API\"\n                    continue\n    \n                if retries_left == 0 or latest_reason_code == i:\n                    print(f\"Test reason code: {r}\")\n                    print(f\"Received reason: {device.metadata['update']['lobster']['reason']}\")\n    \n>                   assert int(device.metadata['update']['lobster']['reasonCode']) == i\nE                   AssertionError: assert 8 == 9\nE                    +  where 8 = int('8')\n\ntests/hil/tests/ota/test_ota.py:214: AssertionError","steps":[],"attachments":[{"uid":"a1bcb614f442c182","name":"stdout","source":"a1bcb614f442c182.txt","type":"text/plain","size":1042}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"releases_teardown::0","time":{"start":1759720187515,"stop":1759720188243,"duration":728},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"releases::0","time":{"start":1759720188245,"stop":1759720189942,"duration":1697},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1759720189944,"stop":1759720190657,"duration":713},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifacts::0","time":{"start":1759720190659,"stop":1759720190659,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1759720190661,"stop":1759720190661,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759720190663,"stop":1759720190985,"duration":322},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759720190988,"stop":1759720190988,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1759720190990,"stop":1759720190995,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"rak5010"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"hil.zephyr.rak5010"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_ota"},{"name":"host","value":"53e75f700fe1"},{"name":"thread","value":"227-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.ota.test_ota"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'rak5010'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5a82f33058ba8ec9","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759524741646,"stop":1759524741646,"duration":0}},{"uid":"4f21b2d34aabae1a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759517485446,"stop":1759517485446,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":5,"skipped":0,"passed":7,"unknown":0,"total":13},"items":[{"uid":"fb4eeecfcbdbc136","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/fb4eeecfcbdbc136","status":"broken","statusDetails":"NameError: name 'false' is not defined","time":{"start":1759718736251,"stop":1759718765262,"duration":29011}},{"uid":"c3f675c4892558d7","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/c3f675c4892558d7","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759524741646,"stop":1759524741646,"duration":0}},{"uid":"d8ed444c8f676c19","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/d8ed444c8f676c19","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759517485446,"stop":1759517485446,"duration":0}},{"uid":"c65256d45d3bb812","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/c65256d45d3bb812","status":"passed","time":{"start":1759179572095,"stop":1759179626721,"duration":54626}},{"uid":"785ab02c74887134","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/785ab02c74887134","status":"passed","time":{"start":1759374855719,"stop":1759374907925,"duration":52206}},{"uid":"8af4b02da3bc6896","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/8af4b02da3bc6896","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759370312333,"stop":1759370312333,"duration":0}},{"uid":"af3b2b2f30323f6a","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/af3b2b2f30323f6a","status":"broken","statusDetails":"trio.TooSlowError","time":{"start":1759271031445,"stop":1759271031445,"duration":0}},{"uid":"82fa3a050fa1890a","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/82fa3a050fa1890a","status":"passed","time":{"start":1759179572095,"stop":1759179626721,"duration":54626}},{"uid":"944c942558f845ce","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/944c942558f845ce","status":"passed","time":{"start":1759179572095,"stop":1759179626721,"duration":54626}},{"uid":"aa9ebb83027e8d38","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/aa9ebb83027e8d38","status":"passed","time":{"start":1759162928875,"stop":1759162980856,"duration":51981}},{"uid":"a7428ac15e0bdd9d","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/a7428ac15e0bdd9d","status":"passed","time":{"start":1759136624218,"stop":1759136675927,"duration":51709}},{"uid":"f89f80a68d640178","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/f89f80a68d640178","status":"passed","time":{"start":1758917353435,"stop":1758917409135,"duration":55700}}]},"tags":["mikes_orange_pi","anyio","rak5010","zephyr"]},"source":"a4b13c65df155ec9.json","parameterValues":["'rak5010'","'zephyr'"]}