{"uid":"ddcd26e5fdcb2f79","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"bd481cee75a4b0fd3630a69d3bc391a4","time":{"start":1759719049757,"stop":1759719069810,"duration":20053},"status":"failed","statusMessage":"AssertionError: assert 2 == 1","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffac0cb230>\ndevice = <golioth.golioth.Device object at 0xffffabfd5550>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 2 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1759719034723,"stop":1759719034723,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1759719034724,"stop":1759719034724,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1759719034724,"stop":1759719034725,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1759719034725,"stop":1759719034725,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1759719034725,"stop":1759719034726,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1759719034726,"stop":1759719034728,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1759719034728,"stop":1759719034729,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1759719034729,"stop":1759719034729,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1759719034730,"stop":1759719035192,"duration":462},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1759719035193,"stop":1759719035848,"duration":655},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1759719035848,"stop":1759719046910,"duration":11062},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1759719046911,"stop":1759719049750,"duration":2839},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 2 == 1","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffac0cb230>\ndevice = <golioth.golioth.Device object at 0xffffabfd5550>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None and wifi_psk is not None:\n            shell.exec_command(f\"wifi cred add -k 1 -s \\\"{wifi_ssid}\\\" -p \\\"{wifi_psk}\\\"\")\n            shell.exec_command(\"wifi cred auto_connect\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 2 == 1\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:45: AssertionError","steps":[],"attachments":[{"uid":"9fc197b821cc8370","name":"log","source":"9fc197b821cc8370.txt","type":"text/plain","size":24552}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1759719070047,"stop":1759719070234,"duration":187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1759719070236,"stop":1759719070556,"duration":320},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1759719070558,"stop":1759719070560,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1759719070565,"stop":1759719070565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"frdm_rw612"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.frdm_rw612"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b218d1c9eee4"},{"name":"thread","value":"649-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'frdm_rw612'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1497b711f1c20f31","status":"passed","time":{"start":1759523700955,"stop":1759523723323,"duration":22368}},{"uid":"ab2c2f4ef554c664","status":"passed","time":{"start":1759518313675,"stop":1759518339004,"duration":25329}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":12,"unknown":0,"total":13},"items":[{"uid":"f08acd8cd7034e61","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/f08acd8cd7034e61","status":"passed","time":{"start":1759717655799,"stop":1759717675945,"duration":20146}},{"uid":"842d1b6a75688956","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/842d1b6a75688956","status":"passed","time":{"start":1759523700955,"stop":1759523723323,"duration":22368}},{"uid":"e17bab2e0c44102","reportUrl":"https://golioth.github.io/allure-reports/branch/739//#testresult/e17bab2e0c44102","status":"passed","time":{"start":1759518313675,"stop":1759518339004,"duration":25329}},{"uid":"a9066b9f66fe0e82","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/a9066b9f66fe0e82","status":"passed","time":{"start":1759246318067,"stop":1759246342474,"duration":24407}},{"uid":"d176b3149380b616","reportUrl":"https://golioth.github.io/allure-reports/branch/737//#testresult/d176b3149380b616","status":"passed","time":{"start":1759377622013,"stop":1759377646797,"duration":24784}},{"uid":"bb589f95096306a6","reportUrl":"https://golioth.github.io/allure-reports/branch/735//#testresult/bb589f95096306a6","status":"passed","time":{"start":1759371056013,"stop":1759371079086,"duration":23073}},{"uid":"86daefda11f110ac","reportUrl":"https://golioth.github.io/allure-reports/branch/732//#testresult/86daefda11f110ac","status":"passed","time":{"start":1759269490279,"stop":1759269514094,"duration":23815}},{"uid":"397493481c7a02f9","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/397493481c7a02f9","status":"passed","time":{"start":1759246318067,"stop":1759246342474,"duration":24407}},{"uid":"64fb6076e2803054","reportUrl":"https://golioth.github.io/allure-reports/branch/729//#testresult/64fb6076e2803054","status":"passed","time":{"start":1759177911960,"stop":1759177933829,"duration":21869}},{"uid":"40c4f5cff7fd8da0","reportUrl":"https://golioth.github.io/allure-reports/branch/728//#testresult/40c4f5cff7fd8da0","status":"passed","time":{"start":1759161621074,"stop":1759161641338,"duration":20264}},{"uid":"49ae4367186e7eeb","reportUrl":"https://golioth.github.io/allure-reports/branch/726//#testresult/49ae4367186e7eeb","status":"passed","time":{"start":1759114941879,"stop":1759114965139,"duration":23260}},{"uid":"bba119cbcf71b042","reportUrl":"https://golioth.github.io/allure-reports/branch/723//#testresult/bba119cbcf71b042","status":"passed","time":{"start":1758916442702,"stop":1758916466536,"duration":23834}}]},"tags":["anyio","sams_orange_pi","frdm_rw612","zephyr"]},"source":"ddcd26e5fdcb2f79.json","parameterValues":["'frdm_rw612'","'zephyr'"]}