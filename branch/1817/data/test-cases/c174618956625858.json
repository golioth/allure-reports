{"uid":"c174618956625858","name":"test_fw_update","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample#test_fw_update","historyId":"339a95d10a0a2a5287edceb1ba3f8efb","time":{"start":1732228836071,"stop":1732228941425,"duration":105354},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf420950>\nproject = <golioth.golioth.Project object at 0xffffaf57e710>\ndevice = <golioth.golioth.Device object at 0xffffaf423850>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <673fb6c3bb6157cf6cdf58fb, release_tags=[], device_tags=['673fb6c2bb6157cf6cdf58f9'], artifact_ids=['673e0793bb6157cf6cdf21ae'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n>       shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Received block.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1732228799738,"stop":1732228799738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1732228799738,"stop":1732228799738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info","time":{"start":1732228799739,"stop":1732228799768,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1732228799739,"stop":1732228799739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1732228799768,"stop":1732228799769,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1732228799769,"stop":1732228799769,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1732228799769,"stop":1732228799770,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1732228799770,"stop":1732228799773,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1732228799770,"stop":1732228799770,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1732228799774,"stop":1732228800195,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1732228800196,"stop":1732228801146,"duration":950},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id","time":{"start":1732228801147,"stop":1732228801580,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact","time":{"start":1732228801580,"stop":1732228802062,"duration":482},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag","time":{"start":1732228802063,"stop":1732228803348,"duration":1285},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release","time":{"start":1732228803348,"stop":1732228803804,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1732228803804,"stop":1732228832135,"duration":28331},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1732228832136,"stop":1732228836063,"duration":3927},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffaf420950>\nproject = <golioth.golioth.Project object at 0xffffaf57e710>\ndevice = <golioth.golioth.Device object at 0xffffaf423850>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\nfw_info = {'package': 'main', 'version': '255.8.9'}\nrelease = Release <673fb6c3bb6157cf6cdf58fb, release_tags=[], device_tags=['673fb6c2bb6157cf6cdf58f9'], artifact_ids=['673e0793bb6157cf6cdf21ae'], rollout=False>\n\n    async def test_fw_update(shell, project, device, wifi_ssid, wifi_psk, fw_info, release):\n    \n        # Wait for app to start running or 10 seconds to pass so runtime settings are ready.\n    \n        try:\n            shell._device.readlines_until(regex=\".*Start FW Update sample.\", timeout=10.0)\n        except:\n            pass\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for first manifest to arrive (no update expected)\n    \n        shell._device.readlines_until(regex=\".*Nothing to do.\", timeout=90.0)\n    \n    \n        # Rollout the release\n    \n        await project.releases.rollout_set(release.id, True)\n    \n        # Monitor block download and watch for reboot after update\n    \n>       shell._device.readlines_until(regex=\".*Received block.\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/fw_update/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Received block.', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e27c7df6431607e4","name":"log","source":"e27c7df6431607e4.txt","type":"text/plain","size":40274}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1732228941690,"stop":1732228941950,"duration":260},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"release::0","time":{"start":1732228941952,"stop":1732228942356,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"tag::0","time":{"start":1732228942358,"stop":1732228943248,"duration":890},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"artifact::0","time":{"start":1732228943250,"stop":1732228943251,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"blueprint_id::0","time":{"start":1732228943253,"stop":1732228943253,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1732228943255,"stop":1732228943649,"duration":394},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1732228943651,"stop":1732228943651,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1732228943653,"stop":1732228943654,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_info::0","time":{"start":1732228943719,"stop":1732228943724,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a740e50162b5"},{"name":"thread","value":"400-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.fw_update.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"65439a9dc10cbfd4","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732224414533,"stop":1732224525223,"duration":110690}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":59,"unknown":0,"total":67},"items":[{"uid":"43c8a71f6d05d894","reportUrl":"https://golioth.github.io/allure-reports/branch/1818//#testresult/43c8a71f6d05d894","status":"passed","time":{"start":1732226812543,"stop":1732226940340,"duration":127797}},{"uid":"43797cf02d82b73b","reportUrl":"https://golioth.github.io/allure-reports/branch/1817//#testresult/43797cf02d82b73b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1732224414533,"stop":1732224525223,"duration":110690}},{"uid":"9538a59d409e78b","reportUrl":"https://golioth.github.io/allure-reports/branch/1816//#testresult/9538a59d409e78b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessException: Could not flash device None","time":{"start":1732220792795,"stop":1732220792795,"duration":0}},{"uid":"7d68874693d92779","reportUrl":"https://golioth.github.io/allure-reports/branch/1815//#testresult/7d68874693d92779","status":"passed","time":{"start":1732215569709,"stop":1732215696348,"duration":126639}},{"uid":"c07de1ffd5dfdd1","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/c07de1ffd5dfdd1","status":"passed","time":{"start":1732210796280,"stop":1732210917777,"duration":121497}},{"uid":"9190a80f3c78e1b","reportUrl":"https://golioth.github.io/allure-reports/branch/1807//#testresult/9190a80f3c78e1b","status":"passed","time":{"start":1732209146068,"stop":1732209288655,"duration":142587}},{"uid":"34bf01e60c98af9b","reportUrl":"https://golioth.github.io/allure-reports/branch/1806//#testresult/34bf01e60c98af9b","status":"passed","time":{"start":1732208131771,"stop":1732208259185,"duration":127414}},{"uid":"cf29ada7ebc18c6f","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/cf29ada7ebc18c6f","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}},{"uid":"4845f6a7a8a71c00","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/4845f6a7a8a71c00","status":"passed","time":{"start":1732199877035,"stop":1732200011542,"duration":134507}},{"uid":"3c87904d8911be76","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/3c87904d8911be76","status":"passed","time":{"start":1732187003561,"stop":1732187127722,"duration":124161}},{"uid":"da3aade94ffdf313","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/da3aade94ffdf313","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}},{"uid":"a08f1f62f940b8ce","reportUrl":"https://golioth.github.io/allure-reports/branch/1805//#testresult/a08f1f62f940b8ce","status":"passed","time":{"start":1732194751387,"stop":1732194877330,"duration":125943}},{"uid":"cff7b6b84d78ed1a","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/cff7b6b84d78ed1a","status":"passed","time":{"start":1732187003561,"stop":1732187127722,"duration":124161}},{"uid":"9f9a38095438563b","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/9f9a38095438563b","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}},{"uid":"672fc93be9ecac1c","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/672fc93be9ecac1c","status":"passed","time":{"start":1732187003561,"stop":1732187127722,"duration":124161}},{"uid":"22af638b0e456bb8","reportUrl":"https://golioth.github.io/allure-reports/branch/1798//#testresult/22af638b0e456bb8","status":"passed","time":{"start":1732185498321,"stop":1732185628374,"duration":130053}},{"uid":"5075b122f3ce32da","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/5075b122f3ce32da","status":"passed","time":{"start":1732142072060,"stop":1732142210021,"duration":137961}},{"uid":"56029a15a58c04ca","reportUrl":"https://golioth.github.io/allure-reports/branch/1799//#testresult/56029a15a58c04ca","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1732147031086,"stop":1732147031086,"duration":0}},{"uid":"10054f9fbd9d0e19","reportUrl":"https://golioth.github.io/allure-reports/branch/1797//#testresult/10054f9fbd9d0e19","status":"passed","time":{"start":1732143711100,"stop":1732143839341,"duration":128241}},{"uid":"b88226e520178187","reportUrl":"https://golioth.github.io/allure-reports/branch/1796//#testresult/b88226e520178187","status":"passed","time":{"start":1732142072060,"stop":1732142210021,"duration":137961}}]},"tags":["nrf52840dk","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"c174618956625858.json","parameterValues":["'nrf52840dk'","'zephyr'"]}