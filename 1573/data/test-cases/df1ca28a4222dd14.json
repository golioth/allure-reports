{"uid":"df1ca28a4222dd14","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"21098cf9f3128d3d03f8900d527065d2","time":{"start":1728030553449,"stop":1728030576128,"duration":22679},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fa93510>\ndevice = <golioth.golioth.Device object at 0xffff9fbae1d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728030534302,"stop":1728030534302,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728030534303,"stop":1728030534304,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728030534304,"stop":1728030534304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728030534305,"stop":1728030534306,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728030534306,"stop":1728030534307,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728030534307,"stop":1728030534310,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728030534311,"stop":1728030534311,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728030534312,"stop":1728030534312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728030534313,"stop":1728030535015,"duration":702},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728030535015,"stop":1728030536117,"duration":1102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728030536118,"stop":1728030552426,"duration":16308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728030552426,"stop":1728030553446,"duration":1020},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9fa93510>\ndevice = <golioth.golioth.Device object at 0xffff9fbae1d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b871e48ae9d7ca9e","name":"log","source":"b871e48ae9d7ca9e.txt","type":"text/plain","size":13050}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728030576429,"stop":1728030576442,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728030576444,"stop":1728030576854,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728030576856,"stop":1728030576859,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728030576863,"stop":1728030576864,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"10de13df56e9"},{"name":"thread","value":"344-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":26,"skipped":0,"passed":58,"unknown":0,"total":84},"items":[{"uid":"78b5866c1b81113b","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/78b5866c1b81113b","status":"passed","time":{"start":1728027712110,"stop":1728027728871,"duration":16761}},{"uid":"bc64632eaf7bee8","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/bc64632eaf7bee8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728023847565,"stop":1728023870301,"duration":22736}},{"uid":"9b900fc863cfb910","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/9b900fc863cfb910","status":"passed","time":{"start":1728003885171,"stop":1728003902683,"duration":17512}},{"uid":"fc958877edc9d69a","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/fc958877edc9d69a","status":"passed","time":{"start":1727994049561,"stop":1727994066074,"duration":16513}},{"uid":"e03281a835f06b0a","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/e03281a835f06b0a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727994240383,"stop":1727994263173,"duration":22790}},{"uid":"4b95f73ad965552e","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/4b95f73ad965552e","status":"passed","time":{"start":1727988461762,"stop":1727988482377,"duration":20615}},{"uid":"4e2dc30b42da41aa","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/4e2dc30b42da41aa","status":"passed","time":{"start":1727986183355,"stop":1727986206930,"duration":23575}},{"uid":"1bad44116704e661","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/1bad44116704e661","status":"passed","time":{"start":1727980566189,"stop":1727980590683,"duration":24494}},{"uid":"a932d88e1ba6fee","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/a932d88e1ba6fee","status":"passed","time":{"start":1727977301500,"stop":1727977325851,"duration":24351}},{"uid":"bb73ffd7820bf08b","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/bb73ffd7820bf08b","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727975145918,"stop":1727975168487,"duration":22569}},{"uid":"7fe8a0dc47159ce","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/7fe8a0dc47159ce","status":"passed","time":{"start":1727972610339,"stop":1727972631207,"duration":20868}},{"uid":"9bb9668ab47e5ab1","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/9bb9668ab47e5ab1","status":"passed","time":{"start":1727970808122,"stop":1727970828043,"duration":19921}},{"uid":"6d0c95e15a00fa4a","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/6d0c95e15a00fa4a","status":"passed","time":{"start":1727966423900,"stop":1727966444481,"duration":20581}},{"uid":"b3045be4ed3bdb44","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/b3045be4ed3bdb44","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727964293785,"stop":1727964316420,"duration":22635}},{"uid":"ef9341217b4e0034","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/ef9341217b4e0034","status":"passed","time":{"start":1727957843971,"stop":1727957864480,"duration":20509}},{"uid":"8fbae4ab398c66f4","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/8fbae4ab398c66f4","status":"passed","time":{"start":1727956768893,"stop":1727956786370,"duration":17477}},{"uid":"5815e778ead50b64","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/5815e778ead50b64","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727956126048,"stop":1727956148674,"duration":22626}},{"uid":"fa4f00d801ee15cf","reportUrl":"https://golioth.github.io/allure-reports/1527//#testresult/fa4f00d801ee15cf","status":"passed","time":{"start":1727952132977,"stop":1727952149368,"duration":16391}},{"uid":"1ddc3a688eeb3b5","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/1ddc3a688eeb3b5","status":"passed","time":{"start":1727950363278,"stop":1727950387831,"duration":24553}},{"uid":"59ac50571b7a75ae","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/59ac50571b7a75ae","status":"passed","time":{"start":1727948124744,"stop":1727948149320,"duration":24576}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"df1ca28a4222dd14.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}