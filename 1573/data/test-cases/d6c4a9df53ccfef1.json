{"uid":"d6c4a9df53ccfef1","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1728064876604,"stop":1728064912625,"duration":36021},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 2 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5917b90>\ndevice = <golioth.golioth.Device object at 0xffffa5936bd0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffa5aa0d90>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 2 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728064846868,"stop":1728064846868,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1728064846869,"stop":1728064846884,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728064846885,"stop":1728064846886,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728064846885,"stop":1728064846885,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728064846886,"stop":1728064846888,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728064846889,"stop":1728064846889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728064846890,"stop":1728064846890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728064846890,"stop":1728064847373,"duration":483},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728064847374,"stop":1728064848654,"duration":1280},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728064848654,"stop":1728064875478,"duration":26824},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728064875479,"stop":1728064876597,"duration":1118},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 2 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5917b90>\ndevice = <golioth.golioth.Device object at 0xffffa5936bd0>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffffa5aa0d90>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 2 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:63: AssertionError","steps":[],"attachments":[{"uid":"57e150e1b7d4fcb0","name":"log","source":"57e150e1b7d4fcb0.txt","type":"text/plain","size":21019}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728064912903,"stop":1728064913205,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728064913207,"stop":1728064913706,"duration":499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728064913709,"stop":1728064913711,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728064913716,"stop":1728064913716,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"49010ca5e373"},{"name":"thread","value":"814-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":11,"skipped":0,"passed":65,"unknown":0,"total":83},"items":[{"uid":"8f833d8fd56c06cf","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/8f833d8fd56c06cf","status":"passed","time":{"start":1728066924045,"stop":1728066956246,"duration":32201}},{"uid":"ae2a5128851390f","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/ae2a5128851390f","status":"passed","time":{"start":1728034376353,"stop":1728034428105,"duration":51752}},{"uid":"d10c679e68b6d189","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/d10c679e68b6d189","status":"passed","time":{"start":1728056604768,"stop":1728056652060,"duration":47292}},{"uid":"87920485dc35dd51","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/87920485dc35dd51","status":"passed","time":{"start":1728052145964,"stop":1728052187364,"duration":41400}},{"uid":"e158861c584d13f6","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/e158861c584d13f6","status":"passed","time":{"start":1728037724596,"stop":1728037756346,"duration":31750}},{"uid":"cc4f71b121eeba9e","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/cc4f71b121eeba9e","status":"passed","time":{"start":1728034376353,"stop":1728034428105,"duration":51752}},{"uid":"c3124b8578f86d7f","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/c3124b8578f86d7f","status":"passed","time":{"start":1728030213882,"stop":1728030245102,"duration":31220}},{"uid":"9f80ab31975983b4","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/9f80ab31975983b4","status":"passed","time":{"start":1728025109588,"stop":1728025167248,"duration":57660}},{"uid":"d552ba1226650ffa","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/d552ba1226650ffa","status":"passed","time":{"start":1728004262870,"stop":1728004295357,"duration":32487}},{"uid":"88b866fc0fedc1b8","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/88b866fc0fedc1b8","status":"passed","time":{"start":1727995964875,"stop":1727995992216,"duration":27341}},{"uid":"a127139e42a1dd04","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/a127139e42a1dd04","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727994508538,"stop":1727994628275,"duration":119737}},{"uid":"df0cad4811f690ce","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/df0cad4811f690ce","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","time":{"start":1727990442894,"stop":1727990476465,"duration":33571}},{"uid":"d4f5d4121c5d3316","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/d4f5d4121c5d3316","status":"passed","time":{"start":1727986207726,"stop":1727986237226,"duration":29500}},{"uid":"4656c56548b6b063","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/4656c56548b6b063","status":"passed","time":{"start":1727980374917,"stop":1727980403917,"duration":29000}},{"uid":"97fe9b2ff674b055","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/97fe9b2ff674b055","status":"passed","time":{"start":1727978019483,"stop":1727978077517,"duration":58034}},{"uid":"c6f830158d125548","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/c6f830158d125548","status":"passed","time":{"start":1727976593173,"stop":1727976626023,"duration":32850}},{"uid":"3518e48b196fe895","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/3518e48b196fe895","status":"passed","time":{"start":1727974374081,"stop":1727974404638,"duration":30557}},{"uid":"f2300399ee394dcc","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/f2300399ee394dcc","status":"passed","time":{"start":1727973278760,"stop":1727973310675,"duration":31915}},{"uid":"96c99202a25b5469","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/96c99202a25b5469","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727967661269,"stop":1727967779544,"duration":118275}},{"uid":"a72ab02e8b05acaf","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/a72ab02e8b05acaf","status":"passed","time":{"start":1727961797653,"stop":1727961828730,"duration":31077}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d6c4a9df53ccfef1.json","parameterValues":["'nrf9160dk'","'zephyr'"]}