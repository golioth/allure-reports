{"uid":"de8a9aaec3154228","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"03352d708656e4accf49c2f80b0063e1","time":{"start":1728121883032,"stop":1728121905555,"duration":22523},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb09cdb50>\ndevice = <golioth.golioth.Device object at 0xffffb09ec650>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728121863156,"stop":1728121863156,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728121863156,"stop":1728121863156,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728121863157,"stop":1728121863157,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728121863157,"stop":1728121863157,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728121863158,"stop":1728121863158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728121863158,"stop":1728121863160,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728121863161,"stop":1728121863161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728121863162,"stop":1728121863162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728121863162,"stop":1728121863588,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728121863588,"stop":1728121864549,"duration":961},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728121864550,"stop":1728121882090,"duration":17540},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728121882091,"stop":1728121883029,"duration":938},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb09cdb50>\ndevice = <golioth.golioth.Device object at 0xffffb09ec650>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"7ca94af9a64221c3","name":"log","source":"7ca94af9a64221c3.txt","type":"text/plain","size":12896}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728121905929,"stop":1728121905978,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728121905980,"stop":1728121906363,"duration":383},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728121906366,"stop":1728121906368,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728121906373,"stop":1728121906373,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d58dcced2b0c"},{"name":"thread","value":"466-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e03d5fe935c415d","status":"passed","time":{"start":1728070086894,"stop":1728070097904,"duration":11010}},{"uid":"bd60275bb1055279","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728030790513,"stop":1728030813142,"duration":22629}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":37,"skipped":0,"passed":56,"unknown":0,"total":93},"items":[{"uid":"51dc9ee3f3fdb122","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/51dc9ee3f3fdb122","status":"passed","time":{"start":1728090207654,"stop":1728090219637,"duration":11983}},{"uid":"d83dc3297521f57","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/d83dc3297521f57","status":"passed","time":{"start":1728082554463,"stop":1728082563437,"duration":8974}},{"uid":"a7785dff31fbe658","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/a7785dff31fbe658","status":"passed","time":{"start":1728075413944,"stop":1728075422705,"duration":8761}},{"uid":"3fbae043cf1a2fdf","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/3fbae043cf1a2fdf","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728072954382,"stop":1728072976971,"duration":22589}},{"uid":"fba0b0bbbc8e605a","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/fba0b0bbbc8e605a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728069747550,"stop":1728069770233,"duration":22683}},{"uid":"c919b8c0901b6af","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/c919b8c0901b6af","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728070850609,"stop":1728070873301,"duration":22692}},{"uid":"45bddd44bab961c6","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/45bddd44bab961c6","status":"passed","time":{"start":1728070086894,"stop":1728070097904,"duration":11010}},{"uid":"a0b116a12708ac07","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/a0b116a12708ac07","status":"passed","time":{"start":1728070552961,"stop":1728070559961,"duration":7000}},{"uid":"b4eabec80e1432e8","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/b4eabec80e1432e8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728058684553,"stop":1728058707231,"duration":22678}},{"uid":"dd70b035adb6ef8b","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/dd70b035adb6ef8b","status":"passed","time":{"start":1728058076320,"stop":1728058087304,"duration":10984}},{"uid":"9dfeff8bf12ffdbf","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/9dfeff8bf12ffdbf","status":"passed","time":{"start":1728050764959,"stop":1728050777529,"duration":12570}},{"uid":"a710312c084e33e2","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/a710312c084e33e2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728036657032,"stop":1728036679704,"duration":22672}},{"uid":"378ac599193b0c15","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/378ac599193b0c15","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728030790513,"stop":1728030813142,"duration":22629}},{"uid":"602de06011e79cba","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/602de06011e79cba","status":"passed","time":{"start":1728027950141,"stop":1728027959939,"duration":9798}},{"uid":"f09cd2fa2ebf2d62","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/f09cd2fa2ebf2d62","status":"passed","time":{"start":1728024234941,"stop":1728024245919,"duration":10978}},{"uid":"6d44f3a79a9153f","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/6d44f3a79a9153f","status":"passed","time":{"start":1728004113443,"stop":1728004123858,"duration":10415}},{"uid":"2762d15302f69827","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/2762d15302f69827","status":"passed","time":{"start":1727994278322,"stop":1727994288120,"duration":9798}},{"uid":"10c60191d74b4fb3","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/10c60191d74b4fb3","status":"passed","time":{"start":1727994572458,"stop":1727994578940,"duration":6482}},{"uid":"1464b14623126299","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/1464b14623126299","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727988703395,"stop":1727988726134,"duration":22739}},{"uid":"4fc806fcc7aa160e","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/4fc806fcc7aa160e","status":"passed","time":{"start":1727986508329,"stop":1727986516320,"duration":7991}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"de8a9aaec3154228.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}