{"uid":"f47096886777a1db","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1728069853480,"stop":1728069946577,"duration":93097},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb07669d0>\ndevice = <golioth.golioth.Device object at 0xffffb078d410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728069837708,"stop":1728069837708,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728069837708,"stop":1728069837708,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728069837709,"stop":1728069837710,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728069837709,"stop":1728069837709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728069837710,"stop":1728069837712,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728069837710,"stop":1728069837710,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728069837713,"stop":1728069837713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728069837714,"stop":1728069837714,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728069837714,"stop":1728069838133,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728069838133,"stop":1728069839105,"duration":972},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728069839105,"stop":1728069852539,"duration":13434},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728069852540,"stop":1728069853478,"duration":938},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb07669d0>\ndevice = <golioth.golioth.Device object at 0xffffb078d410>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"b0e15ef2ae2d5053","name":"log","source":"b0e15ef2ae2d5053.txt","type":"text/plain","size":18264}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728069946827,"stop":1728069946840,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728069946842,"stop":1728069947256,"duration":414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728069947258,"stop":1728069947260,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728069947265,"stop":1728069947265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"d135e2b4d9e1"},{"name":"thread","value":"417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"73edc49311041de6","status":"passed","time":{"start":1728030646229,"stop":1728030656969,"duration":10740}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":83,"unknown":0,"total":90},"items":[{"uid":"84affbd42b586f6","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/84affbd42b586f6","status":"passed","time":{"start":1728070400066,"stop":1728070407764,"duration":7698}},{"uid":"81b3e60438468a07","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/81b3e60438468a07","status":"passed","time":{"start":1728058533184,"stop":1728058549733,"duration":16549}},{"uid":"ffee9f5681bf7980","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/ffee9f5681bf7980","status":"passed","time":{"start":1728057913716,"stop":1728057921398,"duration":7682}},{"uid":"ac1083fc3b7949ea","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/ac1083fc3b7949ea","status":"passed","time":{"start":1728050595321,"stop":1728050605084,"duration":9763}},{"uid":"f05a5c3053fec5d","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/f05a5c3053fec5d","status":"passed","time":{"start":1728036512882,"stop":1728036523459,"duration":10577}},{"uid":"d8c1e0a717e0802e","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/d8c1e0a717e0802e","status":"passed","time":{"start":1728030646229,"stop":1728030656969,"duration":10740}},{"uid":"a9301516f80cdd20","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/a9301516f80cdd20","status":"passed","time":{"start":1728027797912,"stop":1728027808749,"duration":10837}},{"uid":"b63507bbd668c88","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/b63507bbd668c88","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728023974431,"stop":1728024067628,"duration":93197}},{"uid":"b9e8ba8652538358","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/b9e8ba8652538358","status":"passed","time":{"start":1728003966324,"stop":1728003977852,"duration":11528}},{"uid":"22bc391404f63d52","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/22bc391404f63d52","status":"passed","time":{"start":1727994131069,"stop":1727994142504,"duration":11435}},{"uid":"c4e608149b311668","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/c4e608149b311668","status":"passed","time":{"start":1727994335788,"stop":1727994345555,"duration":9767}},{"uid":"cd52dfacafa1106d","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/cd52dfacafa1106d","status":"passed","time":{"start":1727988553029,"stop":1727988560541,"duration":7512}},{"uid":"7fe317a0abe2fff1","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/7fe317a0abe2fff1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727986272604,"stop":1727986365708,"duration":93104}},{"uid":"34853eeccacecec6","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/34853eeccacecec6","status":"passed","time":{"start":1727980656349,"stop":1727980665912,"duration":9563}},{"uid":"51c0a14d1b05939e","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/51c0a14d1b05939e","status":"passed","time":{"start":1727977390053,"stop":1727977402548,"duration":12495}},{"uid":"f5fe174df97d65b7","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/f5fe174df97d65b7","status":"passed","time":{"start":1727975231580,"stop":1727975242598,"duration":11018}},{"uid":"380f4593bc95cc13","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/380f4593bc95cc13","status":"passed","time":{"start":1727972696924,"stop":1727972708363,"duration":11439}},{"uid":"149888f1a387046","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/149888f1a387046","status":"passed","time":{"start":1727970894695,"stop":1727970905483,"duration":10788}},{"uid":"e85b60883c214f85","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/e85b60883c214f85","status":"passed","time":{"start":1727966507843,"stop":1727966517904,"duration":10061}},{"uid":"694550d2cf802031","reportUrl":"https://golioth.github.io/allure-reports/1536//#testresult/694550d2cf802031","status":"passed","time":{"start":1727964826915,"stop":1727964833408,"duration":6493}}]},"tags":["mikes_orange_pi","anyio","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f47096886777a1db.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}