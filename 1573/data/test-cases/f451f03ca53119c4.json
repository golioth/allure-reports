{"uid":"f451f03ca53119c4","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"9f22c51edebca391e19beab3a68324b4","time":{"start":1728021293493,"stop":1728021386330,"duration":92837},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fb89e933490>\ndevice = <golioth.golioth.Device object at 0x7fb89e9253d0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728021292461,"stop":1728021292461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728021292461,"stop":1728021292461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728021292461,"stop":1728021292461,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728021292462,"stop":1728021292462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728021292462,"stop":1728021292462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728021292462,"stop":1728021292462,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728021292462,"stop":1728021292463,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728021292463,"stop":1728021292463,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728021292463,"stop":1728021292758,"duration":295},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728021292758,"stop":1728021293390,"duration":632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728021293390,"stop":1728021293391,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728021293392,"stop":1728021293492,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fb89e933490>\ndevice = <golioth.golioth.Device object at 0x7fb89e9253d0>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"6c8ad5637c9f3417","name":"log","source":"6c8ad5637c9f3417.txt","type":"text/plain","size":16913}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728021386368,"stop":1728021386869,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728021386870,"stop":1728021387044,"duration":174},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728021387044,"stop":1728021387044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728021387045,"stop":1728021387045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 31"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ef0be09df0f6"},{"name":"thread","value":"57025-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"23c7f09bcd26f7f0","status":"passed","time":{"start":1728021280786,"stop":1728021332213,"duration":51427}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":20,"unknown":0,"total":22},"items":[{"uid":"b1c789ede593fcb9","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/b1c789ede593fcb9","status":"passed","time":{"start":1728021123361,"stop":1728021176908,"duration":53547}},{"uid":"aba053125cd9836d","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/aba053125cd9836d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728020550930,"stop":1728020643831,"duration":92901}},{"uid":"5e4e1c8685ff6fd0","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/5e4e1c8685ff6fd0","status":"passed","time":{"start":1728001713037,"stop":1728001725399,"duration":12362}},{"uid":"770d160aa5e87b08","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/770d160aa5e87b08","status":"passed","time":{"start":1727986238381,"stop":1727986251252,"duration":12871}},{"uid":"90af7b36d85508f1","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/90af7b36d85508f1","status":"passed","time":{"start":1727986240285,"stop":1727986252887,"duration":12602}},{"uid":"1077dd1cff6e85c6","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/1077dd1cff6e85c6","status":"passed","time":{"start":1727984727529,"stop":1727984740184,"duration":12655}},{"uid":"cd5a1b5f4c4fffd2","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/cd5a1b5f4c4fffd2","status":"passed","time":{"start":1727975419724,"stop":1727975432220,"duration":12496}},{"uid":"f0f76f5b63a32973","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/f0f76f5b63a32973","status":"passed","time":{"start":1727970130989,"stop":1727970143703,"duration":12714}},{"uid":"9bc244d84d899120","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/9bc244d84d899120","status":"passed","time":{"start":1727965183158,"stop":1727965195422,"duration":12264}},{"uid":"c8e62ace2509e48a","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/c8e62ace2509e48a","status":"passed","time":{"start":1727942533222,"stop":1727942545572,"duration":12350}},{"uid":"5791515411c326a7","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/5791515411c326a7","status":"passed","time":{"start":1727943228529,"stop":1727943240906,"duration":12377}},{"uid":"87fccd782ee65a71","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/87fccd782ee65a71","status":"passed","time":{"start":1727942533222,"stop":1727942545572,"duration":12350}},{"uid":"310cc13f29d8aca5","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/310cc13f29d8aca5","status":"passed","time":{"start":1727942300742,"stop":1727942313229,"duration":12487}},{"uid":"5ae3a8bed333872c","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/5ae3a8bed333872c","status":"passed","time":{"start":1727795052646,"stop":1727795065367,"duration":12721}},{"uid":"f7170d326edc7d54","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/f7170d326edc7d54","status":"passed","time":{"start":1727800759029,"stop":1727800771281,"duration":12252}},{"uid":"66cec6edb83f437a","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/66cec6edb83f437a","status":"passed","time":{"start":1727797989412,"stop":1727798002083,"duration":12671}},{"uid":"b7b4e8a2b96b14b","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/b7b4e8a2b96b14b","status":"passed","time":{"start":1727781790042,"stop":1727781802457,"duration":12415}},{"uid":"602a5ea157c74ef8","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/602a5ea157c74ef8","status":"passed","time":{"start":1727777090139,"stop":1727777108004,"duration":17865}},{"uid":"f6feeb2b25ce1e9d","reportUrl":"https://golioth.github.io/allure-reports/1504//#testresult/f6feeb2b25ce1e9d","status":"passed","time":{"start":1727768954344,"stop":1727768967061,"duration":12717}},{"uid":"5b65caaab0e2fe5b","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/5b65caaab0e2fe5b","status":"passed","time":{"start":1727761385727,"stop":1727761398465,"duration":12738}}]},"tags":["anyio","GitHub Actions 31","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"f451f03ca53119c4.json","parameterValues":["''","'zephyr'"]}