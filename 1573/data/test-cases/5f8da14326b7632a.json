{"uid":"5f8da14326b7632a","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"01782019729919a104e19f26c23c3c6e","time":{"start":1728021245662,"stop":1728021338293,"duration":92631},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fcff192ae10>\ndevice = <golioth.golioth.Device object at 0x7fcff191cf50>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1728021244542,"stop":1728021244542,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1728021244542,"stop":1728021244542,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728021244543,"stop":1728021244543,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728021244543,"stop":1728021244543,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728021244543,"stop":1728021244543,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728021244543,"stop":1728021244543,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728021244544,"stop":1728021244910,"duration":366},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728021244544,"stop":1728021244544,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728021244544,"stop":1728021244544,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728021244910,"stop":1728021245559,"duration":649},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728021245559,"stop":1728021245560,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728021245560,"stop":1728021245662,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0x7fcff192ae10>\ndevice = <golioth.golioth.Device object at 0x7fcff191cf50>, wifi_ssid = None\nwifi_psk = None\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = NativeSimulatorAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"3854332fd9631a91","name":"log","source":"3854332fd9631a91.txt","type":"text/plain","size":14773}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728021338335,"stop":1728021338836,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728021338837,"stop":1728021339011,"duration":174},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728021339011,"stop":1728021339011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728021339012,"stop":1728021339012,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr."},{"name":"tag","value":"GitHub Actions 31"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ef0be09df0f6"},{"name":"thread","value":"45098-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"''"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"282fd0d70798bfd","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728021239178,"stop":1728021331871,"duration":92693}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":20,"unknown":0,"total":22},"items":[{"uid":"5928a9240bd3fac","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/5928a9240bd3fac","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728021061203,"stop":1728021153977,"duration":92774}},{"uid":"9f54d93650508473","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/9f54d93650508473","status":"passed","time":{"start":1728020497211,"stop":1728020553442,"duration":56231}},{"uid":"66a1fc02c4b5e049","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/66a1fc02c4b5e049","status":"passed","time":{"start":1728001659103,"stop":1728001679346,"duration":20243}},{"uid":"b75acd13764bd296","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/b75acd13764bd296","status":"passed","time":{"start":1727986182683,"stop":1727986203364,"duration":20681}},{"uid":"11aeaaa6af06b595","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/11aeaaa6af06b595","status":"passed","time":{"start":1727986180017,"stop":1727986200614,"duration":20597}},{"uid":"3bdea568a2df874b","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/3bdea568a2df874b","status":"passed","time":{"start":1727984670173,"stop":1727984691124,"duration":20951}},{"uid":"da9e6203c281e3e9","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/da9e6203c281e3e9","status":"passed","time":{"start":1727975365051,"stop":1727975385479,"duration":20428}},{"uid":"997cabaf25c7b823","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/997cabaf25c7b823","status":"passed","time":{"start":1727970073494,"stop":1727970094448,"duration":20954}},{"uid":"ad148dcc136ac9a2","reportUrl":"https://golioth.github.io/allure-reports/1543//#testresult/ad148dcc136ac9a2","status":"passed","time":{"start":1727965127267,"stop":1727965147527,"duration":20260}},{"uid":"badf32a02c337da","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/badf32a02c337da","status":"passed","time":{"start":1727942473605,"stop":1727942494183,"duration":20578}},{"uid":"87a7c44e7bb3e9","reportUrl":"https://golioth.github.io/allure-reports/1534//#testresult/87a7c44e7bb3e9","status":"passed","time":{"start":1727943173933,"stop":1727943194397,"duration":20464}},{"uid":"239ed680e8aa3047","reportUrl":"https://golioth.github.io/allure-reports/1530//#testresult/239ed680e8aa3047","status":"passed","time":{"start":1727942473605,"stop":1727942494183,"duration":20578}},{"uid":"7328cf186c2a9e97","reportUrl":"https://golioth.github.io/allure-reports/1529//#testresult/7328cf186c2a9e97","status":"passed","time":{"start":1727942244479,"stop":1727942268364,"duration":23885}},{"uid":"51b2118733256ecb","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/51b2118733256ecb","status":"passed","time":{"start":1727794993643,"stop":1727795014446,"duration":20803}},{"uid":"219163129daec76e","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/219163129daec76e","status":"passed","time":{"start":1727800702952,"stop":1727800724505,"duration":21553}},{"uid":"bc1540db92cae59b","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/bc1540db92cae59b","status":"passed","time":{"start":1727797934682,"stop":1727797955344,"duration":20662}},{"uid":"94fff4e3b68b499f","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/94fff4e3b68b499f","status":"passed","time":{"start":1727781733887,"stop":1727781754388,"duration":20501}},{"uid":"f77314e68cd725f3","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/f77314e68cd725f3","status":"passed","time":{"start":1727777031266,"stop":1727777052157,"duration":20891}},{"uid":"4eef49e88096f2a1","reportUrl":"https://golioth.github.io/allure-reports/1504//#testresult/4eef49e88096f2a1","status":"passed","time":{"start":1727768900841,"stop":1727768921740,"duration":20899}},{"uid":"6c7345d122805062","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/6c7345d122805062","status":"passed","time":{"start":1727761330973,"stop":1727761351634,"duration":20661}}]},"tags":["anyio","GitHub Actions 31","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"5f8da14326b7632a.json","parameterValues":["''","'zephyr'"]}