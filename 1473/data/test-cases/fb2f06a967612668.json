{"uid":"fb2f06a967612668","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"fbdcf5b89e903e4e31b43e980f10a270","time":{"start":1727547096090,"stop":1727547119114,"duration":23024},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff85cedf10>\ndevice = <golioth.golioth.Device object at 0xffff85d0cb50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727547078419,"stop":1727547078419,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727547078420,"stop":1727547078420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727547078420,"stop":1727547078421,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727547078421,"stop":1727547078421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727547078422,"stop":1727547078422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727547078422,"stop":1727547078424,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727547078425,"stop":1727547078425,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727547078426,"stop":1727547078863,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727547078426,"stop":1727547078426,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727547078864,"stop":1727547079763,"duration":899},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727547079763,"stop":1727547095066,"duration":15303},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727547095066,"stop":1727547096087,"duration":1021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff85cedf10>\ndevice = <golioth.golioth.Device object at 0xffff85d0cb50>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"89c853c195c40f1f","name":"log","source":"89c853c195c40f1f.txt","type":"text/plain","size":14720}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727547119361,"stop":1727547119395,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727547119397,"stop":1727547119804,"duration":407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727547119807,"stop":1727547119809,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727547119814,"stop":1727547119814,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"f6447053fe67"},{"name":"thread","value":"390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":30,"unknown":0,"total":32},"items":[{"uid":"d7b4d13e16e5bb87","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/d7b4d13e16e5bb87","status":"passed","time":{"start":1727545764007,"stop":1727545786657,"duration":22650}},{"uid":"2ece39ea38d2b1da","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/2ece39ea38d2b1da","status":"passed","time":{"start":1727485395813,"stop":1727485420251,"duration":24438}},{"uid":"8cbf07d8ef6db707","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/8cbf07d8ef6db707","status":"passed","time":{"start":1727477635058,"stop":1727477660365,"duration":25307}},{"uid":"f3627d943e5f2f9e","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/f3627d943e5f2f9e","status":"passed","time":{"start":1727463166493,"stop":1727463189872,"duration":23379}},{"uid":"8b212078eef153d2","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/8b212078eef153d2","status":"passed","time":{"start":1727463166493,"stop":1727463189872,"duration":23379}},{"uid":"f619a0c4e8327fcc","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/f619a0c4e8327fcc","status":"passed","time":{"start":1727459935215,"stop":1727459957879,"duration":22664}},{"uid":"54695dd9191760ba","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/54695dd9191760ba","status":"passed","time":{"start":1727460469563,"stop":1727460492350,"duration":22787}},{"uid":"bd5d1a48c881b275","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/bd5d1a48c881b275","status":"passed","time":{"start":1727459628320,"stop":1727459654600,"duration":26280}},{"uid":"24a36feefc821b42","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/24a36feefc821b42","status":"passed","time":{"start":1727459155960,"stop":1727459176311,"duration":20351}},{"uid":"7d266ac4ebd4bdf3","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/7d266ac4ebd4bdf3","status":"passed","time":{"start":1727398991606,"stop":1727399095670,"duration":104064}},{"uid":"f8a1271c616ce443","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/f8a1271c616ce443","status":"passed","time":{"start":1727394858595,"stop":1727394885270,"duration":26675}},{"uid":"e1722c2ff6f1c538","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/e1722c2ff6f1c538","status":"passed","time":{"start":1727391018320,"stop":1727391043638,"duration":25318}},{"uid":"5fba738d5d2ec8f2","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/5fba738d5d2ec8f2","status":"passed","time":{"start":1727391391653,"stop":1727391415009,"duration":23356}},{"uid":"420076410a2ae12d","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/420076410a2ae12d","status":"passed","time":{"start":1727385865183,"stop":1727385885555,"duration":20372}},{"uid":"bcdc7bf341220bf","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/bcdc7bf341220bf","status":"broken","statusDetails":"httpx.ConnectError: all attempts to connect to api.golioth.io:443 failed","time":{"start":1727383667626,"stop":1727383671872,"duration":4246}},{"uid":"61cd1a9ac331fe0a","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/61cd1a9ac331fe0a","status":"passed","time":{"start":1727380379596,"stop":1727380403873,"duration":24277}},{"uid":"837016abf51a57d4","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/837016abf51a57d4","status":"passed","time":{"start":1727378498177,"stop":1727378520866,"duration":22689}},{"uid":"8485e081a5e7e98f","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/8485e081a5e7e98f","status":"passed","time":{"start":1727372880654,"stop":1727372904058,"duration":23404}},{"uid":"d29dc0711d886e76","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/d29dc0711d886e76","status":"passed","time":{"start":1727369811691,"stop":1727369832056,"duration":20365}},{"uid":"c39ead7ccc922cd8","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/c39ead7ccc922cd8","status":"passed","time":{"start":1727366359929,"stop":1727366383762,"duration":23833}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"fb2f06a967612668.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}