{"uid":"95677b2bbbf17ae8","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"49c2d00155bbcb4c43348062b18627e5","time":{"start":1727545442455,"stop":1727545458569,"duration":16114},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad7e1b90>\ndevice = <golioth.golioth.Device object at 0xffffad7f8b50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727545413640,"stop":1727545413640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727545413641,"stop":1727545413641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727545413641,"stop":1727545413641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727545413642,"stop":1727545413642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727545413642,"stop":1727545413643,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727545413643,"stop":1727545413645,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727545413646,"stop":1727545413646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727545413646,"stop":1727545413647,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727545413647,"stop":1727545414235,"duration":588},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727545414236,"stop":1727545415355,"duration":1119},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727545415356,"stop":1727545439268,"duration":23912},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727545439269,"stop":1727545442448,"duration":3179},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffad7e1b90>\ndevice = <golioth.golioth.Device object at 0xffffad7f8b50>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"6357ab86a256f2a7","name":"log","source":"6357ab86a256f2a7.txt","type":"text/plain","size":23694}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727545458747,"stop":1727545459010,"duration":263},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727545459012,"stop":1727545459514,"duration":502},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727545459516,"stop":1727545459518,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727545459523,"stop":1727545459523,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"21b5b56f198e"},{"name":"thread","value":"451-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":31,"unknown":0,"total":32},"items":[{"uid":"8610fe8761f3146f","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/8610fe8761f3146f","status":"passed","time":{"start":1727544158006,"stop":1727544181603,"duration":23597}},{"uid":"1e6d038033aebf13","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/1e6d038033aebf13","status":"passed","time":{"start":1727484288659,"stop":1727484312520,"duration":23861}},{"uid":"39896f073ec00aa8","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/39896f073ec00aa8","status":"passed","time":{"start":1727476900293,"stop":1727476924057,"duration":23764}},{"uid":"8fb47888ac36dd3e","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/8fb47888ac36dd3e","status":"passed","time":{"start":1727462271489,"stop":1727462295204,"duration":23715}},{"uid":"20b57393106bf963","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/20b57393106bf963","status":"passed","time":{"start":1727462271489,"stop":1727462295204,"duration":23715}},{"uid":"21f9216a9c9664d2","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/21f9216a9c9664d2","status":"passed","time":{"start":1727457127918,"stop":1727457151140,"duration":23222}},{"uid":"907e46da15e42f8a","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/907e46da15e42f8a","status":"passed","time":{"start":1727453987528,"stop":1727454011294,"duration":23766}},{"uid":"63ba0a7e750cfd26","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/63ba0a7e750cfd26","status":"passed","time":{"start":1727455697707,"stop":1727455721339,"duration":23632}},{"uid":"dd686eabde416510","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/dd686eabde416510","status":"passed","time":{"start":1727452922650,"stop":1727452946271,"duration":23621}},{"uid":"177d509db8ea8283","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/177d509db8ea8283","status":"passed","time":{"start":1727397918938,"stop":1727397942734,"duration":23796}},{"uid":"4bd3ad5f9140d910","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/4bd3ad5f9140d910","status":"passed","time":{"start":1727394602425,"stop":1727394626208,"duration":23783}},{"uid":"24ae4759ac0640b6","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/24ae4759ac0640b6","status":"passed","time":{"start":1727390029387,"stop":1727390053404,"duration":24017}},{"uid":"48dd25bc2d4bd832","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/48dd25bc2d4bd832","status":"passed","time":{"start":1727390343993,"stop":1727390367602,"duration":23609}},{"uid":"636a215117fc6ada","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/636a215117fc6ada","status":"passed","time":{"start":1727385104133,"stop":1727385127332,"duration":23199}},{"uid":"5cc0b24c95c837e2","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/5cc0b24c95c837e2","status":"passed","time":{"start":1727382690684,"stop":1727382714485,"duration":23801}},{"uid":"4dd5f7b93dd0d652","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/4dd5f7b93dd0d652","status":"passed","time":{"start":1727379352838,"stop":1727379376616,"duration":23778}},{"uid":"d6e8c170199a3b63","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/d6e8c170199a3b63","status":"passed","time":{"start":1727374699774,"stop":1727374723955,"duration":24181}},{"uid":"ddf411e8205536e8","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/ddf411e8205536e8","status":"passed","time":{"start":1727371852576,"stop":1727371876387,"duration":23811}},{"uid":"74f7c64344130362","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/74f7c64344130362","status":"passed","time":{"start":1727369388107,"stop":1727369411746,"duration":23639}},{"uid":"553398f15d24a359","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/553398f15d24a359","status":"passed","time":{"start":1727364711722,"stop":1727364735507,"duration":23785}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"95677b2bbbf17ae8.json","parameterValues":["'nrf52840dk'","'zephyr'"]}