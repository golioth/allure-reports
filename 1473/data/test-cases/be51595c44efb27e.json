{"uid":"be51595c44efb27e","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"e43e30077c8654d0036bc169098990de","time":{"start":1727546110900,"stop":1727546138963,"duration":28063},"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dbeff90>\ndevice = <golioth.golioth.Device object at 0xffff9da14690>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1727546081891,"stop":1727546081891,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727546081892,"stop":1727546081892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727546081892,"stop":1727546081893,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727546081893,"stop":1727546081893,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727546081894,"stop":1727546081897,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727546081894,"stop":1727546081894,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727546081898,"stop":1727546081898,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727546081898,"stop":1727546081899,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727546081899,"stop":1727546082466,"duration":567},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727546082467,"stop":1727546083654,"duration":1187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727546083655,"stop":1727546107698,"duration":24043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727546107698,"stop":1727546110893,"duration":3195},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9dbeff90>\ndevice = <golioth.golioth.Device object at 0xffff9da14690>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n        shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n    \n        # Check logs for hello messages\n    \n        end = datetime.datetime.utcnow()\n    \n        logs = await device.get_logs({'start': start.strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 'end': end.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})\n    \n        # Test logs received from server\n    \n        LOGGER.info(\"Searching log messages from end to start:\")\n        test_idx = 2\n        test_hits = 0\n        for m in reversed(logs):\n    \n            if m.message == f\"Sending hello! {test_idx}\":\n                LOGGER.info(\"### MATCH FOUND! ---> {0}\".format(m.message))\n                test_hits += 1\n                test_idx -= 1\n                if test_idx < 0:\n                    break\n            else:\n                LOGGER.info(m.message)\n    \n>       assert test_hits == 3, 'Unable to find all Hello messages on server'\nE       AssertionError: Unable to find all Hello messages on server\nE       assert 0 == 3\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:54: AssertionError","steps":[],"attachments":[{"uid":"78269f18b27ef0df","name":"log","source":"78269f18b27ef0df.txt","type":"text/plain","size":19618}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727546139133,"stop":1727546139379,"duration":246},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727546139381,"stop":1727546139855,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727546139857,"stop":1727546139859,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727546139864,"stop":1727546139864,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"21b5b56f198e"},{"name":"thread","value":"1079-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a4199ae4945695ee","status":"passed","time":{"start":1727545908557,"stop":1727545932520,"duration":23963}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":30,"unknown":0,"total":32},"items":[{"uid":"e0e384a3f0e9570d","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/e0e384a3f0e9570d","status":"passed","time":{"start":1727544801282,"stop":1727544825032,"duration":23750}},{"uid":"5f89131203c046f3","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/5f89131203c046f3","status":"passed","time":{"start":1727485083391,"stop":1727485107021,"duration":23630}},{"uid":"52c6383ba9aee444","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/52c6383ba9aee444","status":"passed","time":{"start":1727477675966,"stop":1727477699695,"duration":23729}},{"uid":"86a7b91e89b575ea","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/86a7b91e89b575ea","status":"passed","time":{"start":1727462916582,"stop":1727462940221,"duration":23639}},{"uid":"a1d1cc736bd4dcf0","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/a1d1cc736bd4dcf0","status":"passed","time":{"start":1727462916582,"stop":1727462940221,"duration":23639}},{"uid":"c0c71b098079f717","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/c0c71b098079f717","status":"passed","time":{"start":1727457885246,"stop":1727457908646,"duration":23400}},{"uid":"90b74700ebe61589","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/90b74700ebe61589","status":"passed","time":{"start":1727454705750,"stop":1727454729612,"duration":23862}},{"uid":"9bcdbec503b25848","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/9bcdbec503b25848","status":"passed","time":{"start":1727456339146,"stop":1727456363025,"duration":23879}},{"uid":"7a0157a6fc8c2cc3","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/7a0157a6fc8c2cc3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727453520788,"stop":1727453633558,"duration":112770}},{"uid":"549d65eac4ca0283","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/549d65eac4ca0283","status":"passed","time":{"start":1727398642398,"stop":1727398666161,"duration":23763}},{"uid":"96dee43221c44e3f","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/96dee43221c44e3f","status":"passed","time":{"start":1727395246876,"stop":1727395270694,"duration":23818}},{"uid":"819a6454d12827","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/819a6454d12827","status":"passed","time":{"start":1727390749697,"stop":1727390773002,"duration":23305}},{"uid":"d3645e7e14d05108","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/d3645e7e14d05108","status":"passed","time":{"start":1727390399178,"stop":1727390422826,"duration":23648}},{"uid":"2e36bc76aa47d37c","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/2e36bc76aa47d37c","status":"passed","time":{"start":1727385815051,"stop":1727385838349,"duration":23298}},{"uid":"300ad17942b3f8b3","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/300ad17942b3f8b3","status":"passed","time":{"start":1727383391114,"stop":1727383414793,"duration":23679}},{"uid":"58547036531f2d1d","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/58547036531f2d1d","status":"passed","time":{"start":1727380005731,"stop":1727380029454,"duration":23723}},{"uid":"40ac3403a4040c17","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/40ac3403a4040c17","status":"passed","time":{"start":1727375342922,"stop":1727375366579,"duration":23657}},{"uid":"abef21a8ad80b257","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/abef21a8ad80b257","status":"passed","time":{"start":1727372560177,"stop":1727372584000,"duration":23823}},{"uid":"c140bd6590590e39","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/c140bd6590590e39","status":"passed","time":{"start":1727370088978,"stop":1727370112717,"duration":23739}},{"uid":"d8f2f5a7c1b0b628","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/d8f2f5a7c1b0b628","status":"passed","time":{"start":1727365539296,"stop":1727365562980,"duration":23684}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"be51595c44efb27e.json","parameterValues":["'nrf52840dk'","'zephyr'"]}