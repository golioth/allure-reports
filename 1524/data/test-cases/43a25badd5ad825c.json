{"uid":"43a25badd5ad825c","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"fbdcf5b89e903e4e31b43e980f10a270","time":{"start":1727833360729,"stop":1727833383753,"duration":23024},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbc541610>\ndevice = <golioth.golioth.Device object at 0xffffbc55c690>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727833342738,"stop":1727833342738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727833342739,"stop":1727833342739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727833342740,"stop":1727833342740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727833342740,"stop":1727833342740,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727833342741,"stop":1727833342743,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727833342741,"stop":1727833342741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727833342744,"stop":1727833342744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727833342745,"stop":1727833342745,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727833342745,"stop":1727833343170,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727833343171,"stop":1727833344100,"duration":929},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727833344100,"stop":1727833359691,"duration":15591},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727833359692,"stop":1727833360726,"duration":1034},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbc541610>\ndevice = <golioth.golioth.Device object at 0xffffbc55c690>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n>       shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ef49fcd1e02b1de9","name":"log","source":"ef49fcd1e02b1de9.txt","type":"text/plain","size":14720}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727833384000,"stop":1727833384035,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727833384037,"stop":1727833384413,"duration":376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727833384415,"stop":1727833384418,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727833384422,"stop":1727833384423,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a0aea73bf7e1"},{"name":"thread","value":"390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":52,"unknown":0,"total":57},"items":[{"uid":"6bad1c42ad93349b","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/6bad1c42ad93349b","status":"passed","time":{"start":1727830679283,"stop":1727830703853,"duration":24570}},{"uid":"47dcf95757c696d1","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/47dcf95757c696d1","status":"passed","time":{"start":1727816400963,"stop":1727816423425,"duration":22462}},{"uid":"14fd0fd8d0583308","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/14fd0fd8d0583308","status":"passed","time":{"start":1727815924536,"stop":1727815947156,"duration":22620}},{"uid":"30b7c59c783994e2","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/30b7c59c783994e2","status":"passed","time":{"start":1727815263334,"stop":1727815283672,"duration":20338}},{"uid":"efca83a4380a0211","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/efca83a4380a0211","status":"passed","time":{"start":1727810357116,"stop":1727810381550,"duration":24434}},{"uid":"173ccb77e5ab3302","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/173ccb77e5ab3302","status":"passed","time":{"start":1727807018929,"stop":1727807044361,"duration":25432}},{"uid":"e2596a01fc3c2532","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/e2596a01fc3c2532","status":"passed","time":{"start":1727798851922,"stop":1727798873313,"duration":21391}},{"uid":"a1de1909a2639f70","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/a1de1909a2639f70","status":"passed","time":{"start":1727797535499,"stop":1727797556897,"duration":21398}},{"uid":"26a5a4fc8d0b729d","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/26a5a4fc8d0b729d","status":"passed","time":{"start":1727788789907,"stop":1727788812115,"duration":22208}},{"uid":"298845f18e06e162","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/298845f18e06e162","status":"passed","time":{"start":1727786023891,"stop":1727786050183,"duration":26292}},{"uid":"be36fcebbb9ae6d","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/be36fcebbb9ae6d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727784570655,"stop":1727784663700,"duration":93045}},{"uid":"7cbba0afed802138","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/7cbba0afed802138","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727780906088,"stop":1727780999168,"duration":93080}},{"uid":"c534932f5d9e0ca5","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/c534932f5d9e0ca5","status":"passed","time":{"start":1727777529314,"stop":1727777553926,"duration":24612}},{"uid":"1691c287e77e7fa7","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/1691c287e77e7fa7","status":"passed","time":{"start":1727775518952,"stop":1727775541986,"duration":23034}},{"uid":"2a89e87e39063518","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/2a89e87e39063518","status":"passed","time":{"start":1727771746480,"stop":1727771770334,"duration":23854}},{"uid":"35ae353d6fb7c460","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/35ae353d6fb7c460","status":"passed","time":{"start":1727770709161,"stop":1727770731668,"duration":22507}},{"uid":"aa2aa59867feb54f","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/aa2aa59867feb54f","status":"passed","time":{"start":1727765851576,"stop":1727765872133,"duration":20557}},{"uid":"4cebc3b30eeeb402","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/4cebc3b30eeeb402","status":"passed","time":{"start":1727765807579,"stop":1727765831237,"duration":23658}},{"uid":"d9fa5fb7e931314f","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/d9fa5fb7e931314f","status":"passed","time":{"start":1727761066130,"stop":1727761088682,"duration":22552}},{"uid":"e10acbbf9dc06576","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/e10acbbf9dc06576","status":"passed","time":{"start":1727744497040,"stop":1727744526839,"duration":29799}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"43a25badd5ad825c.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}