{"uid":"83dc9c171fabf92a","name":"test_lightdb_observe","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample#test_lightdb_observe","historyId":"e38d27876e1f6f82f90ed39e64311b25","time":{"start":1727833406059,"stop":1727833499089,"duration":93030},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbb6f2310>\ndevice = <golioth.golioth.Device object at 0xffffbb70d090>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727833387708,"stop":1727833387709,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727833387709,"stop":1727833387709,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727833387710,"stop":1727833387710,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727833387710,"stop":1727833387710,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727833387711,"stop":1727833387711,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727833387712,"stop":1727833387714,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727833387714,"stop":1727833387715,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727833387715,"stop":1727833387715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727833387716,"stop":1727833388135,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727833388136,"stop":1727833389028,"duration":892},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727833389028,"stop":1727833405037,"duration":16009},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727833405037,"stop":1727833406056,"duration":1019},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffbb6f2310>\ndevice = <golioth.golioth.Device object at 0xffffbb70d090>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_observe(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/observe/pytest/test_sample.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"4767b7918b2cef7","name":"log","source":"4767b7918b2cef7.txt","type":"text/plain","size":17821}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727833499343,"stop":1727833499356,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727833499358,"stop":1727833499768,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727833499770,"stop":1727833499772,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727833499777,"stop":1727833499777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a0aea73bf7e1"},{"name":"thread","value":"405-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.observe.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":53,"unknown":0,"total":57},"items":[{"uid":"a84d53485cc9c75b","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/a84d53485cc9c75b","status":"passed","time":{"start":1727830725551,"stop":1727830734278,"duration":8727}},{"uid":"b4f7ac6c61efc8af","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/b4f7ac6c61efc8af","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727816443150,"stop":1727816466174,"duration":23024}},{"uid":"45e116eb81e4b94a","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/45e116eb81e4b94a","status":"passed","time":{"start":1727815970009,"stop":1727815980976,"duration":10967}},{"uid":"32ee362e6409d2c","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/32ee362e6409d2c","status":"passed","time":{"start":1727815305122,"stop":1727815312749,"duration":7627}},{"uid":"2e9b3394a5ce41a3","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/2e9b3394a5ce41a3","status":"passed","time":{"start":1727810402891,"stop":1727810410420,"duration":7529}},{"uid":"5e77bdc2ca586a9","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/5e77bdc2ca586a9","status":"passed","time":{"start":1727807066357,"stop":1727807076611,"duration":10254}},{"uid":"8ab991476dc22311","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/8ab991476dc22311","status":"passed","time":{"start":1727798895062,"stop":1727798901534,"duration":6472}},{"uid":"93fe7516cb49f0cc","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/93fe7516cb49f0cc","status":"passed","time":{"start":1727797578155,"stop":1727797589981,"duration":11826}},{"uid":"17ab7bd038e47262","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/17ab7bd038e47262","status":"passed","time":{"start":1727788833279,"stop":1727788839847,"duration":6568}},{"uid":"9e3fbca70e98a728","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/9e3fbca70e98a728","status":"passed","time":{"start":1727786069612,"stop":1727786078244,"duration":8632}},{"uid":"2dd7fc1ab9525125","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/2dd7fc1ab9525125","status":"broken","statusDetails":"httpx.ConnectError: all attempts to connect to api.golioth.io:443 failed","time":{"start":1727784685385,"stop":1727784685590,"duration":205}},{"uid":"7bd5c4aba895c4d3","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/7bd5c4aba895c4d3","status":"passed","time":{"start":1727781020601,"stop":1727781032342,"duration":11741}},{"uid":"73f0c4688c94d0b7","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/73f0c4688c94d0b7","status":"passed","time":{"start":1727777575983,"stop":1727777584697,"duration":8714}},{"uid":"c6898d9bc45eb9a6","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/c6898d9bc45eb9a6","status":"passed","time":{"start":1727775561645,"stop":1727775571103,"duration":9458}},{"uid":"b0192a3016951b73","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/b0192a3016951b73","status":"passed","time":{"start":1727771790641,"stop":1727771797554,"duration":6913}},{"uid":"20e6f98848d76c6d","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/20e6f98848d76c6d","status":"passed","time":{"start":1727770753131,"stop":1727770760908,"duration":7777}},{"uid":"57d8cbeafd322a2c","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/57d8cbeafd322a2c","status":"passed","time":{"start":1727765891568,"stop":1727765900161,"duration":8593}},{"uid":"d00dcbb16f5a85f3","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/d00dcbb16f5a85f3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727765852804,"stop":1727765946055,"duration":93251}},{"uid":"8fb38f37474f6c5e","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/8fb38f37474f6c5e","status":"passed","time":{"start":1727761108593,"stop":1727761119303,"duration":10710}},{"uid":"f5917b600efe6ede","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/f5917b600efe6ede","status":"passed","time":{"start":1727744546877,"stop":1727744558615,"duration":11738}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"83dc9c171fabf92a.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}