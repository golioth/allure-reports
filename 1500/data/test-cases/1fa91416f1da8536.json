{"uid":"1fa91416f1da8536","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample#test_hello","historyId":"e124f10389952e3c52fb82b67fe5598b","time":{"start":1727779540246,"stop":1727779653449,"duration":113203},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff97d1be10>\ndevice = <golioth.golioth.Device object at 0xffff97d36d90>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff97ea1350>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727779511925,"stop":1727779511926,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf","time":{"start":1727779511926,"stop":1727779511941,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727779511942,"stop":1727779511942,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727779511943,"stop":1727779511943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727779511943,"stop":1727779511946,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727779511946,"stop":1727779511947,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727779511947,"stop":1727779511947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727779511948,"stop":1727779512401,"duration":453},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727779512402,"stop":1727779513357,"duration":955},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727779513358,"stop":1727779539122,"duration":25764},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727779539123,"stop":1727779540239,"duration":1116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff97d1be10>\ndevice = <golioth.golioth.Device object at 0xffff97d36d90>\nbuild_conf = <runners.core.BuildConfiguration object at 0xffff97ea1350>\n\n    async def test_hello(shell, device, build_conf):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        credentials_tag = build_conf['CONFIG_GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG']\n    \n        # Deactivate modem to allow credentials modification\n        shell.exec_command(f\"nrf_modem_at AT+CFUN=4\", timeout=10.0)\n    \n        # List all credentials\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=1,{credentials_tag}\")\n    \n        # PSK-ID\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},4\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},4,{golioth_cred.identity}\")\n    \n        # PSK\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=3,{credentials_tag},3\")  # Delete\n        shell.exec_command(f\"nrf_modem_at AT%CMNG=0,{credentials_tag},3,{golioth_cred.key.encode('ascii').hex()}\")\n    \n        # Reboot to take effect\n        shell._device.clear_buffer()\n        shell._device.write('kernel reboot cold\\n\\n'.encode())\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello_nrf91_offloaded/pytest/test_sample.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"6402813fd4c0e5d","name":"log","source":"6402813fd4c0e5d.txt","type":"text/plain","size":16358}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727779653774,"stop":1727779653819,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727779653821,"stop":1727779654273,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727779654275,"stop":1727779654278,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727779654283,"stop":1727779654283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"e73716b0a689"},{"name":"thread","value":"809-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello_nrf91_offloaded.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":6,"skipped":0,"passed":29,"unknown":0,"total":39},"items":[{"uid":"e189f293631225c9","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/e189f293631225c9","status":"passed","time":{"start":1727775732605,"stop":1727775760993,"duration":28388}},{"uid":"48116311f133b90c","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/48116311f133b90c","status":"passed","time":{"start":1727772400318,"stop":1727772428588,"duration":28270}},{"uid":"c07fa3c9863fb083","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/c07fa3c9863fb083","status":"passed","time":{"start":1727767293370,"stop":1727767324878,"duration":31508}},{"uid":"ac8fc42b68ae6b8f","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/ac8fc42b68ae6b8f","status":"passed","time":{"start":1727766061500,"stop":1727766087872,"duration":26372}},{"uid":"2610c489782923e9","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/2610c489782923e9","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1727746262856,"stop":1727746322516,"duration":59660}},{"uid":"3752cc3b5bf0fb9c","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/3752cc3b5bf0fb9c","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 0 == 3","time":{"start":1727734021617,"stop":1727734087402,"duration":65785}},{"uid":"d5d4d8fdc62116c9","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/d5d4d8fdc62116c9","status":"passed","time":{"start":1727659918603,"stop":1727659946023,"duration":27420}},{"uid":"d6996fb5f77f288c","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/d6996fb5f77f288c","status":"failed","statusDetails":"AssertionError: Unable to find all Hello messages on server\nassert 1 == 3","time":{"start":1727572786341,"stop":1727572824058,"duration":37717}},{"uid":"bac5200d1f6699a8","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/bac5200d1f6699a8","status":"passed","time":{"start":1727550272557,"stop":1727550301746,"duration":29189}},{"uid":"257fb47e6f073f3c","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/257fb47e6f073f3c","status":"passed","time":{"start":1727549165927,"stop":1727549198785,"duration":32858}},{"uid":"e89264be958ba69e","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/e89264be958ba69e","status":"passed","time":{"start":1727549096061,"stop":1727549147214,"duration":51153}},{"uid":"f3abd36bbe76099d","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/f3abd36bbe76099d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727486631640,"stop":1727486749691,"duration":118051}},{"uid":"3a49615b77bc71aa","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/3a49615b77bc71aa","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727479043246,"stop":1727479156424,"duration":113178}},{"uid":"ac49b0f1dcd88d10","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/ac49b0f1dcd88d10","status":"passed","time":{"start":1727463289822,"stop":1727463327657,"duration":37835}},{"uid":"5efb7b2abb77f2e6","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/5efb7b2abb77f2e6","status":"passed","time":{"start":1727463289822,"stop":1727463327657,"duration":37835}},{"uid":"6d5b9baff076f98b","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/6d5b9baff076f98b","status":"passed","time":{"start":1727458767464,"stop":1727458821752,"duration":54288}},{"uid":"97931bb832fe7187","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/97931bb832fe7187","status":"passed","time":{"start":1727455246796,"stop":1727455284599,"duration":37803}},{"uid":"8661fe0d4ed784e6","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/8661fe0d4ed784e6","status":"passed","time":{"start":1727456538620,"stop":1727456575988,"duration":37368}},{"uid":"163099052d3cf2a6","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/163099052d3cf2a6","status":"passed","time":{"start":1727453791694,"stop":1727453828339,"duration":36645}},{"uid":"d10d8faca28b4b53","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/d10d8faca28b4b53","status":"passed","time":{"start":1727395504136,"stop":1727395541730,"duration":37594}}]},"tags":["nrf9160dk","anyio","mikes_testbench","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"1fa91416f1da8536.json","parameterValues":["'nrf9160dk'","'zephyr'"]}