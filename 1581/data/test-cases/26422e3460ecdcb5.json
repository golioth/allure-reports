{"uid":"26422e3460ecdcb5","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"a7312cf31d6314ecf7ffd5a0a0af0ddc","time":{"start":1728072906681,"stop":1728072929857,"duration":23176},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5a82410>\ndevice = <golioth.golioth.Device object at 0xffffa5a9ced0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1728072888829,"stop":1728072888829,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728072888829,"stop":1728072888830,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728072888830,"stop":1728072888830,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728072888830,"stop":1728072888831,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728072888831,"stop":1728072888831,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728072888832,"stop":1728072888834,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728072888834,"stop":1728072888835,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728072888835,"stop":1728072888835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728072888836,"stop":1728072889311,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728072889311,"stop":1728072890251,"duration":940},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728072890251,"stop":1728072905666,"duration":15415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728072905667,"stop":1728072906678,"duration":1011},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffa5a82410>\ndevice = <golioth.golioth.Device object at 0xffffa5a9ced0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"c012861b2c894e4","name":"log","source":"c012861b2c894e4.txt","type":"text/plain","size":15217}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728072930166,"stop":1728072930179,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728072930181,"stop":1728072930603,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728072930605,"stop":1728072930607,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728072930612,"stop":1728072930612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"aa0195c2092f"},{"name":"thread","value":"503-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":21,"skipped":0,"passed":72,"unknown":0,"total":93},"items":[{"uid":"e484b31064c314ef","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/e484b31064c314ef","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728069931001,"stop":1728069954133,"duration":23132}},{"uid":"36bbb0666cdea761","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/36bbb0666cdea761","status":"passed","time":{"start":1728071129893,"stop":1728071159775,"duration":29882}},{"uid":"f70d1bf45e3432c3","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/f70d1bf45e3432c3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728070771746,"stop":1728070794773,"duration":23027}},{"uid":"33d7e156934f8444","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/33d7e156934f8444","status":"passed","time":{"start":1728070767681,"stop":1728070793798,"duration":26117}},{"uid":"693c6e4be0e57c4f","reportUrl":"https://golioth.github.io/allure-reports/1574//#testresult/693c6e4be0e57c4f","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728058861441,"stop":1728058884566,"duration":23125}},{"uid":"1da95a1c4b900b7a","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/1da95a1c4b900b7a","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728058251253,"stop":1728058274324,"duration":23071}},{"uid":"b3faf1f3b17664f1","reportUrl":"https://golioth.github.io/allure-reports/1577//#testresult/b3faf1f3b17664f1","status":"passed","time":{"start":1728050936798,"stop":1728050966926,"duration":30128}},{"uid":"3661a2ced49213f4","reportUrl":"https://golioth.github.io/allure-reports/1576//#testresult/3661a2ced49213f4","status":"passed","time":{"start":1728036844992,"stop":1728036870393,"duration":25401}},{"uid":"e5d4345b314dd58e","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/e5d4345b314dd58e","status":"passed","time":{"start":1728030973183,"stop":1728031000365,"duration":27182}},{"uid":"1424054228eabcde","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/1424054228eabcde","status":"passed","time":{"start":1728028128220,"stop":1728028153632,"duration":25412}},{"uid":"b60bb4a55cd149f4","reportUrl":"https://golioth.github.io/allure-reports/1571//#testresult/b60bb4a55cd149f4","status":"passed","time":{"start":1728024501513,"stop":1728024530491,"duration":28978}},{"uid":"9f45ee2fbbf13629","reportUrl":"https://golioth.github.io/allure-reports/1570//#testresult/9f45ee2fbbf13629","status":"passed","time":{"start":1728004284184,"stop":1728004313281,"duration":29097}},{"uid":"b194751a2ea08c33","reportUrl":"https://golioth.github.io/allure-reports/1569//#testresult/b194751a2ea08c33","status":"passed","time":{"start":1727995053771,"stop":1727995081997,"duration":28226}},{"uid":"4d9e5bcab4419e2c","reportUrl":"https://golioth.github.io/allure-reports/1567//#testresult/4d9e5bcab4419e2c","status":"passed","time":{"start":1727994836053,"stop":1727994863919,"duration":27866}},{"uid":"874001423c1945b4","reportUrl":"https://golioth.github.io/allure-reports/1566//#testresult/874001423c1945b4","status":"passed","time":{"start":1727988939547,"stop":1727988968870,"duration":29323}},{"uid":"c95d69a72c510c64","reportUrl":"https://golioth.github.io/allure-reports/1560//#testresult/c95d69a72c510c64","status":"passed","time":{"start":1727987191237,"stop":1727987217421,"duration":26184}},{"uid":"5f2d25e88f998bb1","reportUrl":"https://golioth.github.io/allure-reports/1556//#testresult/5f2d25e88f998bb1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727981509220,"stop":1727981532250,"duration":23030}},{"uid":"b746fa0a47cc9c05","reportUrl":"https://golioth.github.io/allure-reports/1542//#testresult/b746fa0a47cc9c05","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727977735502,"stop":1727977758475,"duration":22973}},{"uid":"29a2f6681986f4b0","reportUrl":"https://golioth.github.io/allure-reports/1547//#testresult/29a2f6681986f4b0","status":"passed","time":{"start":1727976073070,"stop":1727976101502,"duration":28432}},{"uid":"7ce4227c0ca3d101","reportUrl":"https://golioth.github.io/allure-reports/1544//#testresult/7ce4227c0ca3d101","status":"passed","time":{"start":1727973137674,"stop":1727973167000,"duration":29326}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"26422e3460ecdcb5.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}