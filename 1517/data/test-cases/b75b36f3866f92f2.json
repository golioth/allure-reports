{"uid":"b75b36f3866f92f2","name":"test_lightdb_set","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample#test_lightdb_set","historyId":"795cf1865df9980166e83af7545b18f1","time":{"start":1727814112850,"stop":1727814131495,"duration":18645},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a1a1d10>\ndevice = <golioth.golioth.Device object at 0xffff9a1b8d90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727814082417,"stop":1727814082417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727814082418,"stop":1727814082419,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727814082418,"stop":1727814082418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727814082419,"stop":1727814082419,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727814082420,"stop":1727814082420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727814082420,"stop":1727814082422,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727814082423,"stop":1727814082423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727814082424,"stop":1727814082975,"duration":551},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727814082424,"stop":1727814082424,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727814082976,"stop":1727814083998,"duration":1022},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727814083999,"stop":1727814111751,"duration":27752},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727814111751,"stop":1727814112845,"duration":1094},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9a1a1d10>\ndevice = <golioth.golioth.Device object at 0xffff9a1b8d90>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_set(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb writes\n    \n        for i in range(0,4):\n            shell._device.readlines_until(regex=f\".*Setting counter to {i}\", timeout=10.0)\n            shell._device.readlines_until(regex=f\".*Counter successfully set\", timeout=10.0)\n    \n            for _ in range(3):\n                counter = await device.lightdb.get(\"counter\")\n                if counter == i:\n                    break\n                await trio.sleep(1)\n    \n>           assert counter == i\nE           assert 1 == 0\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/set/pytest/test_sample.py:47: AssertionError","steps":[],"attachments":[{"uid":"52c5e1faafca95e0","name":"log","source":"52c5e1faafca95e0.txt","type":"text/plain","size":24143}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727814131674,"stop":1727814131719,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727814131721,"stop":1727814132216,"duration":495},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727814132218,"stop":1727814132220,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727814132225,"stop":1727814132225,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf9160dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf9160dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"ff3a2733e3ad"},{"name":"thread","value":"434-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.set.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf9160dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":13,"skipped":0,"passed":33,"unknown":0,"total":48},"items":[{"uid":"9723b43d7a1aca57","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/9723b43d7a1aca57","status":"passed","time":{"start":1727810873068,"stop":1727810898765,"duration":25697}},{"uid":"19c48475371bfed3","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/19c48475371bfed3","status":"passed","time":{"start":1727808718307,"stop":1727808762395,"duration":44088}},{"uid":"7fa7d6a3210003e5","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/7fa7d6a3210003e5","status":"passed","time":{"start":1727807769830,"stop":1727807796162,"duration":26332}},{"uid":"4ac61eb1e1ba33c8","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/4ac61eb1e1ba33c8","status":"passed","time":{"start":1727799845843,"stop":1727799884443,"duration":38600}},{"uid":"4fc4d730f9ea819","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/4fc4d730f9ea819","status":"passed","time":{"start":1727798902171,"stop":1727798924928,"duration":22757}},{"uid":"48a5f4a2b26bd2","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/48a5f4a2b26bd2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727782142061,"stop":1727782235273,"duration":93212}},{"uid":"4b4a73e497deb667","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/4b4a73e497deb667","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727780288661,"stop":1727780382028,"duration":93367}},{"uid":"8b88856caf619629","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/8b88856caf619629","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727778445165,"stop":1727778538470,"duration":93305}},{"uid":"83ecd866eb023254","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/83ecd866eb023254","status":"passed","time":{"start":1727775081488,"stop":1727775103344,"duration":21856}},{"uid":"733937fbfc9203ea","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/733937fbfc9203ea","status":"passed","time":{"start":1727771738311,"stop":1727771760278,"duration":21967}},{"uid":"3e39de5fceeaed81","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/3e39de5fceeaed81","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727766620087,"stop":1727766644279,"duration":24192}},{"uid":"f5205091cd90dac8","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/f5205091cd90dac8","status":"passed","time":{"start":1727765398354,"stop":1727765420892,"duration":22538}},{"uid":"d21225db75579fe2","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/d21225db75579fe2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727745174084,"stop":1727745210064,"duration":35980}},{"uid":"5534490c63615e8","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/5534490c63615e8","status":"passed","time":{"start":1727732800014,"stop":1727732836488,"duration":36474}},{"uid":"6f45a565d7e2b39c","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/6f45a565d7e2b39c","status":"passed","time":{"start":1727658864328,"stop":1727658893901,"duration":29573}},{"uid":"da70b72ca2c949e8","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/da70b72ca2c949e8","status":"passed","time":{"start":1727571750031,"stop":1727571772063,"duration":22032}},{"uid":"c8d79e4ce643def0","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/c8d79e4ce643def0","status":"passed","time":{"start":1727549596787,"stop":1727549621824,"duration":25037}},{"uid":"f9e15fb50d28875e","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/f9e15fb50d28875e","status":"passed","time":{"start":1727548535143,"stop":1727548557067,"duration":21924}},{"uid":"809eac859d7ebac2","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/809eac859d7ebac2","status":"passed","time":{"start":1727548259255,"stop":1727548299762,"duration":40507}},{"uid":"7fd544cdf039da79","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/7fd544cdf039da79","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727485831088,"stop":1727485868075,"duration":36987}}]},"tags":["nrf9160dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b75b36f3866f92f2.json","parameterValues":["'nrf9160dk'","'zephyr'"]}