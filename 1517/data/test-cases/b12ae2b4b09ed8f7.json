{"uid":"b12ae2b4b09ed8f7","name":"test_rpc","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample#test_rpc","historyId":"03352d708656e4accf49c2f80b0063e1","time":{"start":1727816121874,"stop":1727816144502,"duration":22628},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff98e1db90>\ndevice = <golioth.golioth.Device object at 0xffff98e3c610>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727816102009,"stop":1727816102009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727816102010,"stop":1727816102010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727816102010,"stop":1727816102011,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727816102011,"stop":1727816102011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727816102012,"stop":1727816102012,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727816102012,"stop":1727816102014,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727816102015,"stop":1727816102015,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727816102016,"stop":1727816102436,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727816102016,"stop":1727816102016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727816102437,"stop":1727816103291,"duration":854},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727816103291,"stop":1727816120939,"duration":17648},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727816120939,"stop":1727816121872,"duration":933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff98e1db90>\ndevice = <golioth.golioth.Device object at 0xffff98e3c610>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_rpc(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/rpc/pytest/test_sample.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"421984397f8b51b5","name":"log","source":"421984397f8b51b5.txt","type":"text/plain","size":12895}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727816144840,"stop":1727816144871,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727816144873,"stop":1727816145263,"duration":390},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727816145266,"stop":1727816145268,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727816145273,"stop":1727816145273,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"53a5259dfeba"},{"name":"thread","value":"455-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.rpc.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":20,"skipped":0,"passed":30,"unknown":0,"total":50},"items":[{"uid":"ec1eaf04ca00c62b","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/ec1eaf04ca00c62b","status":"passed","time":{"start":1727815452429,"stop":1727815459405,"duration":6976}},{"uid":"4f931d20783e16b5","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/4f931d20783e16b5","status":"passed","time":{"start":1727810545997,"stop":1727810551925,"duration":5928}},{"uid":"ae19711ca6859de8","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/ae19711ca6859de8","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727807215692,"stop":1727807238319,"duration":22627}},{"uid":"8e6b806ce3d0da3e","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/8e6b806ce3d0da3e","status":"passed","time":{"start":1727799039965,"stop":1727799049592,"duration":9627}},{"uid":"3190215ac930b1c2","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/3190215ac930b1c2","status":"passed","time":{"start":1727797733900,"stop":1727797741866,"duration":7966}},{"uid":"9eadd234244ae853","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/9eadd234244ae853","status":"passed","time":{"start":1727788979595,"stop":1727788989203,"duration":9608}},{"uid":"b3fdbd91ea7481ab","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/b3fdbd91ea7481ab","status":"passed","time":{"start":1727786905505,"stop":1727786915273,"duration":9768}},{"uid":"69eb090f55ab3052","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/69eb090f55ab3052","status":"broken","statusDetails":"httpx.ConnectTimeout","time":{"start":1727784723648,"stop":1727784723648,"duration":0}},{"uid":"7afb11db428bfca0","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/7afb11db428bfca0","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727781162456,"stop":1727781185093,"duration":22637}},{"uid":"46ba97fbe1e2ea25","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/46ba97fbe1e2ea25","status":"passed","time":{"start":1727777730678,"stop":1727777742774,"duration":12096}},{"uid":"8a45939de59f3ca2","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/8a45939de59f3ca2","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727775700106,"stop":1727775722736,"duration":22630}},{"uid":"b88c016741f1fc34","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/b88c016741f1fc34","status":"passed","time":{"start":1727771932430,"stop":1727771942456,"duration":10026}},{"uid":"f8d550b4740bc7e1","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/f8d550b4740bc7e1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727770902596,"stop":1727770925269,"duration":22673}},{"uid":"6e40802bef2c355b","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/6e40802bef2c355b","status":"passed","time":{"start":1727766034946,"stop":1727766045644,"duration":10698}},{"uid":"dcd183686a5b6e60","reportUrl":"https://golioth.github.io/allure-reports/1483//#testresult/dcd183686a5b6e60","status":"passed","time":{"start":1727766087105,"stop":1727766092809,"duration":5704}},{"uid":"e3d91dd3f6fa28a1","reportUrl":"https://golioth.github.io/allure-reports/1478//#testresult/e3d91dd3f6fa28a1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727761251835,"stop":1727761274457,"duration":22622}},{"uid":"18e12405561ef62f","reportUrl":"https://golioth.github.io/allure-reports/1477//#testresult/18e12405561ef62f","status":"passed","time":{"start":1727744689314,"stop":1727744698655,"duration":9341}},{"uid":"1b41ae9004ea098d","reportUrl":"https://golioth.github.io/allure-reports/1476//#testresult/1b41ae9004ea098d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727732310262,"stop":1727732332835,"duration":22573}},{"uid":"bf53ae73d64dd52","reportUrl":"https://golioth.github.io/allure-reports/1475//#testresult/bf53ae73d64dd52","status":"passed","time":{"start":1727658462798,"stop":1727658473066,"duration":10268}},{"uid":"97a8da67ba0e6011","reportUrl":"https://golioth.github.io/allure-reports/1474//#testresult/97a8da67ba0e6011","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1727572574373,"stop":1727572667123,"duration":92750}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"b12ae2b4b09ed8f7.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}