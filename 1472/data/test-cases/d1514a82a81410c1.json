{"uid":"d1514a82a81410c1","name":"test_lightdb_get","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample#test_lightdb_get","historyId":"934caf5f97c3bf444d136e05890d35c9","time":{"start":1727547124978,"stop":1727547162749,"duration":37771},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff98092510>\ndevice = <golioth.golioth.Device object at 0xffff980a9210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"wifi_ssid","time":{"start":1727547096060,"stop":1727547096061,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"anyio_backend","time":{"start":1727547096060,"stop":1727547096060,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727547096061,"stop":1727547096062,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727547096061,"stop":1727547096061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727547096062,"stop":1727547096062,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727547096063,"stop":1727547096065,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727547096065,"stop":1727547096066,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727547096066,"stop":1727547096066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727547096067,"stop":1727547096623,"duration":556},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727547096623,"stop":1727547097728,"duration":1105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727547097728,"stop":1727547121556,"duration":23828},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727547121556,"stop":1727547124970,"duration":3414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff98092510>\ndevice = <golioth.golioth.Device object at 0xffff980a9210>\nwifi_ssid = '***SAMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***SAMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_get(shell, device, wifi_ssid, wifi_psk):\n        # Delete counter in lightdb state\n    \n        await device.lightdb.delete(\"counter\")\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n        shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n    \n        # Verify lightdb reads\n    \n        shell._device.readlines_until(regex=\".*Failed to get counter \\(async\\): 0\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 13)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(sync\\): 13\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 27)\n    \n        shell._device.readlines_until(regex=\".*7b 22 63 6f 75 6e 74 65  72 22 3a 32 37 7d       |{\\\"counte r\\\":27}\",\n                                      timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 99)\n    \n        shell._device.readlines_until(regex=\".*Counter \\(CBOR async\\): 99\", timeout=10.0)\n    \n        await device.lightdb.set(\"counter\", 42)\n    \n>       shell._device.readlines_until(regex=\".*Counter \\(async\\): 42\", timeout=10.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/get/pytest/test_sample.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Counter \\\\(async\\\\): 42'\nnum_of_lines = None, timeout = 10.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e080356f9396bf5d","name":"log","source":"e080356f9396bf5d.txt","type":"text/plain","size":30058}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727547163030,"stop":1727547163211,"duration":181},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727547163213,"stop":1727547163657,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727547163659,"stop":1727547163662,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727547163667,"stop":1727547163667,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"nrf52840dk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.nrf52840dk"},{"name":"tag","value":"sams_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"a2b2e8425f14"},{"name":"thread","value":"955-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.get.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'nrf52840dk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":32,"unknown":0,"total":33},"items":[{"uid":"90556e87493a6cfd","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/90556e87493a6cfd","status":"passed","time":{"start":1727545965736,"stop":1727545993475,"duration":27739}},{"uid":"9357bfa5b280c9c4","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/9357bfa5b280c9c4","status":"passed","time":{"start":1727544856518,"stop":1727544884773,"duration":28255}},{"uid":"b650e02a8a8df255","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/b650e02a8a8df255","status":"passed","time":{"start":1727484964992,"stop":1727484997104,"duration":32112}},{"uid":"f94c2aba3eda7ad5","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/f94c2aba3eda7ad5","status":"passed","time":{"start":1727477732034,"stop":1727477760371,"duration":28337}},{"uid":"d24185fb942166fe","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d24185fb942166fe","status":"passed","time":{"start":1727462971830,"stop":1727463000113,"duration":28283}},{"uid":"1cc1208d4c2488cb","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/1cc1208d4c2488cb","status":"passed","time":{"start":1727462971830,"stop":1727463000113,"duration":28283}},{"uid":"8e3c237b6c694a8d","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/8e3c237b6c694a8d","status":"passed","time":{"start":1727457763017,"stop":1727457795017,"duration":32000}},{"uid":"d83c3dee1aa84079","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/d83c3dee1aa84079","status":"passed","time":{"start":1727454586788,"stop":1727454618997,"duration":32209}},{"uid":"b86fab425347413b","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/b86fab425347413b","status":"passed","time":{"start":1727456394356,"stop":1727456426664,"duration":32308}},{"uid":"82b895f24f9ed422","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/82b895f24f9ed422","status":"passed","time":{"start":1727453665055,"stop":1727453693287,"duration":28232}},{"uid":"b412cbbec499094f","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/b412cbbec499094f","status":"passed","time":{"start":1727398570460,"stop":1727398610477,"duration":40017}},{"uid":"135150d79c4118af","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/135150d79c4118af","status":"passed","time":{"start":1727395302461,"stop":1727395330844,"duration":28383}},{"uid":"e04d284bc16689d6","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/e04d284bc16689d6","status":"passed","time":{"start":1727390688127,"stop":1727390716418,"duration":28291}},{"uid":"6888f91bd84be0c6","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6888f91bd84be0c6","status":"passed","time":{"start":1727389698256,"stop":1727389726603,"duration":28347}},{"uid":"b6cf1f2d0b52349e","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/b6cf1f2d0b52349e","status":"passed","time":{"start":1727385694741,"stop":1727385726707,"duration":31966}},{"uid":"546ebc311ca8fc81","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/546ebc311ca8fc81","status":"passed","time":{"start":1727383272455,"stop":1727383304649,"duration":32194}},{"uid":"65437489f021aad4","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/65437489f021aad4","status":"passed","time":{"start":1727380060883,"stop":1727380089216,"duration":28333}},{"uid":"1b45fd086bd411a4","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/1b45fd086bd411a4","status":"passed","time":{"start":1727375398297,"stop":1727375426739,"duration":28442}},{"uid":"85b6322205552a61","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/85b6322205552a61","status":"passed","time":{"start":1727372441377,"stop":1727372473532,"duration":32155}},{"uid":"31b55ad1e784b5b4","reportUrl":"https://golioth.github.io/allure-reports/1438//#testresult/31b55ad1e784b5b4","status":"passed","time":{"start":1727370029197,"stop":1727370057627,"duration":28430}}]},"tags":["nrf52840dk","anyio","sams_orange_pi","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d1514a82a81410c1.json","parameterValues":["'nrf52840dk'","'zephyr'"]}