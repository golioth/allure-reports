{"uid":"4ebc4d96101c6052","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"904917f16e15151e1ed741401de93920","time":{"start":1727926047307,"stop":1727926061892,"duration":14585},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8120a9d0>\ndevice = <golioth.golioth.Device object at 0xffff811a43d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff811a43d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727925973000,"stop":1727925973000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727925973001,"stop":1727925973001,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727925973002,"stop":1727925973002,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727925973002,"stop":1727925973002,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727925973003,"stop":1727925973004,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727925973003,"stop":1727925973003,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727925973004,"stop":1727925973004,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727925973004,"stop":1727925973004,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727925973005,"stop":1727925973005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727925973005,"stop":1727925973005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727925973006,"stop":1727925973006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727925973006,"stop":1727925973007,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727925973007,"stop":1727925973452,"duration":445},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727925973453,"stop":1727926023149,"duration":49696},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727926023150,"stop":1727926024129,"duration":979},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727926024129,"stop":1727926038353,"duration":14224},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffff8120a9d0>\ndevice = <golioth.golioth.Device object at 0xffff811a43d0>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffff811a43d0>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"1d9ab8e1ed8b7e7c","name":"stdout","source":"1d9ab8e1ed8b7e7c.txt","type":"text/plain","size":3892}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727926202536,"stop":1727926202536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727926202540,"stop":1727926203055,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727926203057,"stop":1727926203062,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727926203064,"stop":1727926203066,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32c3_devkitm_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32c3_devkitm_espidf"},{"name":"tag","value":"jons_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"1100defad93f"},{"name":"thread","value":"261-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32c3_devkitm_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":47,"unknown":0,"total":61},"items":[{"uid":"9b751662c093e107","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/9b751662c093e107","status":"passed","time":{"start":1727915775542,"stop":1727915789225,"duration":13683}},{"uid":"40c3968563adbe03","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/40c3968563adbe03","status":"passed","time":{"start":1727906815939,"stop":1727906829605,"duration":13666}},{"uid":"e38ddaca2793baa8","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/e38ddaca2793baa8","status":"passed","time":{"start":1727831831959,"stop":1727831844755,"duration":12796}},{"uid":"bd7effe3c70db7ae","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/bd7effe3c70db7ae","status":"passed","time":{"start":1727829369220,"stop":1727829383912,"duration":14692}},{"uid":"8a81f658ae087ecb","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/8a81f658ae087ecb","status":"passed","time":{"start":1727800987754,"stop":1727801000530,"duration":12776}},{"uid":"aebb373295083301","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/aebb373295083301","status":"passed","time":{"start":1727800064047,"stop":1727800076884,"duration":12837}},{"uid":"8de12cbdf057dddb","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/8de12cbdf057dddb","status":"passed","time":{"start":1727811456804,"stop":1727811469531,"duration":12727}},{"uid":"75a3315356a9460b","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/75a3315356a9460b","status":"passed","time":{"start":1727809650773,"stop":1727809664314,"duration":13541}},{"uid":"c47d9640109ed466","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/c47d9640109ed466","status":"passed","time":{"start":1727805563420,"stop":1727805576791,"duration":13371}},{"uid":"9afdea95d5613995","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/9afdea95d5613995","status":"passed","time":{"start":1727795388686,"stop":1727795401478,"duration":12792}},{"uid":"beb4ea8b6326ad8c","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/beb4ea8b6326ad8c","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727794485604,"stop":1727794498794,"duration":13190}},{"uid":"c84ec405b529de40","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/c84ec405b529de40","status":"passed","time":{"start":1727785457333,"stop":1727785470184,"duration":12851}},{"uid":"2d008d44bb21d8f9","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/2d008d44bb21d8f9","status":"passed","time":{"start":1727782642061,"stop":1727782655155,"duration":13094}},{"uid":"511ca359985e30e4","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/511ca359985e30e4","status":"passed","time":{"start":1727772585741,"stop":1727772598686,"duration":12945}},{"uid":"fafb689ff9ffffd0","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/fafb689ff9ffffd0","status":"passed","time":{"start":1727778170210,"stop":1727778183012,"duration":12802}},{"uid":"bcb4596fe3bf06c0","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/bcb4596fe3bf06c0","status":"passed","time":{"start":1727774693177,"stop":1727774706000,"duration":12823}},{"uid":"6df8f9059fde5561","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/6df8f9059fde5561","status":"passed","time":{"start":1727772585741,"stop":1727772598686,"duration":12945}},{"uid":"b553f9efb106f6aa","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/b553f9efb106f6aa","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727767842673,"stop":1727767856092,"duration":13419}},{"uid":"fe78d650603d8381","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/fe78d650603d8381","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727766979175,"stop":1727766992459,"duration":13284}},{"uid":"66b9fbce3ba147a7","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/66b9fbce3ba147a7","status":"passed","time":{"start":1727762388203,"stop":1727762401890,"duration":13687}}]},"tags":["esp-idf","jons_orange_pi","anyio","esp32c3_devkitm_espidf","@pytest.mark.usefixtures('anyio_backend')"]},"source":"4ebc4d96101c6052.json","parameterValues":["'esp32c3_devkitm_espidf'","'esp-idf'"]}