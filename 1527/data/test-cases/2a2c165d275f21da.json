{"uid":"2a2c165d275f21da","name":"test_logging","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample#test_logging","historyId":"ddc2f31d085089b8b5f25dfb44556fd5","time":{"start":1727927128415,"stop":1727927221209,"duration":92794},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9af49950>\ndevice = <golioth.golioth.Device object at 0xffff9b1aec50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727927120003,"stop":1727927120004,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727927120004,"stop":1727927120004,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727927120005,"stop":1727927120006,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727927120005,"stop":1727927120005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727927120006,"stop":1727927120006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727927120006,"stop":1727927120008,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727927120009,"stop":1727927120009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727927120010,"stop":1727927120010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727927120010,"stop":1727927120768,"duration":758},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727927120769,"stop":1727927121687,"duration":918},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727927121687,"stop":1727927127876,"duration":6189},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727927127877,"stop":1727927128412,"duration":535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff9af49950>\ndevice = <golioth.golioth.Device object at 0xffff9b1aec50>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_logging(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Debug info! 2\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/logging/pytest/test_sample.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Debug info! 2', num_of_lines = None\ntimeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"cdceb3d45fc18d40","name":"log","source":"cdceb3d45fc18d40.txt","type":"text/plain","size":14369}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727927221488,"stop":1727927221530,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727927221532,"stop":1727927221906,"duration":374},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727927221909,"stop":1727927221911,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727927221916,"stop":1727927221916,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"bc0b6c866a51"},{"name":"thread","value":"360-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.logging.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":57,"unknown":0,"total":60},"items":[{"uid":"cc65158c4b3bc127","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/cc65158c4b3bc127","status":"passed","time":{"start":1727916855282,"stop":1727916874682,"duration":19400}},{"uid":"827cf41eaf69070b","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/827cf41eaf69070b","status":"passed","time":{"start":1727907973818,"stop":1727907990902,"duration":17084}},{"uid":"a14bf9b6c606ee42","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/a14bf9b6c606ee42","status":"passed","time":{"start":1727833752795,"stop":1727833771393,"duration":18598}},{"uid":"d6dd775d3aa4786","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/d6dd775d3aa4786","status":"passed","time":{"start":1727830610193,"stop":1727830626861,"duration":16668}},{"uid":"9d10f0a2c118f222","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/9d10f0a2c118f222","status":"passed","time":{"start":1727804288510,"stop":1727804310416,"duration":21906}},{"uid":"e107f545d55ba597","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/e107f545d55ba597","status":"passed","time":{"start":1727813164253,"stop":1727813182533,"duration":18280}},{"uid":"7b765a2bee4ec817","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/7b765a2bee4ec817","status":"passed","time":{"start":1727798392659,"stop":1727798411232,"duration":18573}},{"uid":"584b671b2c22edab","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/584b671b2c22edab","status":"passed","time":{"start":1727807900692,"stop":1727807916009,"duration":15317}},{"uid":"1f6a55d565fc02","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/1f6a55d565fc02","status":"passed","time":{"start":1727806985303,"stop":1727807004783,"duration":19480}},{"uid":"5124c5a2710bf013","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/5124c5a2710bf013","status":"passed","time":{"start":1727798392659,"stop":1727798411232,"duration":18573}},{"uid":"6fd8b35e0bd11e5","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/6fd8b35e0bd11e5","status":"passed","time":{"start":1727796754857,"stop":1727796770280,"duration":15423}},{"uid":"c3661109d79b669a","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/c3661109d79b669a","status":"passed","time":{"start":1727787254212,"stop":1727787269541,"duration":15329}},{"uid":"501daa7b52a2e796","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/501daa7b52a2e796","status":"passed","time":{"start":1727785519334,"stop":1727785538373,"duration":19039}},{"uid":"29582ac7c7286c55","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/29582ac7c7286c55","status":"passed","time":{"start":1727774814595,"stop":1727774833007,"duration":18412}},{"uid":"9a627b1399a455f0","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/9a627b1399a455f0","status":"passed","time":{"start":1727780209564,"stop":1727780227988,"duration":18424}},{"uid":"5e0c5ca38dc1704f","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/5e0c5ca38dc1704f","status":"passed","time":{"start":1727777628579,"stop":1727777644792,"duration":16213}},{"uid":"b4075cfce9796530","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/b4075cfce9796530","status":"passed","time":{"start":1727774814595,"stop":1727774833007,"duration":18412}},{"uid":"4c3e6c61de48caf8","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/4c3e6c61de48caf8","status":"passed","time":{"start":1727771450116,"stop":1727771532399,"duration":82283}},{"uid":"be29ad3908b6d735","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/be29ad3908b6d735","status":"passed","time":{"start":1727769907705,"stop":1727769926189,"duration":18484}},{"uid":"943bb6e17a855fea","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/943bb6e17a855fea","status":"passed","time":{"start":1727765091693,"stop":1727765110135,"duration":18442}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"2a2c165d275f21da.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}