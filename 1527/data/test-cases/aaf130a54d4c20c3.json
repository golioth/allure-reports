{"uid":"aaf130a54d4c20c3","name":"test_lightdb_delete","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample#test_lightdb_delete","historyId":"6fabbbcd9afd469e2e0bf8673f87e50e","time":{"start":1727927293795,"stop":1727927387249,"duration":93454},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb7ac6a10>\ndevice = <golioth.golioth.Device object at 0xffffb7abd190>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727927284776,"stop":1727927284776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727927284776,"stop":1727927284777,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727927284777,"stop":1727927284777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727927284777,"stop":1727927284778,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1727927284778,"stop":1727927284778,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1727927284779,"stop":1727927284781,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727927284781,"stop":1727927284782,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727927284782,"stop":1727927284782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727927284783,"stop":1727927285200,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727927285201,"stop":1727927286164,"duration":963},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1727927286165,"stop":1727927293246,"duration":7081},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1727927293246,"stop":1727927293792,"duration":546},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffffb7ac6a10>\ndevice = <golioth.golioth.Device object at 0xffffb7abd190>\nwifi_ssid = '***TIMS_ORANGE_PI_WIFI_SSID***', wifi_psk = '***TIMS_ORANGE_PI_WIFI_PSK***'\n\n    async def test_lightdb_delete(shell, device, wifi_ssid, wifi_psk):\n        # Set counter in lightdb state\n    \n        await counter_set_and_verify(device, 34)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Wait for Golioth connection\n    \n>       shell._device.readlines_until(regex=\".*Golioth CoAP client connected\", timeout=90.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/lightdb/delete/pytest/test_sample.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Golioth CoAP client connected'\nnum_of_lines = None, timeout = 90.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"46ca8ef13af140cd","name":"log","source":"46ca8ef13af140cd.txt","type":"text/plain","size":18308}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1727927387505,"stop":1727927387529,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727927387531,"stop":1727927387943,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727927387945,"stop":1727927387947,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1727927387952,"stop":1727927387952,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"mimxrt1024_evk"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.mimxrt1024_evk"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"bc0b6c866a51"},{"name":"thread","value":"414-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.lightdb.delete.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'mimxrt1024_evk'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":55,"unknown":0,"total":60},"items":[{"uid":"df45b729a2a8ceaa","reportUrl":"https://golioth.github.io/allure-reports/1526//#testresult/df45b729a2a8ceaa","status":"passed","time":{"start":1727916947263,"stop":1727916959406,"duration":12143}},{"uid":"8edb2f6b9cc7042b","reportUrl":"https://golioth.github.io/allure-reports/1525//#testresult/8edb2f6b9cc7042b","status":"passed","time":{"start":1727908077533,"stop":1727908092935,"duration":15402}},{"uid":"12f644be1c329633","reportUrl":"https://golioth.github.io/allure-reports/1524//#testresult/12f644be1c329633","status":"passed","time":{"start":1727833844702,"stop":1727833861037,"duration":16335}},{"uid":"d16156e1d1f8a725","reportUrl":"https://golioth.github.io/allure-reports/1523//#testresult/d16156e1d1f8a725","status":"passed","time":{"start":1727830700673,"stop":1727830717794,"duration":17121}},{"uid":"abf7791cb131aab4","reportUrl":"https://golioth.github.io/allure-reports/1518//#testresult/abf7791cb131aab4","status":"passed","time":{"start":1727804629036,"stop":1727804645871,"duration":16835}},{"uid":"9656ce4714754de5","reportUrl":"https://golioth.github.io/allure-reports/1517//#testresult/9656ce4714754de5","status":"passed","time":{"start":1727813255450,"stop":1727813271758,"duration":16308}},{"uid":"e88f4d193c28c422","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/e88f4d193c28c422","status":"passed","time":{"start":1727798492914,"stop":1727798509154,"duration":16240}},{"uid":"32ac86e58c9051ac","reportUrl":"https://golioth.github.io/allure-reports/1522//#testresult/32ac86e58c9051ac","status":"passed","time":{"start":1727807990951,"stop":1727808006187,"duration":15236}},{"uid":"ec2c6a4879b4d385","reportUrl":"https://golioth.github.io/allure-reports/1520//#testresult/ec2c6a4879b4d385","status":"passed","time":{"start":1727807080592,"stop":1727807097771,"duration":17179}},{"uid":"5cbd3d29c46578c7","reportUrl":"https://golioth.github.io/allure-reports/1513//#testresult/5cbd3d29c46578c7","status":"passed","time":{"start":1727798492914,"stop":1727798509154,"duration":16240}},{"uid":"17ccc1154caf2a90","reportUrl":"https://golioth.github.io/allure-reports/1512//#testresult/17ccc1154caf2a90","status":"passed","time":{"start":1727796844397,"stop":1727796859739,"duration":15342}},{"uid":"89fc0dd6782614d9","reportUrl":"https://golioth.github.io/allure-reports/1510//#testresult/89fc0dd6782614d9","status":"passed","time":{"start":1727787342824,"stop":1727787358107,"duration":15283}},{"uid":"46f2099ebcffe31c","reportUrl":"https://golioth.github.io/allure-reports/1507//#testresult/46f2099ebcffe31c","status":"passed","time":{"start":1727785616810,"stop":1727785634105,"duration":17295}},{"uid":"c08a4fd85fc09819","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/c08a4fd85fc09819","status":"passed","time":{"start":1727774908973,"stop":1727774924378,"duration":15405}},{"uid":"dc9f4cb864f5c249","reportUrl":"https://golioth.github.io/allure-reports/1506//#testresult/dc9f4cb864f5c249","status":"passed","time":{"start":1727780301772,"stop":1727780318383,"duration":16611}},{"uid":"fd95d3c2a356e36b","reportUrl":"https://golioth.github.io/allure-reports/1500//#testresult/fd95d3c2a356e36b","status":"passed","time":{"start":1727777722990,"stop":1727777740972,"duration":17982}},{"uid":"19ab1917d0f2fd2a","reportUrl":"https://golioth.github.io/allure-reports/1493//#testresult/19ab1917d0f2fd2a","status":"passed","time":{"start":1727774908973,"stop":1727774924378,"duration":15405}},{"uid":"45bf6d881032c4d","reportUrl":"https://golioth.github.io/allure-reports/1488//#testresult/45bf6d881032c4d","status":"passed","time":{"start":1727771605810,"stop":1727771621137,"duration":15327}},{"uid":"4a18a673a10c328a","reportUrl":"https://golioth.github.io/allure-reports/1487//#testresult/4a18a673a10c328a","status":"passed","time":{"start":1727770000945,"stop":1727770016337,"duration":15392}},{"uid":"68e883c4d1224553","reportUrl":"https://golioth.github.io/allure-reports/1484//#testresult/68e883c4d1224553","status":"passed","time":{"start":1727765185219,"stop":1727765200515,"duration":15296}}]},"tags":["anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')","mimxrt1024_evk","zephyr"]},"source":"aaf130a54d4c20c3.json","parameterValues":["'mimxrt1024_evk'","'zephyr'"]}