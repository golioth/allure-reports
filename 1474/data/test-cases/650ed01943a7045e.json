{"uid":"650ed01943a7045e","name":"test_int_too_large","fullName":"tests.hil.tests.settings.test_settings#test_int_too_large","historyId":"c24c9ea14e94690f05bf86748c5128c2","time":{"start":1727570288401,"stop":1727570301274,"duration":12873},"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffbc7ef590>\ndevice = <golioth.golioth.Device object at 0xffffbc772a90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffbc772a90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"anyio_backend","time":{"start":1727570215797,"stop":1727570215797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board_name","time":{"start":1727570215798,"stop":1727570215798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"port","time":{"start":1727570215799,"stop":1727570215799,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1727570215800,"stop":1727570215801,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"baud","time":{"start":1727570215800,"stop":1727570215800,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1727570215801,"stop":1727570215801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fw_image","time":{"start":1727570215802,"stop":1727570215802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"serial_number","time":{"start":1727570215803,"stop":1727570215803,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"bmp_port","time":{"start":1727570215804,"stop":1727570215804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1727570215805,"stop":1727570215805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1727570215805,"stop":1727570215805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1727570215806,"stop":1727570216212,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1727570215806,"stop":1727570215806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board","time":{"start":1727570216213,"stop":1727570267625,"duration":51412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1727570267626,"stop":1727570268599,"duration":973},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1727570268600,"stop":1727570283863,"duration":15263},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (False or 4 is None)","statusTrace":"board = <espidfboard.ESPIDFBoard object at 0xffffbc7ef590>\ndevice = <golioth.golioth.Device object at 0xffffbc772a90>\n\n    async def test_int_too_large(board, device):\n        await device.settings.set('TEST_INT', 2**33)\n    \n        with pytest.raises(trio.TooSlowError):\n            await board.wait_for_regex_in_line('Received test_int: 8589934592', timeout_s=10)\n    \n        # Wait for device to respond to server\n        await trio.sleep(1)\n    \n>       await assert_settings_error(device, 'TEST_INT', VALUE_OUTSIDE_RANGE)\n\ntests/hil/tests/settings/test_settings.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndevice = <golioth.golioth.Device object at 0xffffbc772a90>, key = 'TEST_INT'\nerror = 4\n\n    async def assert_settings_error(device, key, error):\n        await device.refresh()\n    \n        key_found = False\n    \n        for e in device.info['metadata']['lastSettingsStatus']['errors']:\n            if e['key'] == key:\n                key_found = True\n                assert e['code'] == error\n    \n>       assert key_found or error is None\nE       assert (False or 4 is None)\n\ntests/hil/tests/settings/test_settings.py:54: AssertionError","steps":[],"attachments":[{"uid":"b04290f43626bba","name":"stdout","source":"b04290f43626bba.txt","type":"text/plain","size":4088}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1727570443197,"stop":1727570443198,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1727570443200,"stop":1727570443570,"duration":370},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"board::0","time":{"start":1727570443572,"stop":1727570443574,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1727570443576,"stop":1727570443578,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32s3_devkitc_espidf"},{"name":"tag","value":"esp-idf"},{"name":"parentSuite","value":"hil.esp-idf.esp32s3_devkitc_espidf"},{"name":"tag","value":"tims_orange_pi"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_settings"},{"name":"host","value":"c8cd13855565"},{"name":"thread","value":"258-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.hil.tests.settings.test_settings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32s3_devkitc_espidf'"},{"name":"platform_name","value":"'esp-idf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":21,"unknown":0,"total":34},"items":[{"uid":"fb30b7d28e9a4675","reportUrl":"https://golioth.github.io/allure-reports/1472//#testresult/fb30b7d28e9a4675","status":"passed","time":{"start":1727544024501,"stop":1727544037873,"duration":13372}},{"uid":"165757c309a52b00","reportUrl":"https://golioth.github.io/allure-reports/1473//#testresult/165757c309a52b00","status":"passed","time":{"start":1727542426599,"stop":1727542439867,"duration":13268}},{"uid":"46e3180fac779d4b","reportUrl":"https://golioth.github.io/allure-reports/1470//#testresult/46e3180fac779d4b","status":"passed","time":{"start":1727541493715,"stop":1727541508110,"duration":14395}},{"uid":"cd560bdb9c8d1337","reportUrl":"https://golioth.github.io/allure-reports/1468//#testresult/cd560bdb9c8d1337","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727483748297,"stop":1727483761203,"duration":12906}},{"uid":"44b83a9c14f4ef4b","reportUrl":"https://golioth.github.io/allure-reports/1467//#testresult/44b83a9c14f4ef4b","status":"passed","time":{"start":1727475861234,"stop":1727475874399,"duration":13165}},{"uid":"d8ec53101ff4f135","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/d8ec53101ff4f135","status":"passed","time":{"start":1727461133628,"stop":1727461147717,"duration":14089}},{"uid":"724c4a2fd901768","reportUrl":"https://golioth.github.io/allure-reports/1466//#testresult/724c4a2fd901768","status":"passed","time":{"start":1727461133628,"stop":1727461147717,"duration":14089}},{"uid":"4420378eaccb9af4","reportUrl":"https://golioth.github.io/allure-reports/1436//#testresult/4420378eaccb9af4","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727455731850,"stop":1727455744661,"duration":12811}},{"uid":"bf969a5f876cc8b8","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/bf969a5f876cc8b8","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727454984234,"stop":1727454997208,"duration":12974}},{"uid":"6baeac08f99e98","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/6baeac08f99e98","status":"passed","time":{"start":1727387867480,"stop":1727387880849,"duration":13369}},{"uid":"e6598508e8c96665","reportUrl":"https://golioth.github.io/allure-reports/1437//#testresult/e6598508e8c96665","status":"passed","time":{"start":1727363054880,"stop":1727363068045,"duration":13165}},{"uid":"e7c66ed043d634a1","reportUrl":"https://golioth.github.io/allure-reports/1463//#testresult/e7c66ed043d634a1","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727397370461,"stop":1727397383224,"duration":12763}},{"uid":"525fff2194a9643a","reportUrl":"https://golioth.github.io/allure-reports/1450//#testresult/525fff2194a9643a","status":"passed","time":{"start":1727394340311,"stop":1727394353354,"duration":13043}},{"uid":"f0d56533c06250e","reportUrl":"https://golioth.github.io/allure-reports/1461//#testresult/f0d56533c06250e","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727387738468,"stop":1727387751272,"duration":12804}},{"uid":"12d4a5d9393e702a","reportUrl":"https://golioth.github.io/allure-reports/1462//#testresult/12d4a5d9393e702a","status":"passed","time":{"start":1727387867480,"stop":1727387880849,"duration":13369}},{"uid":"50e3d43a2e751e88","reportUrl":"https://golioth.github.io/allure-reports/1457//#testresult/50e3d43a2e751e88","status":"passed","time":{"start":1727384211128,"stop":1727384223835,"duration":12707}},{"uid":"3987820b742306a0","reportUrl":"https://golioth.github.io/allure-reports/1452//#testresult/3987820b742306a0","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727381481784,"stop":1727381494433,"duration":12649}},{"uid":"66fa72fe8cc5e079","reportUrl":"https://golioth.github.io/allure-reports/1447//#testresult/66fa72fe8cc5e079","status":"failed","statusDetails":"AssertionError: assert (False or 4 is None)","time":{"start":1727378780868,"stop":1727378794977,"duration":14109}},{"uid":"71c98584d58e6eeb","reportUrl":"https://golioth.github.io/allure-reports/1433//#testresult/71c98584d58e6eeb","status":"passed","time":{"start":1727374088037,"stop":1727374101013,"duration":12976}},{"uid":"2c14e69abc0caa43","reportUrl":"https://golioth.github.io/allure-reports/1440//#testresult/2c14e69abc0caa43","status":"passed","time":{"start":1727370910364,"stop":1727370923321,"duration":12957}}]},"tags":["esp32s3_devkitc_espidf","esp-idf","anyio","tims_orange_pi","@pytest.mark.usefixtures('anyio_backend')"]},"source":"650ed01943a7045e.json","parameterValues":["'esp32s3_devkitc_espidf'","'esp-idf'"]}