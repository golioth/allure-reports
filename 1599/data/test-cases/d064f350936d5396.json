{"uid":"d064f350936d5396","name":"test_settings","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample#test_settings","historyId":"55c411133217cd01256580dbf97484b9","time":{"start":1728328519417,"stop":1728328544249,"duration":24832},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b697550>\nproject = <golioth.golioth.Project object at 0xffff8b83d810>\ndevice = <golioth.golioth.Device object at 0xffff8b6b6210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728328500444,"stop":1728328500444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728328500445,"stop":1728328500445,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728328500445,"stop":1728328500445,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728328500446,"stop":1728328500446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728328500446,"stop":1728328500446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728328500447,"stop":1728328500447,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728328500448,"stop":1728328500448,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728328500449,"stop":1728328500451,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728328500451,"stop":1728328501043,"duration":592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728328501044,"stop":1728328501935,"duration":891},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728328501936,"stop":1728328518359,"duration":16423},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728328518359,"stop":1728328519414,"duration":1055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff8b697550>\nproject = <golioth.golioth.Project object at 0xffff8b83d810>\ndevice = <golioth.golioth.Device object at 0xffff8b6b6210>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_settings(shell, project, device, wifi_ssid, wifi_psk):\n        # Delete any existing device-level settings\n    \n        settings = await device.settings.get_all()\n        for setting in settings:\n            if 'deviceId' in setting:\n                await device.settings.delete(setting['key'])\n    \n        # Ensure the project-level setting exists\n    \n        await project.settings.set('LOOP_DELAY_S', 1)\n    \n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/settings/pytest/test_sample.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"e92952fa97834c16","name":"log","source":"e92952fa97834c16.txt","type":"text/plain","size":19455}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728328544647,"stop":1728328544659,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728328544661,"stop":1728328545061,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728328545063,"stop":1728328545065,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728328545067,"stop":1728328545068,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b3c4ffc38bc9"},{"name":"thread","value":"428-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.settings.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8759be6332a69111","status":"passed","time":{"start":1728318087261,"stop":1728318096378,"duration":9117}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":100,"unknown":0,"total":111},"items":[{"uid":"ce2c437deeb77704","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/ce2c437deeb77704","status":"passed","time":{"start":1728327828928,"stop":1728327840460,"duration":11532}},{"uid":"134a756d77167191","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/134a756d77167191","status":"passed","time":{"start":1728321075492,"stop":1728321085884,"duration":10392}},{"uid":"fd93445adff26b7e","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/fd93445adff26b7e","status":"passed","time":{"start":1728318087261,"stop":1728318096378,"duration":9117}},{"uid":"8cddd6ea0b22563f","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/8cddd6ea0b22563f","status":"passed","time":{"start":1728314777750,"stop":1728314791484,"duration":13734}},{"uid":"5a2978c9cb3af67","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/5a2978c9cb3af67","status":"passed","time":{"start":1728308413230,"stop":1728308423813,"duration":10583}},{"uid":"ad7a12c7f3f9df2c","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/ad7a12c7f3f9df2c","status":"passed","time":{"start":1728308169430,"stop":1728308179862,"duration":10432}},{"uid":"b3eaa0a72ec770c4","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/b3eaa0a72ec770c4","status":"passed","time":{"start":1728263884625,"stop":1728263898414,"duration":13789}},{"uid":"ab33e42d7de0c006","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/ab33e42d7de0c006","status":"passed","time":{"start":1728176708957,"stop":1728176721031,"duration":12074}},{"uid":"488e8320022fb131","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/488e8320022fb131","status":"passed","time":{"start":1728133996494,"stop":1728134008869,"duration":12375}},{"uid":"35d0ad7c93c7ce4d","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/35d0ad7c93c7ce4d","status":"passed","time":{"start":1728131615746,"stop":1728131627252,"duration":11506}},{"uid":"baabda47715382ae","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/baabda47715382ae","status":"passed","time":{"start":1728127605650,"stop":1728127621447,"duration":15797}},{"uid":"4f40eecf3a69b0ba","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/4f40eecf3a69b0ba","status":"passed","time":{"start":1728126961142,"stop":1728126971613,"duration":10471}},{"uid":"770629ef31793055","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/770629ef31793055","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728125583671,"stop":1728125677956,"duration":94285}},{"uid":"689f693421cfd621","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/689f693421cfd621","status":"passed","time":{"start":1728121799890,"stop":1728121812652,"duration":12762}},{"uid":"145679c8877726cc","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/145679c8877726cc","status":"passed","time":{"start":1728090131301,"stop":1728090142391,"duration":11090}},{"uid":"39ceba72a9adef79","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/39ceba72a9adef79","status":"passed","time":{"start":1728082474442,"stop":1728082487667,"duration":13225}},{"uid":"31f15830bd74850d","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/31f15830bd74850d","status":"passed","time":{"start":1728075333417,"stop":1728075347699,"duration":14282}},{"uid":"9ff8f703cec02a84","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/9ff8f703cec02a84","status":"passed","time":{"start":1728072635467,"stop":1728072648286,"duration":12819}},{"uid":"b96134230ea97d9a","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/b96134230ea97d9a","status":"passed","time":{"start":1728069531391,"stop":1728069542938,"duration":11547}},{"uid":"8252b382a640cce3","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/8252b382a640cce3","status":"passed","time":{"start":1728070774699,"stop":1728070785621,"duration":10922}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"d064f350936d5396.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}