{"uid":"dbb4e75ade47b5ee","name":"test_stream","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample#test_stream","historyId":"86f2dfc420102ec387e85f21c8ed6fdf","time":{"start":1728328566100,"stop":1728328588642,"duration":22542},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84465390>\ndevice = <golioth.golioth.Device object at 0xffff844803d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728328548332,"stop":1728328548333,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728328548333,"stop":1728328548333,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728328548334,"stop":1728328548334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728328548334,"stop":1728328548334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728328548335,"stop":1728328548337,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728328548335,"stop":1728328548335,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728328548338,"stop":1728328548338,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728328548339,"stop":1728328548339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728328548339,"stop":1728328548757,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728328548758,"stop":1728328549620,"duration":862},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728328549621,"stop":1728328565152,"duration":15531},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728328565152,"stop":1728328566097,"duration":945},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff84465390>\ndevice = <golioth.golioth.Device object at 0xffff844803d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_stream(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n>       shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/stream/pytest/test_sample.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:68: in exec_command\n    lines.extend(self._device.readlines_until(regex=regex_prompt, timeout=timeout, print_output=print_output))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = 'uart:\\\\~\\\\$', num_of_lines = None\ntimeout = 20.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"934374c0b2b53e37","name":"log","source":"934374c0b2b53e37.txt","type":"text/plain","size":16857}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728328589015,"stop":1728328589056,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728328589058,"stop":1728328589458,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728328589460,"stop":1728328589463,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728328589468,"stop":1728328589468,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b3c4ffc38bc9"},{"name":"thread","value":"443-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.stream.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1eaf664d5fc43a5f","status":"passed","time":{"start":1728318117925,"stop":1728318139442,"duration":21517}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":12,"skipped":0,"passed":96,"unknown":0,"total":109},"items":[{"uid":"e0ff1941fd5c6fda","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/e0ff1941fd5c6fda","status":"passed","time":{"start":1728327859933,"stop":1728327882759,"duration":22826}},{"uid":"7f47197cebb2a291","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/7f47197cebb2a291","status":"passed","time":{"start":1728321107720,"stop":1728321132204,"duration":24484}},{"uid":"445c92bb07cd34dd","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/445c92bb07cd34dd","status":"passed","time":{"start":1728318117925,"stop":1728318139442,"duration":21517}},{"uid":"35d965530f323a9","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/35d965530f323a9","status":"passed","time":{"start":1728314810986,"stop":1728314830344,"duration":19358}},{"uid":"f195f5d6682e76f","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/f195f5d6682e76f","status":"passed","time":{"start":1728308443460,"stop":1728308466896,"duration":23436}},{"uid":"b29a70712af1adc3","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/b29a70712af1adc3","status":"passed","time":{"start":1728308200643,"stop":1728308225427,"duration":24784}},{"uid":"b70b956edbeb49d9","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/b70b956edbeb49d9","status":"passed","time":{"start":1728263051267,"stop":1728263073656,"duration":22389}},{"uid":"8620bc8f7a1996ca","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/8620bc8f7a1996ca","status":"passed","time":{"start":1728176742508,"stop":1728176764216,"duration":21708}},{"uid":"7d4398d8756b3e61","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/7d4398d8756b3e61","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728134030822,"stop":1728134053396,"duration":22574}},{"uid":"da0b8b4b104fef0e","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/da0b8b4b104fef0e","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728131647992,"stop":1728131670714,"duration":22722}},{"uid":"907523e8a6b0fff4","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/907523e8a6b0fff4","status":"passed","time":{"start":1728127643604,"stop":1728127666580,"duration":22976}},{"uid":"bbcb1ad0efc3353d","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/bbcb1ad0efc3353d","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728126991113,"stop":1728127013736,"duration":22623}},{"uid":"2c444915cd4e7d13","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/2c444915cd4e7d13","status":"passed","time":{"start":1728125697852,"stop":1728125718462,"duration":20610}},{"uid":"a08069eb0419e158","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/a08069eb0419e158","status":"passed","time":{"start":1728121834586,"stop":1728121859335,"duration":24749}},{"uid":"872e4f2d5f9c8ba4","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/872e4f2d5f9c8ba4","status":"passed","time":{"start":1728090162054,"stop":1728090185856,"duration":23802}},{"uid":"e693335f8323777f","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/e693335f8323777f","status":"passed","time":{"start":1728082508608,"stop":1728082530664,"duration":22056}},{"uid":"e12221f0e86b4bed","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/e12221f0e86b4bed","status":"passed","time":{"start":1728075369575,"stop":1728075390295,"duration":20720}},{"uid":"c9453f8013c903af","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/c9453f8013c903af","status":"passed","time":{"start":1728072670090,"stop":1728072692182,"duration":22092}},{"uid":"462b55a8a78687c0","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/462b55a8a78687c0","status":"passed","time":{"start":1728070807546,"stop":1728070826150,"duration":18604}},{"uid":"39d0a2ba24e9b92a","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/39d0a2ba24e9b92a","status":"passed","time":{"start":1728070040068,"stop":1728070064874,"duration":24806}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"dbb4e75ade47b5ee.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}