{"uid":"eb1bd36bc97d2481","name":"test_hello","fullName":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample#test_hello","historyId":"f1cf752999d3f3859e1cde5c2a14c34d","time":{"start":1728328801722,"stop":1728328914525,"duration":112803},"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff82cafb50>\ndevice = <golioth.golioth.Device object at 0xffff82ccc2d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"anyio_backend","time":{"start":1728328783776,"stop":1728328783776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_ssid","time":{"start":1728328783776,"stop":1728328783776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"wifi_psk","time":{"start":1728328783777,"stop":1728328783777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_name","time":{"start":1728328783777,"stop":1728328783777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object","time":{"start":1728328783778,"stop":1728328783781,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"twister_harness_config","time":{"start":1728328783778,"stop":1728328783778,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_key","time":{"start":1728328783782,"stop":1728328783782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project","time":{"start":1728328783783,"stop":1728328784205,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_url","time":{"start":1728328783783,"stop":1728328783783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device","time":{"start":1728328784206,"stop":1728328785291,"duration":1085},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dut","time":{"start":1728328785292,"stop":1728328800804,"duration":15512},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"shell","time":{"start":1728328800805,"stop":1728328801719,"duration":914},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","statusTrace":"shell = <twister_harness.helpers.shell.Shell object at 0xffff82cafb50>\ndevice = <golioth.golioth.Device object at 0xffff82ccc2d0>\nwifi_ssid = '***MIKES_ORANGE_PI_WIFI_SSID***', wifi_psk = '***MIKES_ORANGE_PI_WIFI_PSK***'\n\n    async def test_hello(shell, device, wifi_ssid, wifi_psk):\n        await trio.sleep(2)\n    \n        # Set Golioth credential\n    \n        golioth_cred = (await device.credentials.list())[0]\n        shell.exec_command(f\"settings set golioth/psk-id {golioth_cred.identity}\")\n        shell.exec_command(f\"settings set golioth/psk {golioth_cred.key}\")\n    \n        # Set WiFi credential\n    \n        if wifi_ssid is not None:\n            shell.exec_command(f\"settings set wifi/ssid \\\"{wifi_ssid}\\\"\")\n    \n        if wifi_psk is not None:\n            shell.exec_command(f\"settings set wifi/psk \\\"{wifi_psk}\\\"\")\n    \n        # Record timestamp and wait for fourth hello message\n    \n        start = datetime.datetime.utcnow()\n>       shell._device.readlines_until(regex=\".*Sending hello! 3\", timeout=110.0)\n\nmodules/lib/golioth-firmware-sdk/examples/zephyr/hello/pytest/test_sample.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HardwareAdapter(), regex = '.*Sending hello! 3', num_of_lines = None\ntimeout = 110.0, print_output = True\n\n    def readlines_until(\n            self,\n            regex: str | None = None,\n            num_of_lines: int | None = None,\n            timeout: float | None = None,\n            print_output: bool = True,\n    ) -> list[str]:\n        \"\"\"\n        Read available output lines produced by device from internal buffer\n        until following conditions:\n    \n        1. If regex is provided - read until regex regex is found in read\n           line (or until timeout).\n        2. If num_of_lines is provided - read until number of read lines is\n           equal to num_of_lines (or until timeout).\n        3. If none of above is provided - return immediately lines collected so\n           far in internal buffer.\n    \n        If timeout is not provided, then use base_timeout.\n        \"\"\"\n        timeout = timeout or self.base_timeout\n        if regex:\n            regex_compiled = re.compile(regex)\n        lines: list[str] = []\n        if regex or num_of_lines:\n            timeout_time: float = time.time() + timeout\n            while time.time() < timeout_time:\n                try:\n                    line = self.readline(0.1, print_output)\n                except TwisterHarnessTimeoutException:\n                    continue\n                lines.append(line)\n                if regex and regex_compiled.search(line):\n                    break\n                if num_of_lines and len(lines) == num_of_lines:\n                    break\n            else:\n                msg = 'Read from device timeout occurred'\n                logger.error(msg)\n>               raise TwisterHarnessTimeoutException(msg)\nE               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred\n\nzephyr/scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:190: TwisterHarnessTimeoutException","steps":[],"attachments":[{"uid":"ea5bf129b691c6c8","name":"log","source":"ea5bf129b691c6c8.txt","type":"text/plain","size":16073}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"dut::0","time":{"start":1728328914865,"stop":1728328914883,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device::0","time":{"start":1728328914885,"stop":1728328915265,"duration":380},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project::0","time":{"start":1728328915267,"stop":1728328915269,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"device_object::0","time":{"start":1728328915274,"stop":1728328915274,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"esp32_devkitc_wrover"},{"name":"tag","value":"zephyr"},{"name":"parentSuite","value":"sample.zephyr.esp32_devkitc_wrover"},{"name":"tag","value":"mikes_testbench"},{"name":"tag","value":"@pytest.mark.usefixtures('anyio_backend')"},{"name":"tag","value":"anyio"},{"name":"suite","value":"test_sample"},{"name":"host","value":"b3c4ffc38bc9"},{"name":"thread","value":"537-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"modules.lib.golioth-firmware-sdk.examples.zephyr.hello.pytest.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"board_name","value":"'esp32_devkitc_wrover'"},{"name":"platform_name","value":"'zephyr'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"424a8e6a2f12e702","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728328748535,"stop":1728328771156,"duration":22621}},{"uid":"140be27018a828ff","status":"passed","time":{"start":1728318428838,"stop":1728318451331,"duration":22493}},{"uid":"a42b028c1861c248","status":"passed","time":{"start":1728318338193,"stop":1728318357939,"duration":19746}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":35,"skipped":0,"passed":76,"unknown":0,"total":111},"items":[{"uid":"3859d6a90e0facbf","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/3859d6a90e0facbf","status":"passed","time":{"start":1728328689789,"stop":1728328715209,"duration":25420}},{"uid":"83d892582b19b9e9","reportUrl":"https://golioth.github.io/allure-reports/1600//#testresult/83d892582b19b9e9","status":"passed","time":{"start":1728321426795,"stop":1728321450454,"duration":23659}},{"uid":"36757aa5d380a606","reportUrl":"https://golioth.github.io/allure-reports/1599//#testresult/36757aa5d380a606","status":"passed","time":{"start":1728318428838,"stop":1728318451331,"duration":22493}},{"uid":"bcc16003ec17b572","reportUrl":"https://golioth.github.io/allure-reports/1597//#testresult/bcc16003ec17b572","status":"passed","time":{"start":1728315582637,"stop":1728315604198,"duration":21561}},{"uid":"8648bd65f7685498","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/8648bd65f7685498","status":"passed","time":{"start":1728309273881,"stop":1728309294298,"duration":20417}},{"uid":"1944a2e316012940","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/1944a2e316012940","status":"passed","time":{"start":1728308495976,"stop":1728308518665,"duration":22689}},{"uid":"327300e135943ca8","reportUrl":"https://golioth.github.io/allure-reports/1591//#testresult/327300e135943ca8","status":"passed","time":{"start":1728263838013,"stop":1728263863456,"duration":25443}},{"uid":"59980aaa56978fb5","reportUrl":"https://golioth.github.io/allure-reports/1590//#testresult/59980aaa56978fb5","status":"passed","time":{"start":1728177061941,"stop":1728177084337,"duration":22396}},{"uid":"68dd58b8b7928557","reportUrl":"https://golioth.github.io/allure-reports/1589//#testresult/68dd58b8b7928557","status":"passed","time":{"start":1728134350353,"stop":1728134371857,"duration":21504}},{"uid":"98a6eef11b94b6b4","reportUrl":"https://golioth.github.io/allure-reports/1588//#testresult/98a6eef11b94b6b4","status":"passed","time":{"start":1728131953350,"stop":1728131977829,"duration":24479}},{"uid":"ca8303a56e57543c","reportUrl":"https://golioth.github.io/allure-reports/1586//#testresult/ca8303a56e57543c","status":"passed","time":{"start":1728127953455,"stop":1728127975907,"duration":22452}},{"uid":"91f4f29a03923081","reportUrl":"https://golioth.github.io/allure-reports/1585//#testresult/91f4f29a03923081","status":"passed","time":{"start":1728127297231,"stop":1728127318694,"duration":21463}},{"uid":"b9cb13f30e4449a3","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/b9cb13f30e4449a3","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728126504928,"stop":1728126527554,"duration":22626}},{"uid":"23d34afb85de3f43","reportUrl":"https://golioth.github.io/allure-reports/1573//#testresult/23d34afb85de3f43","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728122160865,"stop":1728122183381,"duration":22516}},{"uid":"a2c628ae09968d02","reportUrl":"https://golioth.github.io/allure-reports/1584//#testresult/a2c628ae09968d02","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728090413788,"stop":1728090526656,"duration":112868}},{"uid":"f32ad4802e8cae1","reportUrl":"https://golioth.github.io/allure-reports/1583//#testresult/f32ad4802e8cae1","status":"passed","time":{"start":1728082825489,"stop":1728082849323,"duration":23834}},{"uid":"292fb75a0ad39f6","reportUrl":"https://golioth.github.io/allure-reports/1582//#testresult/292fb75a0ad39f6","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728075637288,"stop":1728075659952,"duration":22664}},{"uid":"3301f3b2cfc52062","reportUrl":"https://golioth.github.io/allure-reports/1581//#testresult/3301f3b2cfc52062","status":"passed","time":{"start":1728072998881,"stop":1728073022162,"duration":23281}},{"uid":"e92b1d64f24c6ee1","reportUrl":"https://golioth.github.io/allure-reports/1579//#testresult/e92b1d64f24c6ee1","status":"broken","statusDetails":"twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred","time":{"start":1728070020089,"stop":1728070042766,"duration":22677}},{"uid":"293041af0cbcce51","reportUrl":"https://golioth.github.io/allure-reports/1572//#testresult/293041af0cbcce51","status":"passed","time":{"start":1728071084829,"stop":1728071107806,"duration":22977}}]},"tags":["anyio","mikes_testbench","esp32_devkitc_wrover","@pytest.mark.usefixtures('anyio_backend')","zephyr"]},"source":"eb1bd36bc97d2481.json","parameterValues":["'esp32_devkitc_wrover'","'zephyr'"]}